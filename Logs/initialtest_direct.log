https://github.com/googleapis/nodejs-bigquery.git
build/src/index.js
DirectBloated/nodejs-bigquery
nodejs-bigquery
388897f

> @google-cloud/bigquery@6.0.3 prepare
> npm run compile


> @google-cloud/bigquery@6.0.3 precompile
> gts clean

version: 16
Removing build ...

> @google-cloud/bigquery@6.0.3 compile
> tsc -p . && cp src/types.d.ts build/src/


added 547 packages, and audited 548 packages in 32s

99 packages are looking for funding
  run `npm fund` for details

7 vulnerabilities (3 moderate, 4 high)

To address issues that do not require attention, run:
  npm audit fix

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.

> @google-cloud/bigquery@6.0.3 pretest
> npm run compile


> @google-cloud/bigquery@6.0.3 precompile
> gts clean

version: 16
Removing build ...

> @google-cloud/bigquery@6.0.3 compile
> tsc -p . && cp src/types.d.ts build/src/


> @google-cloud/bigquery@6.0.3 test
> c8 mocha build/test



  BigQuery
    instantiation
      ✔ should extend the correct methods
      ✔ should streamify the correct methods
      ✔ should promisify all the things
      ✔ should inherit from Service
      ✔ should allow overriding the apiEndpoint
      ✔ should prepend apiEndpoint with default protocol
      ✔ should strip trailing slash from apiEndpoint
      ✔ should capture any user specified location
      ✔ should pass scopes from options
      ✔ should pass autoRetry from options
      ✔ should pass maxRetries from options
      ✔ should not modify options argument
      BIGQUERY_EMULATOR_HOST
        ✔ should set baseUrl to env var STORAGE_EMULATOR_HOST
        ✔ should be overriden by apiEndpoint
        ✔ should prepend default protocol and strip trailing slash
      prettyPrint request interceptor
        ✔ should disable prettyPrint
        ✔ should clone json
    mergeSchemaWithRows_
      ✔ should merge the schema and flatten the rows
      ✔ should wrap integers with option
    date
      - should expose static and instance constructors
      ✔ should have the correct constructor name
      ✔ should accept a string
      ✔ should accept an object
    datetime
      - should expose static and instance constructors
      ✔ should have the correct constructor name
      ✔ should accept an object
      ✔ should not include time if hours not provided
      ✔ should accept a string
    time
      - should expose static and instance constructors
      ✔ should have the correct constructor name
      ✔ should accept a string
      ✔ should accept an object
      ✔ should default minutes and seconds to 0
      ✔ should not include fractional digits if not provided
    timestamp
      - should expose static and instance constructors
      ✔ should have the correct constructor name
      ✔ should accept a string
      ✔ should accept a Date object
    geography
      ✔ should have the correct constructor name
      ✔ should accept a string
      ✔ should call through to the static method
    int
      ✔ should call through to the static method
      ✔ should have the correct constructor name
    BigQueryInt
      ✔ should store the stringified value
      valueOf
        integerTypeCastFunction is not provided
          ✔ should throw if integerTypeCastOptions is provided but integerTypeCastFunction is not
          ✔ should throw if integer value is outside of bounds passing objects
          ✔ should throw if integer value is outside of bounds passing strings or Numbers
          ✔ should not auto throw on initialization
          integerTypeCastFunction is provided
            ✔ should throw if integerTypeCastFunction is not a function
            ✔ should custom-cast value when integerTypeCastFunction is provided
            ✔ should custom-cast value if in `fields` specified by user
            ✔ should not custom-cast value if not in `fields` specified by user
            ✔ should catch integerTypeCastFunction error and throw
        toJSON
          ✔ should return correct JSON
    getTypeDescriptorFromValue_
      ✔ should return correct types
      ✔ should return correct type for an array
      ✔ should return correct type for a struct
      ✔ should throw if a type cannot be detected
      ✔ should throw with an empty array
      ✔ should throw with a null value
    getTypeDescriptorFromProvidedType_
      ✔ should return correct type for an array
      ✔ should return correct type for a struct
      ✔ should throw for invalid provided type
    valueToQueryParameter_
      ✔ should get the type
      ✔ should get the provided type
      ✔ should format a Date
      ✔ should locate the value on DATETIME objects
      ✔ should locate the value on nested DATETIME objects
      ✔ should locate the value on TIME objects
      ✔ should locate the value on nested TIME objects
      ✔ should locate the value on BigQueryInt objects
      ✔ should locate the value on nested BigQueryInt objects
      ✔ should format an array
      ✔ should format an array with provided type
      ✔ should format a struct
      ✔ should format a struct with provided type
      ✔ should format an array of structs
      ✔ should format all other types
      _getValue
        ✔ should return currect value
        ✔ should return value of custom type
        ✔ should handle null values
      _isCustomType
        ✔ should identify custom types
    createDataset
      ✔ should create a dataset
      ✔ should send the location if available
      ✔ should not modify the original options object
      ✔ should return an error to the callback
      ✔ should return a Dataset object
      ✔ should return an apiResponse
      ✔ should assign metadata to the Dataset object
    createJob
      ✔ should make the correct request
      ✔ should accept a job prefix
      ✔ should accept a location
      ✔ should accept a job id
      ✔ should use the user defined location if available
      ✔ should return a non-409 request error
      ✔ should refresh metadata when API returns 409
      ✔ should return 409 if the user provided the job ID
      ✔ should return 409 if dryRun is true
      ✔ should return any status errors
      ✔ should return a job object
      ✔ should update the job location in the official API format
    createQueryJob
      ✔ should throw if neither a query or a pageToken is provided
      ✔ should accept the dryRun options
      ✔ should accept the label options
      ✔ should accept a job prefix
      ✔ should accept a location
      ✔ should accept a job id
      ✔ should accept the jobTimeoutMs options
      ✔ should pass the callback to createJob
      with destination
        ✔ should throw if a destination is not a table
        ✔ should assign destination table to request body
        ✔ should delete `destination` prop from request body
      SQL parameters
        ✔ should delete the params option
        named
          ✔ should set the correct parameter mode
          ✔ should set the correct query parameters
          ✔ should allow for optional parameter types
          ✔ should allow for providing only some parameter types
          ✔ should throw for invalid type structure provided
        positional
          ✔ should set the correct parameter mode
          ✔ should set the correct query parameters
          ✔ should convert value and type to query parameter
          ✔ should allow for optional parameter types
          ✔ should throw for invalid type structure provided for positional params
          ✔ should throw for incorrect number of types provided for positional params
    dataset
      ✔ should throw an error if the id is missing
      ✔ returns a Dataset instance
      ✔ should scope the correct dataset
      ✔ should accept dataset metadata
      ✔ should pass the location if available
    getDatasets
      ✔ should get datasets from the api
      ✔ should accept query
      ✔ should default the query to an empty object
      ✔ should return error to callback
      ✔ should return Dataset objects
      ✔ should return Dataset objects
      ✔ should assign metadata to the Dataset objects
      ✔ should return token if more results exist
    getJobs
      ✔ should get jobs from the api
      ✔ should accept query
      ✔ should default the query to an object
      ✔ should return error to callback
      ✔ should return Job objects
      ✔ should return apiResponse
      ✔ should assign metadata to the Job objects
      ✔ should return token if more results exist
    job
      ✔ should return a Job instance
      ✔ should scope the correct job
      ✔ should pass the options object
      ✔ should pass in the user specified location
    query
      ✔ should return any errors from createQueryJob
      ✔ should exit early if dryRun is set
      ✔ should call job#getQueryResults
      ✔ should assign Job on the options
      ✔ should optionally accept options
    queryAsStream_
      ✔ should call query correctly with a string
      ✔ should call query correctly with a Query object
      ✔ should query as job if supplied
      ✔ should pass wrapIntegers if supplied
    #sanitizeEndpoint
      ✔ should default protocol to https
      ✔ should not override protocol
      ✔ should remove trailing slashes from URL

  BigQuery/Dataset
    instantiation
      ✔ should extend the correct methods
      ✔ should streamify the correct methods
      ✔ should promisify all the things
      ✔ should inherit from ServiceObject
      ✔ should capture user provided location
      ✔ should capture user provided projectId
      createMethod
        ✔ should call through to BigQuery#createDataset
        ✔ should optionally accept options
        ✔ should pass the location
      projectId override interceptor
        ✔ should use projectId override uri
      etag interceptor
        ✔ should apply the If-Match header
        ✔ should respect already existing headers
        ✔ should not apply the header if method is not patch
    createQueryJob
      ✔ should extend the options
      ✔ should accept a query string
    createQueryStream
      ✔ should call through to bigQuery
      ✔ should return the result of the call to bq.query
      ✔ should accept a string
      ✔ should pass along options
      ✔ should extend options with defaultDataset
      ✔ should extend options with the location
      ✔ should not modify original options object
    createTable
      ✔ should create a table
      ✔ should not require options
      ✔ should format the metadata
      ✔ should create a schema object from a string
      ✔ should wrap an array schema
      ✔ should assign record type to nested schemas
      ✔ should return an error to the callback
      ✔ should return a Table object
      ✔ should pass the location to the Table
      ✔ should return an apiResponse
      ✔ should assign metadata to the Table object
    delete
      ✔ should delete the dataset via the api
      ✔ should allow a force delete
      ✔ should execute callback when done
      ✔ should pass error to callback
      ✔ should pass apiResponse to callback
    getModels
      ✔ should get models from the api
      ✔ should accept a query
      ✔ should default the query value to an empty object
      ✔ should return error to callback
      success
        ✔ should return Model & apiResponse
        ✔ should assign metadata to the Model objects
        ✔ should return token if more results exist
    getTables
      ✔ should get tables from the api
      ✔ should accept a query
      ✔ should default the query value to an empty object
      ✔ should return error to callback
      success
        ✔ should return Table & apiResponse
        ✔ should assign metadata to the Table objects
        ✔ should return token if more results exist
    model
      ✔ should throw an error if the id is missing
      ✔ should return a Model object
    query
      ✔ should call through to bigQuery
      ✔ should accept a string
      ✔ should pass along options
      ✔ should extend options with defaultDataset
      ✔ should extend options with the location
      ✔ should not modify original options object
      ✔ should pass callback
    table
      ✔ should throw an error if the id is missing
      ✔ should return a Table object
      ✔ should inherit the dataset location
      ✔ should pass along the location if provided

  BigQuery/Job
    initialization
      ✔ should paginate all the things
      ✔ should promisify all the things
      ✔ should assign this.bigQuery
      ✔ should inherit from Operation
      ✔ should accept a location option
      ✔ should accept a projectId option
      ✔ should send the location via getMetadata
      ✔ should update the location after initializing job object
    cancel
      ✔ should make the correct API request
      ✔ should include the job location
    getQueryResults
      ✔ should make the correct request
      ✔ should optionally accept options
      ✔ should inherit the location
      ✔ should delete any cached jobs
      ✔ should return any errors to the callback
      ✔ should return the rows and response to the callback
      ✔ should merge the rows with the schema
      ✔ it should wrap integers
      ✔ should return the query when the job is not complete
      ✔ should return an error when the job is not complete & timeout is overridden
      ✔ should populate nextQuery when more results exist
    getQueryResultsStream
      ✔ should have streamified getQueryResults
    getQueryResultsAsStream_
      ✔ should call getQueryResults correctly
    poll_
      ✔ should call getMetadata
      API error
        ✔ should return an error
      job failure
        ✔ should detect and return an error from the response
      job pending
        ✔ should execute callback
      job complete
        ✔ should emit complete with metadata

  BigQuery/Model
    instantiation
      ✔ should promisify all the things
      ✔ should inherit from ServiceObject
    createExtractJob
      ✔ should call createJob correctly
      ✔ should accept just a destination and a callback
      formats
        ✔ should accept ML_TF_SAVED_MODEL
        ✔ ML_XGBOOST_BOOSTER
        ✔ should parse out full gs:// urls from files
        ✔ should check if a destination is a File
        ✔ should throw if a destination is not a string or a File
        ✔ should throw if a provided format is not recognized
        ✔ should accept a job prefix
        ✔ should accept a job id
        ✔ should pass the callback to createJob
        ✔ should optionally accept options
    extract
      ✔ should pass the arguments to createExtractJob
      ✔ should optionally accept metadata
      ✔ should return any createExtractJob errors
      ✔ should return any job errors
      ✔ should return the metadata on complete

  BigQuery/Routine
    instantiation
      ✔ should promisify all the things
      ✔ should inherit from ServiceObject
      ✔ should configure create method
    setMetadata
      ✔ should update the metadata
      ✔ should return an error if getting metadata fails

  RowBatch
    initialization
      ✔ should localize options
      ✔ should create a row array
      ✔ should create a callback array
      ✔ should capture the creation time
      ✔ should initialize bytes to 0
    add
      ✔ should add the row to the row array
      ✔ should add the callback to the callback array
    canFit
      ✔ should return false if too many rows
      ✔ should return true if it can fit
    isAtMax
      ✔ should return true if at max row limit (90ms)
      ✔ should return true if at max byte limit (902ms)
      ✔ should return false if it is not full
    isFull
      ✔ should return true if at max row limit
      ✔ should return true if at max byte limit
      ✔ should return false if it is not full

  Queues
    RowQueue
      initialization
        ✔ should create a row batch
        ✔ should localize the stream
        ✔ should localize the table
        ✔ should set options
      setOptions
        ✔ should use defaults if min
      add
        ✔ should publish immediately if unable to fit message
        ✔ should add the row to the batch
        ✔ should insert immediately if the batch became full
        ✔ should set a timeout to publish if need be
        ✔ should set insert id
        ✔ should encode rows
      insert
        ✔ should create a new batch
        ✔ should cancel any pending insert calls
        ✔ should insert the rows
        ✔ should not call insert if batch.rows is empty
      _insert
        ✔ should make the correct request
        ✔ should work without callback provided
        ✔ should make the correct request with raw data
        ✔ should pass back any request errors
        ✔ should execute callback with API response

  BigQuery/Table
    instantiation
      ✔ should extend the correct methods
      ✔ should streamify the correct methods
      ✔ should promisify all the things
      ✔ should inherit from ServiceObject
      ✔ should capture the location
      etag interceptor
        ✔ should apply the If-Match header
        ✔ should respect already existing headers
        ✔ should not apply the header if method is not patch
    createSchemaFromString_
      ✔ should create a schema object from a string
      ✔ should trim names
      ✔ should trim types
    encodeValue_
      ✔ should return null if null or undefined
      ✔ should properly encode values
      ✔ should properly encode custom types
      ✔ should properly encode arrays
      ✔ should properly encode objects
      ✔ should properly encode numerics
    formatMetadata_
      ✔ should return a deep copy
      ✔ should format the name option
      ✔ should format the schema string option
      ✔ should accept an array of schema fields
      ✔ should format the schema fields option
      ✔ should format the time partitioning option
      ✔ should format the table view option
      ✔ should allow the view option to be passed as a pre-formatted object
    copy
      ✔ should pass the arguments to createCopyJob
      ✔ should optionally accept metadata
      ✔ should return any createCopyJob errors
      ✔ should return any job errors
      ✔ should return the metadata on complete
    copyFrom
      ✔ should pass the arguments to createCopyFromJob
      ✔ should optionally accept metadata
      ✔ should return any createCopyFromJob errors
      ✔ should return any job errors
      ✔ should return the metadata on complete
    createCopyJob
      ✔ should throw if a destination is not a Table
      ✔ should send correct request to the API
      ✔ should accept a job prefix
      ✔ should use the default location
      ✔ should accept a job id
      ✔ should pass the callback to createJob
      ✔ should optionally accept metadata
    createCopyFromJob
      ✔ should throw if a source is not a Table
      ✔ should send correct request to the API
      ✔ should accept multiple source tables
      ✔ should accept a job prefix
      ✔ should use the default location
      ✔ should accept a job id
      ✔ should pass the callback to createJob
      ✔ should optionally accept options
    createInsertStream
      ✔ should create a row queue
      ✔ should create a row queue with options
      ✔ should return a stream
      ✔ should add a row to the queue
    createExtractJob
      ✔ should call createJob correctly
      ✔ should accept just a destination and a callback
      ✔ should parse out full gs:// urls from files
      ✔ should check if a destination is a File
      ✔ should throw if a destination is not a File
      ✔ should detect file format if a format is not provided
      ✔ should assign the provided format if matched
      ✔ should throw if a provided format is not recognized
      ✔ should assign GZIP compression with gzip: true
      ✔ should accept a job prefix
      ✔ should use the default location
      ✔ should accept a job id
      ✔ should pass the callback to createJob
      ✔ should optionally accept options
      formats
        ✔ should accept csv
        ✔ should accept json
        ✔ should accept avro
        ✔ should accept orc
        ✔ should accept parquet
        ✔ should accept Firestore backup
    createLoadJob
      ✔ should accept just a File and a callback
      ✔ should infer the file format from the given filepath
      ✔ should execute callback with error from writestream
      ✔ should not infer the file format if one is given
      ✔ should check if a destination is a File
      ✔ should throw if a File object is not provided
      ✔ should convert File objects to gs:// urls
      ✔ should infer the file format from a File object
      ✔ should not override a provided format with a File
      ✔ should use bigQuery.createJob
      ✔ should optionally accept options
      ✔ should set the job prefix
      ✔ should use the default location
      ✔ should accept a job id
      formats
        ✔ should accept csv
        ✔ should accept json
        ✔ should accept avro
        ✔ should accept export_metadata
    createQueryJob
      ✔ should call through to dataset#createQueryJob
    createQueryStream
      ✔ should call datasetInstance.createQueryStream()
      ✔ should return whatever dataset.createQueryStream returns
    createWriteStream_
      ✔ should format a schema
      ✔ should override destination table
      ✔ should return a stream
      formats
        ✔ should accept export_metadata
        ✔ should accept csv
        ✔ should accept json
        ✔ should accept avro
        ✔ should accept export_metadata
      writable stream
        ✔ should make a writable stream when written to
        ✔ should pass extended metadata
        ✔ should pass the correct request uri
        ✔ should respect the jobPrefix option
        ✔ should use the default location
        ✔ should accept a job id
        ✔ should create a job and emit it with job
    createWriteStream
      ✔ should pass the metadata to the private method
      ✔ should cork the stream on prefinish
      ✔ should destroy the stream on job error
      ✔ should signal complete upon job complete
    extract
      ✔ should pass the arguments to createExtractJob
      ✔ should optionally accept metadata
      ✔ should return any createExtractJob errors
      ✔ should return any job errors
      ✔ should return the metadata on complete
    getRows
      ✔ should accept just a callback
      ✔ should make correct API request
      ✔ should execute callback with error & API response
      ✔ should return schema-merged rows
      ✔ should return apiResponse in callback
      ✔ should pass nextQuery if pageToken is returned
      ✔ should return selected fields
      ✔ should return selected fields from nested objects
      ✔ should wrap integers
      refreshing metadata
        ✔ should refresh
        ✔ should execute callback from refreshing metadata
    insert
      ✔ should throw an error if rows is empty
      ✔ should save data
      ✔ should return a promise if no callback is provided
      ✔ should resolve to an array on success
      ✔ should generate insertId
      ✔ should omit the insertId if createInsertId is false
      ✔ should execute callback with API response
      ✔ should execute callback with error & API response
      ✔ should reject with API error
      ✔ should return partial failures
      ✔ should retry partials default max 3
      ✔ should retry partials with optional max
      ✔ should allow 0 partial retries, but still do it once
      ✔ should keep partial retries option non-negative
      ✔ should retry partial inserts deltas
      ✔ should insert raw data
      ✔ should accept options
      create table and retry
        ✔ should not include the schema in the insert request
        ✔ should attempt to create table if not created
        ✔ should set a timeout to insert rows in the created table
        ✔ should reject on table creation errors
        ✔ should ignore 409 errors
        ✔ should retry the insert
    load
      ✔ should pass the arguments to createLoadJob
      ✔ should optionally accept metadata
      ✔ should return any createLoadJob errors
      ✔ should return any job errors
      ✔ should return the metadata on complete
    query
      ✔ should pass args through to datasetInstance.query()
    setMetadata
      ✔ should call ServiceObject#setMetadata
    setIamPolicy
      ✔ should make correct API request
      ✔ should accept a callback
      ✔ should accept options
      ✔ should throw with invalid policy version
      ✔ should return errors
    getIamPolicy
      ✔ should make correct API call
      ✔ should accept just a callback
      ✔ should accept options
      ✔ should throw with invalid policy version
      ✔ should return errors
    testIamPermissions
      ✔ should make correct API call
      ✔ should accept a callback
      ✔ should return errors


  482 passing (1s)
  4 pending

---------------------|---------|----------|---------|---------|-------------------------------------
File                 | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                   
---------------------|---------|----------|---------|---------|-------------------------------------
All files            |   98.53 |    98.77 |   84.05 |   98.53 |                                     
 nodejs-bigquery     |      50 |       20 |       0 |      50 |                                     
  .mocharc.js        |   79.31 |       25 |     100 |   79.31 | 21-22,24-25,27-28                   
  .prettierrc.js     |       0 |        0 |       0 |       0 | 1-17                                
 nodejs-bigquery/src |    98.8 |    99.31 |   84.67 |    98.8 |                                     
  bigquery.ts        |    99.6 |    99.31 |   93.33 |    99.6 | 291-293,296-298,301-303             
  dataset.ts         |   94.04 |      100 |   66.66 |   94.04 | ...-137,631-660,1029-1062,1261-1266 
  index.ts           |     100 |      100 |   33.33 |     100 |                                     
  job.ts             |   99.24 |      100 |      90 |   99.24 | 129-133                             
  model.ts           |     100 |      100 |     100 |     100 |                                     
  routine.ts         |     100 |      100 |     100 |     100 |                                     
  rowBatch.ts        |     100 |      100 |     100 |     100 |                                     
  rowQueue.ts        |     100 |    92.59 |     100 |     100 | 197-199                             
  table.ts           |    99.8 |    99.61 |   96.96 |    99.8 | 224-226,2063-2064                   
---------------------|---------|----------|---------|---------|-------------------------------------
https://github.com/googleapis/nodejs-storage.git
build/src/index.js
DirectBloated/nodejs-storage
nodejs-storage
5a8545b

> @google-cloud/storage@6.9.0 prepare
> npm run compile


> @google-cloud/storage@6.9.0 precompile
> gts clean

version: 16
Removing build ...

> @google-cloud/storage@6.9.0 compile
> tsc -p .


added 534 packages, and audited 535 packages in 27s

96 packages are looking for funding
  run `npm fund` for details

2 high severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.

> @google-cloud/storage@6.9.0 pretest
> npm run compile


> @google-cloud/storage@6.9.0 precompile
> gts clean

version: 16
Removing build ...

> @google-cloud/storage@6.9.0 compile
> tsc -p .


> @google-cloud/storage@6.9.0 test
> c8 mocha build/test



  storage/acl
    initialization
      ✔ should promisify all the things
      ✔ should assign makeReq and pathPrefix
    add
      ✔ should make the correct api request
      ✔ should set the generation
      ✔ should set the userProject
      ✔ should execute the callback with an ACL object
      ✔ should execute the callback with an error
      ✔ should execute the callback with apiResponse
    delete
      ✔ should make the correct api request
      ✔ should set the generation
      ✔ should set the userProject
      ✔ should execute the callback with an error
      ✔ should execute the callback with apiResponse
    get
      ✔ should execute the callback with an error
      ✔ should execute the callback with apiResponse
      all ACL objects
        ✔ should make the correct API request
        ✔ should accept a configuration object
        ✔ should pass an array of acl objects to the callback
      ACL object for an entity
        ✔ should get a specific ACL object
        ✔ should accept a configuration object
        ✔ should set the userProject
        ✔ should pass an acl object to the callback
    update
      ✔ should make the correct API request
      ✔ should set the generation
      ✔ should set the userProject
      ✔ should pass an acl object to the callback
      ✔ should execute the callback with an error
      ✔ should execute the callback with apiResponse
    makeAclObject_
      ✔ should return an ACL object from an API response
    request
      ✔ should make the correct request

  storage/AclRoleAccessorMethods
    initialization
      ✔ should assign access methods for every role object
    _assignAccessMethods
      ✔ should call parent method
      ✔ should return the parent methods return value
      ✔ should not pass in the callback if undefined
      ✔ should optionally accept options

  Bucket
    instantiation
      ✔ should extend the correct methods
      ✔ should streamify the correct methods
      ✔ should promisify all the things
      ✔ should remove a leading gs://
      ✔ should remove a trailing /
      ✔ should localize the name
      ✔ should localize the storage instance
      ✔ should inherit from ServiceObject
      ✔ should set the correct query string with a userProject
      ✔ should set the correct query string with ifGenerationMatch
      ✔ should set the correct query string with ifGenerationNotMatch
      ✔ should set the correct query string with ifMetagenerationMatch
      ✔ should set the correct query string with ifMetagenerationNotMatch
      ✔ should localize an Iam instance
      ✔ should localize userProject if provided
      ✔ should accept a `crc32cGenerator`
      ✔ should use storage's `crc32cGenerator` by default
      ACL objects
        ✔ should create an ACL object
        ✔ should create a default ACL object
    cloudStorageURI
      ✔ should return the appropriate `gs://` URI
    addLifecycleRule
      ✔ should accept raw input
      ✔ should properly capitalize rule action
      ✔ should properly set the storage class
      ✔ should properly set condition
      ✔ should convert Date object to date string for condition
      ✔ should optionally overwrite existing rules
      ✔ should combine rule with existing rules by default
      ✔ should accept multiple rules
      ✔ should pass error from getMetadata to callback
    combine
      ✔ should throw if invalid sources are provided
      ✔ should throw if a destination is not provided
      ✔ should accept string or file input for sources
      ✔ should use content type from the destination metadata
      ✔ should use content type from the destination metadata
      ✔ should detect dest content type if not in metadata
      ✔ should make correct API request
      ✔ should encode the destination file name
      ✔ should send a source generation value if available
      ✔ should accept userProject option
      ✔ should accept precondition options
      ✔ should execute the callback
      ✔ should execute the callback with an error
      ✔ should execute the callback with apiResponse
      ✔ should set maxRetries to 0 when ifGenerationMatch is undefined
    createChannel
      ✔ should throw if an ID is not provided
      ✔ should throw if an address is not provided
      ✔ should make the correct request
      ✔ should accept userProject option
      error
        ✔ should execute callback with error & API response
      success
        ✔ should exec a callback with Channel & API response
    createNotification
      ✔ should throw an error if a valid topic is not provided
      ✔ should make the correct request
      ✔ should accept incomplete topic names
      ✔ should accept a topic object
      ✔ should set a default payload format
      ✔ should optionally accept options
      ✔ should accept a userProject
      ✔ should return errors to the callback
      ✔ should return a notification object
    deleteFiles
      ✔ should accept only a callback
      ✔ should get files from the bucket
      ✔ should process 10 files at a time
      ✔ should delete the files
      ✔ should execute callback with error from getting files
      ✔ should execute callback with error from deleting file
      ✔ should execute callback with queued errors
    deleteLabels
      all labels
        ✔ should get all of the label names
        ✔ should return an error from getLabels()
        ✔ should call setLabels with all label names
      single label
        ✔ should call setLabels with a single label
      multiple labels
        ✔ should call setLabels with multiple labels
    disableRequesterPays
      ✔ should call setMetadata correctly
      ✔ should not require a callback
      ✔ should set autoRetry to false when ifMetagenerationMatch is undefined
    enableLogging
      ✔ should throw if a config object is not provided
      ✔ should throw if config is a function
      ✔ should throw if a prefix is not provided
      ✔ should add IAM permissions
      ✔ should return an error from getting the IAM policy
      ✔ should return an error from setting the IAM policy
      ✔ should update the logging metadata configuration
      ✔ should allow a custom bucket to be provided
      ✔ should accept a Bucket object
      ✔ should execute the callback with the setMetadata response
      ✔ should return an error from the setMetadata call failing
    enableRequesterPays
      ✔ should call setMetadata correctly
      ✔ should not require a callback
    file
      ✔ should throw if no name is provided
      ✔ should return a File object
      ✔ should pass bucket to File object
      ✔ should pass filename to File object
      ✔ should pass configuration object to File
    getFiles
      ✔ should get files without a query
      ✔ should get files with a query
      ✔ should return nextQuery if more results exist
      ✔ should return null nextQuery if there are no more results
      ✔ should return File objects
      ✔ should return versioned Files if queried for versions
      ✔ should set kmsKeyName on file
      ✔ should return apiResponse in callback
      ✔ should execute callback with error & API response
      ✔ should populate returned File object with metadata
    getLabels
      ✔ should refresh metadata
      ✔ should accept an options object
      ✔ should return error from getMetadata
      ✔ should return labels metadata property
      ✔ should return empty object if no labels exist
    getNotifications
      ✔ should make the correct request
      ✔ should optionally accept options
      ✔ should return any errors to the callback
      ✔ should return a list of notification objects
    getSignedUrl
      ✔ should construct a URLSigner and call getSignedUrl
      ✔ should error if action is null
      ✔ should error if action is undefined
      ✔ should error for an invalid action
    lock
      ✔ should throw if a metageneration is not provided
      ✔ should make the correct request
    makePrivate
      ✔ should set predefinedAcl & privatize files
      ✔ should accept metadata
      ✔ should accept userProject
      ✔ should not make files private by default
      ✔ should execute callback with error
    makePublic
      ✔ should set ACL, default ACL, and publicize files
      ✔ should not make files public by default
      ✔ should execute callback with error
    notification
      ✔ should throw an error if an id is not provided
      ✔ should return a Notification object
    removeRetentionPeriod
      ✔ should call setMetadata correctly
    request
      ✔ should set the userProject if qs is undefined
      ✔ should set the userProject if field is undefined
      ✔ should not overwrite the userProject
      ✔ should call ServiceObject#request correctly
    setLabels
      ✔ should correctly call setMetadata
      ✔ should accept an options object
    setRetentionPeriod
      ✔ should call setMetadata correctly
    setCorsConfiguration
      ✔ should call setMetadata correctly
    setStorageClass
      ✔ should convert camelCase to snake_case
      ✔ should convert hyphenate to snake_case
      ✔ should call setMetdata correctly
    setUserProject
      ✔ should set the userProject property
      ✔ should set the userProject on the global request options
    upload
      ✔ should return early in snippet sandbox
      ✔ should accept a path & cb
      ✔ should accept a path, metadata, & cb
      ✔ should accept a path, a string dest, & cb
      ✔ should accept a path, a string dest, metadata, & cb
      ✔ should accept a path, a File dest, & cb
      ✔ should accept a path, a File dest, metadata, & cb
      ✔ should allow overriding content type
      ✔ should pass provided options to createWriteStream
      ✔ should execute callback on error
      ✔ should return file and metadata
      ✔ should capture and throw on non-existent files
      resumable uploads
        ✔ should respect setting a resumable upload to false
        ✔ should not retry a nonretryable error code
        ✔ resumable upload should retry
      multipart uploads
        ✔ should save with no errors
        ✔ should retry on first failure
        ✔ should not retry if nonretryable error code
        ✔ non-multipart upload should not retry
    makeAllFilesPublicPrivate_
      ✔ should get all files from the bucket
      ✔ should process 10 files at a time
      ✔ should make files public
      ✔ should make files private
      ✔ should execute callback with error from getting files
      ✔ should execute callback with error from changing file
      ✔ should execute callback with queued errors
      ✔ should execute callback with files changed
    disableAutoRetryConditionallyIdempotent_
      ✔ should set autoRetry to false when ifMetagenerationMatch is undefined (setMetadata)
      ✔ should set autoRetry to false when ifMetagenerationMatch is undefined (delete)
      ✔ should set autoRetry to false when IdempotencyStrategy is set to RetryNever
      ✔ autoRetry should remain true when ifMetagenerationMatch is not undefined

  Channel
    initialization
      ✔ should inherit from ServiceObject
      ✔ should promisify all the things
      ✔ should set the default metadata
    stop
      ✔ should make the correct request
      ✔ should execute callback with error & API response
      ✔ should not require a callback

  CRC32C
    instance
      #constructor
        ✔ should initial value to `0`
        ✔ should accept an `initialValue`
      #update
        ✔ should produce the correct calculation given the input (single buffer)
        ✔ should produce the correct calculation given the input (multiple buffers) (62ms)
        ✔ should not mutate a provided buffer
      #validate
        ✔ should validate a provided `number`
        ✔ should validate a provided `string`
        ✔ should validate a provided `Buffer`
        ✔ should validate a provided `CRC32C`
        ✔ should validate a provided generic `CRC32CValidator`
      #toBuffer
        ✔ should return a valid 4-byte buffer
      #toJSON
        ✔ should return the expected JSON
      #toString
        ✔ should return the expected string
      #valueOf
        ✔ should return the expected string
    static
      .CRC32C_EXTENSIONS
        ✔ should be the same as the exported object
      .CRC32C_EXTENSION_TABLE
        ✔ should be the same as the exported object
      .from
        `ArrayBuffer`
          ✔ should generate from `ArrayBuffer`
          ✔ should raise a `RangeError` on invalid buffers
        `ArrayBufferView`
          ✔ should generate from `ArrayBufferView`
          ✔ should raise a `RangeError` on invalid buffers
        `Buffer`
          ✔ should generate from `Buffer`
          ✔ should raise a `RangeError` on invalid buffers
        `CRC32C`
          ✔ should generate from `CRC32C`
        `CRC32CValidator`
          ✔ should generate from `CRC32CValidator`
        `string`
          ✔ should generate from base64-encoded data
          ✔ should raise a `RangeError` on invalid strings
        `number`
          ✔ should generate from `number`
          ✔ should raise a `RangeError` on invalid integers
      .fromFile
        ✔ should generate a valid `crc32c` via a file path

  File
    initialization
      ✔ should promisify all the things
      ✔ should assign file name
      ✔ should assign the bucket instance
      ✔ should assign the storage instance
      ✔ should set instanceRetryValue to the storage insance retryOptions.autoRetry value
      ✔ should not strip leading slashes
      ✔ should assign KMS key name
      ✔ should accept specifying a generation
      ✔ should inherit from ServiceObject
      ✔ should set the correct query string with a generation
      ✔ should set the correct query string with a userProject
      ✔ should set the correct query string with ifGenerationMatch
      ✔ should set the correct query string with ifGenerationNotMatch
      ✔ should set the correct query string with ifMetagenerationMatch
      ✔ should set the correct query string with ifMetagenerationNotMatch
      ✔ should not strip leading slash name in ServiceObject
      ✔ should set a custom encryption key
      ✔ should accept a `crc32cGenerator`
      ✔ should use the bucket's `crc32cGenerator` by default
      userProject
        ✔ should localize the Bucket#userProject
        ✔ should accept a userProject option
    cloudStorageURI
      ✔ should return the appropriate `gs://` URI
    copy
      ✔ should throw if no destination is provided
      ✔ should URI encode file names
      ✔ should execute callback with error & API response
      ✔ should send query.sourceGeneration if File has one
      ✔ should accept an options object
      ✔ should pass through userProject
      ✔ should set correct headers when file is encrypted
      ✔ should set encryption key on the new File instance
      ✔ should set destination KMS key name
      ✔ should set destination KMS key name from option
      ✔ should accept predefined Acl
      ✔ should favor the option over the File KMS name
      ✔ should remove custom encryption interceptor if rotating to KMS
      destination types
        ✔ should allow a string
        ✔ should allow a string with leading slash.
        ✔ should allow a "gs://..." string
        ✔ should allow a Bucket
        ✔ should allow a File
        ✔ should throw if a destination cannot be parsed
      not finished copying
        ✔ should continue attempting to copy
        ✔ should pass the userProject in subsequent requests
        ✔ should pass the KMS key name in subsequent requests
        ✔ should make the subsequent correct API request
      returned File object
        ✔ should re-use file object if one is provided
        ✔ should create new file on the same bucket
        ✔ should create new file on the destination bucket
        ✔ should pass apiResponse into callback
    createReadStream
      ✔ should throw if both a range and validation is given
      ✔ should send query.generation if File has one
      ✔ should send query.userProject if provided
      authenticating
        ✔ should create an authenticated request
        errors
          ✔ should emit an error from authenticating (56ms)
      requestStream
        ✔ should get readable stream from request
        ✔ should emit response event from request
        ✔ should let util.handleResp handle the response
        errors
          ✔ should emit the error (54ms)
          ✔ should parse a response stream for a better error
          ✔ should emit errors from the request stream
          ✔ should not handle both error and end events
      compression
        ✔ should gunzip the response
        ✔ should not gunzip the response if "decompress: false" is passed
        ✔ should emit errors from the gunzip stream
        ✔ should not handle both error and end events
      validation
        ✔ should perform validation if file was stored compressed and served compressed
        ✔ should emit errors from the validation stream
        ✔ should not handle both error and end events
        ✔ should validate with crc32c
        ✔ should emit an error if crc32c validation fails
        ✔ should validate with md5
        ✔ should emit an error if md5 validation fails
        ✔ should default to crc32c validation
        ✔ should ignore a data mismatch if validation: false
        ✔ should handle x-goog-hash with only crc32c
        server decompression
          ✔ should skip validation if file was stored compressed and served decompressed
        destroying the through stream
          ✔ should destroy after failed validation
          ✔ should destroy if MD5 is requested but absent
      range requests
        ✔ should accept a start range
        ✔ should accept an end range and set start to 0
        ✔ should accept both a start and end range
        ✔ should accept range start and end as 0
        ✔ should end the through stream
      tail requests
        ✔ should make a request for the tail bytes
    createResumableUpload
      ✔ should not require options
      ✔ should disable autoRetry when ifMetagenerationMatch is undefined
      ✔ should create a resumable upload URI
      ✔ should create a resumable upload URI using precondition options from constructor
    createWriteStream
      ✔ should return a stream
      ✔ should emit errors
      ✔ should emit progress via resumable upload
      ✔ should emit progress via simple upload
      ✔ should start a simple upload if specified
      ✔ should start a resumable upload if specified
      ✔ should default to a resumable upload
      ✔ should alias contentType to metadata object
      ✔ should detect contentType with contentType:auto
      ✔ should detect contentType if not defined
      ✔ should not overwrite passed in options
      ✔ should not set a contentType if mime lookup failed
      ✔ should set encoding with gzip:true
      ✔ should set ifGenerationMatch with 100
      ✔ should set ifGenerationNotMatch with 100
      ✔ should set ifMetagenerationMatch with 100
      ✔ should set ifMetagenerationNotMatch with 100
      ✔ should set encoding with gzip:auto & compressible
      ✔ should not set encoding with gzip:auto & non-compressible
      ✔ should re-emit response event
      ✔ should emit `finish` only after underlying pipeline is complete
      validation
        ✔ should validate with crc32c
        ✔ should emit an error if crc32c validation fails
        ✔ should validate with md5
        ✔ should emit an error if md5 validation fails
        ✔ should default to md5 validation
        ✔ should ignore a data mismatch if validation: false
        ✔ should delete the file if validation fails
        ✔ should emit an error if MD5 is requested but absent
        ✔ should emit a different error if delete fails
    download
      ✔ should accept just a callback
      ✔ should accept an options object and callback
      ✔ should pass the provided options to createReadStream
      ✔ should only execute callback once
      into memory
        ✔ should buffer a file into memory if no destination
        ✔ should execute callback with error
      with destination
        ✔ should write the file to a destination if provided
        ✔ should process the entire stream
        ✔ empty file should be processed correctly
        ✔ file contents should remain unchanged if file nonexistent
        ✔ should execute callback with error
    getExpirationDate
      ✔ should refresh metadata
      ✔ should return error from getMetadata
      ✔ should return an error if there is no expiration time
      ✔ should return the expiration time as a Date object
    generateSignedPostPolicyV2
      ✔ should create a signed policy
      ✔ should not modify the configuration object
      ✔ should return an error if signBlob errors
      ✔ should add key equality condition
      ✔ should add ACL condtion
      ✔ should add success redirect
      ✔ should add success status
      expires
        ✔ should accept Date objects
        ✔ should accept numbers
        ✔ should accept strings
        ✔ should throw if a date is invalid
        ✔ should throw if a date from the past is given
      equality condition
        ✔ should add equality conditions (array of arrays)
        ✔ should add equality condition (array)
        ✔ should throw if equal condition is not an array
        ✔ should throw if equal condition length is not 2
      prefix conditions
        ✔ should add prefix conditions (array of arrays)
        ✔ should add prefix condition (array)
        ✔ should throw if prexif condition is not an array
        ✔ should throw if prefix condition length is not 2
      content length
        ✔ should add content length condition
        ✔ should throw if content length has no min
        ✔ should throw if content length has no max
    generateSignedPostPolicyV4
      ✔ should create a signed policy
      ✔ should not modify the configuration object
      ✔ should return an error if signBlob errors
      ✔ should add key condition
      ✔ should include fields in conditions
      ✔ should encode special characters in policy
      ✔ should not include fields with x-ignore- prefix in conditions
      ✔ should accept conditions
      ✔ should output url with cname
      ✔ should output a virtualHostedStyle url
      expires
        ✔ should accept Date objects
        ✔ should accept numbers
        ✔ should accept strings
        ✔ should throw if a date is invalid
        ✔ should throw if a date from the past is given
        ✔ should throw if a date beyond 7 days is given
    getSignedUrl
      ✔ should construct a URLSigner and call getSignedUrl
      ✔ should error if action is null
      ✔ should error if action is undefined
      ✔ should error for an invalid action
      ✔ should add "x-goog-resumable: start" header if action is resumable
      ✔ should add response-content-type query parameter
      ✔ should respect promptSaveAs argument
      ✔ should add response-content-disposition query parameter
      ✔ should ignore promptSaveAs if set
      ✔ should add generation to query parameter
    makePrivate
      ✔ should execute callback with API response
      ✔ should make the file private to project by default
      ✔ should make the file private to user if strict = true
      ✔ should accept metadata
      ✔ should accept userProject
    makePublic
      ✔ should execute callback
      ✔ should make the file public
    publicUrl
      ✔ should return the public URL
      ✔ with slash in the name
      ✔ with tilde in the name
      ✔ with non ascii in the name
      ✔ with an ampersand in the name
    isPublic
      ✔ should execute callback with `true` in response
      ✔ should execute callback with `false` in response
      ✔ should propagate non-403 errors to user
      ✔ should correctly send a GET request
      ✔ should correctly format URL in the request
      ✔ should not set any headers when there are no interceptors
      ✔ should set headers when an interceptor is defined
    move
      copy to destination
        ✔ should call copy with string
        ✔ should call copy with Bucket
        ✔ should call copy with File
        ✔ should accept an options object
        ✔ should fail if copy fails
      delete original file
        ✔ should call the callback with destinationFile and copyApiResponse
        ✔ should delete if copy is successful
        ✔ should not delete if copy fails
        ✔ should not delete the destination is same as origin
        ✔ should pass options to delete
        ✔ should fail if delete fails
    rename
      ✔ should correctly call File#move
      ✔ should accept File object
      ✔ should not require options
    request
      ✔ should call the parent request function
    rotateEncryptionKey
      ✔ should create new File correctly
      ✔ should default to customer-supplied encryption key
      ✔ should accept a Buffer for customer-supplied encryption key
      ✔ should call copy correctly
    save
      ✔ should execute callback
      ✔ should accept an options object
      ✔ should not require options
      ✔ should register the error listener
      ✔ should register the finish listener
      ✔ should register the progress listener if onUploadProgress is passed
      ✔ should write the data
      retry mulipart upload
        ✔ should save a string with no errors
        ✔ string upload should retry on first failure (1889ms)
        ✔ string upload should not retry if nonretryable error code
        ✔ should save a buffer with no errors
        ✔ buffer upload should retry on first failure (1822ms)
        ✔ resumable upload should retry (1668ms)
        ✔ should not retry if ifMetagenerationMatch is undefined (1328ms)
    setStorageClass
      ✔ should make the correct copy request
      ✔ should accept options
      ✔ should convert camelCase to snake_case
      ✔ should convert hyphenate to snake_case
      error
        ✔ should execute callback with error & API response
      success
        ✔ should update the metadata on the file
        ✔ should execute callback with api response
    setEncryptionKey
      ✔ should localize the key
      ✔ should localize the base64 key
      ✔ should localize the hash
      ✔ should return the file instance
      ✔ should push the correct request interceptor
    startResumableUpload_
      starting
        ✔ should start a resumable upload
        ✔ should emit the response
        ✔ should set the metadata from the metadata event
        ✔ should emit complete after the stream finishes
        ✔ should set the writable stream
        ✔ should emit progress event
        ✔ should set autoRetry to false when ifMetagenerationMatch is undefined
    startSimpleUpload_
      ✔ should get a writable stream
      ✔ should pass the required arguments
      ✔ should set predefinedAcl when public: true
      ✔ should set predefinedAcl when private: true
      ✔ should send query.ifGenerationMatch if File has one
      ✔ should send query.kmsKeyName if File has one
      ✔ should send userProject if set
      request
        error
          ✔ should destroy the stream
        success
          ✔ should set the metadata
          ✔ should emit the response
          ✔ should emit complete
    setUserProject
      ✔ should call the parent setUserProject function

  headers
    ✔ populates x-goog-api-client header

  HmacKey
    initialization
      ✔ should inherit from ServiceObject
      ✔ should form baseUrl using options.projectId if given
      ✔ should correctly call setMetadata

  storage/iam
    initialization
      ✔ should promisify all the things
      ✔ should localize the request function
      ✔ should localize the resource ID
    getPolicy
      ✔ should make the correct api request
      ✔ should accept an options object
      ✔ should map requestedPolicyVersion option to optionsRequestedPolicyVersion
    setPolicy
      ✔ should throw an error if a policy is not supplied
      ✔ should make the correct API request
      ✔ should accept an options object
    testPermissions
      ✔ should throw an error if permissions are missing
      ✔ should make the correct API request
      ✔ should send an error back if the request fails
      ✔ should pass back a hash of permissions the user has
      ✔ should accept an options object

  Storage
    instantiation
      ✔ should extend the correct methods
      ✔ should streamify the correct methods
      ✔ should promisify all the things
      ✔ should inherit from Service
      ✔ should not modify options argument
      ✔ should propagate the apiEndpoint option
      ✔ should propagate the useAuthWithCustomEndpoint option
      ✔ should propagate autoRetry in retryOptions
      ✔ should propagate retryDelayMultiplier
      ✔ should propagate totalTimeout
      ✔ should propagate maxRetryDelay
      ✔ should set correct defaults for retry configs
      ✔ should propagate maxRetries in retryOptions
      ✔ should set retryFunction
      ✔ should retry a 502 error
      ✔ should not retry blank error
      ✔ should retry a reset connection error
      ✔ should retry a broken pipe error
      ✔ should not retry a 999 error
      ✔ should return false if reason and code are both undefined
      ✔ should retry a 999 error if dictated by custom function
      ✔ should set customEndpoint to true when using apiEndpoint
      ✔ should prepend apiEndpoint with default protocol
      ✔ should strip trailing slash from apiEndpoint
      ✔ should accept a `crc32cGenerator`
      ✔ should use `CRC32C_DEFAULT_VALIDATOR_GENERATOR` by default
      STORAGE_EMULATOR_HOST
        ✔ should set baseUrl to env var STORAGE_EMULATOR_HOST
        ✔ should be overriden by apiEndpoint
        ✔ should prepend default protocol and strip trailing slash
        ✔ should set customEndpoint to true
    bucket
      ✔ should throw if no name was provided
      ✔ should accept a string for a name
      ✔ should optionally accept options
    channel
      ✔ should create a Channel object
    hmacKey
      ✔ should throw if accessId is not provided
      ✔ should pass options object to HmacKey constructor
    createHmacKey
      ✔ should make correct API request
      ✔ should throw without a serviceAccountEmail
      ✔ should throw when first argument is not a string
      ✔ should make request with method options as query parameter
      ✔ should not modify the options object
      ✔ should invoke callback with a secret and an HmacKey instance
      ✔ should invoke callback with raw apiResponse
      ✔ should execute callback with request error
    createBucket
      ✔ should make correct API request
      ✔ should accept a name, metadata, and callback
      ✔ should accept a name and callback only
      ✔ should throw if no name is provided
      ✔ should honor the userProject option
      ✔ should execute callback with bucket
      ✔ should execute callback on error
      ✔ should execute callback with apiResponse
      ✔ should allow a user-specified storageClass
      ✔ should allow settings `storageClass` to same value as provided storage class name
      ✔ should allow setting rpo
      ✔ should throw when `storageClass` is set to different value than provided storageClass name
      storage classes
        ✔ should expand metadata.archive
        ✔ should expand metadata.coldline
        ✔ should expand metadata.dra
        ✔ should expand metadata.multiRegional
        ✔ should expand metadata.nearline
        ✔ should expand metadata.regional
        ✔ should expand metadata.standard
      requesterPays
        ✔ should accept requesterPays setting
    getBuckets
      ✔ should get buckets without a query
      ✔ should get buckets with a query
      ✔ should execute callback with error
      ✔ should return nextQuery if more results exist
      ✔ should return null nextQuery if there are no more results
      ✔ should return Bucket objects
      ✔ should return apiResponse
      ✔ should populate returned Bucket object with metadata
    getHmacKeys
      ✔ should get HmacKeys without a query
      ✔ should get HmacKeys with a query
      ✔ should execute callback with error
      ✔ should return nextQuery if more results exist
      ✔ should return null nextQuery if there are no more results
      ✔ should return apiResponse
      ✔ should populate returned HmacKey object with accessId and metadata
    getServiceAccount
      ✔ should make the correct request
      ✔ should allow user options
      error
        ✔ should return the error and apiResponse
      success
        ✔ should convert snake_case response to camelCase
        ✔ should return the serviceAccount and apiResponse
    #sanitizeEndpoint
      ✔ should default protocol to https
      ✔ should not override protocol
      ✔ should remove trailing slashes from URL

  common
    ✔ should correctly export the common modules

  ServiceObject
    instantiation
      ✔ should promisify all the things
      ✔ should create an empty metadata object
      ✔ should localize the baseUrl
      ✔ should localize the parent instance
      ✔ should localize the ID
      ✔ should localize the createMethod
      ✔ should localize the methods
      ✔ should default methods to an empty object
      ✔ should clear out methods that are not asked for
      ✔ should always expose the request method
      ✔ should always expose the getRequestInterceptors method
    create
      ✔ should call createMethod
      ✔ should not require options
      ✔ should update id with metadata id
      ✔ should pass error to callback
      ✔ should return instance and apiResponse to callback
      ✔ should assign metadata
      ✔ should execute callback with any amount of arguments
    delete
      ✔ should make the correct request
      ✔ should accept options
      ✔ should override method and uri field in request with methodConfig
      ✔ should respect ignoreNotFound opion
      ✔ should propagate other then 404 error
      ✔ should not pass ignoreNotFound to request
      ✔ should extend the defaults with request options
      ✔ should not require a callback
      ✔ should execute callback with correct arguments
    exists
      ✔ should call get
      ✔ should accept options
      ✔ should execute callback with false if 404
      ✔ should execute callback with error if not 404
      ✔ should execute callback with true if no error
    get
      ✔ should get the metadata
      ✔ should accept options
      ✔ handles not getting a config
      ✔ should execute callback with error & metadata
      ✔ should execute callback with instance & metadata
      autoCreate
        ✔ should keep the original options intact
        ✔ should not auto create if there is no create method
        ✔ should pass config to create if it was provided
        ✔ should pass only a callback to create if no config
        error
          ✔ should execute callback with error & API response
          ✔ should refresh the metadata after a 409
    getMetadata
      ✔ should make the correct request
      ✔ should accept options
      ✔ should override uri field in request with methodConfig
      ✔ should extend the defaults with request options
      ✔ should execute callback with error & apiResponse
      ✔ should update metadata
      ✔ should execute callback with metadata & API response
    getRequestInterceptors
      ✔ should call the request interceptors in order
      ✔ should not affect original interceptor arrays
      ✔ should not call unrelated interceptors
    setMetadata
      ✔ should make the correct request
      ✔ should accept options
      ✔ should override uri and method with methodConfig
      ✔ should extend the defaults with request options
      ✔ should execute callback with error & apiResponse
      ✔ should update metadata
      ✔ should execute callback with metadata & API response
    request_
      ✔ should compose the correct request
      ✔ should not require a service object ID
      ✔ should support absolute uris
      ✔ should remove empty components
      ✔ should trim slashes
      ✔ should extend interceptors from child ServiceObjects
      ✔ should pass a clone of the interceptors
      ✔ should call the parent requestStream method
    request
      ✔ should call through to request_
      ✔ should accept a callback
      ✔ should return response with a request error and callback
    requestStream
      ✔ should call through to request_

  Service
    instantiation
      ✔ should not require options
      ✔ should create an authenticated request factory
      ✔ should localize the authClient
      ✔ should localize the provided authClient
      ✔ should localize the baseUrl
      ✔ should localize the apiEndpoint
      ✔ should default the timeout to undefined
      ✔ should localize the timeout
      ✔ should localize the getCredentials method
      ✔ should default globalInterceptors to an empty array
      ✔ should preserve the original global interceptors
      ✔ should default interceptors to an empty array
      ✔ should localize package.json
      ✔ should localize the projectId
      ✔ should default projectId with placeholder
      ✔ should localize the projectIdRequired
      ✔ should default projectIdRequired to true
      ✔ should disable forever agent for Cloud Function envs
      `AuthClient` support
        ✔ should accept an `AuthClient` passed to config
        ✔ should accept an `AuthClient` passed to options
    getRequestInterceptors
      ✔ should call the request interceptors in order
      ✔ should not affect original interceptor arrays
      ✔ should not call unrelated interceptors
    getProjectId
      ✔ should get the project ID from the auth client
      ✔ should return error from auth client
      ✔ should update and return the project ID if found
      ✔ should return a promise if no callback is provided
    request_
      ✔ should compose the correct request
      ✔ should support absolute uris
      ✔ should trim slashes
      ✔ should replace path/:subpath with path:subpath
      ✔ should not set timeout
      ✔ should set reqOpt.timeout
      ✔ should add the User Agent
      ✔ should add the provided User Agent
      ✔ should add the api-client header
      projectIdRequired
        false
          ✔ should include the projectId
        true
          ✔ should not include the projectId
          ✔ should use projectId override
      request interceptors
        ✔ should include request interceptors
        ✔ should combine reqOpts interceptors
      error handling
        ✔ should re-throw any makeAuthenticatedRequest callback error
    request
      ✔ should call through to _request
      ✔ should accept a callback
    requestStream
      ✔ should return whatever _request returns

  common/util
    ApiError
      ✔ should accept just a message
      ✔ should use message in stack
      ✔ should build correct ApiError
      ✔ should parse the response body for errors
      createMultiErrorMessage
        ✔ should append the custom error message
        ✔ should use any inner errors
        ✔ should parse and append the decoded response body
        ✔ should use default message if there are no errors
        ✔ should filter out duplicate errors
    PartialFailureError
      ✔ should build correct PartialFailureError
    handleResp
      ✔ should handle errors
      ✔ uses a no-op callback if none is sent
      ✔ should parse response
      ✔ should parse response for error
      ✔ should parse body for error
      ✔ should not parse undefined response
      ✔ should not parse undefined body
      ✔ should handle non-JSON body
      ✔ should include the status code when the error body cannot be JSON-parsed
    parseHttpRespMessage
      ✔ should build ApiError with non-200 status and message
      ✔ should return the original response message
    parseHttpRespBody
      ✔ should detect body errors
      ✔ should try to parse JSON if body is string
      ✔ should return the original body
    makeWritableStream
      ✔ should use defaults
      ✔ should allow overriding defaults
      ✔ should emit an error
      ✔ should set the writable stream
      ✔ dup should emit a progress event with the bytes written
      ✔ should emit an error if the request fails
      ✔ should emit the response
      ✔ should pass back the response data to the callback
    makeAuthenticatedRequestFactory
      ✔ should create an authClient
      ✔ should pass an `AuthClient` to `GoogleAuth` when provided
      ✔ should not pass projectId token to google-auth-library
      ✔ should not remove projectId from config object
      ✔ should return a function
      ✔ should return a getCredentials method
      ✔ should return the authClient
      customEndpoint (no authentication attempted)
        ✔ should decorate the request
        ✔ should return an error while decorating
        ✔ should pass options back to callback
        ✔ should not authenticate requests with a custom API
      customEndpoint (authentication attempted)
        ✔ should authenticate requests with a custom API
      authentication
        ✔ should pass correct args to authorizeRequest
        ✔ should return a stream if callback is missing
        projectId
          ✔ should default to authClient projectId
          ✔ should prefer user-provided projectId
          ✔ should use default `projectId` and not call `authClient#getProjectId` when !`projectIdRequired`
          ✔ should fallback to checking for a `projectId` on when missing a `projectId` when !`projectIdRequired`
        authentication errors
          ✔ should attempt request anyway
          ✔ should block 401 API errors
          ✔ should not block 401 errors if auth client succeeds
          ✔ should block decorateRequest error
          ✔ should invoke the callback with error
          ✔ should exec onAuthenticated callback with error
          ✔ should emit an error and end the stream
        authentication success
          ✔ should return authenticated request to callback
          ✔ should make request with correct options
          ✔ should return abort() from the active request
          ✔ should only abort() once
          ✔ should provide stream to makeRequest
    shouldRetryRequest
      ✔ should return false if there is no error
      ✔ should return false from generic error
      ✔ should return true with error code 408
      ✔ should return true with error code 429
      ✔ should return true with error code 500
      ✔ should return true with error code 502
      ✔ should return true with error code 503
      ✔ should return true with error code 504
      ✔ should detect rateLimitExceeded reason
      ✔ should detect userRateLimitExceeded reason
      ✔ should retry on EAI_AGAIN error code
    makeRequest
      stream mode
        ✔ should forward the specified events to the stream
        GET requests
          ✔ should use retryRequest
          ✔ should set the readable stream
          ✔ should expose the abort method from retryRequest
        non-GET requests
          ✔ should not use retryRequest
          ✔ should set the writable stream
          ✔ should expose the abort method from request
      callback mode
        ✔ should pass the default options to retryRequest
        ✔ should allow setting a custom retry function
        ✔ should allow turning off retries to retryRequest
        ✔ should override number of retries to retryRequest
        ✔ should use retryOptions if provided
        ✔ should allow request options to control retry setting
        ✔ should return the instance of retryRequest
        ✔ should let handleResp handle the response
    decorateRequest
      ✔ should delete qs.autoPaginate
      ✔ should delete qs.autoPaginateVal
      ✔ should delete objectMode
      ✔ should delete qs.autoPaginate
      ✔ should delete qs.autoPaginateVal
      ✔ should delete json.autoPaginate
      ✔ should delete json.autoPaginateVal
      ✔ should replace project ID tokens for qs object
      ✔ should replace project ID tokens for multipart array
      ✔ should replace project ID tokens for json object
      ✔ should decorate the request
    isCustomType
      Service objects
        ✔ should match by constructor name
        ✔ should support any casing
        ✔ should not match if the wrong Service
      ServiceObject objects
        ✔ should match by constructor names
        ✔ should support any casing
        ✔ should not match if the wrong ServiceObject
    getUserAgentFromPackageJson
      ✔ should format a User Agent string from a package.json
    maybeOptionsOrCallback
      ✔ should allow passing just a callback
      ✔ should allow passing both opts and callback

  Notification
    instantiation
      ✔ should promisify all the things
      ✔ should inherit from ServiceObject
      ✔ should use Bucket#createNotification for the createMethod
      ✔ should convert number IDs to strings
    delete
      ✔ should make the correct request
      ✔ should optionally accept options
      ✔ should optionally accept a callback
    get
      ✔ should get the metadata
      ✔ should accept an options object
      ✔ should execute callback with error & metadata
      ✔ should execute callback with instance & metadata
      autoCreate
        ✔ should pass config to create if it was provided
        ✔ should pass only a callback to create if no config
        error
          ✔ should execute callback with error & API response
          ✔ should refresh the metadata after a 409
    getMetadata
      ✔ should make the correct request
      ✔ should optionally accept options
      ✔ should return any errors to the callback
      ✔ should set and return the metadata

  resumable-upload
    ✔ currentInvocationId.offset should be different after success
    ✔ currentInvocationId.offset should be the same on error
    ctor
      ✔ should be a Writable
      ✔ should throw if a bucket or file is not given
      ✔ should localize the bucket
      ✔ should localize the cacheKey
      ✔ should localize customRequestOptions
      ✔ should default customRequestOptions to empty object
      ✔ should include ZERO generation value in the cacheKey
      ✔ should not include a generation in the cacheKey if it was not set
      ✔ should localize the file
      ✔ should localize the generation
      ✔ should localize the apiEndpoint
      ✔ should prepend https:// to apiEndpoint if not present
      ✔ should localize the KMS key name
      ✔ should localize metadata or default to empty object
      ✔ should set the offset if it is provided
      ✔ should localize the origin
      ✔ should localize the params
      ✔ should localize userProject
      ✔ should localize an encryption object from a key
      ✔ should localize the predefinedAcl
      ✔ should set the predefinedAcl with public: true
      ✔ should set the predefinedAcl with private: true
      ✔ should set numBytesWritten to 0
      ✔ should set numRetries to 0
      ✔ should set the contentLength if provided
      ✔ should default the contentLength to *
      ✔ should localize the uri
      ✔ should not have `chunkSize` by default
      ✔ should accept and set `chunkSize`
      on write
        ✔ should emit 'writing' when piped
        ✔ should set `upstreamEnded` to `true` and emit 'upstreamFinished' on `#end()`
        ✔ should continue uploading
        ✔ should create an upload
        ✔ should destroy the stream from an error
    upstream
      ✔ should handle writes to class
      ✔ should setup a 'uploadFinished' handler on 'upstreamFinished'
      ✔ should finish only after 'uploadFinished' is emitted
    #_write
      ✔ should append buffer to existing `upstreamChunkBuffer`
      ✔ should convert string with encoding to Buffer and append to existing `upstreamChunkBuffer`
      ✔ should callback on 'readFromChunkBuffer'
      ✔ should emit 'wroteToChunkBuffer' asynchronously
    #unshiftChunkBuffer
      ✔ should synchronously prepend to existing buffer
    #pullFromChunkBuffer
      ✔ should retrieve from the beginning of the `upstreamChunkBuffer`
      ✔ should retrieve no more than the limit provided
      ✔ should retrieve less than the limit if no more data is available
      ✔ should return all data if `Infinity` is provided
      ✔ should emit 'readFromChunkBuffer' asynchronously
    #waitForNextChunk
      ✔ should resolve `true` asynchronously if `upstreamChunkBuffer.byteLength` has data
      ✔ should resolve `false` asynchronously if `upstreamEnded`
      ✔ should resolve `true` asynchronously if `upstreamChunkBuffer.byteLength` and `upstreamEnded`
      ✔ should wait for `wroteToChunkBuffer` if !`upstreamChunkBuffer.byteLength` && !`upstreamEnded`
      ✔ should wait for 'upstreamFinished' if !`upstreamChunkBuffer.byteLength` && !`upstreamEnded`
      ✔ should wait for 'upstreamFinished' and resolve `false` if data is not available
      ✔ should wait for 'upstreamFinished' and resolve `true` if data is available
      ✔ should wait for 'upstreamFinished' if !`upstreamChunkBuffer.byteLength` && !`upstreamEnded`
      ✔ should wait for 'upstreamFinished' and resolve `false` if data is not available
      ✔ should wait for 'upstreamFinished' and resolve `true` if data is available
      ✔ should remove listeners after calling back from `wroteToChunkBuffer`
      ✔ should remove listeners after calling back from 'upstreamFinished'
    #upstreamIterator
      ✔ should yield all data from upstream by default
      ✔ should yield up to limit if provided
      ✔ should yield less than the limit if that's all that's available
      ✔ should yield many, arbitrarily sized chunks by default
      ✔ should yield one single chunk if `oneChunkMode`
    #createURI
      ✔ should make the correct request
      ✔ should pass through the KMS key name
      ✔ should respect 0 as a generation
      error
        ✔ should exec callback with error
        ✔ currentInvocationId.uri should remain the same on error
      success
        ✔ should localize the uri
        ✔ should default the offset to 0
        ✔ should exec callback with URI
        ✔ currentInvocationId.uri should be different after success
    #continueUploading
      ✔ should start uploading if an offset was set
      ✔ should get and set offset if no offset was set
      ✔ should start uploading when done
    #startUploading
      ✔ should reset `numChunksReadInRequest` to 0
      ✔ should set `offset` to 0 when not set
      ✔ should emit error if `offset` < `numBytesWritten`
      ✔ should 'fast-forward' upstream if `numBytesWritten` < `offset`
      ✔ should emit a progress event with the bytes written
      ✔ should destroy the stream if the request failed
      ✔ should retry retryable errors if the request failed
      request preparation
        single chunk
          ✔ should use `contentLength` and `offset` if set
          ✔ should prepare a valid request if `contentLength` is unknown
        multiple chunk
          ✔ should use `chunkSize` if less than `contentLength`
          ✔ should prepare a valid request if `contentLength` is unknown
          ✔ should prepare a valid request if the remaining data is less than `chunkSize`
    #responseHandler
      ✔ should emit the metadata
      ✔ should return response data size as number
      ✔ should destroy the stream if an error occurred
      ✔ should destroy the stream if the status code is out of range
      ✔ should continue with multi-chunk upload when incomplete
      ✔ should unshift missing data if server did not receive the entire chunk
      ✔ currentInvocationId.chunk should be different after success
      ✔ currentInvocationId.chunk should be the same after error
    #getAndSetOffset
      ✔ should make the correct request
      ✔ should set the offset from the range
      ✔ should set the offset to 0 if no range is back from the API
      ✔ should retry retryable errors if the request failed
    #makeRequest
      ✔ should set encryption headers
      ✔ should set userProject
      ✔ should set validate status
      ✔ should make the correct request
      ✔ should bypass authentication if emulator context detected
      ✔ should combine customRequestOptions
      ✔ should execute the callback with a body error & response
      ✔ should execute the callback with a body error & response for non-2xx status codes
      ✔ should execute the callback
    #makeRequestStream
      ✔ should pass a signal from the abort controller
      ✔ should abort on an error
      ✔ should set userProject
      ✔ should not remove existing params when userProject is set
      ✔ should always validate the status
      ✔ should combine customRequestOptions
      ✔ should pass the response to the handler
      ✔ should return the response if successful
      ✔ should return `null` if the response is unsuccessful
    #onResponse
      500s
        ✔ should increase the retry count if less than limit
        ✔ should destroy the stream if greater than limit
        exponential back off
          ✔ should continue uploading after retry count^2 * random
      all others
        ✔ should emit the response on the stream
        ✔ should return true
        ✔ should handle a custom status code when passed a retry function
    #attemptDelayedRetry
      ✔ should increment numRetries
      ✔ should call `startUploading` on 404 && !this.numChunksReadInRequest
      ✔ should not call `startUploading` when on 404 && this.numChunksReadInRequest != 0
      ✔ should not call `startUploading` when !this.numChunksReadInRequest && status != 404
      ✔ should call `getRetryDelay` when not calling `startUploading`
      ✔ should unshift last buffer, unset `offset`, and call `continueUploading` when not calling `startUploading`
      ✔ should destroy if retry total time limit exceeded (0)
      ✔ should destroy if retry total time limit exceeded (< 0)
      ✔ should destroy the object if this.numRetries > this.retryLimit
      ✔ should destroy the object if this.numRetries === this.retryLimit
    PROTOCOL_REGEX
      ✔ should match a protocol
    #sanitizeEndpoint
      ✔ should default protocol to https
      ✔ should not override protocol
      ✔ should remove trailing slashes from URL
    #getRetryDelay
      ✔ should return exponential retry delay
      ✔ allows overriding the delay multiplier
      ✔ allows overriding the number of retries
      ✔ returns the value of totaltimeout when calculated values are larger
    upload
      single chunk
        ✔ should make the correct request
      multiple chunk
        ✔ should make the correct requests
      empty object
        ✔ should support uploading empty objects

  signer
    URLSigner
      URLSigner constructor
        ✔ should localize authClient
        ✔ should localize bucket
        ✔ should localize file
      getSignedUrl
        ✔ should URI encode file name with special characters
        ✔ should generate URL with given cname
        ✔ should remove trailing slashes from cname
        ✔ should generate virtual hosted style URL
        ✔ should generate path styled URL
        ✔ should generate URL with returned query params appended
        version
          ✔ should default to v2 if version is not given
          ✔ should use v2 if set
          ✔ should use v4 if set
          ✔ should error for an invalid version
        accessibleAt
          ✔ should set correct settings if accessibleAt provided
          ✔ should throw if an expiration date from the before accessibleAt date is given
          checkInputTypes
            ✔ should accept Date objects
            ✔ should accept numbers
            ✔ should accept strings
            ✔ should throw if a date is invalid
        expires
          ✔ should parse Date object into expiration seconds
        URL style
          ✔ should pass cname
          ✔ should pass virtual host to cname
          ✔ should take precedence in cname if both passed
          ✔ should not pass cname parameter
        composing signed URL
          ✔ shuold insert user-provided queryParams
      getSignedUrlV2
        ✔ should return v2 query
        ✔ rejects with SigningError on signing Error
        blobToSign
          ✔ should sign method
          ✔ should sign contentMd5 if given
          ✔ should sign contentType if given
          ✔ should sign expiration
          ✔ should sign canonical headers
          ✔ should sign resource path
          ✔ should compose blobToSign without contentMd5 and contentType
      getSignedUrlV4
        ✔ should fail for expirations beyond 7 days
        ✔ should build canonical request
        ✔ should compute SHA256 digest in hex on canonical request
        ✔ should compose blobToSign
        ✔ rejects with SigningError on signing Error
        ✔ should returns query params with signature
        headers
          ✔ should add path-styled host header
          ✔ should add cname as host header
          ✔ should strip trailing slashes from host
          ✔ should add Content-MD5 to header
          ✔ should add Content-Type to header
          ✔ should merge extensionHeaders
          ✔ should throw if x-goog-content-sha256 header is not a hash
        query parameters
          ✔ should populate X-Goog-Algorithm
          ✔ should populate X-Goog-Credential
          ✔ should populate X-Goog-Date
          ✔ should populate X-Goog-Expires
          ✔ should lowercase and sort signed headers, and populate X-Goog-SignedHeaders
          ✔ should merge user-provided queryParams
      getCanonicalHeaders
        ✔ should accept multi-valued header as an array
        ✔ should lowercase and then sort header names
        ✔ should trim leading and trailing space
        ✔ should convert sequential spaces into single space
      getCanonicalRequest
        ✔ should return canonical request string with unsigned-payload
        ✔ should include contentSha256 value if not undefined
      getCanonicalQueryParams
        ✔ should encode key
        ✔ should encode value
        ✔ should sort by key
      getResourcePath
        ✔ should not include bucket with cname
        ✔ should include file name
        ✔ should return path with no file name
      parseExpires
        ✔ throws invalid date
        ✔ throws if expiration is in the past
        ✔ returns expiration date in seconds
    SigningError
      ✔ should extend from Error

  Transfer Manager
    instantiation
      ✔ should correctly set the bucket
    uploadManyFiles
      ✔ calls upload with the provided file paths
      ✔ sets ifGenerationMatch to 0 if skipIfExists is set
      ✔ sets destination to prefix + filename when prefix is supplied
      ✔ returns a promise with the uploaded file if there is no callback
    downloadManyFiles
      ✔ calls download for each provided file
      ✔ sets the destination correctly when provided a prefix
      ✔ sets the destination correctly when provided a strip prefix
    downloadFileInChunks
      ✔ should download a single chunk if file size is below threshold
      ✔ should call fromFile when validation is set to crc32c


  1083 passing (8s)

---------------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                                   | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                       
---------------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                              |   93.37 |    91.16 |   91.94 |   93.37 |                                                                                                                                                                         
 nodejs-storage                        |      50 |       20 |       0 |      50 |                                                                                                                                                                         
  .mocharc.js                          |   79.31 |       25 |     100 |   79.31 | 21-22,24-25,27-28                                                                                                                                                       
  .prettierrc.js                       |       0 |        0 |       0 |       0 | 1-17                                                                                                                                                                    
 nodejs-storage/internal-tooling       |       0 |        0 |       0 |       0 |                                                                                                                                                                         
  performApplicationPerformanceTest.ts |       0 |        0 |       0 |       0 | 1-191                                                                                                                                                                   
  performPerformanceTest.ts            |       0 |        0 |       0 |       0 | 1-134                                                                                                                                                                   
  performTransferManagerTest.ts        |       0 |        0 |       0 |       0 | 1-250                                                                                                                                                                   
  performanceTest.ts                   |       0 |        0 |       0 |       0 | 1-152                                                                                                                                                                   
  performanceUtils.ts                  |       0 |        0 |       0 |       0 | 1-226                                                                                                                                                                   
 nodejs-storage/src                    |   98.53 |    90.46 |   92.48 |   98.53 |                                                                                                                                                                         
  acl.ts                               |   99.66 |    97.72 |     100 |   99.66 | 323-325                                                                                                                                                                 
  bucket.ts                            |   99.09 |    82.67 |    97.5 |   99.09 | 708-710,2135-2136,2141-2142,2151,2235-2236,2332-2333,2335-2336,2430-2431,3232-3233,3236-3238,3241-3243,3246-3248,3877-3880,4159-4160,4163-4164,4171,4173,4192,4229-4230 
  channel.ts                           |     100 |      100 |     100 |     100 |                                                                                                                                                                         
  crc32c.ts                            |     100 |      100 |     100 |     100 |                                                                                                                                                                         
  file.ts                              |      98 |    93.28 |   93.02 |      98 | 611,927,1246-1248,2009-2017,2043-2063,3115-3117,3720-3744,4010-4028                                                                                                     
  hash-stream-validator.ts             |   96.87 |    88.88 |     100 |   96.87 | 91-93                                                                                                                                                                   
  hmacKey.ts                           |   93.75 |      100 |      50 |   93.75 | 383-408                                                                                                                                                                 
  iam.ts                               |     100 |      100 |     100 |     100 |                                                                                                                                                                         
  index.ts                             |     100 |      100 |    37.5 |     100 |                                                                                                                                                                         
  notification.ts                      |     100 |      100 |     100 |     100 |                                                                                                                                                                         
  resumable-upload.ts                  |   97.73 |    92.02 |    90.9 |   97.73 | 337-338,561-563,566-567,607,738-741,916-917,1052-1061                                                                                                                   
  signer.ts                            |     100 |    97.36 |     100 |     100 | 149,278                                                                                                                                                                 
  storage.ts                           |   99.29 |    90.59 |   85.71 |   99.29 | 283-287,494-496,499-501                                                                                                                                                 
  transfer-manager.ts                  |   92.98 |    73.52 |      80 |   92.98 | 132,150-154,162-163,237-240,244-245,364,373-384                                                                                                                         
  util.ts                              |   96.68 |    91.42 |     100 |   96.68 | 115-116,118-119,202-204                                                                                                                                                 
 nodejs-storage/src/nodejs-common      |   99.49 |    97.43 |     100 |   99.49 |                                                                                                                                                                         
  index.ts                             |     100 |      100 |     100 |     100 |                                                                                                                                                                         
  service-object.ts                    |   99.67 |    98.36 |     100 |   99.67 | 557-558                                                                                                                                                                 
  service.ts                           |   99.64 |    96.77 |     100 |   99.64 | 255                                                                                                                                                                     
  util.ts                              |   99.32 |    97.17 |     100 |   99.32 | 413-414,579,705-708                                                                                                                                                     
---------------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
https://github.com/Azure/ms-rest-azure-js.git
dist/msRestAzure.js
DirectBloated/ms-rest-azure-js
ms-rest-azure-js
a9cee44
https://github.com/dstructs/matrix.git
lib/index.js
DirectBloated/matrix
matrix
56a60fb

added 160 packages, and audited 161 packages in 12s

4 packages are looking for funding
  run `npm fund` for details

11 vulnerabilities (2 moderate, 6 high, 3 critical)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> dstructs-matrix@2.1.2 test
> mocha



  btypes

    ✓ should export an object

  Matrix

    ✓ should export a function

    ✓ should have an arity of 5

    ✓ should create a new Matrix instance

    ✓ should not require a `new` operator

    ✓ should create a Matrix having setters

    ✓ should create a Matrix having getters

    ✓ should create a Matrix having a custom toString method

    ✓ should create a Matrix having a custom toJSON method

    ✓ should create a Matrix having a protected dtype property

    ✓ should create a Matrix having a protected shape property

    ✓ should create a Matrix having a protected strides property

    ✓ should create a Matrix having an offset property

    ✓ should create a Matrix having a protected ndims property

    ✓ should create a Matrix having a protected length property

    ✓ should create a Matrix having a protected nbytes property

    ✓ should create a Matrix having a protected data property

  Matrix.raw

    ✓ should export a function

    ✓ should have an arity of 5

    ✓ should create a new Matrix instance

    ✓ should not require a `new` operator

    ✓ should create a Matrix having setters

    ✓ should create a Matrix having getters

    ✓ should create a Matrix having a custom toString method

    ✓ should create a Matrix having a custom toJSON method

    ✓ should create a Matrix having a dtype property

    ✓ should create a Matrix having a shape property

    ✓ should create a Matrix having a strides property

    ✓ should create a Matrix having an offset property

    ✓ should create a Matrix having a ndims property

    ✓ should create a Matrix having a length property

    ✓ should create a Matrix having a nbytes property

    ✓ should create a Matrix having a data property

  dtypes

    ✓ should export an array

  matrix#get

    ✓ should export a function

    ✓ should throw an error if provided a row index which is not a nonnegative integer

    ✓ should throw an error if provided a column index which is not a nonnegative integer

    ✓ should return a Matrix element

    ✓ should return undefined if provided an out-of-bounds index

  matrix.raw#get

    ✓ should export a function

    ✓ should return a Matrix element

    ✓ should return undefined if provided an out-of-bounds index

  matrix#iget

    ✓ should export a function

    ✓ should throw an error if not provided an integer

    ✓ should return a Matrix element

    ✓ should accept negative indices

    ✓ should return undefined if provided an out-of-bounds index

  matrix.raw#iget

    ✓ should export a function

    ✓ should return a Matrix element

    ✓ should accept negative indices

    ✓ should return undefined if provided an out-of-bounds index

  matrix#iset

    ✓ should export a function

    ✓ should throw an error if not provided an integer

    ✓ should throw an error if provided a non-numeric value to set

    ✓ should set a Matrix element

    ✓ should set a Matrix element to NaN

    ✓ should accept negative indices

    ✓ should return the Matrix instance

    ✓ should silently fail if provided an out-of-bounds index

  matrix.raw#iset

    ✓ should export a function

    ✓ should set a Matrix element

    ✓ should accept negative indices

    ✓ should return the Matrix instance

    ✓ should silently fail if provided an out-of-bounds index

  dstructs-matrix

    ✓ should export a function

    ✓ should export a lower-level (raw) interface

  matrix

    ✓ should export a function

    ✓ should throw an error if provided a shape argument which is not a nonnegative integer array

    ✓ should throw an error if provided a shape array which does not contain exactly 2 elements

    ✓ should throw an error if provided an unrecognized/unsupported data type

    ✓ should throw an error if provided data which is an unrecognized/unsupported data type

    ✓ should throw an error if the matrix shape does not match the input data length

    ✓ should return a new Matrix instance

    ✓ should return a new Matrix instance of a specified type

    ✓ should initialize a zero-filled Matrix if not provided input data (default dtype float64)

    ✓ should initialize a zero-filled Matrix having a specified data type if not provided input data

    ✓ should cast input data to a specified type

    ✓ should cast a plain array to a float64

  matrix.raw

    ✓ should export a function

    ✓ should throw an error if provided a shape array which does not contain exactly 2 elements

    ✓ should throw an error if provided data which is an unrecognized/unsupported data type

    ✓ should throw an error if the matrix shape does not match the input data length

    ✓ should return a new Matrix instance

    ✓ should return a new Matrix instance of a specified type

    ✓ should initialize a zero-filled Matrix if not provided input data (default dtype float64)

    ✓ should initialize a zero-filled Matrix having a specified data type if not provided input data

  matrix#mget

    ✓ should export a function

    ✓ should throw an error if provided a linear indices argument which is not a nonnegative integer array

    ✓ should throw an error if provided a row indices argument which is not a nonnegative integer array

    ✓ should throw an error if provided a column indices argument which is not a nonnegative integer array

    ✓ should return values located at specified linear indices

    ✓ should return values located at specified linear indices and ignore any indices which are out-of-bounds

    ✓ should return all rows and select columns

    ✓ should return all columns and select rows

    ✓ should ignore out-of-bounds row and column indices

    ✓ should return an empty matrix if provided indices which have no corresponding matrix elements

    ✓ should not dedupe indices

  matrix.raw#mget

    ✓ should export a function

    ✓ should return values located at specified linear indices

    ✓ should return all rows and select columns

    ✓ should return all columns and select rows

    ✓ should not dedupe indices

  matrix#mset

    ✓ should export a function

    ✓ should throw an error if provided a linear indices argument which is not a nonnegative integer array

    ✓ should throw an error if provided a row indices argument which is not a nonnegative integer array

    ✓ should throw an error if provided a column indices argument which is not a nonnegative integer array

    ✓ should throw an error if provided 4 arguments and the third argument is not a function

    ✓ should throw an error if the number of linear indices and the number of matrix elements do not agree

    ✓ should throw an error if dimensions defined by row and column indices do not agree with value matrix dimensions

    ✓ should set Matrix values located at specified linear indices to a numeric value

    ✓ should set Matrix values located at specified linear indices to NaN

    ✓ should set Matrix values located at specified linear indices using a callback

    ✓ should set Matrix values located at specified linear indices using a callback and a provided context

    ✓ should set Matrix values located at specified linear indices to values from a different Matrix

    ✓ should set values located at specified linear indices and ignore any indices which are out-of-bounds

    ✓ should set all rows and select columns

    ✓ should set select rows and all columns

    ✓ should ignore out-of-bounds row and column indices

    ✓ should not dedupe indices

  matrix.raw#mset

    ✓ should export a function

    ✓ should throw an error if the number of linear indices and the number of matrix elements do not agree

    ✓ should throw an error if dimensions defined by row and column indices do not agree with value matrix dimensions

    ✓ should set Matrix values located at specified linear indices to a numeric value

    ✓ should set Matrix values located at specified linear indices using a callback

    ✓ should set Matrix values located at specified linear indices using a callback and a provided context

    ✓ should set Matrix values located at specified linear indices to values from a different Matrix

    ✓ should set all rows and select columns

    ✓ should set select rows and all columns

    ✓ should not dedupe indices

  matrix#set

    ✓ should export a function

    ✓ should throw an error if provided a row index which is not a nonnegative integer

    ✓ should throw an error if provided a column index which is not a nonnegative integer

    ✓ should throw an error if provided a non-numeric value to set

    ✓ should set a Matrix element

    ✓ should set a Matrix element to NaN

    ✓ should return the Matrix instance

    ✓ should silently fail if provided an out-of-bounds index

  matrix.raw#set

    ✓ should export a function

    ✓ should set a Matrix element

    ✓ should return the Matrix instance

    ✓ should silently fail if provided an out-of-bounds index

  matrix#sget

    ✓ should export a function

    ✓ should throw an error if not provided a string

    ✓ should throw an error if provided a string which does not have row and column subsequences

    ✓ should return values according to a specified subsequence

    ✓ should return an empty matrix if a subsequence does not have any corresponding matrix elements

  matrix.raw#sget

    ✓ should export a function

    ✓ should return values according to a specified subsequence

    ✓ should return an empty matrix if a subsequence does not have any corresponding matrix elements

  matrix#sset

    ✓ should export a function

    ✓ should throw an error if not provided a string

    ✓ should throw an error if provided a string which does not have row and column subsequences

    ✓ should throw an error if provided a value matrix with dimensions which do not match the dimensions determined by the row and column subsequences

    ✓ should return the Matrix instance

    ✓ should silently ignore out-of-bounds subsequences

    ✓ should set Matrix elements using a callback

    ✓ should set Matrix elements using a callback and a provided context

    ✓ should set Matrix elements to a single numeric value

    ✓ should set Matrix elements to NaN

    ✓ should set Matrix elements to elements in a different Matrix

  matrix.raw#sset

    ✓ should export a function

    ✓ should throw an error if provided a value matrix with dimensions which do not match the dimensions determined by the row and column subsequences

    ✓ should return the Matrix instance

    ✓ should silently ignore out-of-bounds subsequences

    ✓ should set Matrix elements using a callback

    ✓ should set Matrix elements using a callback and a provided context

    ✓ should set Matrix elements to a single numeric value

    ✓ should set Matrix elements to elements in a different Matrix

  matrix#toString

    ✓ should export a function

    ✓ should convert a Matrix instance to a string

    ✓ should convert a raw Matrix instance to a string

  matrix#toJSON

    ✓ should export a function

    ✓ should return a Matrix instance in JSON representation

    ✓ should return a raw Matrix instance in JSON presentation

    ✓ should deep copy properties to prevent accidental mutation


  175 passing (77ms)

https://github.com/jsdoc2md/jsdoc-api.git
index.js
DirectBloated/jsdoc-api
jsdoc-api
fd79eb5

added 195 packages, and audited 196 packages in 2s

10 packages are looking for funding
  run `npm fund` for details

3 high severity vulnerabilities

To address all issues, run:
  npm audit fix

Run `npm audit` for details.

> jsdoc-api@8.0.0 test
> test-runner --max-file-concurrency 1 test/*.js


[37mStart: 16 tests loaded[0m

[32m✓[0m [35mjsdoc-api | caching [0m.explainSync({ files, cache: true }) [38;2;100;100;0m272.6ms[0m
[32m✓[0m [35mjsdoc-api | caching [0m.explain({ files, cache: true  }) [38;2;100;100;0m268.3ms[0m
[32m✓[0m [35mjsdoc-api | caching [0m.explain({ source, cache: true  }) - Ensure correct output (#147) [38;2;100;100;0m492.0ms[0m
[32m✓[0m [35mjsdoc-api | explain-sync [0m.explainSync({ files }) [38;2;100;100;0m260.5ms[0m
[32m✓[0m [35mjsdoc-api | explain-sync [0m.explainSync({ source }) [38;2;100;100;0m257.8ms[0m
[32m✓[0m [35mjsdoc-api | explain-sync [0m.explainSync({ source }), defaults [38;2;100;100;0m227.0ms[0m
[32m✓[0m [35mjsdoc-api | explain-sync [0m.explainSync: no valid files [38;2;100;100;0m161.3ms[0m
[32m✓[0m [35mjsdoc-api | explain-sync [0m.explainSync: missing files [38;2;100;100;0m2.8ms[0m
[32m✓[0m [35mjsdoc-api | explain-sync [0m.explainSync: invalid doclet syntax [38;2;100;100;0m241.1ms[0m
[32m✓[0m [35mjsdoc-api | explain [0m.explain: file doesn't exist [38;2;100;100;0m8.0ms[0m
[32m✓[0m [35mjsdoc-api | explain [0m.explain({ files }): generate a warning [[object Object],[object Object]] [38;2;100;100;0m238.1ms[0m
[32m✓[0m [35mjsdoc-api | explain [0m.explain: invalid doclet syntax [38;2;100;100;0m268.7ms[0m
[32m✓[0m [35mjsdoc-api | explain [0m.explain({ source }) [38;2;100;100;0m288.2ms[0m
[32m✓[0m [35mjsdoc-api | explain [0m.explain({ files }) [38;2;100;100;0m303.4ms[0m
[32m✓[0m [35mjsdoc-api | render-sync [0m.renderSync({ files }) [38;2;100;100;0m313.6ms[0m
[32m✓[0m [35mjsdoc-api | render-sync [0m.renderSync({ source, destination }) [38;2;100;100;0m300.1ms[0m

[37mCompleted in 0ms. Pass: [32m16[0m, fail: [37m0[0m, skip: [37m0[0m.[0m

https://github.com/inspect-js/node-deep-equal.git
index.js
DirectBloated/node-deep-equal
node-deep-equal
b9d9e54

> deep-equal@2.2.0 prepublish
> not-in-publish || npm run prepublishOnly


added 510 packages, and audited 693 packages in 18s

91 packages are looking for funding
  run `npm fund` for details

27 vulnerabilities (4 low, 13 moderate, 7 high, 3 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues possible (including breaking changes), run:
  npm audit fix --force

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.

> deep-equal@2.2.0 pretest
> npm run lint


> deep-equal@2.2.0 lint
> eslint --ext=js,mjs .


/data/js-variants/multee/DirectBloated/node-deep-equal/test/cmp.js
  12:61  warning  new Buffer() is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead  no-buffer-constructor

✖ 1 problem (0 errors, 1 warning)


> deep-equal@2.2.0 test
> npm run tests-only


> deep-equal@2.2.0 tests-only
> nyc tape 'test/**/*.js'

TAP version 13
# equal
ok 1 two equal objects are equal
ok 2 two equal objects are equal (reversed)
ok 3 strict: two equal objects are equal
ok 4 strict: two equal objects are equal (reversed)
ok 5 two loosely equal, strictly inequal objects are equal
ok 6 two loosely equal, strictly inequal objects are equal (reversed)
ok 7 strict: two loosely equal, strictly inequal objects are not equal
ok 8 strict: two loosely equal, strictly inequal objects are not equal (reversed)
ok 9 two inequal objects are not equal
ok 10 two inequal objects are not equal (reversed)
ok 11 strict: two inequal objects are not equal
ok 12 strict: two inequal objects are not equal (reversed)
ok 13 `false` and `"-000"` are equal
ok 14 `false` and `"-000"` are equal (reversed)
ok 15 strict: `false` and `"-000"` are not equal
ok 16 strict: `false` and `"-000"` are not equal (reversed)
# Maps
ok 17 two equal Maps are equal
ok 18 two equal Maps are equal (reversed)
ok 19 strict: two equal Maps are equal
ok 20 strict: two equal Maps are equal (reversed)
ok 21 two Maps with inequal values on the same key are not equal
ok 22 two Maps with inequal values on the same key are not equal (reversed)
ok 23 strict: two Maps with inequal values on the same key are not equal
ok 24 strict: two Maps with inequal values on the same key are not equal (reversed)
ok 25 two inequal Maps are not equal
ok 26 two inequal Maps are not equal (reversed)
ok 27 strict: two inequal Maps are not equal
ok 28 strict: two inequal Maps are not equal (reversed)
ok 29 two equal Maps in different orders with object keys are equal
ok 30 two equal Maps in different orders with object keys are equal (reversed)
ok 31 strict: two equal Maps in different orders with object keys are equal
ok 32 strict: two equal Maps in different orders with object keys are equal (reversed)
ok 33 undefined keys, nullish values, loosely equal, strictly inequal are equal
ok 34 undefined keys, nullish values, loosely equal, strictly inequal are equal (reversed)
ok 35 strict: undefined keys, nullish values, loosely equal, strictly inequal are not equal
ok 36 strict: undefined keys, nullish values, loosely equal, strictly inequal are not equal (reversed)
ok 37 two equal Maps in different orders with primitive keys are equal
ok 38 two equal Maps in different orders with primitive keys are equal (reversed)
ok 39 strict: two equal Maps in different orders with primitive keys are equal
ok 40 strict: two equal Maps in different orders with primitive keys are equal (reversed)
ok 41 two equal Maps in different orders with a mix of keys are equal
ok 42 two equal Maps in different orders with a mix of keys are equal (reversed)
ok 43 strict: two equal Maps in different orders with a mix of keys are equal
ok 44 strict: two equal Maps in different orders with a mix of keys are equal (reversed)
ok 45 null keys, nullish values, loosely equal, strictly inequal are equal
ok 46 null keys, nullish values, loosely equal, strictly inequal are equal (reversed)
ok 47 strict: null keys, nullish values, loosely equal, strictly inequal are not equal
ok 48 strict: null keys, nullish values, loosely equal, strictly inequal are not equal (reversed)
ok 49 nullish keys, loosely equal, strictly inequal are equal
ok 50 nullish keys, loosely equal, strictly inequal are equal (reversed)
ok 51 strict: nullish keys, loosely equal, strictly inequal are not equal
ok 52 strict: nullish keys, loosely equal, strictly inequal are not equal (reversed)
ok 53 two equal Maps in different orders with primitive keys are equal
ok 54 two equal Maps in different orders with primitive keys are equal (reversed)
ok 55 strict: two equal Maps in different orders with primitive keys are equal
ok 56 strict: two equal Maps in different orders with primitive keys are equal (reversed)
ok 57 two equal Maps in different orders with a mix of keys are equal
ok 58 two equal Maps in different orders with a mix of keys are equal (reversed)
ok 59 strict: two equal Maps in different orders with a mix of keys are equal
ok 60 strict: two equal Maps in different orders with a mix of keys are equal (reversed)
ok 61 two inequal Maps are not equal
ok 62 two inequal Maps are not equal (reversed)
ok 63 strict: two inequal Maps are not equal
ok 64 strict: two inequal Maps are not equal (reversed)
ok 65 two inequal maps, same size, primitive key, start with object key are not equal
ok 66 two inequal maps, same size, primitive key, start with object key are not equal (reversed)
ok 67 strict: two inequal maps, same size, primitive key, start with object key are not equal
ok 68 strict: two inequal maps, same size, primitive key, start with object key are not equal (reversed)
ok 69 two inequal maps, same size, primitive key, start with primitive key are not equal
ok 70 two inequal maps, same size, primitive key, start with primitive key are not equal (reversed)
ok 71 strict: two inequal maps, same size, primitive key, start with primitive key are not equal
ok 72 strict: two inequal maps, same size, primitive key, start with primitive key are not equal (reversed)
ok 73 primitive comparisons are equal
ok 74 primitive comparisons are equal (reversed)
ok 75 strict: primitive comparisons are not equal
ok 76 strict: primitive comparisons are not equal (reversed)
# WeakMaps
ok 77 two equal WeakMaps are equal
ok 78 two equal WeakMaps are equal (reversed)
ok 79 strict: two equal WeakMaps are equal
ok 80 strict: two equal WeakMaps are equal (reversed)
ok 81 two WeakMaps with inequal values on the same key are equal
ok 82 two WeakMaps with inequal values on the same key are equal (reversed)
ok 83 strict: two WeakMaps with inequal values on the same key are equal
ok 84 strict: two WeakMaps with inequal values on the same key are equal (reversed)
ok 85 two inequal WeakMaps are equal
ok 86 two inequal WeakMaps are equal (reversed)
ok 87 strict: two inequal WeakMaps are equal
ok 88 strict: two inequal WeakMaps are equal (reversed)
# Sets
ok 89 two equal Sets are equal
ok 90 two equal Sets are equal (reversed)
ok 91 strict: two equal Sets are equal
ok 92 strict: two equal Sets are equal (reversed)
ok 93 two inequal Sets are not equal
ok 94 two inequal Sets are not equal (reversed)
ok 95 strict: two inequal Sets are not equal
ok 96 strict: two inequal Sets are not equal (reversed)
ok 97 two equal Sets in different orders are equal
ok 98 two equal Sets in different orders are equal (reversed)
ok 99 strict: two equal Sets in different orders are equal
ok 100 strict: two equal Sets in different orders are equal (reversed)
ok 101 two inequally sized Sets are not equal
ok 102 two inequally sized Sets are not equal (reversed)
ok 103 strict: two inequally sized Sets are not equal
ok 104 strict: two inequally sized Sets are not equal (reversed)
ok 105 two loosely equal, strictly inequal Sets are equal
ok 106 two loosely equal, strictly inequal Sets are equal (reversed)
ok 107 strict: two loosely equal, strictly inequal Sets are not equal
ok 108 strict: two loosely equal, strictly inequal Sets are not equal (reversed)
ok 109 two inequal Sets are not equal
ok 110 two inequal Sets are not equal (reversed)
ok 111 strict: two inequal Sets are not equal
ok 112 strict: two inequal Sets are not equal (reversed)
ok 113 more primitive comparisons are equal
ok 114 more primitive comparisons are equal (reversed)
ok 115 strict: more primitive comparisons are not equal
ok 116 strict: more primitive comparisons are not equal (reversed)
# Set and Map
ok 117 Map and Set are not equal
ok 118 Map and Set are not equal (reversed)
ok 119 strict: Map and Set are not equal
ok 120 strict: Map and Set are not equal (reversed)
ok 121 Map-like Set, and Map are not equal
ok 122 Map-like Set, and Map are not equal (reversed)
ok 123 strict: Map-like Set, and Map are not equal
ok 124 strict: Map-like Set, and Map are not equal (reversed)
# WeakSets
ok 125 two equal WeakSets are equal
ok 126 two equal WeakSets are equal (reversed)
ok 127 strict: two equal WeakSets are equal
ok 128 strict: two equal WeakSets are equal (reversed)
ok 129 two inequal WeakSets are equal
ok 130 two inequal WeakSets are equal (reversed)
ok 131 strict: two inequal WeakSets are equal
ok 132 strict: two inequal WeakSets are equal (reversed)
# not equal
ok 133 two inequal objects are are not equal
ok 134 two inequal objects are are not equal (reversed)
ok 135 strict: two inequal objects are are not equal
ok 136 strict: two inequal objects are are not equal (reversed)
# nested nulls
ok 137 same-length arrays of nulls are equal
ok 138 strict: same-length arrays of nulls are equal
# objects with strings vs numbers
ok 139 objects with equivalent string/number values are equal
ok 140 objects with equivalent string/number values are equal (reversed)
ok 141 strict: objects with equivalent string/number values are not equal
ok 142 strict: objects with equivalent string/number values are not equal (reversed)
# non-objects
ok 143 same numbers are equal
ok 144 strict: same numbers are equal
ok 145 same strings are equal
ok 146 strict: same strings are equal
ok 147 numeric string and number are equal
ok 148 numeric string and number are equal (reversed)
ok 149 strict: numeric string and number are not equal
ok 150 strict: numeric string and number are not equal (reversed)
ok 151 numeric string and array containing number are not equal
ok 152 numeric string and array containing number are not equal (reversed)
ok 153 strict: numeric string and array containing number are not equal
ok 154 strict: numeric string and array containing number are not equal (reversed)
ok 155 number and array containing number are not equal
ok 156 number and array containing number are not equal (reversed)
ok 157 strict: number and array containing number are not equal
ok 158 strict: number and array containing number are not equal (reversed)
# infinities
ok 159 ∞ and ∞ are equal
ok 160 strict: ∞ and ∞ are equal
ok 161 -∞ and -∞ are equal
ok 162 strict: -∞ and -∞ are equal
ok 163 ∞ and -∞ are not equal
ok 164 ∞ and -∞ are not equal (reversed)
ok 165 strict: ∞ and -∞ are not equal
ok 166 strict: ∞ and -∞ are not equal (reversed)
# arguments class
ok 167 equivalent arguments objects are equal are equal
ok 168 strict: equivalent arguments objects are equal are equal
ok 169 array and arguments with same contents are not equal
ok 170 array and arguments with same contents are not equal (reversed)
ok 171 strict: array and arguments with same contents are not equal
ok 172 strict: array and arguments with same contents are not equal (reversed)
ok 173 args and similar arraylike object are not equal
ok 174 args and similar arraylike object are not equal (reversed)
ok 175 strict: args and similar arraylike object are not equal
ok 176 strict: args and similar arraylike object are not equal (reversed)
# Dates
ok 177 two Dates with the same timestamp are equal
ok 178 two Dates with the same timestamp are equal (reversed)
ok 179 strict: two Dates with the same timestamp are equal
ok 180 strict: two Dates with the same timestamp are equal (reversed)
ok 181 two Dates with the same timestamp but different own properties are not equal
ok 182 two Dates with the same timestamp but different own properties are not equal (reversed)
ok 183 strict: two Dates with the same timestamp but different own properties are not equal
ok 184 strict: two Dates with the same timestamp but different own properties are not equal (reversed)
ok 185 two identical Dates, one with an extra property are not equal
ok 186 two identical Dates, one with an extra property are not equal (reversed)
ok 187 strict: two identical Dates, one with an extra property are not equal
ok 188 strict: two identical Dates, one with an extra property are not equal (reversed)
ok 189 two inequal Dates are not equal
ok 190 two inequal Dates are not equal (reversed)
ok 191 strict: two inequal Dates are not equal
ok 192 strict: two inequal Dates are not equal (reversed)
# overriding `getTime`
ok 193 two Dates with the same timestamp but one has overridden `getTime` are equal
ok 194 two Dates with the same timestamp but one has overridden `getTime` are equal (reversed)
ok 195 strict: two Dates with the same timestamp but one has overridden `getTime` are equal
ok 196 strict: two Dates with the same timestamp but one has overridden `getTime` are equal (reversed)
# fake Date
ok 197 Date, and fake Date are not equal
ok 198 Date, and fake Date are not equal (reversed)
ok 199 strict: Date, and fake Date are not equal
ok 200 strict: Date, and fake Date are not equal (reversed)
# buffers
ok 201 buffers with same contents are equal are equal
ok 202 buffers with same contents are equal are equal (reversed)
ok 203 strict: buffers with same contents are equal are equal
ok 204 strict: buffers with same contents are equal are equal (reversed)
ok 205 buffers with same length and different contents are inequal are not equal
ok 206 buffers with same length and different contents are inequal are not equal (reversed)
ok 207 strict: buffers with same length and different contents are inequal are not equal
ok 208 strict: buffers with same length and different contents are inequal are not equal (reversed)
ok 209 buffers with different length are inequal are not equal
ok 210 buffers with different length are inequal are not equal (reversed)
ok 211 strict: buffers with different length are inequal are not equal
ok 212 strict: buffers with different length are inequal are not equal (reversed)
ok 213 buffers with different contents are not equal
ok 214 buffers with different contents are not equal (reversed)
ok 215 strict: buffers with different contents are not equal
ok 216 strict: buffers with different contents are not equal (reversed)
ok 217 empty buffer and empty array are not equal
ok 218 empty buffer and empty array are not equal (reversed)
ok 219 strict: empty buffer and empty array are not equal
ok 220 strict: empty buffer and empty array are not equal (reversed)
# bufferlikes
ok 221 real buffer, and mildly fake buffer are not equal
ok 222 real buffer, and mildly fake buffer are not equal (reversed)
ok 223 strict: real buffer, and mildly fake buffer are not equal
ok 224 strict: real buffer, and mildly fake buffer are not equal (reversed)
# bufferlike
ok 225 empty buffer and empty bufferlike are equal
ok 226 empty buffer and empty bufferlike are equal (reversed)
ok 227 strict: empty buffer and empty bufferlike are equal
ok 228 strict: empty buffer and empty bufferlike are equal (reversed)
# Arrays
ok 229 two identical arrays, one with an extra property are not equal
ok 230 two identical arrays, one with an extra property are not equal (reversed)
ok 231 strict: two identical arrays, one with an extra property are not equal
ok 232 strict: two identical arrays, one with an extra property are not equal (reversed)
# booleans
ok 233 trues are equal
ok 234 trues are equal (reversed)
ok 235 strict: trues are equal
ok 236 strict: trues are equal (reversed)
ok 237 falses are equal
ok 238 falses are equal (reversed)
ok 239 strict: falses are equal
ok 240 strict: falses are equal (reversed)
ok 241 true and false are not equal
ok 242 true and false are not equal (reversed)
ok 243 strict: true and false are not equal
ok 244 strict: true and false are not equal (reversed)
# booleans and arrays
ok 245 true and an empty array are not equal
ok 246 true and an empty array are not equal (reversed)
ok 247 strict: true and an empty array are not equal
ok 248 strict: true and an empty array are not equal (reversed)
ok 249 false and an empty array are not equal
ok 250 false and an empty array are not equal (reversed)
ok 251 strict: false and an empty array are not equal
ok 252 strict: false and an empty array are not equal (reversed)
# arrays initiated
ok 253 arrays with equal contents are equal are equal
ok 254 strict: arrays with equal contents are equal are equal
# arrays assigned
ok 255 a literal array and an assigned array are equal
ok 256 a literal array and an assigned array are equal (reversed)
ok 257 strict: a literal array and an assigned array are equal
ok 258 strict: a literal array and an assigned array are equal (reversed)
# arrays push
ok 259 a literal array and a pushed array are equal
ok 260 a literal array and a pushed array are equal (reversed)
ok 261 strict: a literal array and a pushed array are equal
ok 262 strict: a literal array and a pushed array are equal (reversed)
# null == undefined
ok 263 null and undefined are equal
ok 264 null and undefined are equal (reversed)
ok 265 strict: null and undefined are not equal
ok 266 strict: null and undefined are not equal (reversed)
ok 267 [null] and [undefined] are equal
ok 268 [null] and [undefined] are equal (reversed)
ok 269 strict: [null] and [undefined] are not equal
ok 270 strict: [null] and [undefined] are not equal (reversed)
# NaNs
ok 271 two NaNs are not equal
ok 272 strict: two NaNs are equal
ok 273 two equiv objects with a NaN value are not equal
ok 274 two equiv objects with a NaN value are not equal (reversed)
ok 275 strict: two equiv objects with a NaN value are equal
ok 276 strict: two equiv objects with a NaN value are equal (reversed)
ok 277 NaN and 1 are not equal
ok 278 NaN and 1 are not equal (reversed)
ok 279 strict: NaN and 1 are not equal
ok 280 strict: NaN and 1 are not equal (reversed)
# zeroes
ok 281 0 and -0 are equal
ok 282 0 and -0 are equal (reversed)
ok 283 strict: 0 and -0 are not equal
ok 284 strict: 0 and -0 are not equal (reversed)
ok 285 two objects with a same-keyed 0/-0 value are equal
ok 286 two objects with a same-keyed 0/-0 value are equal (reversed)
ok 287 strict: two objects with a same-keyed 0/-0 value are not equal
ok 288 strict: two objects with a same-keyed 0/-0 value are not equal (reversed)
# Object.create
ok 289 two objects with the same [[Prototype]] but a different own property are not equal
ok 290 two objects with the same [[Prototype]] but a different own property are not equal (reversed)
ok 291 strict: two objects with the same [[Prototype]] but a different own property are not equal
ok 292 strict: two objects with the same [[Prototype]] but a different own property are not equal (reversed)
# Object.create(null)
ok 293 two empty null objects are equal
ok 294 strict: two empty null objects are equal
ok 295 two null objects with the same property pair are equal
ok 296 strict: two null objects with the same property pair are equal
# regexes vs dates
ok 297 Date and RegExp are not equal
ok 298 Date and RegExp are not equal (reversed)
ok 299 strict: Date and RegExp are not equal
ok 300 strict: Date and RegExp are not equal (reversed)
# regexen
ok 301 two different regexes are not equal
ok 302 two different regexes are not equal (reversed)
ok 303 strict: two different regexes are not equal
ok 304 strict: two different regexes are not equal (reversed)
ok 305 two abc regexes are equal
ok 306 two abc regexes are equal (reversed)
ok 307 strict: two abc regexes are equal
ok 308 strict: two abc regexes are equal (reversed)
ok 309 two xyz regexes are equal
ok 310 two xyz regexes are equal (reversed)
ok 311 strict: two xyz regexes are equal
ok 312 strict: two xyz regexes are equal (reversed)
ok 313 two identical regexes, one with an extra property are not equal
ok 314 two identical regexes, one with an extra property are not equal (reversed)
ok 315 strict: two identical regexes, one with an extra property are not equal
ok 316 strict: two identical regexes, one with an extra property are not equal (reversed)
ok 317 two regexes with the same source but different flags are not equal
ok 318 two regexes with the same source but different flags are not equal (reversed)
ok 319 strict: two regexes with the same source but different flags are not equal
ok 320 strict: two regexes with the same source but different flags are not equal (reversed)
# fake RegExp
ok 321 regex and fake regex are not equal
ok 322 regex and fake regex are not equal (reversed)
ok 323 strict: regex and fake regex are not equal
ok 324 strict: regex and fake regex are not equal (reversed)
# object literals
ok 325 two loosely equal, strictly inequal prototype properties are equal
ok 326 two loosely equal, strictly inequal prototype properties are equal (reversed)
ok 327 strict: two loosely equal, strictly inequal prototype properties are not equal
ok 328 strict: two loosely equal, strictly inequal prototype properties are not equal (reversed)
# arrays and objects
ok 329 empty array and empty object are not equal
ok 330 empty array and empty object are not equal (reversed)
ok 331 strict: empty array and empty object are not equal
ok 332 strict: empty array and empty object are not equal (reversed)
ok 333 empty array and empty arraylike object are not equal
ok 334 empty array and empty arraylike object are not equal (reversed)
ok 335 strict: empty array and empty arraylike object are not equal
ok 336 strict: empty array and empty arraylike object are not equal (reversed)
ok 337 array and similar object are not equal
ok 338 array and similar object are not equal (reversed)
ok 339 strict: array and similar object are not equal
ok 340 strict: array and similar object are not equal (reversed)
# functions
ok 341 a function and itself are equal
ok 342 strict: a function and itself are equal
ok 343 a function and itself in an array are equal
ok 344 strict: a function and itself in an array are equal
ok 345 two distinct functions are not equal
ok 346 strict: two distinct functions are not equal
ok 347 two distinct functions in an array are not equal
ok 348 strict: two distinct functions in an array are not equal
ok 349 function and object are not equal
ok 350 strict: function and object are not equal
ok 351 function and object in an array are not equal
ok 352 strict: function and object in an array are not equal
# Errors
ok 353 two errors of the same type with the same message are equal
ok 354 two errors of the same type with the same message are equal (reversed)
ok 355 strict: two errors of the same type with the same message are equal
ok 356 strict: two errors of the same type with the same message are equal (reversed)
ok 357 two errors of different types with the same message are not equal
ok 358 two errors of different types with the same message are not equal (reversed)
ok 359 strict: two errors of different types with the same message are not equal
ok 360 strict: two errors of different types with the same message are not equal (reversed)
ok 361 two errors of the same type with a different message are not equal
ok 362 two errors of the same type with a different message are not equal (reversed)
ok 363 strict: two errors of the same type with a different message are not equal
ok 364 strict: two errors of the same type with a different message are not equal (reversed)
ok 365 two otherwise equal errors with different own properties are not equal
ok 366 two otherwise equal errors with different own properties are not equal (reversed)
ok 367 strict: two otherwise equal errors with different own properties are not equal
ok 368 strict: two otherwise equal errors with different own properties are not equal (reversed)
# errorlike
ok 369 should be falsy
ok 370 should be truthy
ok 371 error, and errorlike object are not equal
ok 372 error, and errorlike object are not equal (reversed)
ok 373 strict: error, and errorlike object are not equal
ok 374 strict: error, and errorlike object are not equal (reversed)
# SKIP fake error
# object and null
ok 375 null and an object are not equal
ok 376 null and an object are not equal (reversed)
ok 377 strict: null and an object are not equal
ok 378 strict: null and an object are not equal (reversed)
# errors
# error = Object
ok 379 false are not equal
ok 380 false are not equal (reversed)
ok 381 strict: false are not equal
ok 382 strict: false are not equal (reversed)
# [[Prototypes]]
ok 383 two identical objects with different [[Prototypes]] are equal
ok 384 two identical objects with different [[Prototypes]] are equal (reversed)
ok 385 strict: two identical objects with different [[Prototypes]] are not equal
ok 386 strict: two identical objects with different [[Prototypes]] are not equal (reversed)
# Dates with different prototypes
ok 387 two dates with the same timestamp are equal
ok 388 two dates with the same timestamp are equal (reversed)
ok 389 strict: two dates with the same timestamp are equal
ok 390 strict: two dates with the same timestamp are equal (reversed)
ok 391 d2 is still a Date instance after tweaking [[Prototype]]
ok 392 two dates with the same timestamp and different [[Prototype]] are equal
ok 393 two dates with the same timestamp and different [[Prototype]] are equal (reversed)
ok 394 strict: two dates with the same timestamp and different [[Prototype]] are not equal
ok 395 strict: two dates with the same timestamp and different [[Prototype]] are not equal (reversed)
# toStringTag
ok 396 o1: Symbol.toStringTag works
ok 397 o2: original Symbol.toStringTag works
ok 398 two normal empty objects are equal
ok 399 two normal empty objects are equal (reversed)
ok 400 strict: two normal empty objects are equal
ok 401 strict: two normal empty objects are equal (reversed)
ok 402 o2: modified Symbol.toStringTag works
ok 403 two normal empty objects with different toStringTags are not equal
ok 404 two normal empty objects with different toStringTags are not equal (reversed)
ok 405 strict: two normal empty objects with different toStringTags are not equal
ok 406 strict: two normal empty objects with different toStringTags are not equal (reversed)
# boxed primitives
ok 407 boxed and primitive `false` are not equal
ok 408 boxed and primitive `false` are not equal (reversed)
ok 409 strict: boxed and primitive `false` are not equal
ok 410 strict: boxed and primitive `false` are not equal (reversed)
ok 411 boxed and primitive `true` are not equal
ok 412 boxed and primitive `true` are not equal (reversed)
ok 413 strict: boxed and primitive `true` are not equal
ok 414 strict: boxed and primitive `true` are not equal (reversed)
ok 415 boxed and primitive `3` are not equal
ok 416 boxed and primitive `3` are not equal (reversed)
ok 417 strict: boxed and primitive `3` are not equal
ok 418 strict: boxed and primitive `3` are not equal (reversed)
ok 419 boxed and primitive `NaN` are not equal
ok 420 boxed and primitive `NaN` are not equal (reversed)
ok 421 strict: boxed and primitive `NaN` are not equal
ok 422 strict: boxed and primitive `NaN` are not equal (reversed)
ok 423 boxed and primitive `""` are not equal
ok 424 boxed and primitive `""` are not equal (reversed)
ok 425 strict: boxed and primitive `""` are not equal
ok 426 strict: boxed and primitive `""` are not equal (reversed)
ok 427 boxed and primitive `"str"` are not equal
ok 428 boxed and primitive `"str"` are not equal (reversed)
ok 429 strict: boxed and primitive `"str"` are not equal
ok 430 strict: boxed and primitive `"str"` are not equal (reversed)
# symbol
ok 431 boxed and primitive `Symbol()` are not equal
ok 432 boxed and primitive `Symbol()` are not equal (reversed)
ok 433 strict: boxed and primitive `Symbol()` are not equal
ok 434 strict: boxed and primitive `Symbol()` are not equal (reversed)
# bigint
ok 435 boxed and primitive `BigInt(42)` are not equal
ok 436 boxed and primitive `BigInt(42)` are not equal (reversed)
ok 437 strict: boxed and primitive `BigInt(42)` are not equal
ok 438 strict: boxed and primitive `BigInt(42)` are not equal (reversed)
# `valueOf` is called for boxed primitives
ok 439 two boxed numbers with a thrower valueOf are not equal
ok 440 two boxed numbers with a thrower valueOf are not equal (reversed)
ok 441 strict: two boxed numbers with a thrower valueOf are not equal
ok 442 strict: two boxed numbers with a thrower valueOf are not equal (reversed)
# getters
ok 443 two objects with the same getter but producing different values are not equal
ok 444 two objects with the same getter but producing different values are not equal (reversed)
ok 445 strict: two objects with the same getter but producing different values are not equal
ok 446 strict: two objects with the same getter but producing different values are not equal (reversed)
# fake arrays: extra keys will be tested
ok 447 fake and real array with same contents and [[Prototype]] are not equal
ok 448 fake and real array with same contents and [[Prototype]] are not equal (reversed)
ok 449 strict: fake and real array with same contents and [[Prototype]] are not equal
ok 450 strict: fake and real array with same contents and [[Prototype]] are not equal (reversed)
ok 451 regex faking as array, and array are not equal
ok 452 regex faking as array, and array are not equal (reversed)
ok 453 strict: regex faking as array, and array are not equal
ok 454 strict: regex faking as array, and array are not equal (reversed)
# circular references
ok 455 two self-referencing objects are equal
ok 456 two self-referencing objects are equal (reversed)
ok 457 strict: two self-referencing objects are equal
ok 458 strict: two self-referencing objects are equal (reversed)
ok 459 two deeply self-referencing objects are not equal
ok 460 two deeply self-referencing objects are not equal (reversed)
ok 461 strict: two deeply self-referencing objects are not equal
ok 462 strict: two deeply self-referencing objects are not equal (reversed)
# TypedArrays
# Buffer faked as Uint8Array
ok 463 Buffer and Uint8Array are not equal
ok 464 Buffer and Uint8Array are not equal (reversed)
ok 465 strict: Buffer and Uint8Array are not equal
ok 466 strict: Buffer and Uint8Array are not equal (reversed)
# one TypedArray faking as another
ok 467 Uint8Array, and Int8Array pretending to be a Uint8Array are not equal
ok 468 Uint8Array, and Int8Array pretending to be a Uint8Array are not equal (reversed)
ok 469 strict: Uint8Array, and Int8Array pretending to be a Uint8Array are not equal
ok 470 strict: Uint8Array, and Int8Array pretending to be a Uint8Array are not equal (reversed)
# ArrayBuffers
ok 471 Int8Arrays of similar ArrayBuffers are equal
ok 472 Int8Arrays of similar ArrayBuffers are equal (reversed)
ok 473 strict: Int8Arrays of similar ArrayBuffers are equal
ok 474 strict: Int8Arrays of similar ArrayBuffers are equal (reversed)
ok 475 similar ArrayBuffers are equal
ok 476 similar ArrayBuffers are equal (reversed)
ok 477 strict: similar ArrayBuffers are equal
ok 478 strict: similar ArrayBuffers are equal (reversed)
ok 479 Int8Arrays of different ArrayBuffers are not equal
ok 480 Int8Arrays of different ArrayBuffers are not equal (reversed)
ok 481 strict: Int8Arrays of different ArrayBuffers are not equal
ok 482 strict: Int8Arrays of different ArrayBuffers are not equal (reversed)
ok 483 different ArrayBuffers are not equal
ok 484 different ArrayBuffers are not equal (reversed)
ok 485 strict: different ArrayBuffers are not equal
ok 486 strict: different ArrayBuffers are not equal (reversed)
# SharedArrayBuffers
ok 487 Int8Arrays of similar SharedArrayBuffers are equal
ok 488 Int8Arrays of similar SharedArrayBuffers are equal (reversed)
ok 489 strict: Int8Arrays of similar SharedArrayBuffers are equal
ok 490 strict: Int8Arrays of similar SharedArrayBuffers are equal (reversed)
ok 491 similar SharedArrayBuffers are equal
ok 492 similar SharedArrayBuffers are equal (reversed)
ok 493 strict: similar SharedArrayBuffers are equal
ok 494 strict: similar SharedArrayBuffers are equal (reversed)
ok 495 Int8Arrays of different SharedArrayBuffers are not equal
ok 496 Int8Arrays of different SharedArrayBuffers are not equal (reversed)
ok 497 strict: Int8Arrays of different SharedArrayBuffers are not equal
ok 498 strict: Int8Arrays of different SharedArrayBuffers are not equal (reversed)
ok 499 different SharedArrayBuffers are not equal
ok 500 different SharedArrayBuffers are not equal (reversed)
ok 501 strict: different SharedArrayBuffers are not equal
ok 502 strict: different SharedArrayBuffers are not equal (reversed)
# lies about byteLength
ok 503 different-length ArrayBuffers, one lying are not equal
ok 504 different-length ArrayBuffers, one lying are not equal (reversed)
ok 505 strict: different-length ArrayBuffers, one lying are not equal
ok 506 strict: different-length ArrayBuffers, one lying are not equal (reversed)
# lies about byteLength
ok 507 different-length SharedArrayBuffers, one lying are not equal
ok 508 different-length SharedArrayBuffers, one lying are not equal (reversed)
ok 509 strict: different-length SharedArrayBuffers, one lying are not equal
ok 510 strict: different-length SharedArrayBuffers, one lying are not equal (reversed)

1..510
# tests 510
# pass  510

# ok


=============================== Coverage summary ===============================
Statements   : 95.44% ( 230/241 )
Branches     : 95.44% ( 230/241 )
Functions    : 91.67% ( 11/12 )
Lines        : 97.17% ( 206/212 )
================================================================================
-----------|----------|----------|----------|----------|----------------|
File       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------|----------|----------|----------|----------|----------------|
All files  |    95.44 |    95.44 |    91.67 |    97.17 |                |
 assert.js |      100 |      100 |      100 |      100 |                |
 index.js  |    95.42 |    95.44 |    91.67 |    97.16 |... 175,215,262 |
-----------|----------|----------|----------|----------|----------------|

> deep-equal@2.2.0 posttest
> aud --production

found 0 vulnerabilities
https://github.com/browserify/stream-splicer.git
index.js
DirectBloated/stream-splicer
stream-splicer
d11ce6d

added 86 packages, and audited 87 packages in 1s

51 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> stream-splicer@2.0.1 test
> tape test/*.js

TAP version 13
# combiner
ok 1 should be equivalent
# combiner returned stream
ok 2 should be equivalent
# empty passthrough stream
ok 3 should be equivalent
# empty with no data
ok 4 should be equivalent
# get
ok 5 0
ok 6 1
ok 7 2
ok 8 3
ok 9 4
ok 10 5
ok 11 -1
ok 12 -1
ok 13 -2
ok 14 -3
ok 15 -4
ok 16 -5
# nested get
ok 17 should be equal
ok 18 should be equal
ok 19 should be equal
ok 20 should be equal
# multipush
ok 21 should be equivalent
# multiunshift
ok 22 should be equivalent
# nested splicer
ok 23 should be equivalent
# nested middle splicer
ok 24 should be equivalent
# pop
ok 25 should be equal
ok 26 should be equal
ok 27 should be equivalent
# push
ok 28 should be equal
ok 29 should be equivalent
ok 30 should be equivalent
ok 31 should be equivalent
ok 32 should be equivalent
ok 33 should be equivalent
ok 34 should be equivalent
ok 35 should be equal
ok 36 should be equal
ok 37 should be equivalent
ok 38 should be equivalent
ok 39 should be equivalent
ok 40 should be equivalent
ok 41 should be equivalent
ok 42 should be equivalent
# shift
ok 43 a
ok 44 b
ok 45 c
ok 46 a
ok 47 b
ok 48 c
ok 49 b
ok 50 c
ok 51 b
ok 52 c
ok 53 should be equal
ok 54 should be equal
ok 55 should be equal
ok 56 should be equal
# splice
ok 57 d
ok 58 should be equal
ok 59 d
ok 60 should be equal
ok 61 thousander
ok 62 should be equal
ok 63 thousander
ok 64 should be equal
ok 65 should be equivalent
# unshift
ok 66 b
ok 67 c
ok 68 b
ok 69 c
ok 70 a
ok 71 b
ok 72 c
ok 73 a
ok 74 b
ok 75 c
ok 76 should be equal
ok 77 should be equal
ok 78 should be equal
ok 79 should be equal

1..79
# tests 79
# pass  79

# ok

https://github.com/jonschlinkert/to-regex.git
index.js
DirectBloated/to-regex
to-regex
cc5735f

added 210 packages, and audited 211 packages in 9s

1 package is looking for funding
  run `npm fund` for details

6 vulnerabilities (1 moderate, 2 high, 3 critical)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> to-regex@3.0.2 test
> mocha



  to-regex
    main export
      ✓ should export a function
      ✓ should throw when a potentially unsafe regex is passed
      ✓ should create a strict regex from the given string
      ✓ should create a strict regex from the given array of strings
      ✓ should create a regex from the a mixture of strings and regexes
      ✓ should return a regex unchanged
      ✓ should create a loose regex when `options.contains` is true
      ✓ should create a negation regex when `options.negate` is true
      ✓ should create a loose negation regex when `options.strictNegate` is false
      ✓ should create a loose negation regex when `options.contains` and `options.negate` are true
      ✓ should create a negation regex for an array of strings
      ✓ should create a loose negation regex for an array of strings
      ✓ should not enforce beginning anchor when `options.strictOpen` is false
      ✓ should not enforce ending anchor when `options.strictClose` is false
      ✓ should use flags passed on `options.flags`
      ✓ should cache regex by default
      ✓ should not cache regex when options.cache is false
      ✓ should add `i` to flags when `options.nocase` is true
      ✓ should throw an error when invalid args are passed
      ✓ should throw an error on invalid regexes when `options.strictErrors` is true
      ✓ should escape non-word characters when invalid regexes are created
    .makeRe
      ✓ should be a function
      ✓ should create a strict regex from the given string
      ✓ should return a regex unchanged
      ✓ should create a loose regex when `options.contains` is true
      ✓ should create a negation regex when `options.negate` is true
      ✓ should create a loose negation regex when `options.strictNegate` is false
      ✓ should create a loose negation regex when `options.contains` and `options.negate` are true
      ✓ should not enforce beginning anchor when `options.strictOpen` is false
      ✓ should not enforce ending anchor when `options.strictClose` is false
      ✓ should use flags passed on `options.flags`
      ✓ should cache regex by default
      ✓ should not cache regex when options.cache is false
      ✓ should add `i` to flags when `options.nocase` is true
      ✓ should throw an error when invalid args are passed


  35 passing (16ms)

https://github.com/browserify/labeled-stream-splicer.git
index.js
DirectBloated/labeled-stream-splicer
labeled-stream-splicer
31dbd99

added 112 packages, and audited 113 packages in 3s

52 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> labeled-stream-splicer@2.0.2 test
> tape test/*.js

TAP version 13
# bundle
ok 1 should be equal

1..1
# tests 1
# pass  1

# ok

https://github.com/jonschlinkert/regex-not.git
index.js
DirectBloated/regex-not
regex-not
7e36899

added 185 packages, and audited 186 packages in 1s

1 package is looking for funding
  run `npm fund` for details

6 vulnerabilities (1 moderate, 2 high, 3 critical)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> regex-not@1.0.2 test
> mocha



  regex-not
    ✓ should export a function
    ✓ should create a negation regex
    ✓ should create a loose negation regex when `options.contains` is true
    ✓ should create a loose negation regex when `options.strictNegate` is false
    ✓ should support `options.endChar`
    ✓ should throw when a potentially unsafe regex is passed
    ✓ should throw an error when invalid args are passed


  7 passing (9ms)

https://github.com/browserify/node-util.git
util.js
DirectBloated/node-util
node-util
ef98472

added 661 packages, and audited 662 packages in 20s

63 packages are looking for funding
  run `npm fund` for details

22 vulnerabilities (3 moderate, 14 high, 5 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> util@0.12.5 test
> node test/node/index.js

Testing isDate
Testing isArgumentsObject
Testing isBooleanObject
Testing isNumberObject
Testing isStringObject
Testing isSymbolObject
Testing isBigIntObject
Testing isNativeError
Testing isRegExp
Testing isAsyncFunction
Testing isGeneratorFunction
Testing isGeneratorObject
Testing isPromise
Testing isMap
Testing isSet
Testing isMapIterator
Testing isSetIterator
Testing isWeakMap
Testing isWeakSet
Testing isArrayBuffer
Testing isUint8Array
Testing isUint8ClampedArray
Testing isUint16Array
Testing isUint32Array
Testing isInt8Array
Testing isInt16Array
Testing isInt32Array
Testing isFloat32Array
Testing isFloat64Array
Testing isBigInt64Array
Testing isBigUint64Array
Testing isUint8Array
Testing isDataView
Testing isSharedArrayBuffer
Testing isWebAssemblyCompiledModule
Testing isBoxedPrimitive
Testing fake typed arrays isUint8Array
Testing fake typed arrays isUint8ClampedArray
Testing fake typed arrays isUint16Array
Testing fake typed arrays isUint32Array
Testing fake typed arrays isInt8Array
Testing fake typed arrays isInt16Array
Testing fake typed arrays isInt32Array
Testing fake typed arrays isFloat32Array
Testing fake typed arrays isFloat64Array
Testing fake typed arrays isBigInt64Array
Testing fake typed arrays isBigUint64Array
Testing values for: isArrayBufferView
Testing values for: isTypedArray
Testing values for: isUint8Array
Testing values for: isUint8ClampedArray
Testing values for: isUint16Array
Testing values for: isUint32Array
Testing values for: isInt8Array
Testing values for: isInt16Array
Testing values for: isInt32Array
Testing values for: isFloat32Array
Testing values for: isFloat64Array
Testing values for: isBigInt64Array
Testing values for: isBigUint64Array
https://github.com/circa10a/easy-soap-request.git
index.js
DirectBloated/easy-soap-request
easy-soap-request
b199eeb

added 630 packages, and audited 631 packages in 4s

89 packages are looking for funding
  run `npm fund` for details

7 vulnerabilities (1 moderate, 4 high, 2 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.

> easy-soap-request@5.2.0 test
> nyc mocha **/*test.js



  Test Longitude/Latitude SOAP Request
    ✔ Zip Code 75001 should return 32.9612,-96.8372
    ✔ Should catch Promise Rejection
    ✔ Should catch connection error Promise Rejection (115ms)


  3 passing (146ms)

----------|---------|----------|---------|---------|-------------------
File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------|---------|----------|---------|---------|-------------------
All files |     100 |    66.67 |     100 |     100 |                   
 index.js |     100 |    66.67 |     100 |     100 | 20                
----------|---------|----------|---------|---------|-------------------
https://github.com/Level/subleveldown.git
index.js
DirectBloated/subleveldown
subleveldown
58db7bc

added 1042 packages, and audited 1043 packages in 36s

246 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> subleveldown@6.0.1 test
> standard && hallmark && (nyc -s node test | faucet) && nyc report


# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # testCommon.factory() returns a unique database
[K

  ok [1m[32m1[0m no error while opening db1[K
  ok [1m[32m2[0m no error while opening db2[K
  ok [1m[32m3[0m put key in db1[K
  ok [1m[32m4[0m got items from db2[K
  ok [1m[32m5[0m db2 should be empty[K
  ok [1m[32m6[0m no error while closing db1[K
  ok [1m[32m7[0m no error while closing db2[K
[1A[1G[1m[32m✓ # testCommon.factory() returns a unique database
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db has manifest
[K

  ok [1m[32m8[0m manifest is object[K
  ok [1m[32m9[0m additionalMethods is object[K
  ok [1m[32m10[0m truthy: bufferKeys[K
  ok [1m[32m11[0m truthy: snapshots[K
  ok [1m[32m12[0m false: permanence[K
  ok [1m[32m13[0m truthy: seek[K
  ok [1m[32m14[0m truthy: clear[K
  ok [1m[32m15[0m truthy: getMany[K
  ok [1m[32m16[0m truthy: status[K
  ok [1m[32m17[0m false: keyIterator[K
  ok [1m[32m18[0m false: valueIterator[K
  ok [1m[32m19[0m false: iteratorNextv[K
  ok [1m[32m20[0m false: iteratorAll[K
  ok [1m[32m21[0m false: idempotentOpen[K
  ok [1m[32m22[0m false: passiveOpen[K
  ok [1m[32m23[0m false: serialize[K
  ok [1m[32m24[0m false: createIfMissing[K
  ok [1m[32m25[0m false: errorIfExists[K
  ok [1m[32m26[0m false: deferredOpen[K
  ok [1m[32m27[0m truthy: openCallback[K
  ok [1m[32m28[0m truthy: promises[K
  ok [1m[32m29[0m truthy: streams[K
  ok [1m[32m30[0m false: encodings[K
  ok [1m[32m31[0m false: events[K
  ok [1m[32m32[0m truthy: additionalMethods[K
  ok [1m[32m33[0m manifest has unique identity[K
  ok [1m[32m34[0m manifest.additionalMethods has unique identity[K
  ok [1m[32m35[0m no open error[K
  ok [1m[32m36[0m manifest did not change after open[K
  ok [1m[32m37[0m no close error[K
  ok [1m[32m38[0m manifest did not change after close[K
[1A[1G[1m[32m✓ # db has manifest
[0m[1B[1G
# # manifest has status
[K

  ok [1m[32m39[0m should be strictly equal[K
  ok [1m[32m40[0m no open error[K
[1A[1G[1m[32m✓ # manifest has status
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # test database open method exists
[K

  ok [1m[32m41[0m database object returned[K
  ok [1m[32m42[0m open() function exists[K
[1A[1G[1m[32m✓ # test database open method exists
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp
[K

[1A[1G[1m[32m✓ # setUp
[0m[1B[1G
# # test database open no-arg throws
[K

  ok [1m[32m43[0m no-arg open() throws[K
[1A[1G[1m[32m✓ # test database open no-arg throws
[0m[1B[1G
# # test callback-less, 1-arg, open() throws
[K

  ok [1m[32m44[0m callback-less, 1-arg open() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, open() throws
[0m[1B[1G
# # test database open, no options
[K

  ok [1m[32m45[0m undefined[K
[1A[1G[1m[32m✓ # test database open, no options
[0m[1B[1G
# # test database open, options and callback
[K

  ok [1m[32m46[0m undefined[K
[1A[1G[1m[32m✓ # test database open, options and callback
[0m[1B[1G
# # test database open, close and open
[K

  ok [1m[32m47[0m undefined[K
  ok [1m[32m48[0m undefined[K
  ok [1m[32m49[0m undefined[K
[1A[1G[1m[32m✓ # test database open, close and open
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test close()
[K

  ok [1m[32m50[0m no-arg close() throws[K
  ok [1m[32m51[0m non-callback close() throws[K
  ok [1m[32m52[0m undefined[K
[1A[1G[1m[32m✓ # test close()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less put() throws
[K

  ok [1m[32m53[0m no-arg put() throws[K
[1A[1G[1m[32m✓ # test argument-less put() throws
[0m[1B[1G
# # test callback-less, 1-arg, put() throws
[K

  ok [1m[32m54[0m callback-less, 1-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, put() throws
[0m[1B[1G
# # test callback-less, 2-arg, put() throws
[K

  ok [1m[32m55[0m callback-less, 2-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 2-arg, put() throws
[0m[1B[1G
# # test callback-less, 3-arg, put() throws
[K

  ok [1m[32m56[0m callback-less, 3-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, put() throws
[0m[1B[1G
# # test simple put()
[K

  ok [1m[32m57[0m undefined[K
  ok [1m[32m58[0m null[K
  ok [1m[32m59[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple put()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less get() throws
[K

  ok [1m[32m60[0m no-arg get() throws[K
[1A[1G[1m[32m✓ # test argument-less get() throws
[0m[1B[1G
# # test callback-less, 1-arg, get() throws
[K

  ok [1m[32m61[0m callback-less, 1-arg get() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, get() throws
[0m[1B[1G
# # test callback-less, 3-arg, get() throws
[K

  ok [1m[32m62[0m callback-less, 2-arg get() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, get() throws
[0m[1B[1G
# # test simple get()
[K

  ok [1m[32m63[0m undefined[K
  ok [1m[32m64[0m null[K
  ok [1m[32m65[0m should not be string by default[K
  ok [1m[32m66[0m should be strictly equal[K
  ok [1m[32m67[0m null[K
  ok [1m[32m68[0m should not be string by default[K
  ok [1m[32m69[0m should be strictly equal[K
  ok [1m[32m70[0m null[K
  ok [1m[32m71[0m should be string if not buffer[K
  ok [1m[32m72[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple get()
[0m[1B[1G
# # test simultaneous get()
[K

  ok [1m[32m73[0m undefined[K
  ok [1m[32m74[0m null[K
  ok [1m[32m75[0m should be strictly equal[K
  ok [1m[32m76[0m null[K
  ok [1m[32m77[0m should be strictly equal[K
  ok [1m[32m78[0m null[K
  ok [1m[32m79[0m should be strictly equal[K
  ok [1m[32m80[0m null[K
  ok [1m[32m81[0m should be strictly equal[K
  ok [1m[32m82[0m null[K
  ok [1m[32m83[0m should be strictly equal[K
  ok [1m[32m84[0m null[K
  ok [1m[32m85[0m should be strictly equal[K
  ok [1m[32m86[0m null[K
  ok [1m[32m87[0m should be strictly equal[K
  ok [1m[32m88[0m null[K
  ok [1m[32m89[0m should be strictly equal[K
  ok [1m[32m90[0m null[K
  ok [1m[32m91[0m should be strictly equal[K
  ok [1m[32m92[0m null[K
  ok [1m[32m93[0m should be strictly equal[K
  ok [1m[32m94[0m should error[K
  ok [1m[32m95[0m should have correct error message[K
  ok [1m[32m96[0m value is undefined[K
  ok [1m[32m97[0m should error[K
  ok [1m[32m98[0m should have correct error message[K
  ok [1m[32m99[0m value is undefined[K
  ok [1m[32m100[0m should error[K
  ok [1m[32m101[0m should have correct error message[K
  ok [1m[32m102[0m value is undefined[K
  ok [1m[32m103[0m should error[K
  ok [1m[32m104[0m should have correct error message[K
  ok [1m[32m105[0m value is undefined[K
  ok [1m[32m106[0m should error[K
  ok [1m[32m107[0m should have correct error message[K
  ok [1m[32m108[0m value is undefined[K
  ok [1m[32m109[0m should error[K
  ok [1m[32m110[0m should have correct error message[K
  ok [1m[32m111[0m value is undefined[K
  ok [1m[32m112[0m should error[K
  ok [1m[32m113[0m should have correct error message[K
  ok [1m[32m114[0m value is undefined[K
  ok [1m[32m115[0m should error[K
  ok [1m[32m116[0m should have correct error message[K
  ok [1m[32m117[0m value is undefined[K
  ok [1m[32m118[0m should error[K
  ok [1m[32m119[0m should have correct error message[K
  ok [1m[32m120[0m value is undefined[K
  ok [1m[32m121[0m should error[K
  ok [1m[32m122[0m should have correct error message[K
  ok [1m[32m123[0m value is undefined[K
[1A[1G[1m[32m✓ # test simultaneous get()
[0m[1B[1G
# # test get() not found error is asynchronous
[K

  ok [1m[32m124[0m should error[K
  ok [1m[32m125[0m should have correct error message[K
  ok [1m[32m126[0m value is undefined[K
  ok [1m[32m127[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() not found error is asynchronous
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less del() throws
[K

  ok [1m[32m128[0m no-arg del() throws[K
[1A[1G[1m[32m✓ # test argument-less del() throws
[0m[1B[1G
# # test callback-less, 1-arg, del() throws
[K

  ok [1m[32m129[0m callback-less, 1-arg del() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, del() throws
[0m[1B[1G
# # test callback-less, 3-arg, del() throws
[K

  ok [1m[32m130[0m callback-less, 2-arg del() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, del() throws
[0m[1B[1G
# # test simple del()
[K

  ok [1m[32m131[0m undefined[K
  ok [1m[32m132[0m undefined[K
  ok [1m[32m133[0m entry properly deleted[K
  ok [1m[32m134[0m value is undefined[K
  ok [1m[32m135[0m NotFound error[K
[1A[1G[1m[32m✓ # test simple del()
[0m[1B[1G
# # test del on non-existent key
[K

  ok [1m[32m136[0m undefined[K
[1A[1G[1m[32m✓ # test del on non-existent key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test get() with null key causes error
[K

  ok [1m[32m137[0m has error[K
  ok [1m[32m138[0m should be truthy[K
  ok [1m[32m139[0m correct error message[K
  ok [1m[32m140[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with null key causes error
[0m[1B[1G
# # test del() with null key causes error
[K

  ok [1m[32m141[0m has error[K
  ok [1m[32m142[0m should be truthy[K
  ok [1m[32m143[0m correct error message[K
  ok [1m[32m144[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with null key causes error
[0m[1B[1G
# # test getMany() with null key causes error
[K

  ok [1m[32m145[0m callback (anonymous) is asynchronous[K
  ok [1m[32m146[0m callback (anonymous) is asynchronous[K
  ok [1m[32m147[0m has error[K
  ok [1m[32m148[0m should be truthy[K
  ok [1m[32m149[0m correct error message[K
  ok [1m[32m150[0m has error[K
  ok [1m[32m151[0m should be truthy[K
  ok [1m[32m152[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with null key causes error
[0m[1B[1G
# # test put() with null key causes error
[K

  ok [1m[32m153[0m has error[K
  ok [1m[32m154[0m should be truthy[K
  ok [1m[32m155[0m correct error message[K
  ok [1m[32m156[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null key causes error
[0m[1B[1G
# # test get() with undefined key causes error
[K

  ok [1m[32m157[0m has error[K
  ok [1m[32m158[0m should be truthy[K
  ok [1m[32m159[0m correct error message[K
  ok [1m[32m160[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with undefined key causes error
[0m[1B[1G
# # test del() with undefined key causes error
[K

  ok [1m[32m161[0m has error[K
  ok [1m[32m162[0m should be truthy[K
  ok [1m[32m163[0m correct error message[K
  ok [1m[32m164[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with undefined key causes error
[0m[1B[1G
# # test getMany() with undefined key causes error
[K

  ok [1m[32m165[0m callback (anonymous) is asynchronous[K
  ok [1m[32m166[0m callback (anonymous) is asynchronous[K
  ok [1m[32m167[0m has error[K
  ok [1m[32m168[0m should be truthy[K
  ok [1m[32m169[0m correct error message[K
  ok [1m[32m170[0m has error[K
  ok [1m[32m171[0m should be truthy[K
  ok [1m[32m172[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with undefined key causes error
[0m[1B[1G
# # test put() with undefined key causes error
[K

  ok [1m[32m173[0m has error[K
  ok [1m[32m174[0m should be truthy[K
  ok [1m[32m175[0m correct error message[K
  ok [1m[32m176[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined key causes error
[0m[1B[1G
# # test get() with empty String key causes error
[K

  ok [1m[32m177[0m has error[K
  ok [1m[32m178[0m should be truthy[K
  ok [1m[32m179[0m correct error message[K
  ok [1m[32m180[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty String key causes error
[0m[1B[1G
# # test del() with empty String key causes error
[K

  ok [1m[32m181[0m has error[K
  ok [1m[32m182[0m should be truthy[K
  ok [1m[32m183[0m correct error message[K
  ok [1m[32m184[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty String key causes error
[0m[1B[1G
# # test getMany() with empty String key causes error
[K

  ok [1m[32m185[0m callback (anonymous) is asynchronous[K
  ok [1m[32m186[0m callback (anonymous) is asynchronous[K
  ok [1m[32m187[0m has error[K
  ok [1m[32m188[0m should be truthy[K
  ok [1m[32m189[0m correct error message[K
  ok [1m[32m190[0m has error[K
  ok [1m[32m191[0m should be truthy[K
  ok [1m[32m192[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty String key causes error
[0m[1B[1G
# # test put() with empty String key causes error
[K

  ok [1m[32m193[0m has error[K
  ok [1m[32m194[0m should be truthy[K
  ok [1m[32m195[0m correct error message[K
  ok [1m[32m196[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty String key causes error
[0m[1B[1G
# # test get() with empty Buffer key causes error
[K

  ok [1m[32m197[0m has error[K
  ok [1m[32m198[0m should be truthy[K
  ok [1m[32m199[0m correct error message[K
  ok [1m[32m200[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Buffer key causes error
[0m[1B[1G
# # test del() with empty Buffer key causes error
[K

  ok [1m[32m201[0m has error[K
  ok [1m[32m202[0m should be truthy[K
  ok [1m[32m203[0m correct error message[K
  ok [1m[32m204[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Buffer key causes error
[0m[1B[1G
# # test getMany() with empty Buffer key causes error
[K

  ok [1m[32m205[0m callback (anonymous) is asynchronous[K
  ok [1m[32m206[0m callback (anonymous) is asynchronous[K
  ok [1m[32m207[0m has error[K
  ok [1m[32m208[0m should be truthy[K
  ok [1m[32m209[0m correct error message[K
  ok [1m[32m210[0m has error[K
  ok [1m[32m211[0m should be truthy[K
  ok [1m[32m212[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Buffer key causes error
[0m[1B[1G
# # test put() with empty Buffer key causes error
[K

  ok [1m[32m213[0m has error[K
  ok [1m[32m214[0m should be truthy[K
  ok [1m[32m215[0m correct error message[K
  ok [1m[32m216[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Buffer key causes error
[0m[1B[1G
# # test get() with empty Array key causes error
[K

  ok [1m[32m217[0m has error[K
  ok [1m[32m218[0m should be truthy[K
  ok [1m[32m219[0m correct error message[K
  ok [1m[32m220[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Array key causes error
[0m[1B[1G
# # test del() with empty Array key causes error
[K

  ok [1m[32m221[0m has error[K
  ok [1m[32m222[0m should be truthy[K
  ok [1m[32m223[0m correct error message[K
  ok [1m[32m224[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Array key causes error
[0m[1B[1G
# # test getMany() with empty Array key causes error
[K

  ok [1m[32m225[0m callback (anonymous) is asynchronous[K
  ok [1m[32m226[0m callback (anonymous) is asynchronous[K
  ok [1m[32m227[0m has error[K
  ok [1m[32m228[0m should be truthy[K
  ok [1m[32m229[0m correct error message[K
  ok [1m[32m230[0m has error[K
  ok [1m[32m231[0m should be truthy[K
  ok [1m[32m232[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Array key causes error
[0m[1B[1G
# # test put() with empty Array key causes error
[K

  ok [1m[32m233[0m has error[K
  ok [1m[32m234[0m should be truthy[K
  ok [1m[32m235[0m correct error message[K
  ok [1m[32m236[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Array key causes error
[0m[1B[1G
# # test put() with null value causes error
[K

  ok [1m[32m237[0m has error[K
  ok [1m[32m238[0m should be truthy[K
  ok [1m[32m239[0m correct error message[K
  ok [1m[32m240[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null value causes error
[0m[1B[1G
# # test put() with undefined value causes error
[K

  ok [1m[32m241[0m has error[K
  ok [1m[32m242[0m should be truthy[K
  ok [1m[32m243[0m correct error message[K
  ok [1m[32m244[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined value causes error
[0m[1B[1G
# # test put()/get()/del() with `0` key
[K

  ok [1m[32m245[0m undefined[K
  ok [1m[32m246[0m no error, has key/value for ``0` key`[K
  ok [1m[32m247[0m is a Buffer[K
  ok [1m[32m248[0m should be strictly equal[K
  ok [1m[32m249[0m no error, deleted key/value for ``0` key`[K
  ok [1m[32m250[0m entry properly deleted[K
  ok [1m[32m251[0m should have correct error message[K
  ok [1m[32m252[0m value is undefined[K
  ok [1m[32m253[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` key
[0m[1B[1G
# # test put()/get()/del() with long String key
[K

  ok [1m[32m254[0m undefined[K
  ok [1m[32m255[0m no error, has key/value for `long String key`[K
  ok [1m[32m256[0m is a Buffer[K
  ok [1m[32m257[0m should be strictly equal[K
  ok [1m[32m258[0m no error, deleted key/value for `long String key`[K
  ok [1m[32m259[0m entry properly deleted[K
  ok [1m[32m260[0m should have correct error message[K
  ok [1m[32m261[0m value is undefined[K
  ok [1m[32m262[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String key
[0m[1B[1G
# # test put()/get()/del() with Buffer key
[K

  ok [1m[32m263[0m undefined[K
  ok [1m[32m264[0m no error, has key/value for `Buffer key`[K
  ok [1m[32m265[0m is a Buffer[K
  ok [1m[32m266[0m should be strictly equal[K
  ok [1m[32m267[0m no error, deleted key/value for `Buffer key`[K
  ok [1m[32m268[0m entry properly deleted[K
  ok [1m[32m269[0m should have correct error message[K
  ok [1m[32m270[0m value is undefined[K
  ok [1m[32m271[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer key
[0m[1B[1G
# # test put()/get()/del() with Array value
[K

  ok [1m[32m272[0m undefined[K
  ok [1m[32m273[0m no error, has key/value for `Array value`[K
  ok [1m[32m274[0m is a Buffer[K
  ok [1m[32m275[0m should be strictly equal[K
  ok [1m[32m276[0m no error, deleted key/value for `Array value`[K
  ok [1m[32m277[0m entry properly deleted[K
  ok [1m[32m278[0m should have correct error message[K
  ok [1m[32m279[0m value is undefined[K
  ok [1m[32m280[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array value
[0m[1B[1G
# # test put()/get()/del() with `false` value
[K

  ok [1m[32m281[0m undefined[K
  ok [1m[32m282[0m no error, has key/value for ``false` value`[K
  ok [1m[32m283[0m is a Buffer[K
  ok [1m[32m284[0m should be strictly equal[K
  ok [1m[32m285[0m no error, deleted key/value for ``false` value`[K
  ok [1m[32m286[0m entry properly deleted[K
  ok [1m[32m287[0m should have correct error message[K
  ok [1m[32m288[0m value is undefined[K
  ok [1m[32m289[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `false` value
[0m[1B[1G
# # test put()/get()/del() with `0` value
[K

  ok [1m[32m290[0m undefined[K
  ok [1m[32m291[0m no error, has key/value for ``0` value`[K
  ok [1m[32m292[0m is a Buffer[K
  ok [1m[32m293[0m should be strictly equal[K
  ok [1m[32m294[0m no error, deleted key/value for ``0` value`[K
  ok [1m[32m295[0m entry properly deleted[K
  ok [1m[32m296[0m should have correct error message[K
  ok [1m[32m297[0m value is undefined[K
  ok [1m[32m298[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` value
[0m[1B[1G
# # test put()/get()/del() with `NaN` value
[K

  ok [1m[32m299[0m undefined[K
  ok [1m[32m300[0m no error, has key/value for ``NaN` value`[K
  ok [1m[32m301[0m is a Buffer[K
  ok [1m[32m302[0m should be strictly equal[K
  ok [1m[32m303[0m no error, deleted key/value for ``NaN` value`[K
  ok [1m[32m304[0m entry properly deleted[K
  ok [1m[32m305[0m should have correct error message[K
  ok [1m[32m306[0m value is undefined[K
  ok [1m[32m307[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `NaN` value
[0m[1B[1G
# # test put()/get()/del() with empty String value
[K

  ok [1m[32m308[0m undefined[K
  ok [1m[32m309[0m no error, has key/value for `empty String value`[K
  ok [1m[32m310[0m is a Buffer[K
  ok [1m[32m311[0m should be strictly equal[K
  ok [1m[32m312[0m no error, deleted key/value for `empty String value`[K
  ok [1m[32m313[0m entry properly deleted[K
  ok [1m[32m314[0m should have correct error message[K
  ok [1m[32m315[0m value is undefined[K
  ok [1m[32m316[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty String value
[0m[1B[1G
# # test put()/get()/del() with empty Buffer value
[K

  ok [1m[32m317[0m undefined[K
  ok [1m[32m318[0m no error, has key/value for `empty Buffer value`[K
  ok [1m[32m319[0m is a Buffer[K
  ok [1m[32m320[0m should be strictly equal[K
  ok [1m[32m321[0m no error, deleted key/value for `empty Buffer value`[K
  ok [1m[32m322[0m entry properly deleted[K
  ok [1m[32m323[0m should have correct error message[K
  ok [1m[32m324[0m value is undefined[K
  ok [1m[32m325[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Buffer value
[0m[1B[1G
# # test put()/get()/del() with empty Array value
[K

  ok [1m[32m326[0m undefined[K
  ok [1m[32m327[0m no error, has key/value for `empty Array value`[K
  ok [1m[32m328[0m is a Buffer[K
  ok [1m[32m329[0m should be strictly equal[K
  ok [1m[32m330[0m no error, deleted key/value for `empty Array value`[K
  ok [1m[32m331[0m entry properly deleted[K
  ok [1m[32m332[0m should have correct error message[K
  ok [1m[32m333[0m value is undefined[K
  ok [1m[32m334[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Array value
[0m[1B[1G
# # test put()/get()/del() with long String value
[K

  ok [1m[32m335[0m undefined[K
  ok [1m[32m336[0m no error, has key/value for `long String value`[K
  ok [1m[32m337[0m is a Buffer[K
  ok [1m[32m338[0m should be strictly equal[K
  ok [1m[32m339[0m no error, deleted key/value for `long String value`[K
  ok [1m[32m340[0m entry properly deleted[K
  ok [1m[32m341[0m should have correct error message[K
  ok [1m[32m342[0m value is undefined[K
  ok [1m[32m343[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String value
[0m[1B[1G
# # test put()/get()/del() with Buffer value
[K

  ok [1m[32m344[0m undefined[K
  ok [1m[32m345[0m no error, has key/value for `Buffer value`[K
  ok [1m[32m346[0m is a Buffer[K
  ok [1m[32m347[0m should be strictly equal[K
  ok [1m[32m348[0m no error, deleted key/value for `Buffer value`[K
  ok [1m[32m349[0m entry properly deleted[K
  ok [1m[32m350[0m should have correct error message[K
  ok [1m[32m351[0m value is undefined[K
  ok [1m[32m352[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer value
[0m[1B[1G
# # test put()/get()/del() with Array key
[K

  ok [1m[32m353[0m undefined[K
  ok [1m[32m354[0m no error, has key/value for `Array key`[K
  ok [1m[32m355[0m is a Buffer[K
  ok [1m[32m356[0m should be strictly equal[K
  ok [1m[32m357[0m no error, deleted key/value for `Array key`[K
  ok [1m[32m358[0m entry properly deleted[K
  ok [1m[32m359[0m should have correct error message[K
  ok [1m[32m360[0m value is undefined[K
  ok [1m[32m361[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test getMany() requires an array argument (callback)
[K

  ok [1m[32m362[0m callback (anonymous) is asynchronous[K
  ok [1m[32m363[0m callback (anonymous) is asynchronous[K
  ok [1m[32m364[0m should be strictly equal[K
  ok [1m[32m365[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (callback)
[0m[1B[1G
# # test getMany() requires an array argument (promise)
[K

  ok [1m[32m366[0m should be strictly equal[K
  ok [1m[32m367[0m should be strictly equal[K
  ok [1m[32m368[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (promise)
[0m[1B[1G
# # test getMany() support is reflected in manifest
[K

  ok [1m[32m369[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() support is reflected in manifest
[0m[1B[1G
# # test simple getMany()
[K

  ok [1m[32m370[0m undefined[K
  ok [1m[32m371[0m null[K
  ok [1m[32m372[0m got an array[K
  ok [1m[32m373[0m array has 1 element[K
  ok [1m[32m374[0m should not be string by default[K
  ok [1m[32m375[0m should be strictly equal[K
  ok [1m[32m376[0m null[K
  ok [1m[32m377[0m got an array[K
  ok [1m[32m378[0m array has 1 element[K
  ok [1m[32m379[0m should not be string by default[K
  ok [1m[32m380[0m should be strictly equal[K
  ok [1m[32m381[0m null[K
  ok [1m[32m382[0m should be string if not buffer[K
  ok [1m[32m383[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simple getMany()
[0m[1B[1G
# # test getMany() with multiple keys
[K

  ok [1m[32m384[0m undefined[K
  ok [1m[32m385[0m null[K
  ok [1m[32m386[0m should be deeply equivalent[K
  ok [1m[32m387[0m null[K
  ok [1m[32m388[0m maintains order of input keys[K
[1A[1G[1m[32m✓ # test getMany() with multiple keys
[0m[1B[1G
# # test empty getMany()
[K

  ok [1m[32m389[0m callback (anonymous) is asynchronous[K
  ok [1m[32m390[0m callback (anonymous) is asynchronous[K
  ok [1m[32m391[0m null[K
  ok [1m[32m392[0m should be deeply equivalent[K
  ok [1m[32m393[0m null[K
  ok [1m[32m394[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test empty getMany()
[0m[1B[1G
# # test not-found getMany()
[K

  ok [1m[32m395[0m callback (anonymous) is asynchronous[K
  ok [1m[32m396[0m callback (anonymous) is asynchronous[K
  ok [1m[32m397[0m null[K
  ok [1m[32m398[0m should be deeply equivalent[K
  ok [1m[32m399[0m null[K
  ok [1m[32m400[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test not-found getMany()
[0m[1B[1G
# # test getMany() with promise
[K

  ok [1m[32m401[0m should be deeply equivalent[K
  ok [1m[32m402[0m should be deeply equivalent[K
  ok [1m[32m403[0m should be deeply equivalent[K
  ok [1m[32m404[0m should be deeply equivalent[K
  ok [1m[32m405[0m should be deeply equivalent[K
  ok [1m[32m406[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test getMany() with promise
[0m[1B[1G
# # test simultaneous getMany()
[K

  ok [1m[32m407[0m undefined[K
  ok [1m[32m408[0m null[K
  ok [1m[32m409[0m should be strictly equal[K
  ok [1m[32m410[0m should be strictly equal[K
  ok [1m[32m411[0m null[K
  ok [1m[32m412[0m should be strictly equal[K
  ok [1m[32m413[0m should be strictly equal[K
  ok [1m[32m414[0m null[K
  ok [1m[32m415[0m should be strictly equal[K
  ok [1m[32m416[0m should be strictly equal[K
  ok [1m[32m417[0m null[K
  ok [1m[32m418[0m should be strictly equal[K
  ok [1m[32m419[0m should be strictly equal[K
  ok [1m[32m420[0m null[K
  ok [1m[32m421[0m should be strictly equal[K
  ok [1m[32m422[0m should be strictly equal[K
  ok [1m[32m423[0m null[K
  ok [1m[32m424[0m should be strictly equal[K
  ok [1m[32m425[0m should be strictly equal[K
  ok [1m[32m426[0m null[K
  ok [1m[32m427[0m should be strictly equal[K
  ok [1m[32m428[0m should be strictly equal[K
  ok [1m[32m429[0m null[K
  ok [1m[32m430[0m should be strictly equal[K
  ok [1m[32m431[0m should be strictly equal[K
  ok [1m[32m432[0m null[K
  ok [1m[32m433[0m should be strictly equal[K
  ok [1m[32m434[0m should be strictly equal[K
  ok [1m[32m435[0m null[K
  ok [1m[32m436[0m should be strictly equal[K
  ok [1m[32m437[0m should be strictly equal[K
  ok [1m[32m438[0m null[K
  ok [1m[32m439[0m should be deeply equivalent[K
  ok [1m[32m440[0m null[K
  ok [1m[32m441[0m should be deeply equivalent[K
  ok [1m[32m442[0m null[K
  ok [1m[32m443[0m should be deeply equivalent[K
  ok [1m[32m444[0m null[K
  ok [1m[32m445[0m should be deeply equivalent[K
  ok [1m[32m446[0m null[K
  ok [1m[32m447[0m should be deeply equivalent[K
  ok [1m[32m448[0m null[K
  ok [1m[32m449[0m should be deeply equivalent[K
  ok [1m[32m450[0m null[K
  ok [1m[32m451[0m should be deeply equivalent[K
  ok [1m[32m452[0m null[K
  ok [1m[32m453[0m should be deeply equivalent[K
  ok [1m[32m454[0m null[K
  ok [1m[32m455[0m should be deeply equivalent[K
  ok [1m[32m456[0m null[K
  ok [1m[32m457[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simultaneous getMany()
[0m[1B[1G
# # test getMany() on new db
[K

  ok [1m[32m458[0m should be strictly equal[K
  ok [1m[32m459[0m should be strictly equal[K
  ok [1m[32m460[0m (unnamed assert)[K
  ok [1m[32m461[0m should be strictly equal[K
  ok [1m[32m462[0m should be strictly equal[K
  ok [1m[32m463[0m (unnamed assert)[K
  ok [1m[32m464[0m callback (anonymous) is asynchronous[K
  ok [1m[32m465[0m callback (anonymous) is asynchronous[K
  ok [1m[32m466[0m callback (anonymous) is asynchronous[K
  ok [1m[32m467[0m callback (anonymous) is asynchronous[K
  ok [1m[32m468[0m should be strictly equal[K
  ok [1m[32m469[0m should be strictly equal[K
  ok [1m[32m470[0m should be strictly equal[K
  ok [1m[32m471[0m should be strictly equal[K
  ok [1m[32m472[0m should be strictly equal[K
  ok [1m[32m473[0m should be strictly equal[K
  ok [1m[32m474[0m should be strictly equal[K
  ok [1m[32m475[0m should be strictly equal[K
  ok [1m[32m476[0m undefined[K
  ok [1m[32m477[0m undefined[K
[1A[1G[1m[32m✓ # test getMany() on new db
[0m[1B[1G
# # test getMany() on opening db
[K

  ok [1m[32m478[0m callback (open) is asynchronous[K
  ok [1m[32m479[0m callback (anonymous) is asynchronous[K
  ok [1m[32m480[0m callback (open) is asynchronous[K
  ok [1m[32m481[0m callback (anonymous) is asynchronous[K
  ok [1m[32m482[0m should be strictly equal[K
  ok [1m[32m483[0m should be strictly equal[K
  ok [1m[32m484[0m should be strictly equal[K
  ok [1m[32m485[0m should be strictly equal[K
  ok [1m[32m486[0m undefined[K
  ok [1m[32m487[0m undefined[K
[1A[1G[1m[32m✓ # test getMany() on opening db
[0m[1B[1G
# # test getMany() on closed db
[K

  ok [1m[32m488[0m undefined[K
  ok [1m[32m489[0m should be strictly equal[K
  ok [1m[32m490[0m undefined[K
  ok [1m[32m491[0m should be strictly equal[K
  ok [1m[32m492[0m callback (anonymous) is asynchronous[K
  ok [1m[32m493[0m should be strictly equal[K
  ok [1m[32m494[0m undefined[K
  ok [1m[32m495[0m should be strictly equal[K
  ok [1m[32m496[0m undefined[K
  ok [1m[32m497[0m should be strictly equal[K
  ok [1m[32m498[0m callback (anonymous) is asynchronous[K
  ok [1m[32m499[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closed db
[0m[1B[1G
# # test getMany() on closing db
[K

  ok [1m[32m500[0m undefined[K
  ok [1m[32m501[0m callback (anonymous) is asynchronous[K
  ok [1m[32m502[0m undefined[K
  ok [1m[32m503[0m should be strictly equal[K
  ok [1m[32m504[0m undefined[K
  ok [1m[32m505[0m callback (anonymous) is asynchronous[K
  ok [1m[32m506[0m undefined[K
  ok [1m[32m507[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closing db
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test callback-less, 2-arg, batch() throws
[K

  ok [1m[32m508[0m callback-less, 2-arg batch() throws[K
[1A[1G[1m[32m✓ # test callback-less, 2-arg, batch() throws
[0m[1B[1G
# # test batch() with missing `value`
[K

  ok [1m[32m509[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with missing `value`
[0m[1B[1G
# # test batch() with null or undefined `value`
[K

  ok [1m[32m510[0m correct error message[K
  ok [1m[32m511[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `value`
[0m[1B[1G
# # test batch() with missing `key`
[K

  ok [1m[32m512[0m got error[K
  ok [1m[32m513[0m correct error message[K
  ok [1m[32m514[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key`
[0m[1B[1G
# # test batch() with null or undefined `key`
[K

  ok [1m[32m515[0m got error[K
  ok [1m[32m516[0m correct error message[K
  ok [1m[32m517[0m callback is asynchronous[K
  ok [1m[32m518[0m got error[K
  ok [1m[32m519[0m correct error message[K
  ok [1m[32m520[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `key`
[0m[1B[1G
# # test batch() with empty `key`
[K

  ok [1m[32m521[0m got error[K
  ok [1m[32m522[0m correct error message[K
  ok [1m[32m523[0m callback is asynchronous[K
  ok [1m[32m524[0m got error[K
  ok [1m[32m525[0m correct error message[K
  ok [1m[32m526[0m callback is asynchronous[K
  ok [1m[32m527[0m got error[K
  ok [1m[32m528[0m correct error message[K
  ok [1m[32m529[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty `key`
[0m[1B[1G
# # test batch() with missing `key` and `value`
[K

  ok [1m[32m530[0m got error[K
  ok [1m[32m531[0m correct error message[K
  ok [1m[32m532[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key` and `value`
[0m[1B[1G
# # test batch() with missing `type`
[K

  ok [1m[32m533[0m got error[K
  ok [1m[32m534[0m correct error message[K
  ok [1m[32m535[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `type`
[0m[1B[1G
# # test batch() with wrong `type`
[K

  ok [1m[32m536[0m got error[K
  ok [1m[32m537[0m correct error message[K
  ok [1m[32m538[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with wrong `type`
[0m[1B[1G
# # test batch() with missing array
[K

  ok [1m[32m539[0m got error[K
  ok [1m[32m540[0m correct error message[K
  ok [1m[32m541[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing array
[0m[1B[1G
# # test batch() with undefined array
[K

  ok [1m[32m542[0m got error[K
  ok [1m[32m543[0m correct error message[K
  ok [1m[32m544[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined array
[0m[1B[1G
# # test batch() with null array
[K

  ok [1m[32m545[0m got error[K
  ok [1m[32m546[0m correct error message[K
  ok [1m[32m547[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null array
[0m[1B[1G
# # test batch() with null options
[K

  ok [1m[32m548[0m undefined[K
[1A[1G[1m[32m✓ # test batch() with null options
[0m[1B[1G
# # test batch() with null element
[K

  ok [1m[32m549[0m got error[K
  ok [1m[32m550[0m correct error message[K
  ok [1m[32m551[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null element
[0m[1B[1G
# # test batch() with undefined element
[K

  ok [1m[32m552[0m got error[K
  ok [1m[32m553[0m correct error message[K
  ok [1m[32m554[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined element
[0m[1B[1G
# # test batch() with number element
[K

  ok [1m[32m555[0m got error[K
  ok [1m[32m556[0m correct error message[K
  ok [1m[32m557[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with number element
[0m[1B[1G
# # test batch() with boolean element
[K

  ok [1m[32m558[0m got error[K
  ok [1m[32m559[0m correct error message[K
  ok [1m[32m560[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with boolean element
[0m[1B[1G
# # test batch() with empty array
[K

  ok [1m[32m561[0m no error from batch()[K
  ok [1m[32m562[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty array
[0m[1B[1G
# # test simple batch()
[K

  ok [1m[32m563[0m undefined[K
  ok [1m[32m564[0m null[K
  ok [1m[32m565[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m566[0m undefined[K
  ok [1m[32m567[0m null[K
  ok [1m[32m568[0m should be strictly equal[K
  ok [1m[32m569[0m entry not found[K
  ok [1m[32m570[0m value is undefined[K
  ok [1m[32m571[0m NotFound error[K
  ok [1m[32m572[0m null[K
  ok [1m[32m573[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m574[0m should error[K
  ok [1m[32m575[0m callback is asynchronous[K
  ok [1m[32m576[0m should not be found[K
  ok [1m[32m577[0m should not be found[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test batch has db reference
[K

  ok [1m[32m578[0m should be truthy[K
[1A[1G[1m[32m✓ # test batch has db reference
[0m[1B[1G
# # test batch#put() with missing `value`
[K

  ok [1m[32m579[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `value`
[0m[1B[1G
# # test batch#put() with missing `key`
[K

  ok [1m[32m580[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key`
[0m[1B[1G
# # test batch#put() with null `key`
[K

  ok [1m[32m581[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null `key`
[0m[1B[1G
# # test batch#put() with missing `key` and `value`
[K

  ok [1m[32m582[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key` and `value`
[0m[1B[1G
# # test batch#put() with null or undefined `value`
[K

  ok [1m[32m583[0m correct error message[K
  ok [1m[32m584[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null or undefined `value`
[0m[1B[1G
# # test batch#del() with missing `key`
[K

  ok [1m[32m585[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with missing `key`
[0m[1B[1G
# # test batch#del() with null or undefined `key`
[K

  ok [1m[32m586[0m correct error message[K
  ok [1m[32m587[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with null or undefined `key`
[0m[1B[1G
# # test batch#clear() doesn't throw
[K

[1A[1G[1m[32m✓ # test batch#clear() doesn't throw
[0m[1B[1G
# # test batch#write() with no callback
[K

  ok [1m[32m588[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() with no callback
[0m[1B[1G
# # test batch#put() after write()
[K

  ok [1m[32m589[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() after write()
[0m[1B[1G
# # test batch#del() after write()
[K

  ok [1m[32m590[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() after write()
[0m[1B[1G
# # test batch#clear() after write()
[K

  ok [1m[32m591[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#clear() after write()
[0m[1B[1G
# # test batch#write() after write()
[K

  ok [1m[32m592[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() after write()
[0m[1B[1G
# # test serialize object
[K

  ok [1m[32m593[0m .key is set for .put and .del operations[K
  ok [1m[32m594[0m .value is set for .put operation[K
  ok [1m[32m595[0m .key is set for .put and .del operations[K
[1A[1G[1m[32m✓ # test serialize object
[0m[1B[1G
# # test custom _serialize*
[K

  ok [1m[32m596[0m should be deeply equivalent[K
  ok [1m[32m597[0m should be deeply equivalent[K
  ok [1m[32m598[0m should be deeply equivalent[K
  ok [1m[32m599[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test custom _serialize*
[0m[1B[1G
# # test batch#write() with no operations
[K

  ok [1m[32m600[0m no error from write()[K
  ok [1m[32m601[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch#write() with no operations
[0m[1B[1G
# # test basic batch
[K

  ok [1m[32m602[0m undefined[K
  ok [1m[32m603[0m undefined[K
  ok [1m[32m604[0m undefined[K
  ok [1m[32m605[0m correct number of entries[K
  ok [1m[32m606[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test basic batch
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test iterator has db reference
[K

  ok [1m[32m607[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator has db reference
[0m[1B[1G
# # test iterator#next returns this in callback mode
[K

  ok [1m[32m608[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator#next returns this in callback mode
[0m[1B[1G
# # test twice iterator#end() callback with error
[K

  ok [1m[32m609[0m undefined[K
  ok [1m[32m610[0m returned error[K
  ok [1m[32m611[0m correct error[K
  ok [1m[32m612[0m should be strictly equal[K
  ok [1m[32m613[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test twice iterator#end() callback with error
[0m[1B[1G
# # test iterator#next after iterator#end() callback with error
[K

  ok [1m[32m614[0m undefined[K
  ok [1m[32m615[0m returned error[K
  ok [1m[32m616[0m correct error[K
  ok [1m[32m617[0m correct message[K
  ok [1m[32m618[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test iterator#next after iterator#end() callback with error
[0m[1B[1G
# # test twice iterator#next() throws
[K

  ok [1m[32m619[0m returned error[K
  ok [1m[32m620[0m correct error[K
  ok [1m[32m621[0m should be strictly equal[K
  ok [1m[32m622[0m callback is asynchronous[K
  ok [1m[32m623[0m undefined[K
  ok [1m[32m624[0m undefined[K
[1A[1G[1m[32m✓ # test twice iterator#next() throws
[0m[1B[1G
# # test simple iterator()
[K

  ok [1m[32m625[0m undefined[K
  ok [1m[32m626[0m null[K
  ok [1m[32m627[0m key argument is a Buffer[K
  ok [1m[32m628[0m value argument is a Buffer[K
  ok [1m[32m629[0m correct key[K
  ok [1m[32m630[0m correct value[K
  ok [1m[32m631[0m null[K
  ok [1m[32m632[0m key argument is a Buffer[K
  ok [1m[32m633[0m value argument is a Buffer[K
  ok [1m[32m634[0m correct key[K
  ok [1m[32m635[0m correct value[K
  ok [1m[32m636[0m null[K
  ok [1m[32m637[0m key argument is a Buffer[K
  ok [1m[32m638[0m value argument is a Buffer[K
  ok [1m[32m639[0m correct key[K
  ok [1m[32m640[0m correct value[K
  ok [1m[32m641[0m undefined[K
  ok [1m[32m642[0m err argument is nullish[K
  ok [1m[32m643[0m key argument is undefined[K
  ok [1m[32m644[0m value argument is undefined[K
  ok [1m[32m645[0m correct number of entries[K
[1A[1G[1m[32m✓ # test simple iterator()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test full data collection
[K

  ok [1m[32m646[0m undefined[K
  ok [1m[32m647[0m correct number of entries[K
  ok [1m[32m648[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection
[0m[1B[1G
# # test full data collection (flipped)
[K

  ok [1m[32m649[0m undefined[K
  ok [1m[32m650[0m correct number of entries[K
  ok [1m[32m651[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection (flipped)
[0m[1B[1G
# # test iterator with reverse=true
[K

  ok [1m[32m652[0m undefined[K
  ok [1m[32m653[0m correct number of entries[K
  ok [1m[32m654[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with reverse=true
[0m[1B[1G
# # test iterator with gte=00
[K

  ok [1m[32m655[0m undefined[K
  ok [1m[32m656[0m correct number of entries[K
  ok [1m[32m657[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00
[0m[1B[1G
# # test iterator with gte=00 (flipped)
[K

  ok [1m[32m658[0m undefined[K
  ok [1m[32m659[0m correct number of entries[K
  ok [1m[32m660[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00 (flipped)
[0m[1B[1G
# # test iterator with gte=50
[K

  ok [1m[32m661[0m undefined[K
  ok [1m[32m662[0m correct number of entries[K
  ok [1m[32m663[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50
[0m[1B[1G
# # test iterator with gte=50 (flipped)
[K

  ok [1m[32m664[0m undefined[K
  ok [1m[32m665[0m correct number of entries[K
  ok [1m[32m666[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50 and reverse=true
[K

  ok [1m[32m667[0m undefined[K
  ok [1m[32m668[0m correct number of entries[K
  ok [1m[32m669[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 and reverse=true
[0m[1B[1G
# # test iterator with gte=49.5 (midway)
[K

  ok [1m[32m670[0m undefined[K
  ok [1m[32m671[0m correct number of entries[K
  ok [1m[32m672[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway)
[0m[1B[1G
# # test iterator with gte=49.5 (midway) (flipped)
[K

  ok [1m[32m673[0m undefined[K
  ok [1m[32m674[0m correct number of entries[K
  ok [1m[32m675[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=49999 (midway)
[K

  ok [1m[32m676[0m undefined[K
  ok [1m[32m677[0m correct number of entries[K
  ok [1m[32m678[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway)
[0m[1B[1G
# # test iterator with gte=49999 (midway) (flipped)
[K

  ok [1m[32m679[0m undefined[K
  ok [1m[32m680[0m correct number of entries[K
  ok [1m[32m681[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m682[0m undefined[K
  ok [1m[32m683[0m correct number of entries[K
  ok [1m[32m684[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m685[0m undefined[K
  ok [1m[32m686[0m correct number of entries[K
  ok [1m[32m687[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=50 and reverse=true
[K

  ok [1m[32m688[0m undefined[K
  ok [1m[32m689[0m correct number of entries[K
  ok [1m[32m690[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=50
[K

  ok [1m[32m691[0m undefined[K
  ok [1m[32m692[0m correct number of entries[K
  ok [1m[32m693[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50
[0m[1B[1G
# # test iterator with lte=50 (flipped)
[K

  ok [1m[32m694[0m undefined[K
  ok [1m[32m695[0m correct number of entries[K
  ok [1m[32m696[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50.5 (midway)
[K

  ok [1m[32m697[0m undefined[K
  ok [1m[32m698[0m correct number of entries[K
  ok [1m[32m699[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway)
[0m[1B[1G
# # test iterator with lte=50.5 (midway) (flipped)
[K

  ok [1m[32m700[0m undefined[K
  ok [1m[32m701[0m correct number of entries[K
  ok [1m[32m702[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=50555 (midway)
[K

  ok [1m[32m703[0m undefined[K
  ok [1m[32m704[0m correct number of entries[K
  ok [1m[32m705[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway)
[0m[1B[1G
# # test iterator with lte=50555 (midway) (flipped)
[K

  ok [1m[32m706[0m undefined[K
  ok [1m[32m707[0m correct number of entries[K
  ok [1m[32m708[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with lt=50555 (midway)
[K

  ok [1m[32m709[0m undefined[K
  ok [1m[32m710[0m correct number of entries[K
  ok [1m[32m711[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway)
[0m[1B[1G
# # test iterator with lt=50555 (midway) (flipped)
[K

  ok [1m[32m712[0m undefined[K
  ok [1m[32m713[0m correct number of entries[K
  ok [1m[32m714[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m715[0m undefined[K
  ok [1m[32m716[0m correct number of entries[K
  ok [1m[32m717[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m718[0m undefined[K
  ok [1m[32m719[0m correct number of entries[K
  ok [1m[32m720[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50 and reverse=true
[K

  ok [1m[32m721[0m undefined[K
  ok [1m[32m722[0m correct number of entries[K
  ok [1m[32m723[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=0
[K

  ok [1m[32m724[0m undefined[K
  ok [1m[32m725[0m correct number of entries[K
  ok [1m[32m726[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0
[0m[1B[1G
# # test iterator with lte=0 (flipped)
[K

  ok [1m[32m727[0m undefined[K
  ok [1m[32m728[0m correct number of entries[K
  ok [1m[32m729[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0 (flipped)
[0m[1B[1G
# # test iterator with lt=0
[K

  ok [1m[32m730[0m undefined[K
  ok [1m[32m731[0m correct number of entries[K
  ok [1m[32m732[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0
[0m[1B[1G
# # test iterator with lt=0 (flipped)
[K

  ok [1m[32m733[0m undefined[K
  ok [1m[32m734[0m correct number of entries[K
  ok [1m[32m735[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70
[K

  ok [1m[32m736[0m undefined[K
  ok [1m[32m737[0m correct number of entries[K
  ok [1m[32m738[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70
[0m[1B[1G
# # test iterator with gte=30 and lte=70 (flipped)
[K

  ok [1m[32m739[0m undefined[K
  ok [1m[32m740[0m correct number of entries[K
  ok [1m[32m741[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 (flipped)
[0m[1B[1G
# # test iterator with gt=29 and lt=71
[K

  ok [1m[32m742[0m undefined[K
  ok [1m[32m743[0m correct number of entries[K
  ok [1m[32m744[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71
[0m[1B[1G
# # test iterator with gt=29 and lt=71 (flipped)
[K

  ok [1m[32m745[0m undefined[K
  ok [1m[32m746[0m correct number of entries[K
  ok [1m[32m747[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m748[0m undefined[K
  ok [1m[32m749[0m correct number of entries[K
  ok [1m[32m750[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # test iterator with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m751[0m undefined[K
  ok [1m[32m752[0m correct number of entries[K
  ok [1m[32m753[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # test iterator with limit=20
[K

  ok [1m[32m754[0m undefined[K
  ok [1m[32m755[0m correct number of entries[K
  ok [1m[32m756[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20
[0m[1B[1G
# # test iterator with limit=20 and gte=20
[K

  ok [1m[32m757[0m undefined[K
  ok [1m[32m758[0m correct number of entries[K
  ok [1m[32m759[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and gte=20
[0m[1B[1G
# # test iterator with limit=20 and reverse=true
[K

  ok [1m[32m760[0m undefined[K
  ok [1m[32m761[0m correct number of entries[K
  ok [1m[32m762[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and reverse=true
[0m[1B[1G
# # test iterator with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m763[0m undefined[K
  ok [1m[32m764[0m correct number of entries[K
  ok [1m[32m765[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # test iterator with limit=-1 should iterate over whole database
[K

  ok [1m[32m766[0m undefined[K
  ok [1m[32m767[0m correct number of entries[K
  ok [1m[32m768[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=-1 should iterate over whole database
[0m[1B[1G
# # test iterator with limit=0 should not iterate over anything
[K

  ok [1m[32m769[0m undefined[K
  ok [1m[32m770[0m correct number of entries[K
  ok [1m[32m771[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=0 should not iterate over anything
[0m[1B[1G
# # test iterator with lte after limit
[K

  ok [1m[32m772[0m undefined[K
  ok [1m[32m773[0m correct number of entries[K
  ok [1m[32m774[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after limit
[0m[1B[1G
# # test iterator with lte before limit
[K

  ok [1m[32m775[0m undefined[K
  ok [1m[32m776[0m correct number of entries[K
  ok [1m[32m777[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before limit
[0m[1B[1G
# # test iterator with gte after database end
[K

  ok [1m[32m778[0m undefined[K
  ok [1m[32m779[0m correct number of entries[K
  ok [1m[32m780[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end
[0m[1B[1G
# # test iterator with gte after database end (flipped)
[K

  ok [1m[32m781[0m undefined[K
  ok [1m[32m782[0m correct number of entries[K
  ok [1m[32m783[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end (flipped)
[0m[1B[1G
# # test iterator with gt after database end
[K

  ok [1m[32m784[0m undefined[K
  ok [1m[32m785[0m correct number of entries[K
  ok [1m[32m786[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end
[0m[1B[1G
# # test iterator with gt after database end (flipped)
[K

  ok [1m[32m787[0m undefined[K
  ok [1m[32m788[0m correct number of entries[K
  ok [1m[32m789[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end (flipped)
[0m[1B[1G
# # test iterator with lte after database end and reverse=true
[K

  ok [1m[32m790[0m undefined[K
  ok [1m[32m791[0m correct number of entries[K
  ok [1m[32m792[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after database end and reverse=true
[0m[1B[1G
# # test iterator with lt after database end
[K

  ok [1m[32m793[0m undefined[K
  ok [1m[32m794[0m correct number of entries[K
  ok [1m[32m795[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end
[0m[1B[1G
# # test iterator with lt after database end (flipped)
[K

  ok [1m[32m796[0m undefined[K
  ok [1m[32m797[0m correct number of entries[K
  ok [1m[32m798[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end (flipped)
[0m[1B[1G
# # test iterator with lt at database end
[K

  ok [1m[32m799[0m undefined[K
  ok [1m[32m800[0m correct number of entries[K
  ok [1m[32m801[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end
[0m[1B[1G
# # test iterator with lt at database end (flipped)
[K

  ok [1m[32m802[0m undefined[K
  ok [1m[32m803[0m correct number of entries[K
  ok [1m[32m804[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end (flipped)
[0m[1B[1G
# # test iterator with lte at database end
[K

  ok [1m[32m805[0m undefined[K
  ok [1m[32m806[0m correct number of entries[K
  ok [1m[32m807[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end
[0m[1B[1G
# # test iterator with lte at database end (flipped)
[K

  ok [1m[32m808[0m undefined[K
  ok [1m[32m809[0m correct number of entries[K
  ok [1m[32m810[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end (flipped)
[0m[1B[1G
# # test iterator with lt before database end
[K

  ok [1m[32m811[0m undefined[K
  ok [1m[32m812[0m correct number of entries[K
  ok [1m[32m813[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end
[0m[1B[1G
# # test iterator with lt before database end (flipped)
[K

  ok [1m[32m814[0m undefined[K
  ok [1m[32m815[0m correct number of entries[K
  ok [1m[32m816[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end (flipped)
[0m[1B[1G
# # test iterator with lte before database end
[K

  ok [1m[32m817[0m undefined[K
  ok [1m[32m818[0m correct number of entries[K
  ok [1m[32m819[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end
[0m[1B[1G
# # test iterator with lte before database end (flipped)
[K

  ok [1m[32m820[0m undefined[K
  ok [1m[32m821[0m correct number of entries[K
  ok [1m[32m822[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end (flipped)
[0m[1B[1G
# # test iterator with lte and gte after database and reverse=true
[K

  ok [1m[32m823[0m undefined[K
  ok [1m[32m824[0m correct number of entries[K
  ok [1m[32m825[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte and gte after database and reverse=true
[0m[1B[1G
# # test iterator with lt and gt after database and reverse=true
[K

  ok [1m[32m826[0m undefined[K
  ok [1m[32m827[0m correct number of entries[K
  ok [1m[32m828[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setup
[K

  ok [1m[32m829[0m no open() error[K
  ok [1m[32m830[0m no batch() error[K
[1A[1G[1m[32m✓ # setup
[0m[1B[1G
# # for await...of db.iterator()
[K

  ok [1m[32m831[0m ended[K
  ok [1m[32m832[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # for await...of db.iterator()
[0m[1B[1G
# # for await...of db.iterator() does not permit reuse
[K

  ok [1m[32m833[0m nexted[K
  ok [1m[32m834[0m nexted[K
  ok [1m[32m835[0m should be strictly equal[K
[1A[1G[1m[32m✓ # for await...of db.iterator() does not permit reuse
[0m[1B[1G
# # for await...of db.iterator() ends on user error
[K

  ok [1m[32m836[0m should be strictly equal[K
  ok [1m[32m837[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user error
[0m[1B[1G
# # for await...of db.iterator() with user error and end() error
[K

  ok [1m[32m838[0m no real error from end()[K
  ok [1m[32m839[0m should be strictly equal[K
  ok [1m[32m840[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on iterator error
[K

  ok [1m[32m841[0m nexted[K
  ok [1m[32m842[0m should be strictly equal[K
  ok [1m[32m843[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on iterator error
[0m[1B[1G
# # for await...of db.iterator() with iterator error and end() error
[K

  ok [1m[32m844[0m nexted[K
  ok [1m[32m845[0m no real error from end()[K
  ok [1m[32m846[0m should be strictly equal[K
  ok [1m[32m847[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with iterator error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on user break
[K

  ok [1m[32m848[0m got a chance to break[K
  ok [1m[32m849[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user break
[0m[1B[1G
# # for await...of db.iterator() with user break and end() error
[K

  ok [1m[32m850[0m got a chance to break[K
  ok [1m[32m851[0m no real error from end()[K
  ok [1m[32m852[0m should be strictly equal[K
  ok [1m[32m853[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user break and end() error
[0m[1B[1G
# # teardown
[K

  ok [1m[32m854[0m no close() error[K
[1A[1G[1m[32m✓ # teardown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # iterator#seek() throws if next() has not completed
[K

  ok [1m[32m855[0m no error from open()[K
  ok [1m[32m856[0m got error[K
  ok [1m[32m857[0m no error from next()[K
  ok [1m[32m858[0m next is asynchronous[K
  ok [1m[32m859[0m no error from done()[K
  ok [1m[32m860[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws if next() has not completed
[0m[1B[1G
# # iterator#seek() throws after end()
[K

  ok [1m[32m861[0m no error from open()[K
  ok [1m[32m862[0m no error from next()[K
  ok [1m[32m863[0m no error from end()[K
  ok [1m[32m864[0m got error[K
  ok [1m[32m865[0m no error from done()[K
  ok [1m[32m866[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws after end()
[0m[1B[1G
# # iterator#seek() to string target
[K

  ok [1m[32m867[0m no error from open()[K
  ok [1m[32m868[0m no error from batch()[K
  ok [1m[32m869[0m no error[K
  ok [1m[32m870[0m key matches[K
  ok [1m[32m871[0m value matches[K
  ok [1m[32m872[0m no error[K
  ok [1m[32m873[0m end of iterator[K
  ok [1m[32m874[0m end of iterator[K
  ok [1m[32m875[0m no error from done()[K
  ok [1m[32m876[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to string target
[0m[1B[1G
# # iterator#seek() to buffer target
[K

  ok [1m[32m877[0m no error from open()[K
  ok [1m[32m878[0m no error from batch()[K
  ok [1m[32m879[0m no error from next()[K
  ok [1m[32m880[0m key matches[K
  ok [1m[32m881[0m value matches[K
  ok [1m[32m882[0m no error from next()[K
  ok [1m[32m883[0m end of iterator[K
  ok [1m[32m884[0m end of iterator[K
  ok [1m[32m885[0m no error from done()[K
  ok [1m[32m886[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to buffer target
[0m[1B[1G
# # iterator#seek() on reverse iterator
[K

  ok [1m[32m887[0m no error from open()[K
  ok [1m[32m888[0m no error from batch()[K
  ok [1m[32m889[0m no error[K
  ok [1m[32m890[0m key matches[K
  ok [1m[32m891[0m value matches[K
  ok [1m[32m892[0m no error from done()[K
  ok [1m[32m893[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator
[0m[1B[1G
# # iterator#seek() to out of range target
[K

  ok [1m[32m894[0m no error from open()[K
  ok [1m[32m895[0m no error from batch()[K
  ok [1m[32m896[0m no error[K
  ok [1m[32m897[0m end of iterator[K
  ok [1m[32m898[0m end of iterator[K
  ok [1m[32m899[0m no error from done()[K
  ok [1m[32m900[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to out of range target
[0m[1B[1G
# # iterator#seek() on reverse iterator to out of range target
[K

  ok [1m[32m901[0m no error from open()[K
  ok [1m[32m902[0m no error from batch()[K
  ok [1m[32m903[0m no error[K
  ok [1m[32m904[0m should be deeply equivalent[K
  ok [1m[32m905[0m should be deeply equivalent[K
  ok [1m[32m906[0m no error from done()[K
  ok [1m[32m907[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator to out of range target
[0m[1B[1G
# # iterator#seek() respects range
[K

  ok [1m[32m908[0m no error from open()[K
  ok [1m[32m909[0m no error from batch()[K
  ok [1m[32m910[0m no error from next()[K
  ok [1m[32m911[0m seek(4) on {"gt":"5"} yields undefined[K
  ok [1m[32m912[0m no error from next()[K
  ok [1m[32m913[0m seek(5) on {"gt":"5"} yields undefined[K
  ok [1m[32m914[0m no error from next()[K
  ok [1m[32m915[0m seek(6) on {"gt":"5"} yields 6[K
  ok [1m[32m916[0m no error from next()[K
  ok [1m[32m917[0m seek(4) on {"gte":"5"} yields undefined[K
  ok [1m[32m918[0m no error from next()[K
  ok [1m[32m919[0m seek(5) on {"gte":"5"} yields 5[K
  ok [1m[32m920[0m no error from next()[K
  ok [1m[32m921[0m seek(6) on {"gte":"5"} yields 6[K
  ok [1m[32m922[0m no error from next()[K
  ok [1m[32m923[0m seek(4) on {"lt":"5"} yields 4[K
  ok [1m[32m924[0m no error from next()[K
  ok [1m[32m925[0m seek(5) on {"lt":"5"} yields undefined[K
  ok [1m[32m926[0m no error from next()[K
  ok [1m[32m927[0m seek(6) on {"lt":"5"} yields undefined[K
  ok [1m[32m928[0m no error from next()[K
  ok [1m[32m929[0m seek(4) on {"lte":"5"} yields 4[K
  ok [1m[32m930[0m no error from next()[K
  ok [1m[32m931[0m seek(5) on {"lte":"5"} yields 5[K
  ok [1m[32m932[0m no error from next()[K
  ok [1m[32m933[0m seek(6) on {"lte":"5"} yields undefined[K
  ok [1m[32m934[0m no error from next()[K
  ok [1m[32m935[0m seek(4) on {"lt":"5","reverse":true} yields 4[K
  ok [1m[32m936[0m no error from next()[K
  ok [1m[32m937[0m seek(5) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m938[0m no error from next()[K
  ok [1m[32m939[0m seek(6) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m940[0m no error from next()[K
  ok [1m[32m941[0m seek(4) on {"lte":"5","reverse":true} yields 4[K
  ok [1m[32m942[0m no error from next()[K
  ok [1m[32m943[0m seek(5) on {"lte":"5","reverse":true} yields 5[K
  ok [1m[32m944[0m no error from next()[K
  ok [1m[32m945[0m seek(6) on {"lte":"5","reverse":true} yields undefined[K
  ok [1m[32m946[0m no error from next()[K
  ok [1m[32m947[0m seek(4) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m948[0m no error from next()[K
  ok [1m[32m949[0m seek(5) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m950[0m no error from next()[K
  ok [1m[32m951[0m seek(6) on {"gt":"5","reverse":true} yields 6[K
  ok [1m[32m952[0m no error from next()[K
  ok [1m[32m953[0m seek(4) on {"gte":"5","reverse":true} yields undefined[K
  ok [1m[32m954[0m no error from next()[K
  ok [1m[32m955[0m seek(5) on {"gte":"5","reverse":true} yields 5[K
  ok [1m[32m956[0m no error from next()[K
  ok [1m[32m957[0m seek(6) on {"gte":"5","reverse":true} yields 6[K
  ok [1m[32m958[0m no error from next()[K
  ok [1m[32m959[0m seek(7) on {"gt":"7","lt":"8"} yields undefined[K
  ok [1m[32m960[0m no error from next()[K
  ok [1m[32m961[0m seek(7) on {"gte":"7","lt":"8"} yields 7[K
  ok [1m[32m962[0m no error from next()[K
  ok [1m[32m963[0m seek(8) on {"gte":"7","lt":"8"} yields undefined[K
  ok [1m[32m964[0m no error from next()[K
  ok [1m[32m965[0m seek(8) on {"gt":"7","lte":"8"} yields 8[K
  ok [1m[32m966[0m no error from end()[K
  ok [1m[32m967[0m no error from end()[K
  ok [1m[32m968[0m no error from end()[K
  ok [1m[32m969[0m no error from end()[K
  ok [1m[32m970[0m no error from end()[K
  ok [1m[32m971[0m no error from end()[K
  ok [1m[32m972[0m no error from end()[K
  ok [1m[32m973[0m no error from end()[K
  ok [1m[32m974[0m no error from end()[K
  ok [1m[32m975[0m no error from end()[K
  ok [1m[32m976[0m no error from end()[K
  ok [1m[32m977[0m no error from end()[K
  ok [1m[32m978[0m no error from end()[K
  ok [1m[32m979[0m no error from end()[K
  ok [1m[32m980[0m no error from end()[K
  ok [1m[32m981[0m no error from end()[K
  ok [1m[32m982[0m no error from end()[K
  ok [1m[32m983[0m no error from end()[K
  ok [1m[32m984[0m no error from end()[K
  ok [1m[32m985[0m no error from end()[K
  ok [1m[32m986[0m no error from end()[K
  ok [1m[32m987[0m no error from end()[K
  ok [1m[32m988[0m no error from end()[K
  ok [1m[32m989[0m no error from end()[K
  ok [1m[32m990[0m no error from end()[K
  ok [1m[32m991[0m no error from end()[K
  ok [1m[32m992[0m no error from end()[K
  ok [1m[32m993[0m no error from end()[K
  ok [1m[32m994[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() respects range
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # delete key after snapshotting
[K

  ok [1m[32m995[0m no open error[K
  ok [1m[32m996[0m no put error[K
  ok [1m[32m997[0m no del error[K
  ok [1m[32m998[0m no next error[K
  ok [1m[32m999[0m got a key[K
  ok [1m[32m1000[0m correct key[K
  ok [1m[32m1001[0m correct value[K
  ok [1m[32m1002[0m no run error[K
  ok [1m[32m1003[0m no iterator end error[K
[1A[1G[1m[32m✓ # delete key after snapshotting
[0m[1B[1G
# # overwrite key after snapshotting
[K

  ok [1m[32m1004[0m no open error[K
  ok [1m[32m1005[0m no put error[K
  ok [1m[32m1006[0m no put error[K
  ok [1m[32m1007[0m no next error[K
  ok [1m[32m1008[0m got a key[K
  ok [1m[32m1009[0m correct key[K
  ok [1m[32m1010[0m correct value[K
  ok [1m[32m1011[0m no run error[K
  ok [1m[32m1012[0m no iterator end error[K
[1A[1G[1m[32m✓ # overwrite key after snapshotting
[0m[1B[1G
# # add key after snapshotting that sorts first
[K

  ok [1m[32m1013[0m no open error[K
  ok [1m[32m1014[0m no put error[K
  ok [1m[32m1015[0m no put error[K
  ok [1m[32m1016[0m no next error[K
  ok [1m[32m1017[0m got a key[K
  ok [1m[32m1018[0m correct key[K
  ok [1m[32m1019[0m correct value[K
  ok [1m[32m1020[0m no run error[K
  ok [1m[32m1021[0m no iterator end error[K
[1A[1G[1m[32m✓ # add key after snapshotting that sorts first
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less clear() throws
[K

  ok [1m[32m1022[0m no-arg clear() throws[K
[1A[1G[1m[32m✓ # test argument-less clear() throws
[0m[1B[1G
# # test simple clear() on string keys
[K

  ok [1m[32m1023[0m no open error[K
  ok [1m[32m1024[0m no batch error[K
  ok [1m[32m1025[0m no concat error[K
  ok [1m[32m1026[0m has entries[K
  ok [1m[32m1027[0m no clear error[K
  ok [1m[32m1028[0m no concat error[K
  ok [1m[32m1029[0m has no entries[K
  ok [1m[32m1030[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on string keys
[0m[1B[1G
# # test simple clear() on buffer keys
[K

  ok [1m[32m1031[0m no open error[K
  ok [1m[32m1032[0m no batch error[K
  ok [1m[32m1033[0m no concat error[K
  ok [1m[32m1034[0m has entries[K
  ok [1m[32m1035[0m no clear error[K
  ok [1m[32m1036[0m no concat error[K
  ok [1m[32m1037[0m has no entries[K
  ok [1m[32m1038[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on buffer keys
[0m[1B[1G
# # test simple clear() on mixed keys
[K

  ok [1m[32m1039[0m no open error[K
  ok [1m[32m1040[0m no batch error[K
  ok [1m[32m1041[0m no concat error[K
  ok [1m[32m1042[0m has entries[K
  ok [1m[32m1043[0m no clear error[K
  ok [1m[32m1044[0m no concat error[K
  ok [1m[32m1045[0m has no entries[K
  ok [1m[32m1046[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on mixed keys
[0m[1B[1G
# # test simple clear() on non-utf8 buffer keys
[K

  ok [1m[32m1047[0m no open error[K
  ok [1m[32m1048[0m no batch error[K
  ok [1m[32m1049[0m no concat error[K
  ok [1m[32m1050[0m has entries[K
  ok [1m[32m1051[0m no clear error[K
  ok [1m[32m1052[0m no concat error[K
  ok [1m[32m1053[0m has no entries[K
  ok [1m[32m1054[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on non-utf8 buffer keys
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db#clear() with full range
[K

  ok [1m[32m1055[0m no open error[K
  ok [1m[32m1056[0m no batch error[K
  ok [1m[32m1057[0m no clear error[K
  ok [1m[32m1058[0m no concat error[K
  ok [1m[32m1059[0m correct number of entries[K
  ok [1m[32m1060[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with full range
[0m[1B[1G
# # db#clear() with reverse=true
[K

  ok [1m[32m1061[0m no open error[K
  ok [1m[32m1062[0m no batch error[K
  ok [1m[32m1063[0m no clear error[K
  ok [1m[32m1064[0m no concat error[K
  ok [1m[32m1065[0m correct number of entries[K
  ok [1m[32m1066[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with reverse=true
[0m[1B[1G
# # db#clear() with gte=00
[K

  ok [1m[32m1067[0m no open error[K
  ok [1m[32m1068[0m no batch error[K
  ok [1m[32m1069[0m no clear error[K
  ok [1m[32m1070[0m no concat error[K
  ok [1m[32m1071[0m correct number of entries[K
  ok [1m[32m1072[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=00
[0m[1B[1G
# # db#clear() with gte=50
[K

  ok [1m[32m1073[0m no open error[K
  ok [1m[32m1074[0m no batch error[K
  ok [1m[32m1075[0m no clear error[K
  ok [1m[32m1076[0m no concat error[K
  ok [1m[32m1077[0m correct number of entries[K
  ok [1m[32m1078[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50
[0m[1B[1G
# # db#clear() with lte=50 and reverse=true
[K

  ok [1m[32m1079[0m no open error[K
  ok [1m[32m1080[0m no batch error[K
  ok [1m[32m1081[0m no clear error[K
  ok [1m[32m1082[0m no concat error[K
  ok [1m[32m1083[0m correct number of entries[K
  ok [1m[32m1084[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50 and reverse=true
[0m[1B[1G
# # db#clear() with gte=49.5 (midway)
[K

  ok [1m[32m1085[0m no open error[K
  ok [1m[32m1086[0m no batch error[K
  ok [1m[32m1087[0m no clear error[K
  ok [1m[32m1088[0m no concat error[K
  ok [1m[32m1089[0m correct number of entries[K
  ok [1m[32m1090[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49.5 (midway)
[0m[1B[1G
# # db#clear() with gte=49999 (midway)
[K

  ok [1m[32m1091[0m no open error[K
  ok [1m[32m1092[0m no batch error[K
  ok [1m[32m1093[0m no clear error[K
  ok [1m[32m1094[0m no concat error[K
  ok [1m[32m1095[0m correct number of entries[K
  ok [1m[32m1096[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49999 (midway)
[0m[1B[1G
# # db#clear() with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m1097[0m no open error[K
  ok [1m[32m1098[0m no batch error[K
  ok [1m[32m1099[0m no clear error[K
  ok [1m[32m1100[0m no concat error[K
  ok [1m[32m1101[0m correct number of entries[K
  ok [1m[32m1102[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m1103[0m no open error[K
  ok [1m[32m1104[0m no batch error[K
  ok [1m[32m1105[0m no clear error[K
  ok [1m[32m1106[0m no concat error[K
  ok [1m[32m1107[0m correct number of entries[K
  ok [1m[32m1108[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=50 and reverse=true
[K

  ok [1m[32m1109[0m no open error[K
  ok [1m[32m1110[0m no batch error[K
  ok [1m[32m1111[0m no clear error[K
  ok [1m[32m1112[0m no concat error[K
  ok [1m[32m1113[0m correct number of entries[K
  ok [1m[32m1114[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=50
[K

  ok [1m[32m1115[0m no open error[K
  ok [1m[32m1116[0m no batch error[K
  ok [1m[32m1117[0m no clear error[K
  ok [1m[32m1118[0m no concat error[K
  ok [1m[32m1119[0m correct number of entries[K
  ok [1m[32m1120[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50
[0m[1B[1G
# # db#clear() with lte=50.5 (midway)
[K

  ok [1m[32m1121[0m no open error[K
  ok [1m[32m1122[0m no batch error[K
  ok [1m[32m1123[0m no clear error[K
  ok [1m[32m1124[0m no concat error[K
  ok [1m[32m1125[0m correct number of entries[K
  ok [1m[32m1126[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50.5 (midway)
[0m[1B[1G
# # db#clear() with lte=50555 (midway)
[K

  ok [1m[32m1127[0m no open error[K
  ok [1m[32m1128[0m no batch error[K
  ok [1m[32m1129[0m no clear error[K
  ok [1m[32m1130[0m no concat error[K
  ok [1m[32m1131[0m correct number of entries[K
  ok [1m[32m1132[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50555 (midway)
[0m[1B[1G
# # db#clear() with lt=50555 (midway)
[K

  ok [1m[32m1133[0m no open error[K
  ok [1m[32m1134[0m no batch error[K
  ok [1m[32m1135[0m no clear error[K
  ok [1m[32m1136[0m no concat error[K
  ok [1m[32m1137[0m correct number of entries[K
  ok [1m[32m1138[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50555 (midway)
[0m[1B[1G
# # db#clear() with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m1139[0m no open error[K
  ok [1m[32m1140[0m no batch error[K
  ok [1m[32m1141[0m no clear error[K
  ok [1m[32m1142[0m no concat error[K
  ok [1m[32m1143[0m correct number of entries[K
  ok [1m[32m1144[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m1145[0m no open error[K
  ok [1m[32m1146[0m no batch error[K
  ok [1m[32m1147[0m no clear error[K
  ok [1m[32m1148[0m no concat error[K
  ok [1m[32m1149[0m correct number of entries[K
  ok [1m[32m1150[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50 and reverse=true
[K

  ok [1m[32m1151[0m no open error[K
  ok [1m[32m1152[0m no batch error[K
  ok [1m[32m1153[0m no clear error[K
  ok [1m[32m1154[0m no concat error[K
  ok [1m[32m1155[0m correct number of entries[K
  ok [1m[32m1156[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=0
[K

  ok [1m[32m1157[0m no open error[K
  ok [1m[32m1158[0m no batch error[K
  ok [1m[32m1159[0m no clear error[K
  ok [1m[32m1160[0m no concat error[K
  ok [1m[32m1161[0m correct number of entries[K
  ok [1m[32m1162[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=0
[0m[1B[1G
# # db#clear() with lt=0
[K

  ok [1m[32m1163[0m no open error[K
  ok [1m[32m1164[0m no batch error[K
  ok [1m[32m1165[0m no clear error[K
  ok [1m[32m1166[0m no concat error[K
  ok [1m[32m1167[0m correct number of entries[K
  ok [1m[32m1168[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=0
[0m[1B[1G
# # db#clear() with gte=30 and lte=70
[K

  ok [1m[32m1169[0m no open error[K
  ok [1m[32m1170[0m no batch error[K
  ok [1m[32m1171[0m no clear error[K
  ok [1m[32m1172[0m no concat error[K
  ok [1m[32m1173[0m correct number of entries[K
  ok [1m[32m1174[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70
[0m[1B[1G
# # db#clear() with gt=29 and lt=71
[K

  ok [1m[32m1175[0m no open error[K
  ok [1m[32m1176[0m no batch error[K
  ok [1m[32m1177[0m no clear error[K
  ok [1m[32m1178[0m no concat error[K
  ok [1m[32m1179[0m correct number of entries[K
  ok [1m[32m1180[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71
[0m[1B[1G
# # db#clear() with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m1181[0m no open error[K
  ok [1m[32m1182[0m no batch error[K
  ok [1m[32m1183[0m no clear error[K
  ok [1m[32m1184[0m no concat error[K
  ok [1m[32m1185[0m correct number of entries[K
  ok [1m[32m1186[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # db#clear() with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m1187[0m no open error[K
  ok [1m[32m1188[0m no batch error[K
  ok [1m[32m1189[0m no clear error[K
  ok [1m[32m1190[0m no concat error[K
  ok [1m[32m1191[0m correct number of entries[K
  ok [1m[32m1192[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20
[K

  ok [1m[32m1193[0m no open error[K
  ok [1m[32m1194[0m no batch error[K
  ok [1m[32m1195[0m no clear error[K
  ok [1m[32m1196[0m no concat error[K
  ok [1m[32m1197[0m correct number of entries[K
  ok [1m[32m1198[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20
[0m[1B[1G
# # db#clear() with limit=20 and gte=20
[K

  ok [1m[32m1199[0m no open error[K
  ok [1m[32m1200[0m no batch error[K
  ok [1m[32m1201[0m no clear error[K
  ok [1m[32m1202[0m no concat error[K
  ok [1m[32m1203[0m correct number of entries[K
  ok [1m[32m1204[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and gte=20
[0m[1B[1G
# # db#clear() with limit=20 and reverse=true
[K

  ok [1m[32m1205[0m no open error[K
  ok [1m[32m1206[0m no batch error[K
  ok [1m[32m1207[0m no clear error[K
  ok [1m[32m1208[0m no concat error[K
  ok [1m[32m1209[0m correct number of entries[K
  ok [1m[32m1210[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m1211[0m no open error[K
  ok [1m[32m1212[0m no batch error[K
  ok [1m[32m1213[0m no clear error[K
  ok [1m[32m1214[0m no concat error[K
  ok [1m[32m1215[0m correct number of entries[K
  ok [1m[32m1216[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # db#clear() with limit=-1 should clear whole database
[K

  ok [1m[32m1217[0m no open error[K
  ok [1m[32m1218[0m no batch error[K
  ok [1m[32m1219[0m no clear error[K
  ok [1m[32m1220[0m no concat error[K
  ok [1m[32m1221[0m correct number of entries[K
  ok [1m[32m1222[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=-1 should clear whole database
[0m[1B[1G
# # db#clear() with limit=0 should not clear anything
[K

  ok [1m[32m1223[0m no open error[K
  ok [1m[32m1224[0m no batch error[K
  ok [1m[32m1225[0m no clear error[K
  ok [1m[32m1226[0m no concat error[K
  ok [1m[32m1227[0m correct number of entries[K
  ok [1m[32m1228[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=0 should not clear anything
[0m[1B[1G
# # db#clear() with lte after limit
[K

  ok [1m[32m1229[0m no open error[K
  ok [1m[32m1230[0m no batch error[K
  ok [1m[32m1231[0m no clear error[K
  ok [1m[32m1232[0m no concat error[K
  ok [1m[32m1233[0m correct number of entries[K
  ok [1m[32m1234[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after limit
[0m[1B[1G
# # db#clear() with lte before limit
[K

  ok [1m[32m1235[0m no open error[K
  ok [1m[32m1236[0m no batch error[K
  ok [1m[32m1237[0m no clear error[K
  ok [1m[32m1238[0m no concat error[K
  ok [1m[32m1239[0m correct number of entries[K
  ok [1m[32m1240[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte before limit
[0m[1B[1G
# # db#clear() with gte after database end
[K

  ok [1m[32m1241[0m no open error[K
  ok [1m[32m1242[0m no batch error[K
  ok [1m[32m1243[0m no clear error[K
  ok [1m[32m1244[0m no concat error[K
  ok [1m[32m1245[0m correct number of entries[K
  ok [1m[32m1246[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte after database end
[0m[1B[1G
# # db#clear() with gt after database end
[K

  ok [1m[32m1247[0m no open error[K
  ok [1m[32m1248[0m no batch error[K
  ok [1m[32m1249[0m no clear error[K
  ok [1m[32m1250[0m no concat error[K
  ok [1m[32m1251[0m correct number of entries[K
  ok [1m[32m1252[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt after database end
[0m[1B[1G
# # db#clear() with lte after database end and reverse=true
[K

  ok [1m[32m1253[0m no open error[K
  ok [1m[32m1254[0m no batch error[K
  ok [1m[32m1255[0m no clear error[K
  ok [1m[32m1256[0m no concat error[K
  ok [1m[32m1257[0m correct number of entries[K
  ok [1m[32m1258[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after database end and reverse=true
[0m[1B[1G
# # db#clear() with lte and gte after database and reverse=true
[K

  ok [1m[32m1259[0m no open error[K
  ok [1m[32m1260[0m no batch error[K
  ok [1m[32m1261[0m no clear error[K
  ok [1m[32m1262[0m no concat error[K
  ok [1m[32m1263[0m correct number of entries[K
  ok [1m[32m1264[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte and gte after database and reverse=true
[0m[1B[1G
# # db#clear() with lt and gt after database and reverse=true
[K

  ok [1m[32m1265[0m no open error[K
  ok [1m[32m1266[0m no batch error[K
  ok [1m[32m1267[0m no clear error[K
  ok [1m[32m1268[0m no concat error[K
  ok [1m[32m1269[0m correct number of entries[K
  ok [1m[32m1270[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # testCommon.factory() returns a unique database
[K

  ok [1m[32m1271[0m no error while opening db1[K
  ok [1m[32m1272[0m no error while opening db2[K
  ok [1m[32m1273[0m put key in db1[K
  ok [1m[32m1274[0m got items from db2[K
  ok [1m[32m1275[0m db2 should be empty[K
  ok [1m[32m1276[0m no error while closing db1[K
  ok [1m[32m1277[0m no error while closing db2[K
[1A[1G[1m[32m✓ # testCommon.factory() returns a unique database
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db has manifest
[K

  ok [1m[32m1278[0m manifest is object[K
  ok [1m[32m1279[0m additionalMethods is object[K
  ok [1m[32m1280[0m truthy: bufferKeys[K
  ok [1m[32m1281[0m truthy: snapshots[K
  ok [1m[32m1282[0m false: permanence[K
  ok [1m[32m1283[0m truthy: seek[K
  ok [1m[32m1284[0m truthy: clear[K
  ok [1m[32m1285[0m truthy: getMany[K
  ok [1m[32m1286[0m truthy: status[K
  ok [1m[32m1287[0m false: keyIterator[K
  ok [1m[32m1288[0m false: valueIterator[K
  ok [1m[32m1289[0m false: iteratorNextv[K
  ok [1m[32m1290[0m false: iteratorAll[K
  ok [1m[32m1291[0m false: idempotentOpen[K
  ok [1m[32m1292[0m false: passiveOpen[K
  ok [1m[32m1293[0m false: serialize[K
  ok [1m[32m1294[0m false: createIfMissing[K
  ok [1m[32m1295[0m false: errorIfExists[K
  ok [1m[32m1296[0m false: deferredOpen[K
  ok [1m[32m1297[0m truthy: openCallback[K
  ok [1m[32m1298[0m truthy: promises[K
  ok [1m[32m1299[0m truthy: streams[K
  ok [1m[32m1300[0m false: encodings[K
  ok [1m[32m1301[0m false: events[K
  ok [1m[32m1302[0m truthy: additionalMethods[K
  ok [1m[32m1303[0m manifest has unique identity[K
  ok [1m[32m1304[0m manifest.additionalMethods has unique identity[K
  ok [1m[32m1305[0m no open error[K
  ok [1m[32m1306[0m manifest did not change after open[K
  ok [1m[32m1307[0m no close error[K
  ok [1m[32m1308[0m manifest did not change after close[K
[1A[1G[1m[32m✓ # db has manifest
[0m[1B[1G
# # manifest has status
[K

  ok [1m[32m1309[0m should be strictly equal[K
  ok [1m[32m1310[0m no open error[K
[1A[1G[1m[32m✓ # manifest has status
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # test database open method exists
[K

  ok [1m[32m1311[0m database object returned[K
  ok [1m[32m1312[0m open() function exists[K
[1A[1G[1m[32m✓ # test database open method exists
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp
[K

[1A[1G[1m[32m✓ # setUp
[0m[1B[1G
# # test database open no-arg throws
[K

  ok [1m[32m1313[0m no-arg open() throws[K
[1A[1G[1m[32m✓ # test database open no-arg throws
[0m[1B[1G
# # test callback-less, 1-arg, open() throws
[K

  ok [1m[32m1314[0m callback-less, 1-arg open() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, open() throws
[0m[1B[1G
# # test database open, no options
[K

  ok [1m[32m1315[0m undefined[K
[1A[1G[1m[32m✓ # test database open, no options
[0m[1B[1G
# # test database open, options and callback
[K

  ok [1m[32m1316[0m undefined[K
[1A[1G[1m[32m✓ # test database open, options and callback
[0m[1B[1G
# # test database open, close and open
[K

  ok [1m[32m1317[0m undefined[K
  ok [1m[32m1318[0m undefined[K
  ok [1m[32m1319[0m undefined[K
[1A[1G[1m[32m✓ # test database open, close and open
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test close()
[K

  ok [1m[32m1320[0m no-arg close() throws[K
  ok [1m[32m1321[0m non-callback close() throws[K
  ok [1m[32m1322[0m undefined[K
[1A[1G[1m[32m✓ # test close()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less put() throws
[K

  ok [1m[32m1323[0m no-arg put() throws[K
[1A[1G[1m[32m✓ # test argument-less put() throws
[0m[1B[1G
# # test callback-less, 1-arg, put() throws
[K

  ok [1m[32m1324[0m callback-less, 1-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, put() throws
[0m[1B[1G
# # test callback-less, 2-arg, put() throws
[K

  ok [1m[32m1325[0m callback-less, 2-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 2-arg, put() throws
[0m[1B[1G
# # test callback-less, 3-arg, put() throws
[K

  ok [1m[32m1326[0m callback-less, 3-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, put() throws
[0m[1B[1G
# # test simple put()
[K

  ok [1m[32m1327[0m undefined[K
  ok [1m[32m1328[0m null[K
  ok [1m[32m1329[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple put()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less get() throws
[K

  ok [1m[32m1330[0m no-arg get() throws[K
[1A[1G[1m[32m✓ # test argument-less get() throws
[0m[1B[1G
# # test callback-less, 1-arg, get() throws
[K

  ok [1m[32m1331[0m callback-less, 1-arg get() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, get() throws
[0m[1B[1G
# # test callback-less, 3-arg, get() throws
[K

  ok [1m[32m1332[0m callback-less, 2-arg get() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, get() throws
[0m[1B[1G
# # test simple get()
[K

  ok [1m[32m1333[0m undefined[K
  ok [1m[32m1334[0m null[K
  ok [1m[32m1335[0m should not be string by default[K
  ok [1m[32m1336[0m should be strictly equal[K
  ok [1m[32m1337[0m null[K
  ok [1m[32m1338[0m should not be string by default[K
  ok [1m[32m1339[0m should be strictly equal[K
  ok [1m[32m1340[0m null[K
  ok [1m[32m1341[0m should be string if not buffer[K
  ok [1m[32m1342[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple get()
[0m[1B[1G
# # test simultaneous get()
[K

  ok [1m[32m1343[0m undefined[K
  ok [1m[32m1344[0m null[K
  ok [1m[32m1345[0m should be strictly equal[K
  ok [1m[32m1346[0m null[K
  ok [1m[32m1347[0m should be strictly equal[K
  ok [1m[32m1348[0m null[K
  ok [1m[32m1349[0m should be strictly equal[K
  ok [1m[32m1350[0m null[K
  ok [1m[32m1351[0m should be strictly equal[K
  ok [1m[32m1352[0m null[K
  ok [1m[32m1353[0m should be strictly equal[K
  ok [1m[32m1354[0m null[K
  ok [1m[32m1355[0m should be strictly equal[K
  ok [1m[32m1356[0m null[K
  ok [1m[32m1357[0m should be strictly equal[K
  ok [1m[32m1358[0m null[K
  ok [1m[32m1359[0m should be strictly equal[K
  ok [1m[32m1360[0m null[K
  ok [1m[32m1361[0m should be strictly equal[K
  ok [1m[32m1362[0m null[K
  ok [1m[32m1363[0m should be strictly equal[K
  ok [1m[32m1364[0m should error[K
  ok [1m[32m1365[0m should have correct error message[K
  ok [1m[32m1366[0m value is undefined[K
  ok [1m[32m1367[0m should error[K
  ok [1m[32m1368[0m should have correct error message[K
  ok [1m[32m1369[0m value is undefined[K
  ok [1m[32m1370[0m should error[K
  ok [1m[32m1371[0m should have correct error message[K
  ok [1m[32m1372[0m value is undefined[K
  ok [1m[32m1373[0m should error[K
  ok [1m[32m1374[0m should have correct error message[K
  ok [1m[32m1375[0m value is undefined[K
  ok [1m[32m1376[0m should error[K
  ok [1m[32m1377[0m should have correct error message[K
  ok [1m[32m1378[0m value is undefined[K
  ok [1m[32m1379[0m should error[K
  ok [1m[32m1380[0m should have correct error message[K
  ok [1m[32m1381[0m value is undefined[K
  ok [1m[32m1382[0m should error[K
  ok [1m[32m1383[0m should have correct error message[K
  ok [1m[32m1384[0m value is undefined[K
  ok [1m[32m1385[0m should error[K
  ok [1m[32m1386[0m should have correct error message[K
  ok [1m[32m1387[0m value is undefined[K
  ok [1m[32m1388[0m should error[K
  ok [1m[32m1389[0m should have correct error message[K
  ok [1m[32m1390[0m value is undefined[K
  ok [1m[32m1391[0m should error[K
  ok [1m[32m1392[0m should have correct error message[K
  ok [1m[32m1393[0m value is undefined[K
[1A[1G[1m[32m✓ # test simultaneous get()
[0m[1B[1G
# # test get() not found error is asynchronous
[K

  ok [1m[32m1394[0m should error[K
  ok [1m[32m1395[0m should have correct error message[K
  ok [1m[32m1396[0m value is undefined[K
  ok [1m[32m1397[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() not found error is asynchronous
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less del() throws
[K

  ok [1m[32m1398[0m no-arg del() throws[K
[1A[1G[1m[32m✓ # test argument-less del() throws
[0m[1B[1G
# # test callback-less, 1-arg, del() throws
[K

  ok [1m[32m1399[0m callback-less, 1-arg del() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, del() throws
[0m[1B[1G
# # test callback-less, 3-arg, del() throws
[K

  ok [1m[32m1400[0m callback-less, 2-arg del() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, del() throws
[0m[1B[1G
# # test simple del()
[K

  ok [1m[32m1401[0m undefined[K
  ok [1m[32m1402[0m undefined[K
  ok [1m[32m1403[0m entry properly deleted[K
  ok [1m[32m1404[0m value is undefined[K
  ok [1m[32m1405[0m NotFound error[K
[1A[1G[1m[32m✓ # test simple del()
[0m[1B[1G
# # test del on non-existent key
[K

  ok [1m[32m1406[0m undefined[K
[1A[1G[1m[32m✓ # test del on non-existent key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test get() with null key causes error
[K

  ok [1m[32m1407[0m has error[K
  ok [1m[32m1408[0m should be truthy[K
  ok [1m[32m1409[0m correct error message[K
  ok [1m[32m1410[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with null key causes error
[0m[1B[1G
# # test del() with null key causes error
[K

  ok [1m[32m1411[0m has error[K
  ok [1m[32m1412[0m should be truthy[K
  ok [1m[32m1413[0m correct error message[K
  ok [1m[32m1414[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with null key causes error
[0m[1B[1G
# # test getMany() with null key causes error
[K

  ok [1m[32m1415[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1416[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1417[0m has error[K
  ok [1m[32m1418[0m should be truthy[K
  ok [1m[32m1419[0m correct error message[K
  ok [1m[32m1420[0m has error[K
  ok [1m[32m1421[0m should be truthy[K
  ok [1m[32m1422[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with null key causes error
[0m[1B[1G
# # test put() with null key causes error
[K

  ok [1m[32m1423[0m has error[K
  ok [1m[32m1424[0m should be truthy[K
  ok [1m[32m1425[0m correct error message[K
  ok [1m[32m1426[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null key causes error
[0m[1B[1G
# # test get() with undefined key causes error
[K

  ok [1m[32m1427[0m has error[K
  ok [1m[32m1428[0m should be truthy[K
  ok [1m[32m1429[0m correct error message[K
  ok [1m[32m1430[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with undefined key causes error
[0m[1B[1G
# # test del() with undefined key causes error
[K

  ok [1m[32m1431[0m has error[K
  ok [1m[32m1432[0m should be truthy[K
  ok [1m[32m1433[0m correct error message[K
  ok [1m[32m1434[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with undefined key causes error
[0m[1B[1G
# # test getMany() with undefined key causes error
[K

  ok [1m[32m1435[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1436[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1437[0m has error[K
  ok [1m[32m1438[0m should be truthy[K
  ok [1m[32m1439[0m correct error message[K
  ok [1m[32m1440[0m has error[K
  ok [1m[32m1441[0m should be truthy[K
  ok [1m[32m1442[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with undefined key causes error
[0m[1B[1G
# # test put() with undefined key causes error
[K

  ok [1m[32m1443[0m has error[K
  ok [1m[32m1444[0m should be truthy[K
  ok [1m[32m1445[0m correct error message[K
  ok [1m[32m1446[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined key causes error
[0m[1B[1G
# # test get() with empty String key causes error
[K

  ok [1m[32m1447[0m has error[K
  ok [1m[32m1448[0m should be truthy[K
  ok [1m[32m1449[0m correct error message[K
  ok [1m[32m1450[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty String key causes error
[0m[1B[1G
# # test del() with empty String key causes error
[K

  ok [1m[32m1451[0m has error[K
  ok [1m[32m1452[0m should be truthy[K
  ok [1m[32m1453[0m correct error message[K
  ok [1m[32m1454[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty String key causes error
[0m[1B[1G
# # test getMany() with empty String key causes error
[K

  ok [1m[32m1455[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1456[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1457[0m has error[K
  ok [1m[32m1458[0m should be truthy[K
  ok [1m[32m1459[0m correct error message[K
  ok [1m[32m1460[0m has error[K
  ok [1m[32m1461[0m should be truthy[K
  ok [1m[32m1462[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty String key causes error
[0m[1B[1G
# # test put() with empty String key causes error
[K

  ok [1m[32m1463[0m has error[K
  ok [1m[32m1464[0m should be truthy[K
  ok [1m[32m1465[0m correct error message[K
  ok [1m[32m1466[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty String key causes error
[0m[1B[1G
# # test get() with empty Buffer key causes error
[K

  ok [1m[32m1467[0m has error[K
  ok [1m[32m1468[0m should be truthy[K
  ok [1m[32m1469[0m correct error message[K
  ok [1m[32m1470[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Buffer key causes error
[0m[1B[1G
# # test del() with empty Buffer key causes error
[K

  ok [1m[32m1471[0m has error[K
  ok [1m[32m1472[0m should be truthy[K
  ok [1m[32m1473[0m correct error message[K
  ok [1m[32m1474[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Buffer key causes error
[0m[1B[1G
# # test getMany() with empty Buffer key causes error
[K

  ok [1m[32m1475[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1476[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1477[0m has error[K
  ok [1m[32m1478[0m should be truthy[K
  ok [1m[32m1479[0m correct error message[K
  ok [1m[32m1480[0m has error[K
  ok [1m[32m1481[0m should be truthy[K
  ok [1m[32m1482[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Buffer key causes error
[0m[1B[1G
# # test put() with empty Buffer key causes error
[K

  ok [1m[32m1483[0m has error[K
  ok [1m[32m1484[0m should be truthy[K
  ok [1m[32m1485[0m correct error message[K
  ok [1m[32m1486[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Buffer key causes error
[0m[1B[1G
# # test get() with empty Array key causes error
[K

  ok [1m[32m1487[0m has error[K
  ok [1m[32m1488[0m should be truthy[K
  ok [1m[32m1489[0m correct error message[K
  ok [1m[32m1490[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Array key causes error
[0m[1B[1G
# # test del() with empty Array key causes error
[K

  ok [1m[32m1491[0m has error[K
  ok [1m[32m1492[0m should be truthy[K
  ok [1m[32m1493[0m correct error message[K
  ok [1m[32m1494[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Array key causes error
[0m[1B[1G
# # test getMany() with empty Array key causes error
[K

  ok [1m[32m1495[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1496[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1497[0m has error[K
  ok [1m[32m1498[0m should be truthy[K
  ok [1m[32m1499[0m correct error message[K
  ok [1m[32m1500[0m has error[K
  ok [1m[32m1501[0m should be truthy[K
  ok [1m[32m1502[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Array key causes error
[0m[1B[1G
# # test put() with empty Array key causes error
[K

  ok [1m[32m1503[0m has error[K
  ok [1m[32m1504[0m should be truthy[K
  ok [1m[32m1505[0m correct error message[K
  ok [1m[32m1506[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Array key causes error
[0m[1B[1G
# # test put() with null value causes error
[K

  ok [1m[32m1507[0m has error[K
  ok [1m[32m1508[0m should be truthy[K
  ok [1m[32m1509[0m correct error message[K
  ok [1m[32m1510[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null value causes error
[0m[1B[1G
# # test put() with undefined value causes error
[K

  ok [1m[32m1511[0m has error[K
  ok [1m[32m1512[0m should be truthy[K
  ok [1m[32m1513[0m correct error message[K
  ok [1m[32m1514[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined value causes error
[0m[1B[1G
# # test put()/get()/del() with `0` key
[K

  ok [1m[32m1515[0m undefined[K
  ok [1m[32m1516[0m no error, has key/value for ``0` key`[K
  ok [1m[32m1517[0m is a Buffer[K
  ok [1m[32m1518[0m should be strictly equal[K
  ok [1m[32m1519[0m no error, deleted key/value for ``0` key`[K
  ok [1m[32m1520[0m entry properly deleted[K
  ok [1m[32m1521[0m should have correct error message[K
  ok [1m[32m1522[0m value is undefined[K
  ok [1m[32m1523[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` key
[0m[1B[1G
# # test put()/get()/del() with long String key
[K

  ok [1m[32m1524[0m undefined[K
  ok [1m[32m1525[0m no error, has key/value for `long String key`[K
  ok [1m[32m1526[0m is a Buffer[K
  ok [1m[32m1527[0m should be strictly equal[K
  ok [1m[32m1528[0m no error, deleted key/value for `long String key`[K
  ok [1m[32m1529[0m entry properly deleted[K
  ok [1m[32m1530[0m should have correct error message[K
  ok [1m[32m1531[0m value is undefined[K
  ok [1m[32m1532[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String key
[0m[1B[1G
# # test put()/get()/del() with Buffer key
[K

  ok [1m[32m1533[0m undefined[K
  ok [1m[32m1534[0m no error, has key/value for `Buffer key`[K
  ok [1m[32m1535[0m is a Buffer[K
  ok [1m[32m1536[0m should be strictly equal[K
  ok [1m[32m1537[0m no error, deleted key/value for `Buffer key`[K
  ok [1m[32m1538[0m entry properly deleted[K
  ok [1m[32m1539[0m should have correct error message[K
  ok [1m[32m1540[0m value is undefined[K
  ok [1m[32m1541[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer key
[0m[1B[1G
# # test put()/get()/del() with Array value
[K

  ok [1m[32m1542[0m undefined[K
  ok [1m[32m1543[0m no error, has key/value for `Array value`[K
  ok [1m[32m1544[0m is a Buffer[K
  ok [1m[32m1545[0m should be strictly equal[K
  ok [1m[32m1546[0m no error, deleted key/value for `Array value`[K
  ok [1m[32m1547[0m entry properly deleted[K
  ok [1m[32m1548[0m should have correct error message[K
  ok [1m[32m1549[0m value is undefined[K
  ok [1m[32m1550[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array value
[0m[1B[1G
# # test put()/get()/del() with `false` value
[K

  ok [1m[32m1551[0m undefined[K
  ok [1m[32m1552[0m no error, has key/value for ``false` value`[K
  ok [1m[32m1553[0m is a Buffer[K
  ok [1m[32m1554[0m should be strictly equal[K
  ok [1m[32m1555[0m no error, deleted key/value for ``false` value`[K
  ok [1m[32m1556[0m entry properly deleted[K
  ok [1m[32m1557[0m should have correct error message[K
  ok [1m[32m1558[0m value is undefined[K
  ok [1m[32m1559[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `false` value
[0m[1B[1G
# # test put()/get()/del() with `0` value
[K

  ok [1m[32m1560[0m undefined[K
  ok [1m[32m1561[0m no error, has key/value for ``0` value`[K
  ok [1m[32m1562[0m is a Buffer[K
  ok [1m[32m1563[0m should be strictly equal[K
  ok [1m[32m1564[0m no error, deleted key/value for ``0` value`[K
  ok [1m[32m1565[0m entry properly deleted[K
  ok [1m[32m1566[0m should have correct error message[K
  ok [1m[32m1567[0m value is undefined[K
  ok [1m[32m1568[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` value
[0m[1B[1G
# # test put()/get()/del() with `NaN` value
[K

  ok [1m[32m1569[0m undefined[K
  ok [1m[32m1570[0m no error, has key/value for ``NaN` value`[K
  ok [1m[32m1571[0m is a Buffer[K
  ok [1m[32m1572[0m should be strictly equal[K
  ok [1m[32m1573[0m no error, deleted key/value for ``NaN` value`[K
  ok [1m[32m1574[0m entry properly deleted[K
  ok [1m[32m1575[0m should have correct error message[K
  ok [1m[32m1576[0m value is undefined[K
  ok [1m[32m1577[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `NaN` value
[0m[1B[1G
# # test put()/get()/del() with empty String value
[K

  ok [1m[32m1578[0m undefined[K
  ok [1m[32m1579[0m no error, has key/value for `empty String value`[K
  ok [1m[32m1580[0m is a Buffer[K
  ok [1m[32m1581[0m should be strictly equal[K
  ok [1m[32m1582[0m no error, deleted key/value for `empty String value`[K
  ok [1m[32m1583[0m entry properly deleted[K
  ok [1m[32m1584[0m should have correct error message[K
  ok [1m[32m1585[0m value is undefined[K
  ok [1m[32m1586[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty String value
[0m[1B[1G
# # test put()/get()/del() with empty Buffer value
[K

  ok [1m[32m1587[0m undefined[K
  ok [1m[32m1588[0m no error, has key/value for `empty Buffer value`[K
  ok [1m[32m1589[0m is a Buffer[K
  ok [1m[32m1590[0m should be strictly equal[K
  ok [1m[32m1591[0m no error, deleted key/value for `empty Buffer value`[K
  ok [1m[32m1592[0m entry properly deleted[K
  ok [1m[32m1593[0m should have correct error message[K
  ok [1m[32m1594[0m value is undefined[K
  ok [1m[32m1595[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Buffer value
[0m[1B[1G
# # test put()/get()/del() with empty Array value
[K

  ok [1m[32m1596[0m undefined[K
  ok [1m[32m1597[0m no error, has key/value for `empty Array value`[K
  ok [1m[32m1598[0m is a Buffer[K
  ok [1m[32m1599[0m should be strictly equal[K
  ok [1m[32m1600[0m no error, deleted key/value for `empty Array value`[K
  ok [1m[32m1601[0m entry properly deleted[K
  ok [1m[32m1602[0m should have correct error message[K
  ok [1m[32m1603[0m value is undefined[K
  ok [1m[32m1604[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Array value
[0m[1B[1G
# # test put()/get()/del() with long String value
[K

  ok [1m[32m1605[0m undefined[K
  ok [1m[32m1606[0m no error, has key/value for `long String value`[K
  ok [1m[32m1607[0m is a Buffer[K
  ok [1m[32m1608[0m should be strictly equal[K
  ok [1m[32m1609[0m no error, deleted key/value for `long String value`[K
  ok [1m[32m1610[0m entry properly deleted[K
  ok [1m[32m1611[0m should have correct error message[K
  ok [1m[32m1612[0m value is undefined[K
  ok [1m[32m1613[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String value
[0m[1B[1G
# # test put()/get()/del() with Buffer value
[K

  ok [1m[32m1614[0m undefined[K
  ok [1m[32m1615[0m no error, has key/value for `Buffer value`[K
  ok [1m[32m1616[0m is a Buffer[K
  ok [1m[32m1617[0m should be strictly equal[K
  ok [1m[32m1618[0m no error, deleted key/value for `Buffer value`[K
  ok [1m[32m1619[0m entry properly deleted[K
  ok [1m[32m1620[0m should have correct error message[K
  ok [1m[32m1621[0m value is undefined[K
  ok [1m[32m1622[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer value
[0m[1B[1G
# # test put()/get()/del() with Array key
[K

  ok [1m[32m1623[0m undefined[K
  ok [1m[32m1624[0m no error, has key/value for `Array key`[K
  ok [1m[32m1625[0m is a Buffer[K
  ok [1m[32m1626[0m should be strictly equal[K
  ok [1m[32m1627[0m no error, deleted key/value for `Array key`[K
  ok [1m[32m1628[0m entry properly deleted[K
  ok [1m[32m1629[0m should have correct error message[K
  ok [1m[32m1630[0m value is undefined[K
  ok [1m[32m1631[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test getMany() requires an array argument (callback)
[K

  ok [1m[32m1632[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1633[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1634[0m should be strictly equal[K
  ok [1m[32m1635[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (callback)
[0m[1B[1G
# # test getMany() requires an array argument (promise)
[K

  ok [1m[32m1636[0m should be strictly equal[K
  ok [1m[32m1637[0m should be strictly equal[K
  ok [1m[32m1638[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (promise)
[0m[1B[1G
# # test getMany() support is reflected in manifest
[K

  ok [1m[32m1639[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() support is reflected in manifest
[0m[1B[1G
# # test simple getMany()
[K

  ok [1m[32m1640[0m undefined[K
  ok [1m[32m1641[0m null[K
  ok [1m[32m1642[0m got an array[K
  ok [1m[32m1643[0m array has 1 element[K
  ok [1m[32m1644[0m should not be string by default[K
  ok [1m[32m1645[0m should be strictly equal[K
  ok [1m[32m1646[0m null[K
  ok [1m[32m1647[0m got an array[K
  ok [1m[32m1648[0m array has 1 element[K
  ok [1m[32m1649[0m should not be string by default[K
  ok [1m[32m1650[0m should be strictly equal[K
  ok [1m[32m1651[0m null[K
  ok [1m[32m1652[0m should be string if not buffer[K
  ok [1m[32m1653[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simple getMany()
[0m[1B[1G
# # test getMany() with multiple keys
[K

  ok [1m[32m1654[0m undefined[K
  ok [1m[32m1655[0m null[K
  ok [1m[32m1656[0m should be deeply equivalent[K
  ok [1m[32m1657[0m null[K
  ok [1m[32m1658[0m maintains order of input keys[K
[1A[1G[1m[32m✓ # test getMany() with multiple keys
[0m[1B[1G
# # test empty getMany()
[K

  ok [1m[32m1659[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1660[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1661[0m null[K
  ok [1m[32m1662[0m should be deeply equivalent[K
  ok [1m[32m1663[0m null[K
  ok [1m[32m1664[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test empty getMany()
[0m[1B[1G
# # test not-found getMany()
[K

  ok [1m[32m1665[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1666[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1667[0m null[K
  ok [1m[32m1668[0m should be deeply equivalent[K
  ok [1m[32m1669[0m null[K
  ok [1m[32m1670[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test not-found getMany()
[0m[1B[1G
# # test getMany() with promise
[K

  ok [1m[32m1671[0m should be deeply equivalent[K
  ok [1m[32m1672[0m should be deeply equivalent[K
  ok [1m[32m1673[0m should be deeply equivalent[K
  ok [1m[32m1674[0m should be deeply equivalent[K
  ok [1m[32m1675[0m should be deeply equivalent[K
  ok [1m[32m1676[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test getMany() with promise
[0m[1B[1G
# # test simultaneous getMany()
[K

  ok [1m[32m1677[0m undefined[K
  ok [1m[32m1678[0m null[K
  ok [1m[32m1679[0m should be strictly equal[K
  ok [1m[32m1680[0m should be strictly equal[K
  ok [1m[32m1681[0m null[K
  ok [1m[32m1682[0m should be strictly equal[K
  ok [1m[32m1683[0m should be strictly equal[K
  ok [1m[32m1684[0m null[K
  ok [1m[32m1685[0m should be strictly equal[K
  ok [1m[32m1686[0m should be strictly equal[K
  ok [1m[32m1687[0m null[K
  ok [1m[32m1688[0m should be strictly equal[K
  ok [1m[32m1689[0m should be strictly equal[K
  ok [1m[32m1690[0m null[K
  ok [1m[32m1691[0m should be strictly equal[K
  ok [1m[32m1692[0m should be strictly equal[K
  ok [1m[32m1693[0m null[K
  ok [1m[32m1694[0m should be strictly equal[K
  ok [1m[32m1695[0m should be strictly equal[K
  ok [1m[32m1696[0m null[K
  ok [1m[32m1697[0m should be strictly equal[K
  ok [1m[32m1698[0m should be strictly equal[K
  ok [1m[32m1699[0m null[K
  ok [1m[32m1700[0m should be strictly equal[K
  ok [1m[32m1701[0m should be strictly equal[K
  ok [1m[32m1702[0m null[K
  ok [1m[32m1703[0m should be strictly equal[K
  ok [1m[32m1704[0m should be strictly equal[K
  ok [1m[32m1705[0m null[K
  ok [1m[32m1706[0m should be strictly equal[K
  ok [1m[32m1707[0m should be strictly equal[K
  ok [1m[32m1708[0m null[K
  ok [1m[32m1709[0m should be deeply equivalent[K
  ok [1m[32m1710[0m null[K
  ok [1m[32m1711[0m should be deeply equivalent[K
  ok [1m[32m1712[0m null[K
  ok [1m[32m1713[0m should be deeply equivalent[K
  ok [1m[32m1714[0m null[K
  ok [1m[32m1715[0m should be deeply equivalent[K
  ok [1m[32m1716[0m null[K
  ok [1m[32m1717[0m should be deeply equivalent[K
  ok [1m[32m1718[0m null[K
  ok [1m[32m1719[0m should be deeply equivalent[K
  ok [1m[32m1720[0m null[K
  ok [1m[32m1721[0m should be deeply equivalent[K
  ok [1m[32m1722[0m null[K
  ok [1m[32m1723[0m should be deeply equivalent[K
  ok [1m[32m1724[0m null[K
  ok [1m[32m1725[0m should be deeply equivalent[K
  ok [1m[32m1726[0m null[K
  ok [1m[32m1727[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simultaneous getMany()
[0m[1B[1G
# # test getMany() on new db
[K

  ok [1m[32m1728[0m should be strictly equal[K
  ok [1m[32m1729[0m should be strictly equal[K
  ok [1m[32m1730[0m (unnamed assert)[K
  ok [1m[32m1731[0m should be strictly equal[K
  ok [1m[32m1732[0m should be strictly equal[K
  ok [1m[32m1733[0m (unnamed assert)[K
  ok [1m[32m1734[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1735[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1736[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1737[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1738[0m should be strictly equal[K
  ok [1m[32m1739[0m should be strictly equal[K
  ok [1m[32m1740[0m should be strictly equal[K
  ok [1m[32m1741[0m should be strictly equal[K
  ok [1m[32m1742[0m should be strictly equal[K
  ok [1m[32m1743[0m should be strictly equal[K
  ok [1m[32m1744[0m should be strictly equal[K
  ok [1m[32m1745[0m should be strictly equal[K
  ok [1m[32m1746[0m undefined[K
  ok [1m[32m1747[0m undefined[K
[1A[1G[1m[32m✓ # test getMany() on new db
[0m[1B[1G
# # test getMany() on opening db
[K

  ok [1m[32m1748[0m callback (open) is asynchronous[K
  ok [1m[32m1749[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1750[0m callback (open) is asynchronous[K
  ok [1m[32m1751[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1752[0m should be strictly equal[K
  ok [1m[32m1753[0m should be strictly equal[K
  ok [1m[32m1754[0m should be strictly equal[K
  ok [1m[32m1755[0m should be strictly equal[K
  ok [1m[32m1756[0m undefined[K
  ok [1m[32m1757[0m undefined[K
[1A[1G[1m[32m✓ # test getMany() on opening db
[0m[1B[1G
# # test getMany() on closed db
[K

  ok [1m[32m1758[0m undefined[K
  ok [1m[32m1759[0m should be strictly equal[K
  ok [1m[32m1760[0m undefined[K
  ok [1m[32m1761[0m should be strictly equal[K
  ok [1m[32m1762[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1763[0m should be strictly equal[K
  ok [1m[32m1764[0m undefined[K
  ok [1m[32m1765[0m should be strictly equal[K
  ok [1m[32m1766[0m undefined[K
  ok [1m[32m1767[0m should be strictly equal[K
  ok [1m[32m1768[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1769[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closed db
[0m[1B[1G
# # test getMany() on closing db
[K

  ok [1m[32m1770[0m undefined[K
  ok [1m[32m1771[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1772[0m undefined[K
  ok [1m[32m1773[0m should be strictly equal[K
  ok [1m[32m1774[0m undefined[K
  ok [1m[32m1775[0m callback (anonymous) is asynchronous[K
  ok [1m[32m1776[0m undefined[K
  ok [1m[32m1777[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closing db
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test callback-less, 2-arg, batch() throws
[K

  ok [1m[32m1778[0m callback-less, 2-arg batch() throws[K
[1A[1G[1m[32m✓ # test callback-less, 2-arg, batch() throws
[0m[1B[1G
# # test batch() with missing `value`
[K

  ok [1m[32m1779[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with missing `value`
[0m[1B[1G
# # test batch() with null or undefined `value`
[K

  ok [1m[32m1780[0m correct error message[K
  ok [1m[32m1781[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `value`
[0m[1B[1G
# # test batch() with missing `key`
[K

  ok [1m[32m1782[0m got error[K
  ok [1m[32m1783[0m correct error message[K
  ok [1m[32m1784[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key`
[0m[1B[1G
# # test batch() with null or undefined `key`
[K

  ok [1m[32m1785[0m got error[K
  ok [1m[32m1786[0m correct error message[K
  ok [1m[32m1787[0m callback is asynchronous[K
  ok [1m[32m1788[0m got error[K
  ok [1m[32m1789[0m correct error message[K
  ok [1m[32m1790[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `key`
[0m[1B[1G
# # test batch() with empty `key`
[K

  ok [1m[32m1791[0m got error[K
  ok [1m[32m1792[0m correct error message[K
  ok [1m[32m1793[0m callback is asynchronous[K
  ok [1m[32m1794[0m got error[K
  ok [1m[32m1795[0m correct error message[K
  ok [1m[32m1796[0m callback is asynchronous[K
  ok [1m[32m1797[0m got error[K
  ok [1m[32m1798[0m correct error message[K
  ok [1m[32m1799[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty `key`
[0m[1B[1G
# # test batch() with missing `key` and `value`
[K

  ok [1m[32m1800[0m got error[K
  ok [1m[32m1801[0m correct error message[K
  ok [1m[32m1802[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key` and `value`
[0m[1B[1G
# # test batch() with missing `type`
[K

  ok [1m[32m1803[0m got error[K
  ok [1m[32m1804[0m correct error message[K
  ok [1m[32m1805[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `type`
[0m[1B[1G
# # test batch() with wrong `type`
[K

  ok [1m[32m1806[0m got error[K
  ok [1m[32m1807[0m correct error message[K
  ok [1m[32m1808[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with wrong `type`
[0m[1B[1G
# # test batch() with missing array
[K

  ok [1m[32m1809[0m got error[K
  ok [1m[32m1810[0m correct error message[K
  ok [1m[32m1811[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing array
[0m[1B[1G
# # test batch() with undefined array
[K

  ok [1m[32m1812[0m got error[K
  ok [1m[32m1813[0m correct error message[K
  ok [1m[32m1814[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined array
[0m[1B[1G
# # test batch() with null array
[K

  ok [1m[32m1815[0m got error[K
  ok [1m[32m1816[0m correct error message[K
  ok [1m[32m1817[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null array
[0m[1B[1G
# # test batch() with null options
[K

  ok [1m[32m1818[0m undefined[K
[1A[1G[1m[32m✓ # test batch() with null options
[0m[1B[1G
# # test batch() with null element
[K

  ok [1m[32m1819[0m got error[K
  ok [1m[32m1820[0m correct error message[K
  ok [1m[32m1821[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null element
[0m[1B[1G
# # test batch() with undefined element
[K

  ok [1m[32m1822[0m got error[K
  ok [1m[32m1823[0m correct error message[K
  ok [1m[32m1824[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined element
[0m[1B[1G
# # test batch() with number element
[K

  ok [1m[32m1825[0m got error[K
  ok [1m[32m1826[0m correct error message[K
  ok [1m[32m1827[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with number element
[0m[1B[1G
# # test batch() with boolean element
[K

  ok [1m[32m1828[0m got error[K
  ok [1m[32m1829[0m correct error message[K
  ok [1m[32m1830[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with boolean element
[0m[1B[1G
# # test batch() with empty array
[K

  ok [1m[32m1831[0m no error from batch()[K
  ok [1m[32m1832[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty array
[0m[1B[1G
# # test simple batch()
[K

  ok [1m[32m1833[0m undefined[K
  ok [1m[32m1834[0m null[K
  ok [1m[32m1835[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m1836[0m undefined[K
  ok [1m[32m1837[0m null[K
  ok [1m[32m1838[0m should be strictly equal[K
  ok [1m[32m1839[0m entry not found[K
  ok [1m[32m1840[0m value is undefined[K
  ok [1m[32m1841[0m NotFound error[K
  ok [1m[32m1842[0m null[K
  ok [1m[32m1843[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m1844[0m should error[K
  ok [1m[32m1845[0m callback is asynchronous[K
  ok [1m[32m1846[0m should not be found[K
  ok [1m[32m1847[0m should not be found[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test batch has db reference
[K

  ok [1m[32m1848[0m should be truthy[K
[1A[1G[1m[32m✓ # test batch has db reference
[0m[1B[1G
# # test batch#put() with missing `value`
[K

  ok [1m[32m1849[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `value`
[0m[1B[1G
# # test batch#put() with missing `key`
[K

  ok [1m[32m1850[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key`
[0m[1B[1G
# # test batch#put() with null `key`
[K

  ok [1m[32m1851[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null `key`
[0m[1B[1G
# # test batch#put() with missing `key` and `value`
[K

  ok [1m[32m1852[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key` and `value`
[0m[1B[1G
# # test batch#put() with null or undefined `value`
[K

  ok [1m[32m1853[0m correct error message[K
  ok [1m[32m1854[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null or undefined `value`
[0m[1B[1G
# # test batch#del() with missing `key`
[K

  ok [1m[32m1855[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with missing `key`
[0m[1B[1G
# # test batch#del() with null or undefined `key`
[K

  ok [1m[32m1856[0m correct error message[K
  ok [1m[32m1857[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with null or undefined `key`
[0m[1B[1G
# # test batch#clear() doesn't throw
[K

[1A[1G[1m[32m✓ # test batch#clear() doesn't throw
[0m[1B[1G
# # test batch#write() with no callback
[K

  ok [1m[32m1858[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() with no callback
[0m[1B[1G
# # test batch#put() after write()
[K

  ok [1m[32m1859[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() after write()
[0m[1B[1G
# # test batch#del() after write()
[K

  ok [1m[32m1860[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() after write()
[0m[1B[1G
# # test batch#clear() after write()
[K

  ok [1m[32m1861[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#clear() after write()
[0m[1B[1G
# # test batch#write() after write()
[K

  ok [1m[32m1862[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() after write()
[0m[1B[1G
# # test serialize object
[K

  ok [1m[32m1863[0m .key is set for .put and .del operations[K
  ok [1m[32m1864[0m .value is set for .put operation[K
  ok [1m[32m1865[0m .key is set for .put and .del operations[K
[1A[1G[1m[32m✓ # test serialize object
[0m[1B[1G
# # test custom _serialize*
[K

  ok [1m[32m1866[0m should be deeply equivalent[K
  ok [1m[32m1867[0m should be deeply equivalent[K
  ok [1m[32m1868[0m should be deeply equivalent[K
  ok [1m[32m1869[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test custom _serialize*
[0m[1B[1G
# # test batch#write() with no operations
[K

  ok [1m[32m1870[0m no error from write()[K
  ok [1m[32m1871[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch#write() with no operations
[0m[1B[1G
# # test basic batch
[K

  ok [1m[32m1872[0m undefined[K
  ok [1m[32m1873[0m undefined[K
  ok [1m[32m1874[0m undefined[K
  ok [1m[32m1875[0m correct number of entries[K
  ok [1m[32m1876[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test basic batch
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test iterator has db reference
[K

  ok [1m[32m1877[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator has db reference
[0m[1B[1G
# # test iterator#next returns this in callback mode
[K

  ok [1m[32m1878[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator#next returns this in callback mode
[0m[1B[1G
# # test twice iterator#end() callback with error
[K

  ok [1m[32m1879[0m undefined[K
  ok [1m[32m1880[0m returned error[K
  ok [1m[32m1881[0m correct error[K
  ok [1m[32m1882[0m should be strictly equal[K
  ok [1m[32m1883[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test twice iterator#end() callback with error
[0m[1B[1G
# # test iterator#next after iterator#end() callback with error
[K

  ok [1m[32m1884[0m undefined[K
  ok [1m[32m1885[0m returned error[K
  ok [1m[32m1886[0m correct error[K
  ok [1m[32m1887[0m correct message[K
  ok [1m[32m1888[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test iterator#next after iterator#end() callback with error
[0m[1B[1G
# # test twice iterator#next() throws
[K

  ok [1m[32m1889[0m returned error[K
  ok [1m[32m1890[0m correct error[K
  ok [1m[32m1891[0m should be strictly equal[K
  ok [1m[32m1892[0m callback is asynchronous[K
  ok [1m[32m1893[0m undefined[K
  ok [1m[32m1894[0m undefined[K
[1A[1G[1m[32m✓ # test twice iterator#next() throws
[0m[1B[1G
# # test simple iterator()
[K

  ok [1m[32m1895[0m undefined[K
  ok [1m[32m1896[0m null[K
  ok [1m[32m1897[0m key argument is a Buffer[K
  ok [1m[32m1898[0m value argument is a Buffer[K
  ok [1m[32m1899[0m correct key[K
  ok [1m[32m1900[0m correct value[K
  ok [1m[32m1901[0m null[K
  ok [1m[32m1902[0m key argument is a Buffer[K
  ok [1m[32m1903[0m value argument is a Buffer[K
  ok [1m[32m1904[0m correct key[K
  ok [1m[32m1905[0m correct value[K
  ok [1m[32m1906[0m null[K
  ok [1m[32m1907[0m key argument is a Buffer[K
  ok [1m[32m1908[0m value argument is a Buffer[K
  ok [1m[32m1909[0m correct key[K
  ok [1m[32m1910[0m correct value[K
  ok [1m[32m1911[0m undefined[K
  ok [1m[32m1912[0m err argument is nullish[K
  ok [1m[32m1913[0m key argument is undefined[K
  ok [1m[32m1914[0m value argument is undefined[K
  ok [1m[32m1915[0m correct number of entries[K
[1A[1G[1m[32m✓ # test simple iterator()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test full data collection
[K

  ok [1m[32m1916[0m undefined[K
  ok [1m[32m1917[0m correct number of entries[K
  ok [1m[32m1918[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection
[0m[1B[1G
# # test full data collection (flipped)
[K

  ok [1m[32m1919[0m undefined[K
  ok [1m[32m1920[0m correct number of entries[K
  ok [1m[32m1921[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection (flipped)
[0m[1B[1G
# # test iterator with reverse=true
[K

  ok [1m[32m1922[0m undefined[K
  ok [1m[32m1923[0m correct number of entries[K
  ok [1m[32m1924[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with reverse=true
[0m[1B[1G
# # test iterator with gte=00
[K

  ok [1m[32m1925[0m undefined[K
  ok [1m[32m1926[0m correct number of entries[K
  ok [1m[32m1927[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00
[0m[1B[1G
# # test iterator with gte=00 (flipped)
[K

  ok [1m[32m1928[0m undefined[K
  ok [1m[32m1929[0m correct number of entries[K
  ok [1m[32m1930[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00 (flipped)
[0m[1B[1G
# # test iterator with gte=50
[K

  ok [1m[32m1931[0m undefined[K
  ok [1m[32m1932[0m correct number of entries[K
  ok [1m[32m1933[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50
[0m[1B[1G
# # test iterator with gte=50 (flipped)
[K

  ok [1m[32m1934[0m undefined[K
  ok [1m[32m1935[0m correct number of entries[K
  ok [1m[32m1936[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50 and reverse=true
[K

  ok [1m[32m1937[0m undefined[K
  ok [1m[32m1938[0m correct number of entries[K
  ok [1m[32m1939[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 and reverse=true
[0m[1B[1G
# # test iterator with gte=49.5 (midway)
[K

  ok [1m[32m1940[0m undefined[K
  ok [1m[32m1941[0m correct number of entries[K
  ok [1m[32m1942[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway)
[0m[1B[1G
# # test iterator with gte=49.5 (midway) (flipped)
[K

  ok [1m[32m1943[0m undefined[K
  ok [1m[32m1944[0m correct number of entries[K
  ok [1m[32m1945[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=49999 (midway)
[K

  ok [1m[32m1946[0m undefined[K
  ok [1m[32m1947[0m correct number of entries[K
  ok [1m[32m1948[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway)
[0m[1B[1G
# # test iterator with gte=49999 (midway) (flipped)
[K

  ok [1m[32m1949[0m undefined[K
  ok [1m[32m1950[0m correct number of entries[K
  ok [1m[32m1951[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m1952[0m undefined[K
  ok [1m[32m1953[0m correct number of entries[K
  ok [1m[32m1954[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m1955[0m undefined[K
  ok [1m[32m1956[0m correct number of entries[K
  ok [1m[32m1957[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=50 and reverse=true
[K

  ok [1m[32m1958[0m undefined[K
  ok [1m[32m1959[0m correct number of entries[K
  ok [1m[32m1960[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=50
[K

  ok [1m[32m1961[0m undefined[K
  ok [1m[32m1962[0m correct number of entries[K
  ok [1m[32m1963[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50
[0m[1B[1G
# # test iterator with lte=50 (flipped)
[K

  ok [1m[32m1964[0m undefined[K
  ok [1m[32m1965[0m correct number of entries[K
  ok [1m[32m1966[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50.5 (midway)
[K

  ok [1m[32m1967[0m undefined[K
  ok [1m[32m1968[0m correct number of entries[K
  ok [1m[32m1969[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway)
[0m[1B[1G
# # test iterator with lte=50.5 (midway) (flipped)
[K

  ok [1m[32m1970[0m undefined[K
  ok [1m[32m1971[0m correct number of entries[K
  ok [1m[32m1972[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=50555 (midway)
[K

  ok [1m[32m1973[0m undefined[K
  ok [1m[32m1974[0m correct number of entries[K
  ok [1m[32m1975[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway)
[0m[1B[1G
# # test iterator with lte=50555 (midway) (flipped)
[K

  ok [1m[32m1976[0m undefined[K
  ok [1m[32m1977[0m correct number of entries[K
  ok [1m[32m1978[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with lt=50555 (midway)
[K

  ok [1m[32m1979[0m undefined[K
  ok [1m[32m1980[0m correct number of entries[K
  ok [1m[32m1981[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway)
[0m[1B[1G
# # test iterator with lt=50555 (midway) (flipped)
[K

  ok [1m[32m1982[0m undefined[K
  ok [1m[32m1983[0m correct number of entries[K
  ok [1m[32m1984[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m1985[0m undefined[K
  ok [1m[32m1986[0m correct number of entries[K
  ok [1m[32m1987[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m1988[0m undefined[K
  ok [1m[32m1989[0m correct number of entries[K
  ok [1m[32m1990[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50 and reverse=true
[K

  ok [1m[32m1991[0m undefined[K
  ok [1m[32m1992[0m correct number of entries[K
  ok [1m[32m1993[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=0
[K

  ok [1m[32m1994[0m undefined[K
  ok [1m[32m1995[0m correct number of entries[K
  ok [1m[32m1996[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0
[0m[1B[1G
# # test iterator with lte=0 (flipped)
[K

  ok [1m[32m1997[0m undefined[K
  ok [1m[32m1998[0m correct number of entries[K
  ok [1m[32m1999[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0 (flipped)
[0m[1B[1G
# # test iterator with lt=0
[K

  ok [1m[32m2000[0m undefined[K
  ok [1m[32m2001[0m correct number of entries[K
  ok [1m[32m2002[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0
[0m[1B[1G
# # test iterator with lt=0 (flipped)
[K

  ok [1m[32m2003[0m undefined[K
  ok [1m[32m2004[0m correct number of entries[K
  ok [1m[32m2005[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70
[K

  ok [1m[32m2006[0m undefined[K
  ok [1m[32m2007[0m correct number of entries[K
  ok [1m[32m2008[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70
[0m[1B[1G
# # test iterator with gte=30 and lte=70 (flipped)
[K

  ok [1m[32m2009[0m undefined[K
  ok [1m[32m2010[0m correct number of entries[K
  ok [1m[32m2011[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 (flipped)
[0m[1B[1G
# # test iterator with gt=29 and lt=71
[K

  ok [1m[32m2012[0m undefined[K
  ok [1m[32m2013[0m correct number of entries[K
  ok [1m[32m2014[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71
[0m[1B[1G
# # test iterator with gt=29 and lt=71 (flipped)
[K

  ok [1m[32m2015[0m undefined[K
  ok [1m[32m2016[0m correct number of entries[K
  ok [1m[32m2017[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m2018[0m undefined[K
  ok [1m[32m2019[0m correct number of entries[K
  ok [1m[32m2020[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # test iterator with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m2021[0m undefined[K
  ok [1m[32m2022[0m correct number of entries[K
  ok [1m[32m2023[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # test iterator with limit=20
[K

  ok [1m[32m2024[0m undefined[K
  ok [1m[32m2025[0m correct number of entries[K
  ok [1m[32m2026[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20
[0m[1B[1G
# # test iterator with limit=20 and gte=20
[K

  ok [1m[32m2027[0m undefined[K
  ok [1m[32m2028[0m correct number of entries[K
  ok [1m[32m2029[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and gte=20
[0m[1B[1G
# # test iterator with limit=20 and reverse=true
[K

  ok [1m[32m2030[0m undefined[K
  ok [1m[32m2031[0m correct number of entries[K
  ok [1m[32m2032[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and reverse=true
[0m[1B[1G
# # test iterator with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m2033[0m undefined[K
  ok [1m[32m2034[0m correct number of entries[K
  ok [1m[32m2035[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # test iterator with limit=-1 should iterate over whole database
[K

  ok [1m[32m2036[0m undefined[K
  ok [1m[32m2037[0m correct number of entries[K
  ok [1m[32m2038[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=-1 should iterate over whole database
[0m[1B[1G
# # test iterator with limit=0 should not iterate over anything
[K

  ok [1m[32m2039[0m undefined[K
  ok [1m[32m2040[0m correct number of entries[K
  ok [1m[32m2041[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=0 should not iterate over anything
[0m[1B[1G
# # test iterator with lte after limit
[K

  ok [1m[32m2042[0m undefined[K
  ok [1m[32m2043[0m correct number of entries[K
  ok [1m[32m2044[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after limit
[0m[1B[1G
# # test iterator with lte before limit
[K

  ok [1m[32m2045[0m undefined[K
  ok [1m[32m2046[0m correct number of entries[K
  ok [1m[32m2047[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before limit
[0m[1B[1G
# # test iterator with gte after database end
[K

  ok [1m[32m2048[0m undefined[K
  ok [1m[32m2049[0m correct number of entries[K
  ok [1m[32m2050[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end
[0m[1B[1G
# # test iterator with gte after database end (flipped)
[K

  ok [1m[32m2051[0m undefined[K
  ok [1m[32m2052[0m correct number of entries[K
  ok [1m[32m2053[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end (flipped)
[0m[1B[1G
# # test iterator with gt after database end
[K

  ok [1m[32m2054[0m undefined[K
  ok [1m[32m2055[0m correct number of entries[K
  ok [1m[32m2056[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end
[0m[1B[1G
# # test iterator with gt after database end (flipped)
[K

  ok [1m[32m2057[0m undefined[K
  ok [1m[32m2058[0m correct number of entries[K
  ok [1m[32m2059[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end (flipped)
[0m[1B[1G
# # test iterator with lte after database end and reverse=true
[K

  ok [1m[32m2060[0m undefined[K
  ok [1m[32m2061[0m correct number of entries[K
  ok [1m[32m2062[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after database end and reverse=true
[0m[1B[1G
# # test iterator with lt after database end
[K

  ok [1m[32m2063[0m undefined[K
  ok [1m[32m2064[0m correct number of entries[K
  ok [1m[32m2065[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end
[0m[1B[1G
# # test iterator with lt after database end (flipped)
[K

  ok [1m[32m2066[0m undefined[K
  ok [1m[32m2067[0m correct number of entries[K
  ok [1m[32m2068[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end (flipped)
[0m[1B[1G
# # test iterator with lt at database end
[K

  ok [1m[32m2069[0m undefined[K
  ok [1m[32m2070[0m correct number of entries[K
  ok [1m[32m2071[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end
[0m[1B[1G
# # test iterator with lt at database end (flipped)
[K

  ok [1m[32m2072[0m undefined[K
  ok [1m[32m2073[0m correct number of entries[K
  ok [1m[32m2074[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end (flipped)
[0m[1B[1G
# # test iterator with lte at database end
[K

  ok [1m[32m2075[0m undefined[K
  ok [1m[32m2076[0m correct number of entries[K
  ok [1m[32m2077[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end
[0m[1B[1G
# # test iterator with lte at database end (flipped)
[K

  ok [1m[32m2078[0m undefined[K
  ok [1m[32m2079[0m correct number of entries[K
  ok [1m[32m2080[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end (flipped)
[0m[1B[1G
# # test iterator with lt before database end
[K

  ok [1m[32m2081[0m undefined[K
  ok [1m[32m2082[0m correct number of entries[K
  ok [1m[32m2083[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end
[0m[1B[1G
# # test iterator with lt before database end (flipped)
[K

  ok [1m[32m2084[0m undefined[K
  ok [1m[32m2085[0m correct number of entries[K
  ok [1m[32m2086[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end (flipped)
[0m[1B[1G
# # test iterator with lte before database end
[K

  ok [1m[32m2087[0m undefined[K
  ok [1m[32m2088[0m correct number of entries[K
  ok [1m[32m2089[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end
[0m[1B[1G
# # test iterator with lte before database end (flipped)
[K

  ok [1m[32m2090[0m undefined[K
  ok [1m[32m2091[0m correct number of entries[K
  ok [1m[32m2092[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end (flipped)
[0m[1B[1G
# # test iterator with lte and gte after database and reverse=true
[K

  ok [1m[32m2093[0m undefined[K
  ok [1m[32m2094[0m correct number of entries[K
  ok [1m[32m2095[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte and gte after database and reverse=true
[0m[1B[1G
# # test iterator with lt and gt after database and reverse=true
[K

  ok [1m[32m2096[0m undefined[K
  ok [1m[32m2097[0m correct number of entries[K
  ok [1m[32m2098[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setup
[K

  ok [1m[32m2099[0m no open() error[K
  ok [1m[32m2100[0m no batch() error[K
[1A[1G[1m[32m✓ # setup
[0m[1B[1G
# # for await...of db.iterator()
[K

  ok [1m[32m2101[0m ended[K
  ok [1m[32m2102[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # for await...of db.iterator()
[0m[1B[1G
# # for await...of db.iterator() does not permit reuse
[K

  ok [1m[32m2103[0m nexted[K
  ok [1m[32m2104[0m nexted[K
  ok [1m[32m2105[0m should be strictly equal[K
[1A[1G[1m[32m✓ # for await...of db.iterator() does not permit reuse
[0m[1B[1G
# # for await...of db.iterator() ends on user error
[K

  ok [1m[32m2106[0m should be strictly equal[K
  ok [1m[32m2107[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user error
[0m[1B[1G
# # for await...of db.iterator() with user error and end() error
[K

  ok [1m[32m2108[0m no real error from end()[K
  ok [1m[32m2109[0m should be strictly equal[K
  ok [1m[32m2110[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on iterator error
[K

  ok [1m[32m2111[0m nexted[K
  ok [1m[32m2112[0m should be strictly equal[K
  ok [1m[32m2113[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on iterator error
[0m[1B[1G
# # for await...of db.iterator() with iterator error and end() error
[K

  ok [1m[32m2114[0m nexted[K
  ok [1m[32m2115[0m no real error from end()[K
  ok [1m[32m2116[0m should be strictly equal[K
  ok [1m[32m2117[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with iterator error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on user break
[K

  ok [1m[32m2118[0m got a chance to break[K
  ok [1m[32m2119[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user break
[0m[1B[1G
# # for await...of db.iterator() with user break and end() error
[K

  ok [1m[32m2120[0m got a chance to break[K
  ok [1m[32m2121[0m no real error from end()[K
  ok [1m[32m2122[0m should be strictly equal[K
  ok [1m[32m2123[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user break and end() error
[0m[1B[1G
# # teardown
[K

  ok [1m[32m2124[0m no close() error[K
[1A[1G[1m[32m✓ # teardown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # iterator#seek() throws if next() has not completed
[K

  ok [1m[32m2125[0m no error from open()[K
  ok [1m[32m2126[0m got error[K
  ok [1m[32m2127[0m no error from next()[K
  ok [1m[32m2128[0m next is asynchronous[K
  ok [1m[32m2129[0m no error from done()[K
  ok [1m[32m2130[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws if next() has not completed
[0m[1B[1G
# # iterator#seek() throws after end()
[K

  ok [1m[32m2131[0m no error from open()[K
  ok [1m[32m2132[0m no error from next()[K
  ok [1m[32m2133[0m no error from end()[K
  ok [1m[32m2134[0m got error[K
  ok [1m[32m2135[0m no error from done()[K
  ok [1m[32m2136[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws after end()
[0m[1B[1G
# # iterator#seek() to string target
[K

  ok [1m[32m2137[0m no error from open()[K
  ok [1m[32m2138[0m no error from batch()[K
  ok [1m[32m2139[0m no error[K
  ok [1m[32m2140[0m key matches[K
  ok [1m[32m2141[0m value matches[K
  ok [1m[32m2142[0m no error[K
  ok [1m[32m2143[0m end of iterator[K
  ok [1m[32m2144[0m end of iterator[K
  ok [1m[32m2145[0m no error from done()[K
  ok [1m[32m2146[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to string target
[0m[1B[1G
# # iterator#seek() to buffer target
[K

  ok [1m[32m2147[0m no error from open()[K
  ok [1m[32m2148[0m no error from batch()[K
  ok [1m[32m2149[0m no error from next()[K
  ok [1m[32m2150[0m key matches[K
  ok [1m[32m2151[0m value matches[K
  ok [1m[32m2152[0m no error from next()[K
  ok [1m[32m2153[0m end of iterator[K
  ok [1m[32m2154[0m end of iterator[K
  ok [1m[32m2155[0m no error from done()[K
  ok [1m[32m2156[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to buffer target
[0m[1B[1G
# # iterator#seek() on reverse iterator
[K

  ok [1m[32m2157[0m no error from open()[K
  ok [1m[32m2158[0m no error from batch()[K
  ok [1m[32m2159[0m no error[K
  ok [1m[32m2160[0m key matches[K
  ok [1m[32m2161[0m value matches[K
  ok [1m[32m2162[0m no error from done()[K
  ok [1m[32m2163[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator
[0m[1B[1G
# # iterator#seek() to out of range target
[K

  ok [1m[32m2164[0m no error from open()[K
  ok [1m[32m2165[0m no error from batch()[K
  ok [1m[32m2166[0m no error[K
  ok [1m[32m2167[0m end of iterator[K
  ok [1m[32m2168[0m end of iterator[K
  ok [1m[32m2169[0m no error from done()[K
  ok [1m[32m2170[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to out of range target
[0m[1B[1G
# # iterator#seek() on reverse iterator to out of range target
[K

  ok [1m[32m2171[0m no error from open()[K
  ok [1m[32m2172[0m no error from batch()[K
  ok [1m[32m2173[0m no error[K
  ok [1m[32m2174[0m should be deeply equivalent[K
  ok [1m[32m2175[0m should be deeply equivalent[K
  ok [1m[32m2176[0m no error from done()[K
  ok [1m[32m2177[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator to out of range target
[0m[1B[1G
# # iterator#seek() respects range
[K

  ok [1m[32m2178[0m no error from open()[K
  ok [1m[32m2179[0m no error from batch()[K
  ok [1m[32m2180[0m no error from next()[K
  ok [1m[32m2181[0m seek(4) on {"gt":"5"} yields undefined[K
  ok [1m[32m2182[0m no error from next()[K
  ok [1m[32m2183[0m seek(5) on {"gt":"5"} yields undefined[K
  ok [1m[32m2184[0m no error from next()[K
  ok [1m[32m2185[0m seek(6) on {"gt":"5"} yields 6[K
  ok [1m[32m2186[0m no error from next()[K
  ok [1m[32m2187[0m seek(4) on {"gte":"5"} yields undefined[K
  ok [1m[32m2188[0m no error from next()[K
  ok [1m[32m2189[0m seek(5) on {"gte":"5"} yields 5[K
  ok [1m[32m2190[0m no error from next()[K
  ok [1m[32m2191[0m seek(6) on {"gte":"5"} yields 6[K
  ok [1m[32m2192[0m no error from next()[K
  ok [1m[32m2193[0m seek(4) on {"lt":"5"} yields 4[K
  ok [1m[32m2194[0m no error from next()[K
  ok [1m[32m2195[0m seek(5) on {"lt":"5"} yields undefined[K
  ok [1m[32m2196[0m no error from next()[K
  ok [1m[32m2197[0m seek(6) on {"lt":"5"} yields undefined[K
  ok [1m[32m2198[0m no error from next()[K
  ok [1m[32m2199[0m seek(4) on {"lte":"5"} yields 4[K
  ok [1m[32m2200[0m no error from next()[K
  ok [1m[32m2201[0m seek(5) on {"lte":"5"} yields 5[K
  ok [1m[32m2202[0m no error from next()[K
  ok [1m[32m2203[0m seek(6) on {"lte":"5"} yields undefined[K
  ok [1m[32m2204[0m no error from next()[K
  ok [1m[32m2205[0m seek(4) on {"lt":"5","reverse":true} yields 4[K
  ok [1m[32m2206[0m no error from next()[K
  ok [1m[32m2207[0m seek(5) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m2208[0m no error from next()[K
  ok [1m[32m2209[0m seek(6) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m2210[0m no error from next()[K
  ok [1m[32m2211[0m seek(4) on {"lte":"5","reverse":true} yields 4[K
  ok [1m[32m2212[0m no error from next()[K
  ok [1m[32m2213[0m seek(5) on {"lte":"5","reverse":true} yields 5[K
  ok [1m[32m2214[0m no error from next()[K
  ok [1m[32m2215[0m seek(6) on {"lte":"5","reverse":true} yields undefined[K
  ok [1m[32m2216[0m no error from next()[K
  ok [1m[32m2217[0m seek(4) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m2218[0m no error from next()[K
  ok [1m[32m2219[0m seek(5) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m2220[0m no error from next()[K
  ok [1m[32m2221[0m seek(6) on {"gt":"5","reverse":true} yields 6[K
  ok [1m[32m2222[0m no error from next()[K
  ok [1m[32m2223[0m seek(4) on {"gte":"5","reverse":true} yields undefined[K
  ok [1m[32m2224[0m no error from next()[K
  ok [1m[32m2225[0m seek(5) on {"gte":"5","reverse":true} yields 5[K
  ok [1m[32m2226[0m no error from next()[K
  ok [1m[32m2227[0m seek(6) on {"gte":"5","reverse":true} yields 6[K
  ok [1m[32m2228[0m no error from next()[K
  ok [1m[32m2229[0m seek(7) on {"gt":"7","lt":"8"} yields undefined[K
  ok [1m[32m2230[0m no error from next()[K
  ok [1m[32m2231[0m seek(7) on {"gte":"7","lt":"8"} yields 7[K
  ok [1m[32m2232[0m no error from next()[K
  ok [1m[32m2233[0m seek(8) on {"gte":"7","lt":"8"} yields undefined[K
  ok [1m[32m2234[0m no error from next()[K
  ok [1m[32m2235[0m seek(8) on {"gt":"7","lte":"8"} yields 8[K
  ok [1m[32m2236[0m no error from end()[K
  ok [1m[32m2237[0m no error from end()[K
  ok [1m[32m2238[0m no error from end()[K
  ok [1m[32m2239[0m no error from end()[K
  ok [1m[32m2240[0m no error from end()[K
  ok [1m[32m2241[0m no error from end()[K
  ok [1m[32m2242[0m no error from end()[K
  ok [1m[32m2243[0m no error from end()[K
  ok [1m[32m2244[0m no error from end()[K
  ok [1m[32m2245[0m no error from end()[K
  ok [1m[32m2246[0m no error from end()[K
  ok [1m[32m2247[0m no error from end()[K
  ok [1m[32m2248[0m no error from end()[K
  ok [1m[32m2249[0m no error from end()[K
  ok [1m[32m2250[0m no error from end()[K
  ok [1m[32m2251[0m no error from end()[K
  ok [1m[32m2252[0m no error from end()[K
  ok [1m[32m2253[0m no error from end()[K
  ok [1m[32m2254[0m no error from end()[K
  ok [1m[32m2255[0m no error from end()[K
  ok [1m[32m2256[0m no error from end()[K
  ok [1m[32m2257[0m no error from end()[K
  ok [1m[32m2258[0m no error from end()[K
  ok [1m[32m2259[0m no error from end()[K
  ok [1m[32m2260[0m no error from end()[K
  ok [1m[32m2261[0m no error from end()[K
  ok [1m[32m2262[0m no error from end()[K
  ok [1m[32m2263[0m no error from end()[K
  ok [1m[32m2264[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() respects range
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # delete key after snapshotting
[K

  ok [1m[32m2265[0m no open error[K
  ok [1m[32m2266[0m no put error[K
  ok [1m[32m2267[0m no del error[K
  ok [1m[32m2268[0m no next error[K
  ok [1m[32m2269[0m got a key[K
  ok [1m[32m2270[0m correct key[K
  ok [1m[32m2271[0m correct value[K
  ok [1m[32m2272[0m no run error[K
  ok [1m[32m2273[0m no iterator end error[K
[1A[1G[1m[32m✓ # delete key after snapshotting
[0m[1B[1G
# # overwrite key after snapshotting
[K

  ok [1m[32m2274[0m no open error[K
  ok [1m[32m2275[0m no put error[K
  ok [1m[32m2276[0m no put error[K
  ok [1m[32m2277[0m no next error[K
  ok [1m[32m2278[0m got a key[K
  ok [1m[32m2279[0m correct key[K
  ok [1m[32m2280[0m correct value[K
  ok [1m[32m2281[0m no run error[K
  ok [1m[32m2282[0m no iterator end error[K
[1A[1G[1m[32m✓ # overwrite key after snapshotting
[0m[1B[1G
# # add key after snapshotting that sorts first
[K

  ok [1m[32m2283[0m no open error[K
  ok [1m[32m2284[0m no put error[K
  ok [1m[32m2285[0m no put error[K
  ok [1m[32m2286[0m no next error[K
  ok [1m[32m2287[0m got a key[K
  ok [1m[32m2288[0m correct key[K
  ok [1m[32m2289[0m correct value[K
  ok [1m[32m2290[0m no run error[K
  ok [1m[32m2291[0m no iterator end error[K
[1A[1G[1m[32m✓ # add key after snapshotting that sorts first
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less clear() throws
[K

  ok [1m[32m2292[0m no-arg clear() throws[K
[1A[1G[1m[32m✓ # test argument-less clear() throws
[0m[1B[1G
# # test simple clear() on string keys
[K

  ok [1m[32m2293[0m no open error[K
  ok [1m[32m2294[0m no batch error[K
  ok [1m[32m2295[0m no concat error[K
  ok [1m[32m2296[0m has entries[K
  ok [1m[32m2297[0m no clear error[K
  ok [1m[32m2298[0m no concat error[K
  ok [1m[32m2299[0m has no entries[K
  ok [1m[32m2300[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on string keys
[0m[1B[1G
# # test simple clear() on buffer keys
[K

  ok [1m[32m2301[0m no open error[K
  ok [1m[32m2302[0m no batch error[K
  ok [1m[32m2303[0m no concat error[K
  ok [1m[32m2304[0m has entries[K
  ok [1m[32m2305[0m no clear error[K
  ok [1m[32m2306[0m no concat error[K
  ok [1m[32m2307[0m has no entries[K
  ok [1m[32m2308[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on buffer keys
[0m[1B[1G
# # test simple clear() on mixed keys
[K

  ok [1m[32m2309[0m no open error[K
  ok [1m[32m2310[0m no batch error[K
  ok [1m[32m2311[0m no concat error[K
  ok [1m[32m2312[0m has entries[K
  ok [1m[32m2313[0m no clear error[K
  ok [1m[32m2314[0m no concat error[K
  ok [1m[32m2315[0m has no entries[K
  ok [1m[32m2316[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on mixed keys
[0m[1B[1G
# # test simple clear() on non-utf8 buffer keys
[K

  ok [1m[32m2317[0m no open error[K
  ok [1m[32m2318[0m no batch error[K
  ok [1m[32m2319[0m no concat error[K
  ok [1m[32m2320[0m has entries[K
  ok [1m[32m2321[0m no clear error[K
  ok [1m[32m2322[0m no concat error[K
  ok [1m[32m2323[0m has no entries[K
  ok [1m[32m2324[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on non-utf8 buffer keys
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db#clear() with full range
[K

  ok [1m[32m2325[0m no open error[K
  ok [1m[32m2326[0m no batch error[K
  ok [1m[32m2327[0m no clear error[K
  ok [1m[32m2328[0m no concat error[K
  ok [1m[32m2329[0m correct number of entries[K
  ok [1m[32m2330[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with full range
[0m[1B[1G
# # db#clear() with reverse=true
[K

  ok [1m[32m2331[0m no open error[K
  ok [1m[32m2332[0m no batch error[K
  ok [1m[32m2333[0m no clear error[K
  ok [1m[32m2334[0m no concat error[K
  ok [1m[32m2335[0m correct number of entries[K
  ok [1m[32m2336[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with reverse=true
[0m[1B[1G
# # db#clear() with gte=00
[K

  ok [1m[32m2337[0m no open error[K
  ok [1m[32m2338[0m no batch error[K
  ok [1m[32m2339[0m no clear error[K
  ok [1m[32m2340[0m no concat error[K
  ok [1m[32m2341[0m correct number of entries[K
  ok [1m[32m2342[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=00
[0m[1B[1G
# # db#clear() with gte=50
[K

  ok [1m[32m2343[0m no open error[K
  ok [1m[32m2344[0m no batch error[K
  ok [1m[32m2345[0m no clear error[K
  ok [1m[32m2346[0m no concat error[K
  ok [1m[32m2347[0m correct number of entries[K
  ok [1m[32m2348[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50
[0m[1B[1G
# # db#clear() with lte=50 and reverse=true
[K

  ok [1m[32m2349[0m no open error[K
  ok [1m[32m2350[0m no batch error[K
  ok [1m[32m2351[0m no clear error[K
  ok [1m[32m2352[0m no concat error[K
  ok [1m[32m2353[0m correct number of entries[K
  ok [1m[32m2354[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50 and reverse=true
[0m[1B[1G
# # db#clear() with gte=49.5 (midway)
[K

  ok [1m[32m2355[0m no open error[K
  ok [1m[32m2356[0m no batch error[K
  ok [1m[32m2357[0m no clear error[K
  ok [1m[32m2358[0m no concat error[K
  ok [1m[32m2359[0m correct number of entries[K
  ok [1m[32m2360[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49.5 (midway)
[0m[1B[1G
# # db#clear() with gte=49999 (midway)
[K

  ok [1m[32m2361[0m no open error[K
  ok [1m[32m2362[0m no batch error[K
  ok [1m[32m2363[0m no clear error[K
  ok [1m[32m2364[0m no concat error[K
  ok [1m[32m2365[0m correct number of entries[K
  ok [1m[32m2366[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49999 (midway)
[0m[1B[1G
# # db#clear() with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m2367[0m no open error[K
  ok [1m[32m2368[0m no batch error[K
  ok [1m[32m2369[0m no clear error[K
  ok [1m[32m2370[0m no concat error[K
  ok [1m[32m2371[0m correct number of entries[K
  ok [1m[32m2372[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m2373[0m no open error[K
  ok [1m[32m2374[0m no batch error[K
  ok [1m[32m2375[0m no clear error[K
  ok [1m[32m2376[0m no concat error[K
  ok [1m[32m2377[0m correct number of entries[K
  ok [1m[32m2378[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=50 and reverse=true
[K

  ok [1m[32m2379[0m no open error[K
  ok [1m[32m2380[0m no batch error[K
  ok [1m[32m2381[0m no clear error[K
  ok [1m[32m2382[0m no concat error[K
  ok [1m[32m2383[0m correct number of entries[K
  ok [1m[32m2384[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=50
[K

  ok [1m[32m2385[0m no open error[K
  ok [1m[32m2386[0m no batch error[K
  ok [1m[32m2387[0m no clear error[K
  ok [1m[32m2388[0m no concat error[K
  ok [1m[32m2389[0m correct number of entries[K
  ok [1m[32m2390[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50
[0m[1B[1G
# # db#clear() with lte=50.5 (midway)
[K

  ok [1m[32m2391[0m no open error[K
  ok [1m[32m2392[0m no batch error[K
  ok [1m[32m2393[0m no clear error[K
  ok [1m[32m2394[0m no concat error[K
  ok [1m[32m2395[0m correct number of entries[K
  ok [1m[32m2396[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50.5 (midway)
[0m[1B[1G
# # db#clear() with lte=50555 (midway)
[K

  ok [1m[32m2397[0m no open error[K
  ok [1m[32m2398[0m no batch error[K
  ok [1m[32m2399[0m no clear error[K
  ok [1m[32m2400[0m no concat error[K
  ok [1m[32m2401[0m correct number of entries[K
  ok [1m[32m2402[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50555 (midway)
[0m[1B[1G
# # db#clear() with lt=50555 (midway)
[K

  ok [1m[32m2403[0m no open error[K
  ok [1m[32m2404[0m no batch error[K
  ok [1m[32m2405[0m no clear error[K
  ok [1m[32m2406[0m no concat error[K
  ok [1m[32m2407[0m correct number of entries[K
  ok [1m[32m2408[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50555 (midway)
[0m[1B[1G
# # db#clear() with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m2409[0m no open error[K
  ok [1m[32m2410[0m no batch error[K
  ok [1m[32m2411[0m no clear error[K
  ok [1m[32m2412[0m no concat error[K
  ok [1m[32m2413[0m correct number of entries[K
  ok [1m[32m2414[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m2415[0m no open error[K
  ok [1m[32m2416[0m no batch error[K
  ok [1m[32m2417[0m no clear error[K
  ok [1m[32m2418[0m no concat error[K
  ok [1m[32m2419[0m correct number of entries[K
  ok [1m[32m2420[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50 and reverse=true
[K

  ok [1m[32m2421[0m no open error[K
  ok [1m[32m2422[0m no batch error[K
  ok [1m[32m2423[0m no clear error[K
  ok [1m[32m2424[0m no concat error[K
  ok [1m[32m2425[0m correct number of entries[K
  ok [1m[32m2426[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=0
[K

  ok [1m[32m2427[0m no open error[K
  ok [1m[32m2428[0m no batch error[K
  ok [1m[32m2429[0m no clear error[K
  ok [1m[32m2430[0m no concat error[K
  ok [1m[32m2431[0m correct number of entries[K
  ok [1m[32m2432[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=0
[0m[1B[1G
# # db#clear() with lt=0
[K

  ok [1m[32m2433[0m no open error[K
  ok [1m[32m2434[0m no batch error[K
  ok [1m[32m2435[0m no clear error[K
  ok [1m[32m2436[0m no concat error[K
  ok [1m[32m2437[0m correct number of entries[K
  ok [1m[32m2438[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=0
[0m[1B[1G
# # db#clear() with gte=30 and lte=70
[K

  ok [1m[32m2439[0m no open error[K
  ok [1m[32m2440[0m no batch error[K
  ok [1m[32m2441[0m no clear error[K
  ok [1m[32m2442[0m no concat error[K
  ok [1m[32m2443[0m correct number of entries[K
  ok [1m[32m2444[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70
[0m[1B[1G
# # db#clear() with gt=29 and lt=71
[K

  ok [1m[32m2445[0m no open error[K
  ok [1m[32m2446[0m no batch error[K
  ok [1m[32m2447[0m no clear error[K
  ok [1m[32m2448[0m no concat error[K
  ok [1m[32m2449[0m correct number of entries[K
  ok [1m[32m2450[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71
[0m[1B[1G
# # db#clear() with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m2451[0m no open error[K
  ok [1m[32m2452[0m no batch error[K
  ok [1m[32m2453[0m no clear error[K
  ok [1m[32m2454[0m no concat error[K
  ok [1m[32m2455[0m correct number of entries[K
  ok [1m[32m2456[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # db#clear() with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m2457[0m no open error[K
  ok [1m[32m2458[0m no batch error[K
  ok [1m[32m2459[0m no clear error[K
  ok [1m[32m2460[0m no concat error[K
  ok [1m[32m2461[0m correct number of entries[K
  ok [1m[32m2462[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20
[K

  ok [1m[32m2463[0m no open error[K
  ok [1m[32m2464[0m no batch error[K
  ok [1m[32m2465[0m no clear error[K
  ok [1m[32m2466[0m no concat error[K
  ok [1m[32m2467[0m correct number of entries[K
  ok [1m[32m2468[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20
[0m[1B[1G
# # db#clear() with limit=20 and gte=20
[K

  ok [1m[32m2469[0m no open error[K
  ok [1m[32m2470[0m no batch error[K
  ok [1m[32m2471[0m no clear error[K
  ok [1m[32m2472[0m no concat error[K
  ok [1m[32m2473[0m correct number of entries[K
  ok [1m[32m2474[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and gte=20
[0m[1B[1G
# # db#clear() with limit=20 and reverse=true
[K

  ok [1m[32m2475[0m no open error[K
  ok [1m[32m2476[0m no batch error[K
  ok [1m[32m2477[0m no clear error[K
  ok [1m[32m2478[0m no concat error[K
  ok [1m[32m2479[0m correct number of entries[K
  ok [1m[32m2480[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m2481[0m no open error[K
  ok [1m[32m2482[0m no batch error[K
  ok [1m[32m2483[0m no clear error[K
  ok [1m[32m2484[0m no concat error[K
  ok [1m[32m2485[0m correct number of entries[K
  ok [1m[32m2486[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # db#clear() with limit=-1 should clear whole database
[K

  ok [1m[32m2487[0m no open error[K
  ok [1m[32m2488[0m no batch error[K
  ok [1m[32m2489[0m no clear error[K
  ok [1m[32m2490[0m no concat error[K
  ok [1m[32m2491[0m correct number of entries[K
  ok [1m[32m2492[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=-1 should clear whole database
[0m[1B[1G
# # db#clear() with limit=0 should not clear anything
[K

  ok [1m[32m2493[0m no open error[K
  ok [1m[32m2494[0m no batch error[K
  ok [1m[32m2495[0m no clear error[K
  ok [1m[32m2496[0m no concat error[K
  ok [1m[32m2497[0m correct number of entries[K
  ok [1m[32m2498[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=0 should not clear anything
[0m[1B[1G
# # db#clear() with lte after limit
[K

  ok [1m[32m2499[0m no open error[K
  ok [1m[32m2500[0m no batch error[K
  ok [1m[32m2501[0m no clear error[K
  ok [1m[32m2502[0m no concat error[K
  ok [1m[32m2503[0m correct number of entries[K
  ok [1m[32m2504[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after limit
[0m[1B[1G
# # db#clear() with lte before limit
[K

  ok [1m[32m2505[0m no open error[K
  ok [1m[32m2506[0m no batch error[K
  ok [1m[32m2507[0m no clear error[K
  ok [1m[32m2508[0m no concat error[K
  ok [1m[32m2509[0m correct number of entries[K
  ok [1m[32m2510[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte before limit
[0m[1B[1G
# # db#clear() with gte after database end
[K

  ok [1m[32m2511[0m no open error[K
  ok [1m[32m2512[0m no batch error[K
  ok [1m[32m2513[0m no clear error[K
  ok [1m[32m2514[0m no concat error[K
  ok [1m[32m2515[0m correct number of entries[K
  ok [1m[32m2516[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte after database end
[0m[1B[1G
# # db#clear() with gt after database end
[K

  ok [1m[32m2517[0m no open error[K
  ok [1m[32m2518[0m no batch error[K
  ok [1m[32m2519[0m no clear error[K
  ok [1m[32m2520[0m no concat error[K
  ok [1m[32m2521[0m correct number of entries[K
  ok [1m[32m2522[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt after database end
[0m[1B[1G
# # db#clear() with lte after database end and reverse=true
[K

  ok [1m[32m2523[0m no open error[K
  ok [1m[32m2524[0m no batch error[K
  ok [1m[32m2525[0m no clear error[K
  ok [1m[32m2526[0m no concat error[K
  ok [1m[32m2527[0m correct number of entries[K
  ok [1m[32m2528[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after database end and reverse=true
[0m[1B[1G
# # db#clear() with lte and gte after database and reverse=true
[K

  ok [1m[32m2529[0m no open error[K
  ok [1m[32m2530[0m no batch error[K
  ok [1m[32m2531[0m no clear error[K
  ok [1m[32m2532[0m no concat error[K
  ok [1m[32m2533[0m correct number of entries[K
  ok [1m[32m2534[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte and gte after database and reverse=true
[0m[1B[1G
# # db#clear() with lt and gt after database and reverse=true
[K

  ok [1m[32m2535[0m no open error[K
  ok [1m[32m2536[0m no batch error[K
  ok [1m[32m2537[0m no clear error[K
  ok [1m[32m2538[0m no concat error[K
  ok [1m[32m2539[0m correct number of entries[K
  ok [1m[32m2540[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # testCommon.factory() returns a unique database
[K

  ok [1m[32m2541[0m no error while opening db1[K
  ok [1m[32m2542[0m no error while opening db2[K
  ok [1m[32m2543[0m put key in db1[K
  ok [1m[32m2544[0m got items from db2[K
  ok [1m[32m2545[0m db2 should be empty[K
  ok [1m[32m2546[0m no error while closing db1[K
  ok [1m[32m2547[0m no error while closing db2[K
[1A[1G[1m[32m✓ # testCommon.factory() returns a unique database
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db has manifest
[K

  ok [1m[32m2548[0m manifest is object[K
  ok [1m[32m2549[0m additionalMethods is object[K
  ok [1m[32m2550[0m truthy: bufferKeys[K
  ok [1m[32m2551[0m truthy: snapshots[K
  ok [1m[32m2552[0m false: permanence[K
  ok [1m[32m2553[0m truthy: seek[K
  ok [1m[32m2554[0m truthy: clear[K
  ok [1m[32m2555[0m truthy: getMany[K
  ok [1m[32m2556[0m truthy: status[K
  ok [1m[32m2557[0m false: keyIterator[K
  ok [1m[32m2558[0m false: valueIterator[K
  ok [1m[32m2559[0m false: iteratorNextv[K
  ok [1m[32m2560[0m false: iteratorAll[K
  ok [1m[32m2561[0m false: idempotentOpen[K
  ok [1m[32m2562[0m false: passiveOpen[K
  ok [1m[32m2563[0m false: serialize[K
  ok [1m[32m2564[0m false: createIfMissing[K
  ok [1m[32m2565[0m false: errorIfExists[K
  ok [1m[32m2566[0m false: deferredOpen[K
  ok [1m[32m2567[0m truthy: openCallback[K
  ok [1m[32m2568[0m truthy: promises[K
  ok [1m[32m2569[0m truthy: streams[K
  ok [1m[32m2570[0m false: encodings[K
  ok [1m[32m2571[0m false: events[K
  ok [1m[32m2572[0m truthy: additionalMethods[K
  ok [1m[32m2573[0m manifest has unique identity[K
  ok [1m[32m2574[0m manifest.additionalMethods has unique identity[K
  ok [1m[32m2575[0m no open error[K
  ok [1m[32m2576[0m manifest did not change after open[K
  ok [1m[32m2577[0m no close error[K
  ok [1m[32m2578[0m manifest did not change after close[K
[1A[1G[1m[32m✓ # db has manifest
[0m[1B[1G
# # manifest has status
[K

  ok [1m[32m2579[0m should be strictly equal[K
  ok [1m[32m2580[0m no open error[K
[1A[1G[1m[32m✓ # manifest has status
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # test database open method exists
[K

  ok [1m[32m2581[0m database object returned[K
  ok [1m[32m2582[0m open() function exists[K
[1A[1G[1m[32m✓ # test database open method exists
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp
[K

[1A[1G[1m[32m✓ # setUp
[0m[1B[1G
# # test database open no-arg throws
[K

  ok [1m[32m2583[0m no-arg open() throws[K
[1A[1G[1m[32m✓ # test database open no-arg throws
[0m[1B[1G
# # test callback-less, 1-arg, open() throws
[K

  ok [1m[32m2584[0m callback-less, 1-arg open() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, open() throws
[0m[1B[1G
# # test database open, no options
[K

  ok [1m[32m2585[0m undefined[K
[1A[1G[1m[32m✓ # test database open, no options
[0m[1B[1G
# # test database open, options and callback
[K

  ok [1m[32m2586[0m undefined[K
[1A[1G[1m[32m✓ # test database open, options and callback
[0m[1B[1G
# # test database open, close and open
[K

  ok [1m[32m2587[0m undefined[K
  ok [1m[32m2588[0m undefined[K
  ok [1m[32m2589[0m undefined[K
[1A[1G[1m[32m✓ # test database open, close and open
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test close()
[K

  ok [1m[32m2590[0m no-arg close() throws[K
  ok [1m[32m2591[0m non-callback close() throws[K
  ok [1m[32m2592[0m undefined[K
[1A[1G[1m[32m✓ # test close()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less put() throws
[K

  ok [1m[32m2593[0m no-arg put() throws[K
[1A[1G[1m[32m✓ # test argument-less put() throws
[0m[1B[1G
# # test callback-less, 1-arg, put() throws
[K

  ok [1m[32m2594[0m callback-less, 1-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, put() throws
[0m[1B[1G
# # test callback-less, 2-arg, put() throws
[K

  ok [1m[32m2595[0m callback-less, 2-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 2-arg, put() throws
[0m[1B[1G
# # test callback-less, 3-arg, put() throws
[K

  ok [1m[32m2596[0m callback-less, 3-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, put() throws
[0m[1B[1G
# # test simple put()
[K

  ok [1m[32m2597[0m undefined[K
  ok [1m[32m2598[0m null[K
  ok [1m[32m2599[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple put()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less get() throws
[K

  ok [1m[32m2600[0m no-arg get() throws[K
[1A[1G[1m[32m✓ # test argument-less get() throws
[0m[1B[1G
# # test callback-less, 1-arg, get() throws
[K

  ok [1m[32m2601[0m callback-less, 1-arg get() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, get() throws
[0m[1B[1G
# # test callback-less, 3-arg, get() throws
[K

  ok [1m[32m2602[0m callback-less, 2-arg get() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, get() throws
[0m[1B[1G
# # test simple get()
[K

  ok [1m[32m2603[0m undefined[K
  ok [1m[32m2604[0m null[K
  ok [1m[32m2605[0m should not be string by default[K
  ok [1m[32m2606[0m should be strictly equal[K
  ok [1m[32m2607[0m null[K
  ok [1m[32m2608[0m should not be string by default[K
  ok [1m[32m2609[0m should be strictly equal[K
  ok [1m[32m2610[0m null[K
  ok [1m[32m2611[0m should be string if not buffer[K
  ok [1m[32m2612[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple get()
[0m[1B[1G
# # test simultaneous get()
[K

  ok [1m[32m2613[0m undefined[K
  ok [1m[32m2614[0m null[K
  ok [1m[32m2615[0m should be strictly equal[K
  ok [1m[32m2616[0m null[K
  ok [1m[32m2617[0m should be strictly equal[K
  ok [1m[32m2618[0m null[K
  ok [1m[32m2619[0m should be strictly equal[K
  ok [1m[32m2620[0m null[K
  ok [1m[32m2621[0m should be strictly equal[K
  ok [1m[32m2622[0m null[K
  ok [1m[32m2623[0m should be strictly equal[K
  ok [1m[32m2624[0m null[K
  ok [1m[32m2625[0m should be strictly equal[K
  ok [1m[32m2626[0m null[K
  ok [1m[32m2627[0m should be strictly equal[K
  ok [1m[32m2628[0m null[K
  ok [1m[32m2629[0m should be strictly equal[K
  ok [1m[32m2630[0m null[K
  ok [1m[32m2631[0m should be strictly equal[K
  ok [1m[32m2632[0m null[K
  ok [1m[32m2633[0m should be strictly equal[K
  ok [1m[32m2634[0m should error[K
  ok [1m[32m2635[0m should have correct error message[K
  ok [1m[32m2636[0m value is undefined[K
  ok [1m[32m2637[0m should error[K
  ok [1m[32m2638[0m should have correct error message[K
  ok [1m[32m2639[0m value is undefined[K
  ok [1m[32m2640[0m should error[K
  ok [1m[32m2641[0m should have correct error message[K
  ok [1m[32m2642[0m value is undefined[K
  ok [1m[32m2643[0m should error[K
  ok [1m[32m2644[0m should have correct error message[K
  ok [1m[32m2645[0m value is undefined[K
  ok [1m[32m2646[0m should error[K
  ok [1m[32m2647[0m should have correct error message[K
  ok [1m[32m2648[0m value is undefined[K
  ok [1m[32m2649[0m should error[K
  ok [1m[32m2650[0m should have correct error message[K
  ok [1m[32m2651[0m value is undefined[K
  ok [1m[32m2652[0m should error[K
  ok [1m[32m2653[0m should have correct error message[K
  ok [1m[32m2654[0m value is undefined[K
  ok [1m[32m2655[0m should error[K
  ok [1m[32m2656[0m should have correct error message[K
  ok [1m[32m2657[0m value is undefined[K
  ok [1m[32m2658[0m should error[K
  ok [1m[32m2659[0m should have correct error message[K
  ok [1m[32m2660[0m value is undefined[K
  ok [1m[32m2661[0m should error[K
  ok [1m[32m2662[0m should have correct error message[K
  ok [1m[32m2663[0m value is undefined[K
[1A[1G[1m[32m✓ # test simultaneous get()
[0m[1B[1G
# # test get() not found error is asynchronous
[K

  ok [1m[32m2664[0m should error[K
  ok [1m[32m2665[0m should have correct error message[K
  ok [1m[32m2666[0m value is undefined[K
  ok [1m[32m2667[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() not found error is asynchronous
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less del() throws
[K

  ok [1m[32m2668[0m no-arg del() throws[K
[1A[1G[1m[32m✓ # test argument-less del() throws
[0m[1B[1G
# # test callback-less, 1-arg, del() throws
[K

  ok [1m[32m2669[0m callback-less, 1-arg del() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, del() throws
[0m[1B[1G
# # test callback-less, 3-arg, del() throws
[K

  ok [1m[32m2670[0m callback-less, 2-arg del() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, del() throws
[0m[1B[1G
# # test simple del()
[K

  ok [1m[32m2671[0m undefined[K
  ok [1m[32m2672[0m undefined[K
  ok [1m[32m2673[0m entry properly deleted[K
  ok [1m[32m2674[0m value is undefined[K
  ok [1m[32m2675[0m NotFound error[K
[1A[1G[1m[32m✓ # test simple del()
[0m[1B[1G
# # test del on non-existent key
[K

  ok [1m[32m2676[0m undefined[K
[1A[1G[1m[32m✓ # test del on non-existent key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test get() with null key causes error
[K

  ok [1m[32m2677[0m has error[K
  ok [1m[32m2678[0m should be truthy[K
  ok [1m[32m2679[0m correct error message[K
  ok [1m[32m2680[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with null key causes error
[0m[1B[1G
# # test del() with null key causes error
[K

  ok [1m[32m2681[0m has error[K
  ok [1m[32m2682[0m should be truthy[K
  ok [1m[32m2683[0m correct error message[K
  ok [1m[32m2684[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with null key causes error
[0m[1B[1G
# # test getMany() with null key causes error
[K

  ok [1m[32m2685[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2686[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2687[0m has error[K
  ok [1m[32m2688[0m should be truthy[K
  ok [1m[32m2689[0m correct error message[K
  ok [1m[32m2690[0m has error[K
  ok [1m[32m2691[0m should be truthy[K
  ok [1m[32m2692[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with null key causes error
[0m[1B[1G
# # test put() with null key causes error
[K

  ok [1m[32m2693[0m has error[K
  ok [1m[32m2694[0m should be truthy[K
  ok [1m[32m2695[0m correct error message[K
  ok [1m[32m2696[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null key causes error
[0m[1B[1G
# # test get() with undefined key causes error
[K

  ok [1m[32m2697[0m has error[K
  ok [1m[32m2698[0m should be truthy[K
  ok [1m[32m2699[0m correct error message[K
  ok [1m[32m2700[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with undefined key causes error
[0m[1B[1G
# # test del() with undefined key causes error
[K

  ok [1m[32m2701[0m has error[K
  ok [1m[32m2702[0m should be truthy[K
  ok [1m[32m2703[0m correct error message[K
  ok [1m[32m2704[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with undefined key causes error
[0m[1B[1G
# # test getMany() with undefined key causes error
[K

  ok [1m[32m2705[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2706[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2707[0m has error[K
  ok [1m[32m2708[0m should be truthy[K
  ok [1m[32m2709[0m correct error message[K
  ok [1m[32m2710[0m has error[K
  ok [1m[32m2711[0m should be truthy[K
  ok [1m[32m2712[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with undefined key causes error
[0m[1B[1G
# # test put() with undefined key causes error
[K

  ok [1m[32m2713[0m has error[K
  ok [1m[32m2714[0m should be truthy[K
  ok [1m[32m2715[0m correct error message[K
  ok [1m[32m2716[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined key causes error
[0m[1B[1G
# # test get() with empty String key causes error
[K

  ok [1m[32m2717[0m has error[K
  ok [1m[32m2718[0m should be truthy[K
  ok [1m[32m2719[0m correct error message[K
  ok [1m[32m2720[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty String key causes error
[0m[1B[1G
# # test del() with empty String key causes error
[K

  ok [1m[32m2721[0m has error[K
  ok [1m[32m2722[0m should be truthy[K
  ok [1m[32m2723[0m correct error message[K
  ok [1m[32m2724[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty String key causes error
[0m[1B[1G
# # test getMany() with empty String key causes error
[K

  ok [1m[32m2725[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2726[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2727[0m has error[K
  ok [1m[32m2728[0m should be truthy[K
  ok [1m[32m2729[0m correct error message[K
  ok [1m[32m2730[0m has error[K
  ok [1m[32m2731[0m should be truthy[K
  ok [1m[32m2732[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty String key causes error
[0m[1B[1G
# # test put() with empty String key causes error
[K

  ok [1m[32m2733[0m has error[K
  ok [1m[32m2734[0m should be truthy[K
  ok [1m[32m2735[0m correct error message[K
  ok [1m[32m2736[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty String key causes error
[0m[1B[1G
# # test get() with empty Buffer key causes error
[K

  ok [1m[32m2737[0m has error[K
  ok [1m[32m2738[0m should be truthy[K
  ok [1m[32m2739[0m correct error message[K
  ok [1m[32m2740[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Buffer key causes error
[0m[1B[1G
# # test del() with empty Buffer key causes error
[K

  ok [1m[32m2741[0m has error[K
  ok [1m[32m2742[0m should be truthy[K
  ok [1m[32m2743[0m correct error message[K
  ok [1m[32m2744[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Buffer key causes error
[0m[1B[1G
# # test getMany() with empty Buffer key causes error
[K

  ok [1m[32m2745[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2746[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2747[0m has error[K
  ok [1m[32m2748[0m should be truthy[K
  ok [1m[32m2749[0m correct error message[K
  ok [1m[32m2750[0m has error[K
  ok [1m[32m2751[0m should be truthy[K
  ok [1m[32m2752[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Buffer key causes error
[0m[1B[1G
# # test put() with empty Buffer key causes error
[K

  ok [1m[32m2753[0m has error[K
  ok [1m[32m2754[0m should be truthy[K
  ok [1m[32m2755[0m correct error message[K
  ok [1m[32m2756[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Buffer key causes error
[0m[1B[1G
# # test get() with empty Array key causes error
[K

  ok [1m[32m2757[0m has error[K
  ok [1m[32m2758[0m should be truthy[K
  ok [1m[32m2759[0m correct error message[K
  ok [1m[32m2760[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Array key causes error
[0m[1B[1G
# # test del() with empty Array key causes error
[K

  ok [1m[32m2761[0m has error[K
  ok [1m[32m2762[0m should be truthy[K
  ok [1m[32m2763[0m correct error message[K
  ok [1m[32m2764[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Array key causes error
[0m[1B[1G
# # test getMany() with empty Array key causes error
[K

  ok [1m[32m2765[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2766[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2767[0m has error[K
  ok [1m[32m2768[0m should be truthy[K
  ok [1m[32m2769[0m correct error message[K
  ok [1m[32m2770[0m has error[K
  ok [1m[32m2771[0m should be truthy[K
  ok [1m[32m2772[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Array key causes error
[0m[1B[1G
# # test put() with empty Array key causes error
[K

  ok [1m[32m2773[0m has error[K
  ok [1m[32m2774[0m should be truthy[K
  ok [1m[32m2775[0m correct error message[K
  ok [1m[32m2776[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Array key causes error
[0m[1B[1G
# # test put() with null value causes error
[K

  ok [1m[32m2777[0m has error[K
  ok [1m[32m2778[0m should be truthy[K
  ok [1m[32m2779[0m correct error message[K
  ok [1m[32m2780[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null value causes error
[0m[1B[1G
# # test put() with undefined value causes error
[K

  ok [1m[32m2781[0m has error[K
  ok [1m[32m2782[0m should be truthy[K
  ok [1m[32m2783[0m correct error message[K
  ok [1m[32m2784[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined value causes error
[0m[1B[1G
# # test put()/get()/del() with `0` key
[K

  ok [1m[32m2785[0m undefined[K
  ok [1m[32m2786[0m no error, has key/value for ``0` key`[K
  ok [1m[32m2787[0m is a Buffer[K
  ok [1m[32m2788[0m should be strictly equal[K
  ok [1m[32m2789[0m no error, deleted key/value for ``0` key`[K
  ok [1m[32m2790[0m entry properly deleted[K
  ok [1m[32m2791[0m should have correct error message[K
  ok [1m[32m2792[0m value is undefined[K
  ok [1m[32m2793[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` key
[0m[1B[1G
# # test put()/get()/del() with long String key
[K

  ok [1m[32m2794[0m undefined[K
  ok [1m[32m2795[0m no error, has key/value for `long String key`[K
  ok [1m[32m2796[0m is a Buffer[K
  ok [1m[32m2797[0m should be strictly equal[K
  ok [1m[32m2798[0m no error, deleted key/value for `long String key`[K
  ok [1m[32m2799[0m entry properly deleted[K
  ok [1m[32m2800[0m should have correct error message[K
  ok [1m[32m2801[0m value is undefined[K
  ok [1m[32m2802[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String key
[0m[1B[1G
# # test put()/get()/del() with Buffer key
[K

  ok [1m[32m2803[0m undefined[K
  ok [1m[32m2804[0m no error, has key/value for `Buffer key`[K
  ok [1m[32m2805[0m is a Buffer[K
  ok [1m[32m2806[0m should be strictly equal[K
  ok [1m[32m2807[0m no error, deleted key/value for `Buffer key`[K
  ok [1m[32m2808[0m entry properly deleted[K
  ok [1m[32m2809[0m should have correct error message[K
  ok [1m[32m2810[0m value is undefined[K
  ok [1m[32m2811[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer key
[0m[1B[1G
# # test put()/get()/del() with Array value
[K

  ok [1m[32m2812[0m undefined[K
  ok [1m[32m2813[0m no error, has key/value for `Array value`[K
  ok [1m[32m2814[0m is a Buffer[K
  ok [1m[32m2815[0m should be strictly equal[K
  ok [1m[32m2816[0m no error, deleted key/value for `Array value`[K
  ok [1m[32m2817[0m entry properly deleted[K
  ok [1m[32m2818[0m should have correct error message[K
  ok [1m[32m2819[0m value is undefined[K
  ok [1m[32m2820[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array value
[0m[1B[1G
# # test put()/get()/del() with `false` value
[K

  ok [1m[32m2821[0m undefined[K
  ok [1m[32m2822[0m no error, has key/value for ``false` value`[K
  ok [1m[32m2823[0m is a Buffer[K
  ok [1m[32m2824[0m should be strictly equal[K
  ok [1m[32m2825[0m no error, deleted key/value for ``false` value`[K
  ok [1m[32m2826[0m entry properly deleted[K
  ok [1m[32m2827[0m should have correct error message[K
  ok [1m[32m2828[0m value is undefined[K
  ok [1m[32m2829[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `false` value
[0m[1B[1G
# # test put()/get()/del() with `0` value
[K

  ok [1m[32m2830[0m undefined[K
  ok [1m[32m2831[0m no error, has key/value for ``0` value`[K
  ok [1m[32m2832[0m is a Buffer[K
  ok [1m[32m2833[0m should be strictly equal[K
  ok [1m[32m2834[0m no error, deleted key/value for ``0` value`[K
  ok [1m[32m2835[0m entry properly deleted[K
  ok [1m[32m2836[0m should have correct error message[K
  ok [1m[32m2837[0m value is undefined[K
  ok [1m[32m2838[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` value
[0m[1B[1G
# # test put()/get()/del() with `NaN` value
[K

  ok [1m[32m2839[0m undefined[K
  ok [1m[32m2840[0m no error, has key/value for ``NaN` value`[K
  ok [1m[32m2841[0m is a Buffer[K
  ok [1m[32m2842[0m should be strictly equal[K
  ok [1m[32m2843[0m no error, deleted key/value for ``NaN` value`[K
  ok [1m[32m2844[0m entry properly deleted[K
  ok [1m[32m2845[0m should have correct error message[K
  ok [1m[32m2846[0m value is undefined[K
  ok [1m[32m2847[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `NaN` value
[0m[1B[1G
# # test put()/get()/del() with empty String value
[K

  ok [1m[32m2848[0m undefined[K
  ok [1m[32m2849[0m no error, has key/value for `empty String value`[K
  ok [1m[32m2850[0m is a Buffer[K
  ok [1m[32m2851[0m should be strictly equal[K
  ok [1m[32m2852[0m no error, deleted key/value for `empty String value`[K
  ok [1m[32m2853[0m entry properly deleted[K
  ok [1m[32m2854[0m should have correct error message[K
  ok [1m[32m2855[0m value is undefined[K
  ok [1m[32m2856[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty String value
[0m[1B[1G
# # test put()/get()/del() with empty Buffer value
[K

  ok [1m[32m2857[0m undefined[K
  ok [1m[32m2858[0m no error, has key/value for `empty Buffer value`[K
  ok [1m[32m2859[0m is a Buffer[K
  ok [1m[32m2860[0m should be strictly equal[K
  ok [1m[32m2861[0m no error, deleted key/value for `empty Buffer value`[K
  ok [1m[32m2862[0m entry properly deleted[K
  ok [1m[32m2863[0m should have correct error message[K
  ok [1m[32m2864[0m value is undefined[K
  ok [1m[32m2865[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Buffer value
[0m[1B[1G
# # test put()/get()/del() with empty Array value
[K

  ok [1m[32m2866[0m undefined[K
  ok [1m[32m2867[0m no error, has key/value for `empty Array value`[K
  ok [1m[32m2868[0m is a Buffer[K
  ok [1m[32m2869[0m should be strictly equal[K
  ok [1m[32m2870[0m no error, deleted key/value for `empty Array value`[K
  ok [1m[32m2871[0m entry properly deleted[K
  ok [1m[32m2872[0m should have correct error message[K
  ok [1m[32m2873[0m value is undefined[K
  ok [1m[32m2874[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Array value
[0m[1B[1G
# # test put()/get()/del() with long String value
[K

  ok [1m[32m2875[0m undefined[K
  ok [1m[32m2876[0m no error, has key/value for `long String value`[K
  ok [1m[32m2877[0m is a Buffer[K
  ok [1m[32m2878[0m should be strictly equal[K
  ok [1m[32m2879[0m no error, deleted key/value for `long String value`[K
  ok [1m[32m2880[0m entry properly deleted[K
  ok [1m[32m2881[0m should have correct error message[K
  ok [1m[32m2882[0m value is undefined[K
  ok [1m[32m2883[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String value
[0m[1B[1G
# # test put()/get()/del() with Buffer value
[K

  ok [1m[32m2884[0m undefined[K
  ok [1m[32m2885[0m no error, has key/value for `Buffer value`[K
  ok [1m[32m2886[0m is a Buffer[K
  ok [1m[32m2887[0m should be strictly equal[K
  ok [1m[32m2888[0m no error, deleted key/value for `Buffer value`[K
  ok [1m[32m2889[0m entry properly deleted[K
  ok [1m[32m2890[0m should have correct error message[K
  ok [1m[32m2891[0m value is undefined[K
  ok [1m[32m2892[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer value
[0m[1B[1G
# # test put()/get()/del() with Array key
[K

  ok [1m[32m2893[0m undefined[K
  ok [1m[32m2894[0m no error, has key/value for `Array key`[K
  ok [1m[32m2895[0m is a Buffer[K
  ok [1m[32m2896[0m should be strictly equal[K
  ok [1m[32m2897[0m no error, deleted key/value for `Array key`[K
  ok [1m[32m2898[0m entry properly deleted[K
  ok [1m[32m2899[0m should have correct error message[K
  ok [1m[32m2900[0m value is undefined[K
  ok [1m[32m2901[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test getMany() requires an array argument (callback)
[K

  ok [1m[32m2902[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2903[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2904[0m should be strictly equal[K
  ok [1m[32m2905[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (callback)
[0m[1B[1G
# # test getMany() requires an array argument (promise)
[K

  ok [1m[32m2906[0m should be strictly equal[K
  ok [1m[32m2907[0m should be strictly equal[K
  ok [1m[32m2908[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (promise)
[0m[1B[1G
# # test getMany() support is reflected in manifest
[K

  ok [1m[32m2909[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() support is reflected in manifest
[0m[1B[1G
# # test simple getMany()
[K

  ok [1m[32m2910[0m undefined[K
  ok [1m[32m2911[0m null[K
  ok [1m[32m2912[0m got an array[K
  ok [1m[32m2913[0m array has 1 element[K
  ok [1m[32m2914[0m should not be string by default[K
  ok [1m[32m2915[0m should be strictly equal[K
  ok [1m[32m2916[0m null[K
  ok [1m[32m2917[0m got an array[K
  ok [1m[32m2918[0m array has 1 element[K
  ok [1m[32m2919[0m should not be string by default[K
  ok [1m[32m2920[0m should be strictly equal[K
  ok [1m[32m2921[0m null[K
  ok [1m[32m2922[0m should be string if not buffer[K
  ok [1m[32m2923[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simple getMany()
[0m[1B[1G
# # test getMany() with multiple keys
[K

  ok [1m[32m2924[0m undefined[K
  ok [1m[32m2925[0m null[K
  ok [1m[32m2926[0m should be deeply equivalent[K
  ok [1m[32m2927[0m null[K
  ok [1m[32m2928[0m maintains order of input keys[K
[1A[1G[1m[32m✓ # test getMany() with multiple keys
[0m[1B[1G
# # test empty getMany()
[K

  ok [1m[32m2929[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2930[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2931[0m null[K
  ok [1m[32m2932[0m should be deeply equivalent[K
  ok [1m[32m2933[0m null[K
  ok [1m[32m2934[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test empty getMany()
[0m[1B[1G
# # test not-found getMany()
[K

  ok [1m[32m2935[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2936[0m callback (anonymous) is asynchronous[K
  ok [1m[32m2937[0m null[K
  ok [1m[32m2938[0m should be deeply equivalent[K
  ok [1m[32m2939[0m null[K
  ok [1m[32m2940[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test not-found getMany()
[0m[1B[1G
# # test getMany() with promise
[K

  ok [1m[32m2941[0m should be deeply equivalent[K
  ok [1m[32m2942[0m should be deeply equivalent[K
  ok [1m[32m2943[0m should be deeply equivalent[K
  ok [1m[32m2944[0m should be deeply equivalent[K
  ok [1m[32m2945[0m should be deeply equivalent[K
  ok [1m[32m2946[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test getMany() with promise
[0m[1B[1G
# # test simultaneous getMany()
[K

  ok [1m[32m2947[0m undefined[K
  ok [1m[32m2948[0m null[K
  ok [1m[32m2949[0m should be strictly equal[K
  ok [1m[32m2950[0m should be strictly equal[K
  ok [1m[32m2951[0m null[K
  ok [1m[32m2952[0m should be strictly equal[K
  ok [1m[32m2953[0m should be strictly equal[K
  ok [1m[32m2954[0m null[K
  ok [1m[32m2955[0m should be strictly equal[K
  ok [1m[32m2956[0m should be strictly equal[K
  ok [1m[32m2957[0m null[K
  ok [1m[32m2958[0m should be strictly equal[K
  ok [1m[32m2959[0m should be strictly equal[K
  ok [1m[32m2960[0m null[K
  ok [1m[32m2961[0m should be strictly equal[K
  ok [1m[32m2962[0m should be strictly equal[K
  ok [1m[32m2963[0m null[K
  ok [1m[32m2964[0m should be strictly equal[K
  ok [1m[32m2965[0m should be strictly equal[K
  ok [1m[32m2966[0m null[K
  ok [1m[32m2967[0m should be strictly equal[K
  ok [1m[32m2968[0m should be strictly equal[K
  ok [1m[32m2969[0m null[K
  ok [1m[32m2970[0m should be strictly equal[K
  ok [1m[32m2971[0m should be strictly equal[K
  ok [1m[32m2972[0m null[K
  ok [1m[32m2973[0m should be strictly equal[K
  ok [1m[32m2974[0m should be strictly equal[K
  ok [1m[32m2975[0m null[K
  ok [1m[32m2976[0m should be strictly equal[K
  ok [1m[32m2977[0m should be strictly equal[K
  ok [1m[32m2978[0m null[K
  ok [1m[32m2979[0m should be deeply equivalent[K
  ok [1m[32m2980[0m null[K
  ok [1m[32m2981[0m should be deeply equivalent[K
  ok [1m[32m2982[0m null[K
  ok [1m[32m2983[0m should be deeply equivalent[K
  ok [1m[32m2984[0m null[K
  ok [1m[32m2985[0m should be deeply equivalent[K
  ok [1m[32m2986[0m null[K
  ok [1m[32m2987[0m should be deeply equivalent[K
  ok [1m[32m2988[0m null[K
  ok [1m[32m2989[0m should be deeply equivalent[K
  ok [1m[32m2990[0m null[K
  ok [1m[32m2991[0m should be deeply equivalent[K
  ok [1m[32m2992[0m null[K
  ok [1m[32m2993[0m should be deeply equivalent[K
  ok [1m[32m2994[0m null[K
  ok [1m[32m2995[0m should be deeply equivalent[K
  ok [1m[32m2996[0m null[K
  ok [1m[32m2997[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simultaneous getMany()
[0m[1B[1G
# # test getMany() on new db
[K

  ok [1m[32m2998[0m should be strictly equal[K
  ok [1m[32m2999[0m should be strictly equal[K
  ok [1m[32m3000[0m (unnamed assert)[K
  ok [1m[32m3001[0m should be strictly equal[K
  ok [1m[32m3002[0m should be strictly equal[K
  ok [1m[32m3003[0m (unnamed assert)[K
  ok [1m[32m3004[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3005[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3006[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3007[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3008[0m should be strictly equal[K
  ok [1m[32m3009[0m should be strictly equal[K
  ok [1m[32m3010[0m should be strictly equal[K
  ok [1m[32m3011[0m should be strictly equal[K
  ok [1m[32m3012[0m should be strictly equal[K
  ok [1m[32m3013[0m should be strictly equal[K
  ok [1m[32m3014[0m should be strictly equal[K
  ok [1m[32m3015[0m should be strictly equal[K
  ok [1m[32m3016[0m undefined[K
  ok [1m[32m3017[0m undefined[K
[1A[1G[1m[32m✓ # test getMany() on new db
[0m[1B[1G
# # test getMany() on opening db
[K

  ok [1m[32m3018[0m callback (open) is asynchronous[K
  ok [1m[32m3019[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3020[0m callback (open) is asynchronous[K
  ok [1m[32m3021[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3022[0m should be strictly equal[K
  ok [1m[32m3023[0m should be strictly equal[K
  ok [1m[32m3024[0m should be strictly equal[K
  ok [1m[32m3025[0m should be strictly equal[K
  ok [1m[32m3026[0m undefined[K
  ok [1m[32m3027[0m undefined[K
[1A[1G[1m[32m✓ # test getMany() on opening db
[0m[1B[1G
# # test getMany() on closed db
[K

  ok [1m[32m3028[0m undefined[K
  ok [1m[32m3029[0m should be strictly equal[K
  ok [1m[32m3030[0m undefined[K
  ok [1m[32m3031[0m should be strictly equal[K
  ok [1m[32m3032[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3033[0m should be strictly equal[K
  ok [1m[32m3034[0m undefined[K
  ok [1m[32m3035[0m should be strictly equal[K
  ok [1m[32m3036[0m undefined[K
  ok [1m[32m3037[0m should be strictly equal[K
  ok [1m[32m3038[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3039[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closed db
[0m[1B[1G
# # test getMany() on closing db
[K

  ok [1m[32m3040[0m undefined[K
  ok [1m[32m3041[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3042[0m undefined[K
  ok [1m[32m3043[0m should be strictly equal[K
  ok [1m[32m3044[0m undefined[K
  ok [1m[32m3045[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3046[0m undefined[K
  ok [1m[32m3047[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closing db
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test callback-less, 2-arg, batch() throws
[K

  ok [1m[32m3048[0m callback-less, 2-arg batch() throws[K
[1A[1G[1m[32m✓ # test callback-less, 2-arg, batch() throws
[0m[1B[1G
# # test batch() with missing `value`
[K

  ok [1m[32m3049[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with missing `value`
[0m[1B[1G
# # test batch() with null or undefined `value`
[K

  ok [1m[32m3050[0m correct error message[K
  ok [1m[32m3051[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `value`
[0m[1B[1G
# # test batch() with missing `key`
[K

  ok [1m[32m3052[0m got error[K
  ok [1m[32m3053[0m correct error message[K
  ok [1m[32m3054[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key`
[0m[1B[1G
# # test batch() with null or undefined `key`
[K

  ok [1m[32m3055[0m got error[K
  ok [1m[32m3056[0m correct error message[K
  ok [1m[32m3057[0m callback is asynchronous[K
  ok [1m[32m3058[0m got error[K
  ok [1m[32m3059[0m correct error message[K
  ok [1m[32m3060[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `key`
[0m[1B[1G
# # test batch() with empty `key`
[K

  ok [1m[32m3061[0m got error[K
  ok [1m[32m3062[0m correct error message[K
  ok [1m[32m3063[0m callback is asynchronous[K
  ok [1m[32m3064[0m got error[K
  ok [1m[32m3065[0m correct error message[K
  ok [1m[32m3066[0m callback is asynchronous[K
  ok [1m[32m3067[0m got error[K
  ok [1m[32m3068[0m correct error message[K
  ok [1m[32m3069[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty `key`
[0m[1B[1G
# # test batch() with missing `key` and `value`
[K

  ok [1m[32m3070[0m got error[K
  ok [1m[32m3071[0m correct error message[K
  ok [1m[32m3072[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key` and `value`
[0m[1B[1G
# # test batch() with missing `type`
[K

  ok [1m[32m3073[0m got error[K
  ok [1m[32m3074[0m correct error message[K
  ok [1m[32m3075[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `type`
[0m[1B[1G
# # test batch() with wrong `type`
[K

  ok [1m[32m3076[0m got error[K
  ok [1m[32m3077[0m correct error message[K
  ok [1m[32m3078[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with wrong `type`
[0m[1B[1G
# # test batch() with missing array
[K

  ok [1m[32m3079[0m got error[K
  ok [1m[32m3080[0m correct error message[K
  ok [1m[32m3081[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing array
[0m[1B[1G
# # test batch() with undefined array
[K

  ok [1m[32m3082[0m got error[K
  ok [1m[32m3083[0m correct error message[K
  ok [1m[32m3084[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined array
[0m[1B[1G
# # test batch() with null array
[K

  ok [1m[32m3085[0m got error[K
  ok [1m[32m3086[0m correct error message[K
  ok [1m[32m3087[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null array
[0m[1B[1G
# # test batch() with null options
[K

  ok [1m[32m3088[0m undefined[K
[1A[1G[1m[32m✓ # test batch() with null options
[0m[1B[1G
# # test batch() with null element
[K

  ok [1m[32m3089[0m got error[K
  ok [1m[32m3090[0m correct error message[K
  ok [1m[32m3091[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null element
[0m[1B[1G
# # test batch() with undefined element
[K

  ok [1m[32m3092[0m got error[K
  ok [1m[32m3093[0m correct error message[K
  ok [1m[32m3094[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined element
[0m[1B[1G
# # test batch() with number element
[K

  ok [1m[32m3095[0m got error[K
  ok [1m[32m3096[0m correct error message[K
  ok [1m[32m3097[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with number element
[0m[1B[1G
# # test batch() with boolean element
[K

  ok [1m[32m3098[0m got error[K
  ok [1m[32m3099[0m correct error message[K
  ok [1m[32m3100[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with boolean element
[0m[1B[1G
# # test batch() with empty array
[K

  ok [1m[32m3101[0m no error from batch()[K
  ok [1m[32m3102[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty array
[0m[1B[1G
# # test simple batch()
[K

  ok [1m[32m3103[0m undefined[K
  ok [1m[32m3104[0m null[K
  ok [1m[32m3105[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m3106[0m undefined[K
  ok [1m[32m3107[0m null[K
  ok [1m[32m3108[0m should be strictly equal[K
  ok [1m[32m3109[0m entry not found[K
  ok [1m[32m3110[0m value is undefined[K
  ok [1m[32m3111[0m NotFound error[K
  ok [1m[32m3112[0m null[K
  ok [1m[32m3113[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m3114[0m should error[K
  ok [1m[32m3115[0m callback is asynchronous[K
  ok [1m[32m3116[0m should not be found[K
  ok [1m[32m3117[0m should not be found[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test batch has db reference
[K

  ok [1m[32m3118[0m should be truthy[K
[1A[1G[1m[32m✓ # test batch has db reference
[0m[1B[1G
# # test batch#put() with missing `value`
[K

  ok [1m[32m3119[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `value`
[0m[1B[1G
# # test batch#put() with missing `key`
[K

  ok [1m[32m3120[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key`
[0m[1B[1G
# # test batch#put() with null `key`
[K

  ok [1m[32m3121[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null `key`
[0m[1B[1G
# # test batch#put() with missing `key` and `value`
[K

  ok [1m[32m3122[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key` and `value`
[0m[1B[1G
# # test batch#put() with null or undefined `value`
[K

  ok [1m[32m3123[0m correct error message[K
  ok [1m[32m3124[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null or undefined `value`
[0m[1B[1G
# # test batch#del() with missing `key`
[K

  ok [1m[32m3125[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with missing `key`
[0m[1B[1G
# # test batch#del() with null or undefined `key`
[K

  ok [1m[32m3126[0m correct error message[K
  ok [1m[32m3127[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with null or undefined `key`
[0m[1B[1G
# # test batch#clear() doesn't throw
[K

[1A[1G[1m[32m✓ # test batch#clear() doesn't throw
[0m[1B[1G
# # test batch#write() with no callback
[K

  ok [1m[32m3128[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() with no callback
[0m[1B[1G
# # test batch#put() after write()
[K

  ok [1m[32m3129[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() after write()
[0m[1B[1G
# # test batch#del() after write()
[K

  ok [1m[32m3130[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() after write()
[0m[1B[1G
# # test batch#clear() after write()
[K

  ok [1m[32m3131[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#clear() after write()
[0m[1B[1G
# # test batch#write() after write()
[K

  ok [1m[32m3132[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() after write()
[0m[1B[1G
# # test serialize object
[K

  ok [1m[32m3133[0m .key is set for .put and .del operations[K
  ok [1m[32m3134[0m .value is set for .put operation[K
  ok [1m[32m3135[0m .key is set for .put and .del operations[K
[1A[1G[1m[32m✓ # test serialize object
[0m[1B[1G
# # test custom _serialize*
[K

  ok [1m[32m3136[0m should be deeply equivalent[K
  ok [1m[32m3137[0m should be deeply equivalent[K
  ok [1m[32m3138[0m should be deeply equivalent[K
  ok [1m[32m3139[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test custom _serialize*
[0m[1B[1G
# # test batch#write() with no operations
[K

  ok [1m[32m3140[0m no error from write()[K
  ok [1m[32m3141[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch#write() with no operations
[0m[1B[1G
# # test basic batch
[K

  ok [1m[32m3142[0m undefined[K
  ok [1m[32m3143[0m undefined[K
  ok [1m[32m3144[0m undefined[K
  ok [1m[32m3145[0m correct number of entries[K
  ok [1m[32m3146[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test basic batch
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test iterator has db reference
[K

  ok [1m[32m3147[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator has db reference
[0m[1B[1G
# # test iterator#next returns this in callback mode
[K

  ok [1m[32m3148[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator#next returns this in callback mode
[0m[1B[1G
# # test twice iterator#end() callback with error
[K

  ok [1m[32m3149[0m undefined[K
  ok [1m[32m3150[0m returned error[K
  ok [1m[32m3151[0m correct error[K
  ok [1m[32m3152[0m should be strictly equal[K
  ok [1m[32m3153[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test twice iterator#end() callback with error
[0m[1B[1G
# # test iterator#next after iterator#end() callback with error
[K

  ok [1m[32m3154[0m undefined[K
  ok [1m[32m3155[0m returned error[K
  ok [1m[32m3156[0m correct error[K
  ok [1m[32m3157[0m correct message[K
  ok [1m[32m3158[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test iterator#next after iterator#end() callback with error
[0m[1B[1G
# # test twice iterator#next() throws
[K

  ok [1m[32m3159[0m returned error[K
  ok [1m[32m3160[0m correct error[K
  ok [1m[32m3161[0m should be strictly equal[K
  ok [1m[32m3162[0m callback is asynchronous[K
  ok [1m[32m3163[0m undefined[K
  ok [1m[32m3164[0m undefined[K
[1A[1G[1m[32m✓ # test twice iterator#next() throws
[0m[1B[1G
# # test simple iterator()
[K

  ok [1m[32m3165[0m undefined[K
  ok [1m[32m3166[0m null[K
  ok [1m[32m3167[0m key argument is a Buffer[K
  ok [1m[32m3168[0m value argument is a Buffer[K
  ok [1m[32m3169[0m correct key[K
  ok [1m[32m3170[0m correct value[K
  ok [1m[32m3171[0m null[K
  ok [1m[32m3172[0m key argument is a Buffer[K
  ok [1m[32m3173[0m value argument is a Buffer[K
  ok [1m[32m3174[0m correct key[K
  ok [1m[32m3175[0m correct value[K
  ok [1m[32m3176[0m null[K
  ok [1m[32m3177[0m key argument is a Buffer[K
  ok [1m[32m3178[0m value argument is a Buffer[K
  ok [1m[32m3179[0m correct key[K
  ok [1m[32m3180[0m correct value[K
  ok [1m[32m3181[0m undefined[K
  ok [1m[32m3182[0m err argument is nullish[K
  ok [1m[32m3183[0m key argument is undefined[K
  ok [1m[32m3184[0m value argument is undefined[K
  ok [1m[32m3185[0m correct number of entries[K
[1A[1G[1m[32m✓ # test simple iterator()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test full data collection
[K

  ok [1m[32m3186[0m undefined[K
  ok [1m[32m3187[0m correct number of entries[K
  ok [1m[32m3188[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection
[0m[1B[1G
# # test full data collection (flipped)
[K

  ok [1m[32m3189[0m undefined[K
  ok [1m[32m3190[0m correct number of entries[K
  ok [1m[32m3191[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection (flipped)
[0m[1B[1G
# # test iterator with reverse=true
[K

  ok [1m[32m3192[0m undefined[K
  ok [1m[32m3193[0m correct number of entries[K
  ok [1m[32m3194[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with reverse=true
[0m[1B[1G
# # test iterator with gte=00
[K

  ok [1m[32m3195[0m undefined[K
  ok [1m[32m3196[0m correct number of entries[K
  ok [1m[32m3197[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00
[0m[1B[1G
# # test iterator with gte=00 (flipped)
[K

  ok [1m[32m3198[0m undefined[K
  ok [1m[32m3199[0m correct number of entries[K
  ok [1m[32m3200[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00 (flipped)
[0m[1B[1G
# # test iterator with gte=50
[K

  ok [1m[32m3201[0m undefined[K
  ok [1m[32m3202[0m correct number of entries[K
  ok [1m[32m3203[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50
[0m[1B[1G
# # test iterator with gte=50 (flipped)
[K

  ok [1m[32m3204[0m undefined[K
  ok [1m[32m3205[0m correct number of entries[K
  ok [1m[32m3206[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50 and reverse=true
[K

  ok [1m[32m3207[0m undefined[K
  ok [1m[32m3208[0m correct number of entries[K
  ok [1m[32m3209[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 and reverse=true
[0m[1B[1G
# # test iterator with gte=49.5 (midway)
[K

  ok [1m[32m3210[0m undefined[K
  ok [1m[32m3211[0m correct number of entries[K
  ok [1m[32m3212[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway)
[0m[1B[1G
# # test iterator with gte=49.5 (midway) (flipped)
[K

  ok [1m[32m3213[0m undefined[K
  ok [1m[32m3214[0m correct number of entries[K
  ok [1m[32m3215[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=49999 (midway)
[K

  ok [1m[32m3216[0m undefined[K
  ok [1m[32m3217[0m correct number of entries[K
  ok [1m[32m3218[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway)
[0m[1B[1G
# # test iterator with gte=49999 (midway) (flipped)
[K

  ok [1m[32m3219[0m undefined[K
  ok [1m[32m3220[0m correct number of entries[K
  ok [1m[32m3221[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m3222[0m undefined[K
  ok [1m[32m3223[0m correct number of entries[K
  ok [1m[32m3224[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m3225[0m undefined[K
  ok [1m[32m3226[0m correct number of entries[K
  ok [1m[32m3227[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=50 and reverse=true
[K

  ok [1m[32m3228[0m undefined[K
  ok [1m[32m3229[0m correct number of entries[K
  ok [1m[32m3230[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=50
[K

  ok [1m[32m3231[0m undefined[K
  ok [1m[32m3232[0m correct number of entries[K
  ok [1m[32m3233[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50
[0m[1B[1G
# # test iterator with lte=50 (flipped)
[K

  ok [1m[32m3234[0m undefined[K
  ok [1m[32m3235[0m correct number of entries[K
  ok [1m[32m3236[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50.5 (midway)
[K

  ok [1m[32m3237[0m undefined[K
  ok [1m[32m3238[0m correct number of entries[K
  ok [1m[32m3239[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway)
[0m[1B[1G
# # test iterator with lte=50.5 (midway) (flipped)
[K

  ok [1m[32m3240[0m undefined[K
  ok [1m[32m3241[0m correct number of entries[K
  ok [1m[32m3242[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=50555 (midway)
[K

  ok [1m[32m3243[0m undefined[K
  ok [1m[32m3244[0m correct number of entries[K
  ok [1m[32m3245[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway)
[0m[1B[1G
# # test iterator with lte=50555 (midway) (flipped)
[K

  ok [1m[32m3246[0m undefined[K
  ok [1m[32m3247[0m correct number of entries[K
  ok [1m[32m3248[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with lt=50555 (midway)
[K

  ok [1m[32m3249[0m undefined[K
  ok [1m[32m3250[0m correct number of entries[K
  ok [1m[32m3251[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway)
[0m[1B[1G
# # test iterator with lt=50555 (midway) (flipped)
[K

  ok [1m[32m3252[0m undefined[K
  ok [1m[32m3253[0m correct number of entries[K
  ok [1m[32m3254[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m3255[0m undefined[K
  ok [1m[32m3256[0m correct number of entries[K
  ok [1m[32m3257[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m3258[0m undefined[K
  ok [1m[32m3259[0m correct number of entries[K
  ok [1m[32m3260[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50 and reverse=true
[K

  ok [1m[32m3261[0m undefined[K
  ok [1m[32m3262[0m correct number of entries[K
  ok [1m[32m3263[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=0
[K

  ok [1m[32m3264[0m undefined[K
  ok [1m[32m3265[0m correct number of entries[K
  ok [1m[32m3266[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0
[0m[1B[1G
# # test iterator with lte=0 (flipped)
[K

  ok [1m[32m3267[0m undefined[K
  ok [1m[32m3268[0m correct number of entries[K
  ok [1m[32m3269[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0 (flipped)
[0m[1B[1G
# # test iterator with lt=0
[K

  ok [1m[32m3270[0m undefined[K
  ok [1m[32m3271[0m correct number of entries[K
  ok [1m[32m3272[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0
[0m[1B[1G
# # test iterator with lt=0 (flipped)
[K

  ok [1m[32m3273[0m undefined[K
  ok [1m[32m3274[0m correct number of entries[K
  ok [1m[32m3275[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70
[K

  ok [1m[32m3276[0m undefined[K
  ok [1m[32m3277[0m correct number of entries[K
  ok [1m[32m3278[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70
[0m[1B[1G
# # test iterator with gte=30 and lte=70 (flipped)
[K

  ok [1m[32m3279[0m undefined[K
  ok [1m[32m3280[0m correct number of entries[K
  ok [1m[32m3281[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 (flipped)
[0m[1B[1G
# # test iterator with gt=29 and lt=71
[K

  ok [1m[32m3282[0m undefined[K
  ok [1m[32m3283[0m correct number of entries[K
  ok [1m[32m3284[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71
[0m[1B[1G
# # test iterator with gt=29 and lt=71 (flipped)
[K

  ok [1m[32m3285[0m undefined[K
  ok [1m[32m3286[0m correct number of entries[K
  ok [1m[32m3287[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m3288[0m undefined[K
  ok [1m[32m3289[0m correct number of entries[K
  ok [1m[32m3290[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # test iterator with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m3291[0m undefined[K
  ok [1m[32m3292[0m correct number of entries[K
  ok [1m[32m3293[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # test iterator with limit=20
[K

  ok [1m[32m3294[0m undefined[K
  ok [1m[32m3295[0m correct number of entries[K
  ok [1m[32m3296[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20
[0m[1B[1G
# # test iterator with limit=20 and gte=20
[K

  ok [1m[32m3297[0m undefined[K
  ok [1m[32m3298[0m correct number of entries[K
  ok [1m[32m3299[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and gte=20
[0m[1B[1G
# # test iterator with limit=20 and reverse=true
[K

  ok [1m[32m3300[0m undefined[K
  ok [1m[32m3301[0m correct number of entries[K
  ok [1m[32m3302[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and reverse=true
[0m[1B[1G
# # test iterator with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m3303[0m undefined[K
  ok [1m[32m3304[0m correct number of entries[K
  ok [1m[32m3305[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # test iterator with limit=-1 should iterate over whole database
[K

  ok [1m[32m3306[0m undefined[K
  ok [1m[32m3307[0m correct number of entries[K
  ok [1m[32m3308[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=-1 should iterate over whole database
[0m[1B[1G
# # test iterator with limit=0 should not iterate over anything
[K

  ok [1m[32m3309[0m undefined[K
  ok [1m[32m3310[0m correct number of entries[K
  ok [1m[32m3311[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=0 should not iterate over anything
[0m[1B[1G
# # test iterator with lte after limit
[K

  ok [1m[32m3312[0m undefined[K
  ok [1m[32m3313[0m correct number of entries[K
  ok [1m[32m3314[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after limit
[0m[1B[1G
# # test iterator with lte before limit
[K

  ok [1m[32m3315[0m undefined[K
  ok [1m[32m3316[0m correct number of entries[K
  ok [1m[32m3317[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before limit
[0m[1B[1G
# # test iterator with gte after database end
[K

  ok [1m[32m3318[0m undefined[K
  ok [1m[32m3319[0m correct number of entries[K
  ok [1m[32m3320[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end
[0m[1B[1G
# # test iterator with gte after database end (flipped)
[K

  ok [1m[32m3321[0m undefined[K
  ok [1m[32m3322[0m correct number of entries[K
  ok [1m[32m3323[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end (flipped)
[0m[1B[1G
# # test iterator with gt after database end
[K

  ok [1m[32m3324[0m undefined[K
  ok [1m[32m3325[0m correct number of entries[K
  ok [1m[32m3326[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end
[0m[1B[1G
# # test iterator with gt after database end (flipped)
[K

  ok [1m[32m3327[0m undefined[K
  ok [1m[32m3328[0m correct number of entries[K
  ok [1m[32m3329[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end (flipped)
[0m[1B[1G
# # test iterator with lte after database end and reverse=true
[K

  ok [1m[32m3330[0m undefined[K
  ok [1m[32m3331[0m correct number of entries[K
  ok [1m[32m3332[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after database end and reverse=true
[0m[1B[1G
# # test iterator with lt after database end
[K

  ok [1m[32m3333[0m undefined[K
  ok [1m[32m3334[0m correct number of entries[K
  ok [1m[32m3335[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end
[0m[1B[1G
# # test iterator with lt after database end (flipped)
[K

  ok [1m[32m3336[0m undefined[K
  ok [1m[32m3337[0m correct number of entries[K
  ok [1m[32m3338[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end (flipped)
[0m[1B[1G
# # test iterator with lt at database end
[K

  ok [1m[32m3339[0m undefined[K
  ok [1m[32m3340[0m correct number of entries[K
  ok [1m[32m3341[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end
[0m[1B[1G
# # test iterator with lt at database end (flipped)
[K

  ok [1m[32m3342[0m undefined[K
  ok [1m[32m3343[0m correct number of entries[K
  ok [1m[32m3344[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end (flipped)
[0m[1B[1G
# # test iterator with lte at database end
[K

  ok [1m[32m3345[0m undefined[K
  ok [1m[32m3346[0m correct number of entries[K
  ok [1m[32m3347[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end
[0m[1B[1G
# # test iterator with lte at database end (flipped)
[K

  ok [1m[32m3348[0m undefined[K
  ok [1m[32m3349[0m correct number of entries[K
  ok [1m[32m3350[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end (flipped)
[0m[1B[1G
# # test iterator with lt before database end
[K

  ok [1m[32m3351[0m undefined[K
  ok [1m[32m3352[0m correct number of entries[K
  ok [1m[32m3353[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end
[0m[1B[1G
# # test iterator with lt before database end (flipped)
[K

  ok [1m[32m3354[0m undefined[K
  ok [1m[32m3355[0m correct number of entries[K
  ok [1m[32m3356[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end (flipped)
[0m[1B[1G
# # test iterator with lte before database end
[K

  ok [1m[32m3357[0m undefined[K
  ok [1m[32m3358[0m correct number of entries[K
  ok [1m[32m3359[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end
[0m[1B[1G
# # test iterator with lte before database end (flipped)
[K

  ok [1m[32m3360[0m undefined[K
  ok [1m[32m3361[0m correct number of entries[K
  ok [1m[32m3362[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end (flipped)
[0m[1B[1G
# # test iterator with lte and gte after database and reverse=true
[K

  ok [1m[32m3363[0m undefined[K
  ok [1m[32m3364[0m correct number of entries[K
  ok [1m[32m3365[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte and gte after database and reverse=true
[0m[1B[1G
# # test iterator with lt and gt after database and reverse=true
[K

  ok [1m[32m3366[0m undefined[K
  ok [1m[32m3367[0m correct number of entries[K
  ok [1m[32m3368[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setup
[K

  ok [1m[32m3369[0m no open() error[K
  ok [1m[32m3370[0m no batch() error[K
[1A[1G[1m[32m✓ # setup
[0m[1B[1G
# # for await...of db.iterator()
[K

  ok [1m[32m3371[0m ended[K
  ok [1m[32m3372[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # for await...of db.iterator()
[0m[1B[1G
# # for await...of db.iterator() does not permit reuse
[K

  ok [1m[32m3373[0m nexted[K
  ok [1m[32m3374[0m nexted[K
  ok [1m[32m3375[0m should be strictly equal[K
[1A[1G[1m[32m✓ # for await...of db.iterator() does not permit reuse
[0m[1B[1G
# # for await...of db.iterator() ends on user error
[K

  ok [1m[32m3376[0m should be strictly equal[K
  ok [1m[32m3377[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user error
[0m[1B[1G
# # for await...of db.iterator() with user error and end() error
[K

  ok [1m[32m3378[0m no real error from end()[K
  ok [1m[32m3379[0m should be strictly equal[K
  ok [1m[32m3380[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on iterator error
[K

  ok [1m[32m3381[0m nexted[K
  ok [1m[32m3382[0m should be strictly equal[K
  ok [1m[32m3383[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on iterator error
[0m[1B[1G
# # for await...of db.iterator() with iterator error and end() error
[K

  ok [1m[32m3384[0m nexted[K
  ok [1m[32m3385[0m no real error from end()[K
  ok [1m[32m3386[0m should be strictly equal[K
  ok [1m[32m3387[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with iterator error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on user break
[K

  ok [1m[32m3388[0m got a chance to break[K
  ok [1m[32m3389[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user break
[0m[1B[1G
# # for await...of db.iterator() with user break and end() error
[K

  ok [1m[32m3390[0m got a chance to break[K
  ok [1m[32m3391[0m no real error from end()[K
  ok [1m[32m3392[0m should be strictly equal[K
  ok [1m[32m3393[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user break and end() error
[0m[1B[1G
# # teardown
[K

  ok [1m[32m3394[0m no close() error[K
[1A[1G[1m[32m✓ # teardown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # iterator#seek() throws if next() has not completed
[K

  ok [1m[32m3395[0m no error from open()[K
  ok [1m[32m3396[0m got error[K
  ok [1m[32m3397[0m no error from next()[K
  ok [1m[32m3398[0m next is asynchronous[K
  ok [1m[32m3399[0m no error from done()[K
  ok [1m[32m3400[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws if next() has not completed
[0m[1B[1G
# # iterator#seek() throws after end()
[K

  ok [1m[32m3401[0m no error from open()[K
  ok [1m[32m3402[0m no error from next()[K
  ok [1m[32m3403[0m no error from end()[K
  ok [1m[32m3404[0m got error[K
  ok [1m[32m3405[0m no error from done()[K
  ok [1m[32m3406[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws after end()
[0m[1B[1G
# # iterator#seek() to string target
[K

  ok [1m[32m3407[0m no error from open()[K
  ok [1m[32m3408[0m no error from batch()[K
  ok [1m[32m3409[0m no error[K
  ok [1m[32m3410[0m key matches[K
  ok [1m[32m3411[0m value matches[K
  ok [1m[32m3412[0m no error[K
  ok [1m[32m3413[0m end of iterator[K
  ok [1m[32m3414[0m end of iterator[K
  ok [1m[32m3415[0m no error from done()[K
  ok [1m[32m3416[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to string target
[0m[1B[1G
# # iterator#seek() to buffer target
[K

  ok [1m[32m3417[0m no error from open()[K
  ok [1m[32m3418[0m no error from batch()[K
  ok [1m[32m3419[0m no error from next()[K
  ok [1m[32m3420[0m key matches[K
  ok [1m[32m3421[0m value matches[K
  ok [1m[32m3422[0m no error from next()[K
  ok [1m[32m3423[0m end of iterator[K
  ok [1m[32m3424[0m end of iterator[K
  ok [1m[32m3425[0m no error from done()[K
  ok [1m[32m3426[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to buffer target
[0m[1B[1G
# # iterator#seek() on reverse iterator
[K

  ok [1m[32m3427[0m no error from open()[K
  ok [1m[32m3428[0m no error from batch()[K
  ok [1m[32m3429[0m no error[K
  ok [1m[32m3430[0m key matches[K
  ok [1m[32m3431[0m value matches[K
  ok [1m[32m3432[0m no error from done()[K
  ok [1m[32m3433[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator
[0m[1B[1G
# # iterator#seek() to out of range target
[K

  ok [1m[32m3434[0m no error from open()[K
  ok [1m[32m3435[0m no error from batch()[K
  ok [1m[32m3436[0m no error[K
  ok [1m[32m3437[0m end of iterator[K
  ok [1m[32m3438[0m end of iterator[K
  ok [1m[32m3439[0m no error from done()[K
  ok [1m[32m3440[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to out of range target
[0m[1B[1G
# # iterator#seek() on reverse iterator to out of range target
[K

  ok [1m[32m3441[0m no error from open()[K
  ok [1m[32m3442[0m no error from batch()[K
  ok [1m[32m3443[0m no error[K
  ok [1m[32m3444[0m should be deeply equivalent[K
  ok [1m[32m3445[0m should be deeply equivalent[K
  ok [1m[32m3446[0m no error from done()[K
  ok [1m[32m3447[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator to out of range target
[0m[1B[1G
# # iterator#seek() respects range
[K

  ok [1m[32m3448[0m no error from open()[K
  ok [1m[32m3449[0m no error from batch()[K
  ok [1m[32m3450[0m no error from next()[K
  ok [1m[32m3451[0m seek(4) on {"gt":"5"} yields undefined[K
  ok [1m[32m3452[0m no error from next()[K
  ok [1m[32m3453[0m seek(5) on {"gt":"5"} yields undefined[K
  ok [1m[32m3454[0m no error from next()[K
  ok [1m[32m3455[0m seek(6) on {"gt":"5"} yields 6[K
  ok [1m[32m3456[0m no error from next()[K
  ok [1m[32m3457[0m seek(4) on {"gte":"5"} yields undefined[K
  ok [1m[32m3458[0m no error from next()[K
  ok [1m[32m3459[0m seek(5) on {"gte":"5"} yields 5[K
  ok [1m[32m3460[0m no error from next()[K
  ok [1m[32m3461[0m seek(6) on {"gte":"5"} yields 6[K
  ok [1m[32m3462[0m no error from next()[K
  ok [1m[32m3463[0m seek(4) on {"lt":"5"} yields 4[K
  ok [1m[32m3464[0m no error from next()[K
  ok [1m[32m3465[0m seek(5) on {"lt":"5"} yields undefined[K
  ok [1m[32m3466[0m no error from next()[K
  ok [1m[32m3467[0m seek(6) on {"lt":"5"} yields undefined[K
  ok [1m[32m3468[0m no error from next()[K
  ok [1m[32m3469[0m seek(4) on {"lte":"5"} yields 4[K
  ok [1m[32m3470[0m no error from next()[K
  ok [1m[32m3471[0m seek(5) on {"lte":"5"} yields 5[K
  ok [1m[32m3472[0m no error from next()[K
  ok [1m[32m3473[0m seek(6) on {"lte":"5"} yields undefined[K
  ok [1m[32m3474[0m no error from next()[K
  ok [1m[32m3475[0m seek(4) on {"lt":"5","reverse":true} yields 4[K
  ok [1m[32m3476[0m no error from next()[K
  ok [1m[32m3477[0m seek(5) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m3478[0m no error from next()[K
  ok [1m[32m3479[0m seek(6) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m3480[0m no error from next()[K
  ok [1m[32m3481[0m seek(4) on {"lte":"5","reverse":true} yields 4[K
  ok [1m[32m3482[0m no error from next()[K
  ok [1m[32m3483[0m seek(5) on {"lte":"5","reverse":true} yields 5[K
  ok [1m[32m3484[0m no error from next()[K
  ok [1m[32m3485[0m seek(6) on {"lte":"5","reverse":true} yields undefined[K
  ok [1m[32m3486[0m no error from next()[K
  ok [1m[32m3487[0m seek(4) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m3488[0m no error from next()[K
  ok [1m[32m3489[0m seek(5) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m3490[0m no error from next()[K
  ok [1m[32m3491[0m seek(6) on {"gt":"5","reverse":true} yields 6[K
  ok [1m[32m3492[0m no error from next()[K
  ok [1m[32m3493[0m seek(4) on {"gte":"5","reverse":true} yields undefined[K
  ok [1m[32m3494[0m no error from next()[K
  ok [1m[32m3495[0m seek(5) on {"gte":"5","reverse":true} yields 5[K
  ok [1m[32m3496[0m no error from next()[K
  ok [1m[32m3497[0m seek(6) on {"gte":"5","reverse":true} yields 6[K
  ok [1m[32m3498[0m no error from next()[K
  ok [1m[32m3499[0m seek(7) on {"gt":"7","lt":"8"} yields undefined[K
  ok [1m[32m3500[0m no error from next()[K
  ok [1m[32m3501[0m seek(7) on {"gte":"7","lt":"8"} yields 7[K
  ok [1m[32m3502[0m no error from next()[K
  ok [1m[32m3503[0m seek(8) on {"gte":"7","lt":"8"} yields undefined[K
  ok [1m[32m3504[0m no error from next()[K
  ok [1m[32m3505[0m seek(8) on {"gt":"7","lte":"8"} yields 8[K
  ok [1m[32m3506[0m no error from end()[K
  ok [1m[32m3507[0m no error from end()[K
  ok [1m[32m3508[0m no error from end()[K
  ok [1m[32m3509[0m no error from end()[K
  ok [1m[32m3510[0m no error from end()[K
  ok [1m[32m3511[0m no error from end()[K
  ok [1m[32m3512[0m no error from end()[K
  ok [1m[32m3513[0m no error from end()[K
  ok [1m[32m3514[0m no error from end()[K
  ok [1m[32m3515[0m no error from end()[K
  ok [1m[32m3516[0m no error from end()[K
  ok [1m[32m3517[0m no error from end()[K
  ok [1m[32m3518[0m no error from end()[K
  ok [1m[32m3519[0m no error from end()[K
  ok [1m[32m3520[0m no error from end()[K
  ok [1m[32m3521[0m no error from end()[K
  ok [1m[32m3522[0m no error from end()[K
  ok [1m[32m3523[0m no error from end()[K
  ok [1m[32m3524[0m no error from end()[K
  ok [1m[32m3525[0m no error from end()[K
  ok [1m[32m3526[0m no error from end()[K
  ok [1m[32m3527[0m no error from end()[K
  ok [1m[32m3528[0m no error from end()[K
  ok [1m[32m3529[0m no error from end()[K
  ok [1m[32m3530[0m no error from end()[K
  ok [1m[32m3531[0m no error from end()[K
  ok [1m[32m3532[0m no error from end()[K
  ok [1m[32m3533[0m no error from end()[K
  ok [1m[32m3534[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() respects range
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # delete key after snapshotting
[K

  ok [1m[32m3535[0m no open error[K
  ok [1m[32m3536[0m no put error[K
  ok [1m[32m3537[0m no del error[K
  ok [1m[32m3538[0m no next error[K
  ok [1m[32m3539[0m got a key[K
  ok [1m[32m3540[0m correct key[K
  ok [1m[32m3541[0m correct value[K
  ok [1m[32m3542[0m no run error[K
  ok [1m[32m3543[0m no iterator end error[K
[1A[1G[1m[32m✓ # delete key after snapshotting
[0m[1B[1G
# # overwrite key after snapshotting
[K

  ok [1m[32m3544[0m no open error[K
  ok [1m[32m3545[0m no put error[K
  ok [1m[32m3546[0m no put error[K
  ok [1m[32m3547[0m no next error[K
  ok [1m[32m3548[0m got a key[K
  ok [1m[32m3549[0m correct key[K
  ok [1m[32m3550[0m correct value[K
  ok [1m[32m3551[0m no run error[K
  ok [1m[32m3552[0m no iterator end error[K
[1A[1G[1m[32m✓ # overwrite key after snapshotting
[0m[1B[1G
# # add key after snapshotting that sorts first
[K

  ok [1m[32m3553[0m no open error[K
  ok [1m[32m3554[0m no put error[K
  ok [1m[32m3555[0m no put error[K
  ok [1m[32m3556[0m no next error[K
  ok [1m[32m3557[0m got a key[K
  ok [1m[32m3558[0m correct key[K
  ok [1m[32m3559[0m correct value[K
  ok [1m[32m3560[0m no run error[K
  ok [1m[32m3561[0m no iterator end error[K
[1A[1G[1m[32m✓ # add key after snapshotting that sorts first
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less clear() throws
[K

  ok [1m[32m3562[0m no-arg clear() throws[K
[1A[1G[1m[32m✓ # test argument-less clear() throws
[0m[1B[1G
# # test simple clear() on string keys
[K

  ok [1m[32m3563[0m no open error[K
  ok [1m[32m3564[0m no batch error[K
  ok [1m[32m3565[0m no concat error[K
  ok [1m[32m3566[0m has entries[K
  ok [1m[32m3567[0m no clear error[K
  ok [1m[32m3568[0m no concat error[K
  ok [1m[32m3569[0m has no entries[K
  ok [1m[32m3570[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on string keys
[0m[1B[1G
# # test simple clear() on buffer keys
[K

  ok [1m[32m3571[0m no open error[K
  ok [1m[32m3572[0m no batch error[K
  ok [1m[32m3573[0m no concat error[K
  ok [1m[32m3574[0m has entries[K
  ok [1m[32m3575[0m no clear error[K
  ok [1m[32m3576[0m no concat error[K
  ok [1m[32m3577[0m has no entries[K
  ok [1m[32m3578[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on buffer keys
[0m[1B[1G
# # test simple clear() on mixed keys
[K

  ok [1m[32m3579[0m no open error[K
  ok [1m[32m3580[0m no batch error[K
  ok [1m[32m3581[0m no concat error[K
  ok [1m[32m3582[0m has entries[K
  ok [1m[32m3583[0m no clear error[K
  ok [1m[32m3584[0m no concat error[K
  ok [1m[32m3585[0m has no entries[K
  ok [1m[32m3586[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on mixed keys
[0m[1B[1G
# # test simple clear() on non-utf8 buffer keys
[K

  ok [1m[32m3587[0m no open error[K
  ok [1m[32m3588[0m no batch error[K
  ok [1m[32m3589[0m no concat error[K
  ok [1m[32m3590[0m has entries[K
  ok [1m[32m3591[0m no clear error[K
  ok [1m[32m3592[0m no concat error[K
  ok [1m[32m3593[0m has no entries[K
  ok [1m[32m3594[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on non-utf8 buffer keys
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db#clear() with full range
[K

  ok [1m[32m3595[0m no open error[K
  ok [1m[32m3596[0m no batch error[K
  ok [1m[32m3597[0m no clear error[K
  ok [1m[32m3598[0m no concat error[K
  ok [1m[32m3599[0m correct number of entries[K
  ok [1m[32m3600[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with full range
[0m[1B[1G
# # db#clear() with reverse=true
[K

  ok [1m[32m3601[0m no open error[K
  ok [1m[32m3602[0m no batch error[K
  ok [1m[32m3603[0m no clear error[K
  ok [1m[32m3604[0m no concat error[K
  ok [1m[32m3605[0m correct number of entries[K
  ok [1m[32m3606[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with reverse=true
[0m[1B[1G
# # db#clear() with gte=00
[K

  ok [1m[32m3607[0m no open error[K
  ok [1m[32m3608[0m no batch error[K
  ok [1m[32m3609[0m no clear error[K
  ok [1m[32m3610[0m no concat error[K
  ok [1m[32m3611[0m correct number of entries[K
  ok [1m[32m3612[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=00
[0m[1B[1G
# # db#clear() with gte=50
[K

  ok [1m[32m3613[0m no open error[K
  ok [1m[32m3614[0m no batch error[K
  ok [1m[32m3615[0m no clear error[K
  ok [1m[32m3616[0m no concat error[K
  ok [1m[32m3617[0m correct number of entries[K
  ok [1m[32m3618[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50
[0m[1B[1G
# # db#clear() with lte=50 and reverse=true
[K

  ok [1m[32m3619[0m no open error[K
  ok [1m[32m3620[0m no batch error[K
  ok [1m[32m3621[0m no clear error[K
  ok [1m[32m3622[0m no concat error[K
  ok [1m[32m3623[0m correct number of entries[K
  ok [1m[32m3624[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50 and reverse=true
[0m[1B[1G
# # db#clear() with gte=49.5 (midway)
[K

  ok [1m[32m3625[0m no open error[K
  ok [1m[32m3626[0m no batch error[K
  ok [1m[32m3627[0m no clear error[K
  ok [1m[32m3628[0m no concat error[K
  ok [1m[32m3629[0m correct number of entries[K
  ok [1m[32m3630[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49.5 (midway)
[0m[1B[1G
# # db#clear() with gte=49999 (midway)
[K

  ok [1m[32m3631[0m no open error[K
  ok [1m[32m3632[0m no batch error[K
  ok [1m[32m3633[0m no clear error[K
  ok [1m[32m3634[0m no concat error[K
  ok [1m[32m3635[0m correct number of entries[K
  ok [1m[32m3636[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49999 (midway)
[0m[1B[1G
# # db#clear() with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m3637[0m no open error[K
  ok [1m[32m3638[0m no batch error[K
  ok [1m[32m3639[0m no clear error[K
  ok [1m[32m3640[0m no concat error[K
  ok [1m[32m3641[0m correct number of entries[K
  ok [1m[32m3642[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m3643[0m no open error[K
  ok [1m[32m3644[0m no batch error[K
  ok [1m[32m3645[0m no clear error[K
  ok [1m[32m3646[0m no concat error[K
  ok [1m[32m3647[0m correct number of entries[K
  ok [1m[32m3648[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=50 and reverse=true
[K

  ok [1m[32m3649[0m no open error[K
  ok [1m[32m3650[0m no batch error[K
  ok [1m[32m3651[0m no clear error[K
  ok [1m[32m3652[0m no concat error[K
  ok [1m[32m3653[0m correct number of entries[K
  ok [1m[32m3654[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=50
[K

  ok [1m[32m3655[0m no open error[K
  ok [1m[32m3656[0m no batch error[K
  ok [1m[32m3657[0m no clear error[K
  ok [1m[32m3658[0m no concat error[K
  ok [1m[32m3659[0m correct number of entries[K
  ok [1m[32m3660[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50
[0m[1B[1G
# # db#clear() with lte=50.5 (midway)
[K

  ok [1m[32m3661[0m no open error[K
  ok [1m[32m3662[0m no batch error[K
  ok [1m[32m3663[0m no clear error[K
  ok [1m[32m3664[0m no concat error[K
  ok [1m[32m3665[0m correct number of entries[K
  ok [1m[32m3666[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50.5 (midway)
[0m[1B[1G
# # db#clear() with lte=50555 (midway)
[K

  ok [1m[32m3667[0m no open error[K
  ok [1m[32m3668[0m no batch error[K
  ok [1m[32m3669[0m no clear error[K
  ok [1m[32m3670[0m no concat error[K
  ok [1m[32m3671[0m correct number of entries[K
  ok [1m[32m3672[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50555 (midway)
[0m[1B[1G
# # db#clear() with lt=50555 (midway)
[K

  ok [1m[32m3673[0m no open error[K
  ok [1m[32m3674[0m no batch error[K
  ok [1m[32m3675[0m no clear error[K
  ok [1m[32m3676[0m no concat error[K
  ok [1m[32m3677[0m correct number of entries[K
  ok [1m[32m3678[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50555 (midway)
[0m[1B[1G
# # db#clear() with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m3679[0m no open error[K
  ok [1m[32m3680[0m no batch error[K
  ok [1m[32m3681[0m no clear error[K
  ok [1m[32m3682[0m no concat error[K
  ok [1m[32m3683[0m correct number of entries[K
  ok [1m[32m3684[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m3685[0m no open error[K
  ok [1m[32m3686[0m no batch error[K
  ok [1m[32m3687[0m no clear error[K
  ok [1m[32m3688[0m no concat error[K
  ok [1m[32m3689[0m correct number of entries[K
  ok [1m[32m3690[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50 and reverse=true
[K

  ok [1m[32m3691[0m no open error[K
  ok [1m[32m3692[0m no batch error[K
  ok [1m[32m3693[0m no clear error[K
  ok [1m[32m3694[0m no concat error[K
  ok [1m[32m3695[0m correct number of entries[K
  ok [1m[32m3696[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=0
[K

  ok [1m[32m3697[0m no open error[K
  ok [1m[32m3698[0m no batch error[K
  ok [1m[32m3699[0m no clear error[K
  ok [1m[32m3700[0m no concat error[K
  ok [1m[32m3701[0m correct number of entries[K
  ok [1m[32m3702[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=0
[0m[1B[1G
# # db#clear() with lt=0
[K

  ok [1m[32m3703[0m no open error[K
  ok [1m[32m3704[0m no batch error[K
  ok [1m[32m3705[0m no clear error[K
  ok [1m[32m3706[0m no concat error[K
  ok [1m[32m3707[0m correct number of entries[K
  ok [1m[32m3708[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=0
[0m[1B[1G
# # db#clear() with gte=30 and lte=70
[K

  ok [1m[32m3709[0m no open error[K
  ok [1m[32m3710[0m no batch error[K
  ok [1m[32m3711[0m no clear error[K
  ok [1m[32m3712[0m no concat error[K
  ok [1m[32m3713[0m correct number of entries[K
  ok [1m[32m3714[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70
[0m[1B[1G
# # db#clear() with gt=29 and lt=71
[K

  ok [1m[32m3715[0m no open error[K
  ok [1m[32m3716[0m no batch error[K
  ok [1m[32m3717[0m no clear error[K
  ok [1m[32m3718[0m no concat error[K
  ok [1m[32m3719[0m correct number of entries[K
  ok [1m[32m3720[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71
[0m[1B[1G
# # db#clear() with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m3721[0m no open error[K
  ok [1m[32m3722[0m no batch error[K
  ok [1m[32m3723[0m no clear error[K
  ok [1m[32m3724[0m no concat error[K
  ok [1m[32m3725[0m correct number of entries[K
  ok [1m[32m3726[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # db#clear() with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m3727[0m no open error[K
  ok [1m[32m3728[0m no batch error[K
  ok [1m[32m3729[0m no clear error[K
  ok [1m[32m3730[0m no concat error[K
  ok [1m[32m3731[0m correct number of entries[K
  ok [1m[32m3732[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20
[K

  ok [1m[32m3733[0m no open error[K
  ok [1m[32m3734[0m no batch error[K
  ok [1m[32m3735[0m no clear error[K
  ok [1m[32m3736[0m no concat error[K
  ok [1m[32m3737[0m correct number of entries[K
  ok [1m[32m3738[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20
[0m[1B[1G
# # db#clear() with limit=20 and gte=20
[K

  ok [1m[32m3739[0m no open error[K
  ok [1m[32m3740[0m no batch error[K
  ok [1m[32m3741[0m no clear error[K
  ok [1m[32m3742[0m no concat error[K
  ok [1m[32m3743[0m correct number of entries[K
  ok [1m[32m3744[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and gte=20
[0m[1B[1G
# # db#clear() with limit=20 and reverse=true
[K

  ok [1m[32m3745[0m no open error[K
  ok [1m[32m3746[0m no batch error[K
  ok [1m[32m3747[0m no clear error[K
  ok [1m[32m3748[0m no concat error[K
  ok [1m[32m3749[0m correct number of entries[K
  ok [1m[32m3750[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m3751[0m no open error[K
  ok [1m[32m3752[0m no batch error[K
  ok [1m[32m3753[0m no clear error[K
  ok [1m[32m3754[0m no concat error[K
  ok [1m[32m3755[0m correct number of entries[K
  ok [1m[32m3756[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # db#clear() with limit=-1 should clear whole database
[K

  ok [1m[32m3757[0m no open error[K
  ok [1m[32m3758[0m no batch error[K
  ok [1m[32m3759[0m no clear error[K
  ok [1m[32m3760[0m no concat error[K
  ok [1m[32m3761[0m correct number of entries[K
  ok [1m[32m3762[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=-1 should clear whole database
[0m[1B[1G
# # db#clear() with limit=0 should not clear anything
[K

  ok [1m[32m3763[0m no open error[K
  ok [1m[32m3764[0m no batch error[K
  ok [1m[32m3765[0m no clear error[K
  ok [1m[32m3766[0m no concat error[K
  ok [1m[32m3767[0m correct number of entries[K
  ok [1m[32m3768[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=0 should not clear anything
[0m[1B[1G
# # db#clear() with lte after limit
[K

  ok [1m[32m3769[0m no open error[K
  ok [1m[32m3770[0m no batch error[K
  ok [1m[32m3771[0m no clear error[K
  ok [1m[32m3772[0m no concat error[K
  ok [1m[32m3773[0m correct number of entries[K
  ok [1m[32m3774[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after limit
[0m[1B[1G
# # db#clear() with lte before limit
[K

  ok [1m[32m3775[0m no open error[K
  ok [1m[32m3776[0m no batch error[K
  ok [1m[32m3777[0m no clear error[K
  ok [1m[32m3778[0m no concat error[K
  ok [1m[32m3779[0m correct number of entries[K
  ok [1m[32m3780[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte before limit
[0m[1B[1G
# # db#clear() with gte after database end
[K

  ok [1m[32m3781[0m no open error[K
  ok [1m[32m3782[0m no batch error[K
  ok [1m[32m3783[0m no clear error[K
  ok [1m[32m3784[0m no concat error[K
  ok [1m[32m3785[0m correct number of entries[K
  ok [1m[32m3786[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte after database end
[0m[1B[1G
# # db#clear() with gt after database end
[K

  ok [1m[32m3787[0m no open error[K
  ok [1m[32m3788[0m no batch error[K
  ok [1m[32m3789[0m no clear error[K
  ok [1m[32m3790[0m no concat error[K
  ok [1m[32m3791[0m correct number of entries[K
  ok [1m[32m3792[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt after database end
[0m[1B[1G
# # db#clear() with lte after database end and reverse=true
[K

  ok [1m[32m3793[0m no open error[K
  ok [1m[32m3794[0m no batch error[K
  ok [1m[32m3795[0m no clear error[K
  ok [1m[32m3796[0m no concat error[K
  ok [1m[32m3797[0m correct number of entries[K
  ok [1m[32m3798[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after database end and reverse=true
[0m[1B[1G
# # db#clear() with lte and gte after database and reverse=true
[K

  ok [1m[32m3799[0m no open error[K
  ok [1m[32m3800[0m no batch error[K
  ok [1m[32m3801[0m no clear error[K
  ok [1m[32m3802[0m no concat error[K
  ok [1m[32m3803[0m correct number of entries[K
  ok [1m[32m3804[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte and gte after database and reverse=true
[0m[1B[1G
# # db#clear() with lt and gt after database and reverse=true
[K

  ok [1m[32m3805[0m no open error[K
  ok [1m[32m3806[0m no batch error[K
  ok [1m[32m3807[0m no clear error[K
  ok [1m[32m3808[0m no concat error[K
  ok [1m[32m3809[0m correct number of entries[K
  ok [1m[32m3810[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # testCommon.factory() returns a unique database
[K

  ok [1m[32m3811[0m no error while opening db1[K
  ok [1m[32m3812[0m no error while opening db2[K
  ok [1m[32m3813[0m put key in db1[K
  ok [1m[32m3814[0m got items from db2[K
  ok [1m[32m3815[0m db2 should be empty[K
  ok [1m[32m3816[0m no error while closing db1[K
  ok [1m[32m3817[0m no error while closing db2[K
[1A[1G[1m[32m✓ # testCommon.factory() returns a unique database
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db has manifest
[K

  ok [1m[32m3818[0m manifest is object[K
  ok [1m[32m3819[0m additionalMethods is object[K
  ok [1m[32m3820[0m truthy: bufferKeys[K
  ok [1m[32m3821[0m truthy: snapshots[K
  ok [1m[32m3822[0m false: permanence[K
  ok [1m[32m3823[0m truthy: seek[K
  ok [1m[32m3824[0m truthy: clear[K
  ok [1m[32m3825[0m truthy: getMany[K
  ok [1m[32m3826[0m truthy: status[K
  ok [1m[32m3827[0m false: keyIterator[K
  ok [1m[32m3828[0m false: valueIterator[K
  ok [1m[32m3829[0m false: iteratorNextv[K
  ok [1m[32m3830[0m false: iteratorAll[K
  ok [1m[32m3831[0m false: idempotentOpen[K
  ok [1m[32m3832[0m false: passiveOpen[K
  ok [1m[32m3833[0m false: serialize[K
  ok [1m[32m3834[0m false: createIfMissing[K
  ok [1m[32m3835[0m false: errorIfExists[K
  ok [1m[32m3836[0m false: deferredOpen[K
  ok [1m[32m3837[0m false: openCallback[K
  ok [1m[32m3838[0m false: promises[K
  ok [1m[32m3839[0m false: streams[K
  ok [1m[32m3840[0m false: encodings[K
  ok [1m[32m3841[0m false: events[K
  ok [1m[32m3842[0m truthy: additionalMethods[K
  ok [1m[32m3843[0m manifest has unique identity[K
  ok [1m[32m3844[0m manifest.additionalMethods has unique identity[K
  ok [1m[32m3845[0m no open error[K
  ok [1m[32m3846[0m manifest did not change after open[K
  ok [1m[32m3847[0m no close error[K
  ok [1m[32m3848[0m manifest did not change after close[K
[1A[1G[1m[32m✓ # db has manifest
[0m[1B[1G
# # manifest has status
[K

  ok [1m[32m3849[0m should be strictly equal[K
  ok [1m[32m3850[0m no open error[K
[1A[1G[1m[32m✓ # manifest has status
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # test database open method exists
[K

  ok [1m[32m3851[0m database object returned[K
  ok [1m[32m3852[0m open() function exists[K
[1A[1G[1m[32m✓ # test database open method exists
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp
[K

[1A[1G[1m[32m✓ # setUp
[0m[1B[1G
# # test database open no-arg throws
[K

  ok [1m[32m3853[0m no-arg open() throws[K
[1A[1G[1m[32m✓ # test database open no-arg throws
[0m[1B[1G
# # test callback-less, 1-arg, open() throws
[K

  ok [1m[32m3854[0m callback-less, 1-arg open() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, open() throws
[0m[1B[1G
# # test database open, no options
[K

  ok [1m[32m3855[0m undefined[K
[1A[1G[1m[32m✓ # test database open, no options
[0m[1B[1G
# # test database open, options and callback
[K

  ok [1m[32m3856[0m undefined[K
[1A[1G[1m[32m✓ # test database open, options and callback
[0m[1B[1G
# # test database open, close and open
[K

  ok [1m[32m3857[0m undefined[K
  ok [1m[32m3858[0m undefined[K
  ok [1m[32m3859[0m undefined[K
[1A[1G[1m[32m✓ # test database open, close and open
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test close()
[K

  ok [1m[32m3860[0m no-arg close() throws[K
  ok [1m[32m3861[0m non-callback close() throws[K
  ok [1m[32m3862[0m undefined[K
[1A[1G[1m[32m✓ # test close()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less put() throws
[K

  ok [1m[32m3863[0m no-arg put() throws[K
[1A[1G[1m[32m✓ # test argument-less put() throws
[0m[1B[1G
# # test callback-less, 1-arg, put() throws
[K

  ok [1m[32m3864[0m callback-less, 1-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, put() throws
[0m[1B[1G
# # test callback-less, 2-arg, put() throws
[K

  ok [1m[32m3865[0m callback-less, 2-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 2-arg, put() throws
[0m[1B[1G
# # test callback-less, 3-arg, put() throws
[K

  ok [1m[32m3866[0m callback-less, 3-arg put() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, put() throws
[0m[1B[1G
# # test simple put()
[K

  ok [1m[32m3867[0m undefined[K
  ok [1m[32m3868[0m null[K
  ok [1m[32m3869[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple put()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less get() throws
[K

  ok [1m[32m3870[0m no-arg get() throws[K
[1A[1G[1m[32m✓ # test argument-less get() throws
[0m[1B[1G
# # test callback-less, 1-arg, get() throws
[K

  ok [1m[32m3871[0m callback-less, 1-arg get() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, get() throws
[0m[1B[1G
# # test callback-less, 3-arg, get() throws
[K

  ok [1m[32m3872[0m callback-less, 2-arg get() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, get() throws
[0m[1B[1G
# # test simple get()
[K

  ok [1m[32m3873[0m undefined[K
  ok [1m[32m3874[0m null[K
  ok [1m[32m3875[0m should not be string by default[K
  ok [1m[32m3876[0m should be strictly equal[K
  ok [1m[32m3877[0m null[K
  ok [1m[32m3878[0m should not be string by default[K
  ok [1m[32m3879[0m should be strictly equal[K
  ok [1m[32m3880[0m null[K
  ok [1m[32m3881[0m should be string if not buffer[K
  ok [1m[32m3882[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple get()
[0m[1B[1G
# # test simultaneous get()
[K

  ok [1m[32m3883[0m undefined[K
  ok [1m[32m3884[0m null[K
  ok [1m[32m3885[0m should be strictly equal[K
  ok [1m[32m3886[0m null[K
  ok [1m[32m3887[0m should be strictly equal[K
  ok [1m[32m3888[0m null[K
  ok [1m[32m3889[0m should be strictly equal[K
  ok [1m[32m3890[0m null[K
  ok [1m[32m3891[0m should be strictly equal[K
  ok [1m[32m3892[0m null[K
  ok [1m[32m3893[0m should be strictly equal[K
  ok [1m[32m3894[0m null[K
  ok [1m[32m3895[0m should be strictly equal[K
  ok [1m[32m3896[0m null[K
  ok [1m[32m3897[0m should be strictly equal[K
  ok [1m[32m3898[0m null[K
  ok [1m[32m3899[0m should be strictly equal[K
  ok [1m[32m3900[0m null[K
  ok [1m[32m3901[0m should be strictly equal[K
  ok [1m[32m3902[0m null[K
  ok [1m[32m3903[0m should be strictly equal[K
  ok [1m[32m3904[0m should error[K
  ok [1m[32m3905[0m should have correct error message[K
  ok [1m[32m3906[0m value is undefined[K
  ok [1m[32m3907[0m should error[K
  ok [1m[32m3908[0m should have correct error message[K
  ok [1m[32m3909[0m value is undefined[K
  ok [1m[32m3910[0m should error[K
  ok [1m[32m3911[0m should have correct error message[K
  ok [1m[32m3912[0m value is undefined[K
  ok [1m[32m3913[0m should error[K
  ok [1m[32m3914[0m should have correct error message[K
  ok [1m[32m3915[0m value is undefined[K
  ok [1m[32m3916[0m should error[K
  ok [1m[32m3917[0m should have correct error message[K
  ok [1m[32m3918[0m value is undefined[K
  ok [1m[32m3919[0m should error[K
  ok [1m[32m3920[0m should have correct error message[K
  ok [1m[32m3921[0m value is undefined[K
  ok [1m[32m3922[0m should error[K
  ok [1m[32m3923[0m should have correct error message[K
  ok [1m[32m3924[0m value is undefined[K
  ok [1m[32m3925[0m should error[K
  ok [1m[32m3926[0m should have correct error message[K
  ok [1m[32m3927[0m value is undefined[K
  ok [1m[32m3928[0m should error[K
  ok [1m[32m3929[0m should have correct error message[K
  ok [1m[32m3930[0m value is undefined[K
  ok [1m[32m3931[0m should error[K
  ok [1m[32m3932[0m should have correct error message[K
  ok [1m[32m3933[0m value is undefined[K
[1A[1G[1m[32m✓ # test simultaneous get()
[0m[1B[1G
# # test get() not found error is asynchronous
[K

  ok [1m[32m3934[0m should error[K
  ok [1m[32m3935[0m should have correct error message[K
  ok [1m[32m3936[0m value is undefined[K
  ok [1m[32m3937[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() not found error is asynchronous
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less del() throws
[K

  ok [1m[32m3938[0m no-arg del() throws[K
[1A[1G[1m[32m✓ # test argument-less del() throws
[0m[1B[1G
# # test callback-less, 1-arg, del() throws
[K

  ok [1m[32m3939[0m callback-less, 1-arg del() throws[K
[1A[1G[1m[32m✓ # test callback-less, 1-arg, del() throws
[0m[1B[1G
# # test callback-less, 3-arg, del() throws
[K

  ok [1m[32m3940[0m callback-less, 2-arg del() throws[K
[1A[1G[1m[32m✓ # test callback-less, 3-arg, del() throws
[0m[1B[1G
# # test simple del()
[K

  ok [1m[32m3941[0m undefined[K
  ok [1m[32m3942[0m undefined[K
  ok [1m[32m3943[0m entry properly deleted[K
  ok [1m[32m3944[0m value is undefined[K
  ok [1m[32m3945[0m NotFound error[K
[1A[1G[1m[32m✓ # test simple del()
[0m[1B[1G
# # test del on non-existent key
[K

  ok [1m[32m3946[0m undefined[K
[1A[1G[1m[32m✓ # test del on non-existent key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test get() with null key causes error
[K

  ok [1m[32m3947[0m has error[K
  ok [1m[32m3948[0m should be truthy[K
  ok [1m[32m3949[0m correct error message[K
  ok [1m[32m3950[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with null key causes error
[0m[1B[1G
# # test del() with null key causes error
[K

  ok [1m[32m3951[0m has error[K
  ok [1m[32m3952[0m should be truthy[K
  ok [1m[32m3953[0m correct error message[K
  ok [1m[32m3954[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with null key causes error
[0m[1B[1G
# # test getMany() with null key causes error
[K

  ok [1m[32m3955[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3956[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3957[0m has error[K
  ok [1m[32m3958[0m should be truthy[K
  ok [1m[32m3959[0m correct error message[K
  ok [1m[32m3960[0m has error[K
  ok [1m[32m3961[0m should be truthy[K
  ok [1m[32m3962[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with null key causes error
[0m[1B[1G
# # test put() with null key causes error
[K

  ok [1m[32m3963[0m has error[K
  ok [1m[32m3964[0m should be truthy[K
  ok [1m[32m3965[0m correct error message[K
  ok [1m[32m3966[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null key causes error
[0m[1B[1G
# # test get() with undefined key causes error
[K

  ok [1m[32m3967[0m has error[K
  ok [1m[32m3968[0m should be truthy[K
  ok [1m[32m3969[0m correct error message[K
  ok [1m[32m3970[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with undefined key causes error
[0m[1B[1G
# # test del() with undefined key causes error
[K

  ok [1m[32m3971[0m has error[K
  ok [1m[32m3972[0m should be truthy[K
  ok [1m[32m3973[0m correct error message[K
  ok [1m[32m3974[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with undefined key causes error
[0m[1B[1G
# # test getMany() with undefined key causes error
[K

  ok [1m[32m3975[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3976[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3977[0m has error[K
  ok [1m[32m3978[0m should be truthy[K
  ok [1m[32m3979[0m correct error message[K
  ok [1m[32m3980[0m has error[K
  ok [1m[32m3981[0m should be truthy[K
  ok [1m[32m3982[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with undefined key causes error
[0m[1B[1G
# # test put() with undefined key causes error
[K

  ok [1m[32m3983[0m has error[K
  ok [1m[32m3984[0m should be truthy[K
  ok [1m[32m3985[0m correct error message[K
  ok [1m[32m3986[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined key causes error
[0m[1B[1G
# # test get() with empty String key causes error
[K

  ok [1m[32m3987[0m has error[K
  ok [1m[32m3988[0m should be truthy[K
  ok [1m[32m3989[0m correct error message[K
  ok [1m[32m3990[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty String key causes error
[0m[1B[1G
# # test del() with empty String key causes error
[K

  ok [1m[32m3991[0m has error[K
  ok [1m[32m3992[0m should be truthy[K
  ok [1m[32m3993[0m correct error message[K
  ok [1m[32m3994[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty String key causes error
[0m[1B[1G
# # test getMany() with empty String key causes error
[K

  ok [1m[32m3995[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3996[0m callback (anonymous) is asynchronous[K
  ok [1m[32m3997[0m has error[K
  ok [1m[32m3998[0m should be truthy[K
  ok [1m[32m3999[0m correct error message[K
  ok [1m[32m4000[0m has error[K
  ok [1m[32m4001[0m should be truthy[K
  ok [1m[32m4002[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty String key causes error
[0m[1B[1G
# # test put() with empty String key causes error
[K

  ok [1m[32m4003[0m has error[K
  ok [1m[32m4004[0m should be truthy[K
  ok [1m[32m4005[0m correct error message[K
  ok [1m[32m4006[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty String key causes error
[0m[1B[1G
# # test get() with empty Buffer key causes error
[K

  ok [1m[32m4007[0m has error[K
  ok [1m[32m4008[0m should be truthy[K
  ok [1m[32m4009[0m correct error message[K
  ok [1m[32m4010[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Buffer key causes error
[0m[1B[1G
# # test del() with empty Buffer key causes error
[K

  ok [1m[32m4011[0m has error[K
  ok [1m[32m4012[0m should be truthy[K
  ok [1m[32m4013[0m correct error message[K
  ok [1m[32m4014[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Buffer key causes error
[0m[1B[1G
# # test getMany() with empty Buffer key causes error
[K

  ok [1m[32m4015[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4016[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4017[0m has error[K
  ok [1m[32m4018[0m should be truthy[K
  ok [1m[32m4019[0m correct error message[K
  ok [1m[32m4020[0m has error[K
  ok [1m[32m4021[0m should be truthy[K
  ok [1m[32m4022[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Buffer key causes error
[0m[1B[1G
# # test put() with empty Buffer key causes error
[K

  ok [1m[32m4023[0m has error[K
  ok [1m[32m4024[0m should be truthy[K
  ok [1m[32m4025[0m correct error message[K
  ok [1m[32m4026[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Buffer key causes error
[0m[1B[1G
# # test get() with empty Array key causes error
[K

  ok [1m[32m4027[0m has error[K
  ok [1m[32m4028[0m should be truthy[K
  ok [1m[32m4029[0m correct error message[K
  ok [1m[32m4030[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Array key causes error
[0m[1B[1G
# # test del() with empty Array key causes error
[K

  ok [1m[32m4031[0m has error[K
  ok [1m[32m4032[0m should be truthy[K
  ok [1m[32m4033[0m correct error message[K
  ok [1m[32m4034[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Array key causes error
[0m[1B[1G
# # test getMany() with empty Array key causes error
[K

  ok [1m[32m4035[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4036[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4037[0m has error[K
  ok [1m[32m4038[0m should be truthy[K
  ok [1m[32m4039[0m correct error message[K
  ok [1m[32m4040[0m has error[K
  ok [1m[32m4041[0m should be truthy[K
  ok [1m[32m4042[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Array key causes error
[0m[1B[1G
# # test put() with empty Array key causes error
[K

  ok [1m[32m4043[0m has error[K
  ok [1m[32m4044[0m should be truthy[K
  ok [1m[32m4045[0m correct error message[K
  ok [1m[32m4046[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Array key causes error
[0m[1B[1G
# # test put() with null value causes error
[K

  ok [1m[32m4047[0m has error[K
  ok [1m[32m4048[0m should be truthy[K
  ok [1m[32m4049[0m correct error message[K
  ok [1m[32m4050[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null value causes error
[0m[1B[1G
# # test put() with undefined value causes error
[K

  ok [1m[32m4051[0m has error[K
  ok [1m[32m4052[0m should be truthy[K
  ok [1m[32m4053[0m correct error message[K
  ok [1m[32m4054[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined value causes error
[0m[1B[1G
# # test put()/get()/del() with `0` key
[K

  ok [1m[32m4055[0m undefined[K
  ok [1m[32m4056[0m no error, has key/value for ``0` key`[K
  ok [1m[32m4057[0m is a Buffer[K
  ok [1m[32m4058[0m should be strictly equal[K
  ok [1m[32m4059[0m no error, deleted key/value for ``0` key`[K
  ok [1m[32m4060[0m entry properly deleted[K
  ok [1m[32m4061[0m should have correct error message[K
  ok [1m[32m4062[0m value is undefined[K
  ok [1m[32m4063[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` key
[0m[1B[1G
# # test put()/get()/del() with long String key
[K

  ok [1m[32m4064[0m undefined[K
  ok [1m[32m4065[0m no error, has key/value for `long String key`[K
  ok [1m[32m4066[0m is a Buffer[K
  ok [1m[32m4067[0m should be strictly equal[K
  ok [1m[32m4068[0m no error, deleted key/value for `long String key`[K
  ok [1m[32m4069[0m entry properly deleted[K
  ok [1m[32m4070[0m should have correct error message[K
  ok [1m[32m4071[0m value is undefined[K
  ok [1m[32m4072[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String key
[0m[1B[1G
# # test put()/get()/del() with Buffer key
[K

  ok [1m[32m4073[0m undefined[K
  ok [1m[32m4074[0m no error, has key/value for `Buffer key`[K
  ok [1m[32m4075[0m is a Buffer[K
  ok [1m[32m4076[0m should be strictly equal[K
  ok [1m[32m4077[0m no error, deleted key/value for `Buffer key`[K
  ok [1m[32m4078[0m entry properly deleted[K
  ok [1m[32m4079[0m should have correct error message[K
  ok [1m[32m4080[0m value is undefined[K
  ok [1m[32m4081[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer key
[0m[1B[1G
# # test put()/get()/del() with Array value
[K

  ok [1m[32m4082[0m undefined[K
  ok [1m[32m4083[0m no error, has key/value for `Array value`[K
  ok [1m[32m4084[0m is a Buffer[K
  ok [1m[32m4085[0m should be strictly equal[K
  ok [1m[32m4086[0m no error, deleted key/value for `Array value`[K
  ok [1m[32m4087[0m entry properly deleted[K
  ok [1m[32m4088[0m should have correct error message[K
  ok [1m[32m4089[0m value is undefined[K
  ok [1m[32m4090[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array value
[0m[1B[1G
# # test put()/get()/del() with `false` value
[K

  ok [1m[32m4091[0m undefined[K
  ok [1m[32m4092[0m no error, has key/value for ``false` value`[K
  ok [1m[32m4093[0m is a Buffer[K
  ok [1m[32m4094[0m should be strictly equal[K
  ok [1m[32m4095[0m no error, deleted key/value for ``false` value`[K
  ok [1m[32m4096[0m entry properly deleted[K
  ok [1m[32m4097[0m should have correct error message[K
  ok [1m[32m4098[0m value is undefined[K
  ok [1m[32m4099[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `false` value
[0m[1B[1G
# # test put()/get()/del() with `0` value
[K

  ok [1m[32m4100[0m undefined[K
  ok [1m[32m4101[0m no error, has key/value for ``0` value`[K
  ok [1m[32m4102[0m is a Buffer[K
  ok [1m[32m4103[0m should be strictly equal[K
  ok [1m[32m4104[0m no error, deleted key/value for ``0` value`[K
  ok [1m[32m4105[0m entry properly deleted[K
  ok [1m[32m4106[0m should have correct error message[K
  ok [1m[32m4107[0m value is undefined[K
  ok [1m[32m4108[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` value
[0m[1B[1G
# # test put()/get()/del() with `NaN` value
[K

  ok [1m[32m4109[0m undefined[K
  ok [1m[32m4110[0m no error, has key/value for ``NaN` value`[K
  ok [1m[32m4111[0m is a Buffer[K
  ok [1m[32m4112[0m should be strictly equal[K
  ok [1m[32m4113[0m no error, deleted key/value for ``NaN` value`[K
  ok [1m[32m4114[0m entry properly deleted[K
  ok [1m[32m4115[0m should have correct error message[K
  ok [1m[32m4116[0m value is undefined[K
  ok [1m[32m4117[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `NaN` value
[0m[1B[1G
# # test put()/get()/del() with empty String value
[K

  ok [1m[32m4118[0m undefined[K
  ok [1m[32m4119[0m no error, has key/value for `empty String value`[K
  ok [1m[32m4120[0m is a Buffer[K
  ok [1m[32m4121[0m should be strictly equal[K
  ok [1m[32m4122[0m no error, deleted key/value for `empty String value`[K
  ok [1m[32m4123[0m entry properly deleted[K
  ok [1m[32m4124[0m should have correct error message[K
  ok [1m[32m4125[0m value is undefined[K
  ok [1m[32m4126[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty String value
[0m[1B[1G
# # test put()/get()/del() with empty Buffer value
[K

  ok [1m[32m4127[0m undefined[K
  ok [1m[32m4128[0m no error, has key/value for `empty Buffer value`[K
  ok [1m[32m4129[0m is a Buffer[K
  ok [1m[32m4130[0m should be strictly equal[K
  ok [1m[32m4131[0m no error, deleted key/value for `empty Buffer value`[K
  ok [1m[32m4132[0m entry properly deleted[K
  ok [1m[32m4133[0m should have correct error message[K
  ok [1m[32m4134[0m value is undefined[K
  ok [1m[32m4135[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Buffer value
[0m[1B[1G
# # test put()/get()/del() with empty Array value
[K

  ok [1m[32m4136[0m undefined[K
  ok [1m[32m4137[0m no error, has key/value for `empty Array value`[K
  ok [1m[32m4138[0m is a Buffer[K
  ok [1m[32m4139[0m should be strictly equal[K
  ok [1m[32m4140[0m no error, deleted key/value for `empty Array value`[K
  ok [1m[32m4141[0m entry properly deleted[K
  ok [1m[32m4142[0m should have correct error message[K
  ok [1m[32m4143[0m value is undefined[K
  ok [1m[32m4144[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Array value
[0m[1B[1G
# # test put()/get()/del() with long String value
[K

  ok [1m[32m4145[0m undefined[K
  ok [1m[32m4146[0m no error, has key/value for `long String value`[K
  ok [1m[32m4147[0m is a Buffer[K
  ok [1m[32m4148[0m should be strictly equal[K
  ok [1m[32m4149[0m no error, deleted key/value for `long String value`[K
  ok [1m[32m4150[0m entry properly deleted[K
  ok [1m[32m4151[0m should have correct error message[K
  ok [1m[32m4152[0m value is undefined[K
  ok [1m[32m4153[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String value
[0m[1B[1G
# # test put()/get()/del() with Buffer value
[K

  ok [1m[32m4154[0m undefined[K
  ok [1m[32m4155[0m no error, has key/value for `Buffer value`[K
  ok [1m[32m4156[0m is a Buffer[K
  ok [1m[32m4157[0m should be strictly equal[K
  ok [1m[32m4158[0m no error, deleted key/value for `Buffer value`[K
  ok [1m[32m4159[0m entry properly deleted[K
  ok [1m[32m4160[0m should have correct error message[K
  ok [1m[32m4161[0m value is undefined[K
  ok [1m[32m4162[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer value
[0m[1B[1G
# # test put()/get()/del() with Array key
[K

  ok [1m[32m4163[0m undefined[K
  ok [1m[32m4164[0m no error, has key/value for `Array key`[K
  ok [1m[32m4165[0m is a Buffer[K
  ok [1m[32m4166[0m should be strictly equal[K
  ok [1m[32m4167[0m no error, deleted key/value for `Array key`[K
  ok [1m[32m4168[0m entry properly deleted[K
  ok [1m[32m4169[0m should have correct error message[K
  ok [1m[32m4170[0m value is undefined[K
  ok [1m[32m4171[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test getMany() requires an array argument (callback)
[K

  ok [1m[32m4172[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4173[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4174[0m should be strictly equal[K
  ok [1m[32m4175[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (callback)
[0m[1B[1G
# # test getMany() requires an array argument (promise)
[K

  ok [1m[32m4176[0m should be strictly equal[K
  ok [1m[32m4177[0m should be strictly equal[K
  ok [1m[32m4178[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (promise)
[0m[1B[1G
# # test getMany() support is reflected in manifest
[K

  ok [1m[32m4179[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() support is reflected in manifest
[0m[1B[1G
# # test simple getMany()
[K

  ok [1m[32m4180[0m undefined[K
  ok [1m[32m4181[0m null[K
  ok [1m[32m4182[0m got an array[K
  ok [1m[32m4183[0m array has 1 element[K
  ok [1m[32m4184[0m should not be string by default[K
  ok [1m[32m4185[0m should be strictly equal[K
  ok [1m[32m4186[0m null[K
  ok [1m[32m4187[0m got an array[K
  ok [1m[32m4188[0m array has 1 element[K
  ok [1m[32m4189[0m should not be string by default[K
  ok [1m[32m4190[0m should be strictly equal[K
  ok [1m[32m4191[0m null[K
  ok [1m[32m4192[0m should be string if not buffer[K
  ok [1m[32m4193[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simple getMany()
[0m[1B[1G
# # test getMany() with multiple keys
[K

  ok [1m[32m4194[0m undefined[K
  ok [1m[32m4195[0m null[K
  ok [1m[32m4196[0m should be deeply equivalent[K
  ok [1m[32m4197[0m null[K
  ok [1m[32m4198[0m maintains order of input keys[K
[1A[1G[1m[32m✓ # test getMany() with multiple keys
[0m[1B[1G
# # test empty getMany()
[K

  ok [1m[32m4199[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4200[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4201[0m null[K
  ok [1m[32m4202[0m should be deeply equivalent[K
  ok [1m[32m4203[0m null[K
  ok [1m[32m4204[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test empty getMany()
[0m[1B[1G
# # test not-found getMany()
[K

  ok [1m[32m4205[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4206[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4207[0m null[K
  ok [1m[32m4208[0m should be deeply equivalent[K
  ok [1m[32m4209[0m null[K
  ok [1m[32m4210[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test not-found getMany()
[0m[1B[1G
# # test getMany() with promise
[K

  ok [1m[32m4211[0m should be deeply equivalent[K
  ok [1m[32m4212[0m should be deeply equivalent[K
  ok [1m[32m4213[0m should be deeply equivalent[K
  ok [1m[32m4214[0m should be deeply equivalent[K
  ok [1m[32m4215[0m should be deeply equivalent[K
  ok [1m[32m4216[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test getMany() with promise
[0m[1B[1G
# # test simultaneous getMany()
[K

  ok [1m[32m4217[0m undefined[K
  ok [1m[32m4218[0m null[K
  ok [1m[32m4219[0m should be strictly equal[K
  ok [1m[32m4220[0m should be strictly equal[K
  ok [1m[32m4221[0m null[K
  ok [1m[32m4222[0m should be strictly equal[K
  ok [1m[32m4223[0m should be strictly equal[K
  ok [1m[32m4224[0m null[K
  ok [1m[32m4225[0m should be strictly equal[K
  ok [1m[32m4226[0m should be strictly equal[K
  ok [1m[32m4227[0m null[K
  ok [1m[32m4228[0m should be strictly equal[K
  ok [1m[32m4229[0m should be strictly equal[K
  ok [1m[32m4230[0m null[K
  ok [1m[32m4231[0m should be strictly equal[K
  ok [1m[32m4232[0m should be strictly equal[K
  ok [1m[32m4233[0m null[K
  ok [1m[32m4234[0m should be strictly equal[K
  ok [1m[32m4235[0m should be strictly equal[K
  ok [1m[32m4236[0m null[K
  ok [1m[32m4237[0m should be strictly equal[K
  ok [1m[32m4238[0m should be strictly equal[K
  ok [1m[32m4239[0m null[K
  ok [1m[32m4240[0m should be strictly equal[K
  ok [1m[32m4241[0m should be strictly equal[K
  ok [1m[32m4242[0m null[K
  ok [1m[32m4243[0m should be strictly equal[K
  ok [1m[32m4244[0m should be strictly equal[K
  ok [1m[32m4245[0m null[K
  ok [1m[32m4246[0m should be strictly equal[K
  ok [1m[32m4247[0m should be strictly equal[K
  ok [1m[32m4248[0m null[K
  ok [1m[32m4249[0m should be deeply equivalent[K
  ok [1m[32m4250[0m null[K
  ok [1m[32m4251[0m should be deeply equivalent[K
  ok [1m[32m4252[0m null[K
  ok [1m[32m4253[0m should be deeply equivalent[K
  ok [1m[32m4254[0m null[K
  ok [1m[32m4255[0m should be deeply equivalent[K
  ok [1m[32m4256[0m null[K
  ok [1m[32m4257[0m should be deeply equivalent[K
  ok [1m[32m4258[0m null[K
  ok [1m[32m4259[0m should be deeply equivalent[K
  ok [1m[32m4260[0m null[K
  ok [1m[32m4261[0m should be deeply equivalent[K
  ok [1m[32m4262[0m null[K
  ok [1m[32m4263[0m should be deeply equivalent[K
  ok [1m[32m4264[0m null[K
  ok [1m[32m4265[0m should be deeply equivalent[K
  ok [1m[32m4266[0m null[K
  ok [1m[32m4267[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simultaneous getMany()
[0m[1B[1G
# # test getMany() on new db
[K

  ok [1m[32m4268[0m should be strictly equal[K
  ok [1m[32m4269[0m should be strictly equal[K
  ok [1m[32m4270[0m (unnamed assert)[K
  ok [1m[32m4271[0m should be strictly equal[K
  ok [1m[32m4272[0m should be strictly equal[K
  ok [1m[32m4273[0m (unnamed assert)[K
  ok [1m[32m4274[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4275[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4276[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4277[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4278[0m should be strictly equal[K
  ok [1m[32m4279[0m should be strictly equal[K
  ok [1m[32m4280[0m should be strictly equal[K
  ok [1m[32m4281[0m should be strictly equal[K
  ok [1m[32m4282[0m should be strictly equal[K
  ok [1m[32m4283[0m should be strictly equal[K
  ok [1m[32m4284[0m should be strictly equal[K
  ok [1m[32m4285[0m should be strictly equal[K
  ok [1m[32m4286[0m undefined[K
  ok [1m[32m4287[0m undefined[K
[1A[1G[1m[32m✓ # test getMany() on new db
[0m[1B[1G
# # test getMany() on opening db
[K

  ok [1m[32m4288[0m callback (open) is asynchronous[K
  ok [1m[32m4289[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4290[0m callback (open) is asynchronous[K
  ok [1m[32m4291[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4292[0m should be strictly equal[K
  ok [1m[32m4293[0m should be strictly equal[K
  ok [1m[32m4294[0m should be strictly equal[K
  ok [1m[32m4295[0m should be strictly equal[K
  ok [1m[32m4296[0m undefined[K
  ok [1m[32m4297[0m undefined[K
[1A[1G[1m[32m✓ # test getMany() on opening db
[0m[1B[1G
# # test getMany() on closed db
[K

  ok [1m[32m4298[0m undefined[K
  ok [1m[32m4299[0m should be strictly equal[K
  ok [1m[32m4300[0m undefined[K
  ok [1m[32m4301[0m should be strictly equal[K
  ok [1m[32m4302[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4303[0m should be strictly equal[K
  ok [1m[32m4304[0m undefined[K
  ok [1m[32m4305[0m should be strictly equal[K
  ok [1m[32m4306[0m undefined[K
  ok [1m[32m4307[0m should be strictly equal[K
  ok [1m[32m4308[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4309[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closed db
[0m[1B[1G
# # test getMany() on closing db
[K

  ok [1m[32m4310[0m undefined[K
  ok [1m[32m4311[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4312[0m undefined[K
  ok [1m[32m4313[0m should be strictly equal[K
  ok [1m[32m4314[0m undefined[K
  ok [1m[32m4315[0m callback (anonymous) is asynchronous[K
  ok [1m[32m4316[0m undefined[K
  ok [1m[32m4317[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closing db
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test callback-less, 2-arg, batch() throws
[K

  ok [1m[32m4318[0m callback-less, 2-arg batch() throws[K
[1A[1G[1m[32m✓ # test callback-less, 2-arg, batch() throws
[0m[1B[1G
# # test batch() with missing `value`
[K

  ok [1m[32m4319[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with missing `value`
[0m[1B[1G
# # test batch() with null or undefined `value`
[K

  ok [1m[32m4320[0m correct error message[K
  ok [1m[32m4321[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `value`
[0m[1B[1G
# # test batch() with missing `key`
[K

  ok [1m[32m4322[0m got error[K
  ok [1m[32m4323[0m correct error message[K
  ok [1m[32m4324[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key`
[0m[1B[1G
# # test batch() with null or undefined `key`
[K

  ok [1m[32m4325[0m got error[K
  ok [1m[32m4326[0m correct error message[K
  ok [1m[32m4327[0m callback is asynchronous[K
  ok [1m[32m4328[0m got error[K
  ok [1m[32m4329[0m correct error message[K
  ok [1m[32m4330[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `key`
[0m[1B[1G
# # test batch() with empty `key`
[K

  ok [1m[32m4331[0m got error[K
  ok [1m[32m4332[0m correct error message[K
  ok [1m[32m4333[0m callback is asynchronous[K
  ok [1m[32m4334[0m got error[K
  ok [1m[32m4335[0m correct error message[K
  ok [1m[32m4336[0m callback is asynchronous[K
  ok [1m[32m4337[0m got error[K
  ok [1m[32m4338[0m correct error message[K
  ok [1m[32m4339[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty `key`
[0m[1B[1G
# # test batch() with missing `key` and `value`
[K

  ok [1m[32m4340[0m got error[K
  ok [1m[32m4341[0m correct error message[K
  ok [1m[32m4342[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key` and `value`
[0m[1B[1G
# # test batch() with missing `type`
[K

  ok [1m[32m4343[0m got error[K
  ok [1m[32m4344[0m correct error message[K
  ok [1m[32m4345[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `type`
[0m[1B[1G
# # test batch() with wrong `type`
[K

  ok [1m[32m4346[0m got error[K
  ok [1m[32m4347[0m correct error message[K
  ok [1m[32m4348[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with wrong `type`
[0m[1B[1G
# # test batch() with missing array
[K

  ok [1m[32m4349[0m got error[K
  ok [1m[32m4350[0m correct error message[K
  ok [1m[32m4351[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing array
[0m[1B[1G
# # test batch() with undefined array
[K

  ok [1m[32m4352[0m got error[K
  ok [1m[32m4353[0m correct error message[K
  ok [1m[32m4354[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined array
[0m[1B[1G
# # test batch() with null array
[K

  ok [1m[32m4355[0m got error[K
  ok [1m[32m4356[0m correct error message[K
  ok [1m[32m4357[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null array
[0m[1B[1G
# # test batch() with null options
[K

  ok [1m[32m4358[0m undefined[K
[1A[1G[1m[32m✓ # test batch() with null options
[0m[1B[1G
# # test batch() with null element
[K

  ok [1m[32m4359[0m got error[K
  ok [1m[32m4360[0m correct error message[K
  ok [1m[32m4361[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null element
[0m[1B[1G
# # test batch() with undefined element
[K

  ok [1m[32m4362[0m got error[K
  ok [1m[32m4363[0m correct error message[K
  ok [1m[32m4364[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined element
[0m[1B[1G
# # test batch() with number element
[K

  ok [1m[32m4365[0m got error[K
  ok [1m[32m4366[0m correct error message[K
  ok [1m[32m4367[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with number element
[0m[1B[1G
# # test batch() with boolean element
[K

  ok [1m[32m4368[0m got error[K
  ok [1m[32m4369[0m correct error message[K
  ok [1m[32m4370[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with boolean element
[0m[1B[1G
# # test batch() with empty array
[K

  ok [1m[32m4371[0m no error from batch()[K
  ok [1m[32m4372[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty array
[0m[1B[1G
# # test simple batch()
[K

  ok [1m[32m4373[0m undefined[K
  ok [1m[32m4374[0m null[K
  ok [1m[32m4375[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m4376[0m undefined[K
  ok [1m[32m4377[0m null[K
  ok [1m[32m4378[0m should be strictly equal[K
  ok [1m[32m4379[0m entry not found[K
  ok [1m[32m4380[0m value is undefined[K
  ok [1m[32m4381[0m NotFound error[K
  ok [1m[32m4382[0m null[K
  ok [1m[32m4383[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m4384[0m should error[K
  ok [1m[32m4385[0m callback is asynchronous[K
  ok [1m[32m4386[0m should not be found[K
  ok [1m[32m4387[0m should not be found[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test batch has db reference
[K

  ok [1m[32m4388[0m should be truthy[K
[1A[1G[1m[32m✓ # test batch has db reference
[0m[1B[1G
# # test batch#put() with missing `value`
[K

  ok [1m[32m4389[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `value`
[0m[1B[1G
# # test batch#put() with missing `key`
[K

  ok [1m[32m4390[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key`
[0m[1B[1G
# # test batch#put() with null `key`
[K

  ok [1m[32m4391[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null `key`
[0m[1B[1G
# # test batch#put() with missing `key` and `value`
[K

  ok [1m[32m4392[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key` and `value`
[0m[1B[1G
# # test batch#put() with null or undefined `value`
[K

  ok [1m[32m4393[0m correct error message[K
  ok [1m[32m4394[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null or undefined `value`
[0m[1B[1G
# # test batch#del() with missing `key`
[K

  ok [1m[32m4395[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with missing `key`
[0m[1B[1G
# # test batch#del() with null or undefined `key`
[K

  ok [1m[32m4396[0m correct error message[K
  ok [1m[32m4397[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with null or undefined `key`
[0m[1B[1G
# # test batch#clear() doesn't throw
[K

[1A[1G[1m[32m✓ # test batch#clear() doesn't throw
[0m[1B[1G
# # test batch#write() with no callback
[K

  ok [1m[32m4398[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() with no callback
[0m[1B[1G
# # test batch#put() after write()
[K

  ok [1m[32m4399[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() after write()
[0m[1B[1G
# # test batch#del() after write()
[K

  ok [1m[32m4400[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() after write()
[0m[1B[1G
# # test batch#clear() after write()
[K

  ok [1m[32m4401[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#clear() after write()
[0m[1B[1G
# # test batch#write() after write()
[K

  ok [1m[32m4402[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() after write()
[0m[1B[1G
# # test serialize object
[K

  ok [1m[32m4403[0m .key is set for .put and .del operations[K
  ok [1m[32m4404[0m .value is set for .put operation[K
  ok [1m[32m4405[0m .key is set for .put and .del operations[K
[1A[1G[1m[32m✓ # test serialize object
[0m[1B[1G
# # test custom _serialize*
[K

  ok [1m[32m4406[0m should be deeply equivalent[K
  ok [1m[32m4407[0m should be deeply equivalent[K
  ok [1m[32m4408[0m should be deeply equivalent[K
  ok [1m[32m4409[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test custom _serialize*
[0m[1B[1G
# # test batch#write() with no operations
[K

  ok [1m[32m4410[0m no error from write()[K
  ok [1m[32m4411[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch#write() with no operations
[0m[1B[1G
# # test basic batch
[K

  ok [1m[32m4412[0m undefined[K
  ok [1m[32m4413[0m undefined[K
  ok [1m[32m4414[0m undefined[K
  ok [1m[32m4415[0m correct number of entries[K
  ok [1m[32m4416[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test basic batch
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test iterator has db reference
[K

  ok [1m[32m4417[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator has db reference
[0m[1B[1G
# # test iterator#next returns this in callback mode
[K

  ok [1m[32m4418[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator#next returns this in callback mode
[0m[1B[1G
# # test twice iterator#end() callback with error
[K

  ok [1m[32m4419[0m undefined[K
  ok [1m[32m4420[0m returned error[K
  ok [1m[32m4421[0m correct error[K
  ok [1m[32m4422[0m should be strictly equal[K
  ok [1m[32m4423[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test twice iterator#end() callback with error
[0m[1B[1G
# # test iterator#next after iterator#end() callback with error
[K

  ok [1m[32m4424[0m undefined[K
  ok [1m[32m4425[0m returned error[K
  ok [1m[32m4426[0m correct error[K
  ok [1m[32m4427[0m correct message[K
  ok [1m[32m4428[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test iterator#next after iterator#end() callback with error
[0m[1B[1G
# # test twice iterator#next() throws
[K

  ok [1m[32m4429[0m returned error[K
  ok [1m[32m4430[0m correct error[K
  ok [1m[32m4431[0m should be strictly equal[K
  ok [1m[32m4432[0m callback is asynchronous[K
  ok [1m[32m4433[0m undefined[K
  ok [1m[32m4434[0m undefined[K
[1A[1G[1m[32m✓ # test twice iterator#next() throws
[0m[1B[1G
# # test simple iterator()
[K

  ok [1m[32m4435[0m undefined[K
  ok [1m[32m4436[0m null[K
  ok [1m[32m4437[0m key argument is a Buffer[K
  ok [1m[32m4438[0m value argument is a Buffer[K
  ok [1m[32m4439[0m correct key[K
  ok [1m[32m4440[0m correct value[K
  ok [1m[32m4441[0m null[K
  ok [1m[32m4442[0m key argument is a Buffer[K
  ok [1m[32m4443[0m value argument is a Buffer[K
  ok [1m[32m4444[0m correct key[K
  ok [1m[32m4445[0m correct value[K
  ok [1m[32m4446[0m null[K
  ok [1m[32m4447[0m key argument is a Buffer[K
  ok [1m[32m4448[0m value argument is a Buffer[K
  ok [1m[32m4449[0m correct key[K
  ok [1m[32m4450[0m correct value[K
  ok [1m[32m4451[0m undefined[K
  ok [1m[32m4452[0m err argument is nullish[K
  ok [1m[32m4453[0m key argument is undefined[K
  ok [1m[32m4454[0m value argument is undefined[K
  ok [1m[32m4455[0m correct number of entries[K
[1A[1G[1m[32m✓ # test simple iterator()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test full data collection
[K

  ok [1m[32m4456[0m undefined[K
  ok [1m[32m4457[0m correct number of entries[K
  ok [1m[32m4458[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection
[0m[1B[1G
# # test full data collection (flipped)
[K

  ok [1m[32m4459[0m undefined[K
  ok [1m[32m4460[0m correct number of entries[K
  ok [1m[32m4461[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection (flipped)
[0m[1B[1G
# # test iterator with reverse=true
[K

  ok [1m[32m4462[0m undefined[K
  ok [1m[32m4463[0m correct number of entries[K
  ok [1m[32m4464[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with reverse=true
[0m[1B[1G
# # test iterator with gte=00
[K

  ok [1m[32m4465[0m undefined[K
  ok [1m[32m4466[0m correct number of entries[K
  ok [1m[32m4467[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00
[0m[1B[1G
# # test iterator with gte=00 (flipped)
[K

  ok [1m[32m4468[0m undefined[K
  ok [1m[32m4469[0m correct number of entries[K
  ok [1m[32m4470[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00 (flipped)
[0m[1B[1G
# # test iterator with gte=50
[K

  ok [1m[32m4471[0m undefined[K
  ok [1m[32m4472[0m correct number of entries[K
  ok [1m[32m4473[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50
[0m[1B[1G
# # test iterator with gte=50 (flipped)
[K

  ok [1m[32m4474[0m undefined[K
  ok [1m[32m4475[0m correct number of entries[K
  ok [1m[32m4476[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50 and reverse=true
[K

  ok [1m[32m4477[0m undefined[K
  ok [1m[32m4478[0m correct number of entries[K
  ok [1m[32m4479[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 and reverse=true
[0m[1B[1G
# # test iterator with gte=49.5 (midway)
[K

  ok [1m[32m4480[0m undefined[K
  ok [1m[32m4481[0m correct number of entries[K
  ok [1m[32m4482[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway)
[0m[1B[1G
# # test iterator with gte=49.5 (midway) (flipped)
[K

  ok [1m[32m4483[0m undefined[K
  ok [1m[32m4484[0m correct number of entries[K
  ok [1m[32m4485[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=49999 (midway)
[K

  ok [1m[32m4486[0m undefined[K
  ok [1m[32m4487[0m correct number of entries[K
  ok [1m[32m4488[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway)
[0m[1B[1G
# # test iterator with gte=49999 (midway) (flipped)
[K

  ok [1m[32m4489[0m undefined[K
  ok [1m[32m4490[0m correct number of entries[K
  ok [1m[32m4491[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m4492[0m undefined[K
  ok [1m[32m4493[0m correct number of entries[K
  ok [1m[32m4494[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m4495[0m undefined[K
  ok [1m[32m4496[0m correct number of entries[K
  ok [1m[32m4497[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=50 and reverse=true
[K

  ok [1m[32m4498[0m undefined[K
  ok [1m[32m4499[0m correct number of entries[K
  ok [1m[32m4500[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=50
[K

  ok [1m[32m4501[0m undefined[K
  ok [1m[32m4502[0m correct number of entries[K
  ok [1m[32m4503[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50
[0m[1B[1G
# # test iterator with lte=50 (flipped)
[K

  ok [1m[32m4504[0m undefined[K
  ok [1m[32m4505[0m correct number of entries[K
  ok [1m[32m4506[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50.5 (midway)
[K

  ok [1m[32m4507[0m undefined[K
  ok [1m[32m4508[0m correct number of entries[K
  ok [1m[32m4509[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway)
[0m[1B[1G
# # test iterator with lte=50.5 (midway) (flipped)
[K

  ok [1m[32m4510[0m undefined[K
  ok [1m[32m4511[0m correct number of entries[K
  ok [1m[32m4512[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=50555 (midway)
[K

  ok [1m[32m4513[0m undefined[K
  ok [1m[32m4514[0m correct number of entries[K
  ok [1m[32m4515[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway)
[0m[1B[1G
# # test iterator with lte=50555 (midway) (flipped)
[K

  ok [1m[32m4516[0m undefined[K
  ok [1m[32m4517[0m correct number of entries[K
  ok [1m[32m4518[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with lt=50555 (midway)
[K

  ok [1m[32m4519[0m undefined[K
  ok [1m[32m4520[0m correct number of entries[K
  ok [1m[32m4521[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway)
[0m[1B[1G
# # test iterator with lt=50555 (midway) (flipped)
[K

  ok [1m[32m4522[0m undefined[K
  ok [1m[32m4523[0m correct number of entries[K
  ok [1m[32m4524[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m4525[0m undefined[K
  ok [1m[32m4526[0m correct number of entries[K
  ok [1m[32m4527[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m4528[0m undefined[K
  ok [1m[32m4529[0m correct number of entries[K
  ok [1m[32m4530[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50 and reverse=true
[K

  ok [1m[32m4531[0m undefined[K
  ok [1m[32m4532[0m correct number of entries[K
  ok [1m[32m4533[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=0
[K

  ok [1m[32m4534[0m undefined[K
  ok [1m[32m4535[0m correct number of entries[K
  ok [1m[32m4536[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0
[0m[1B[1G
# # test iterator with lte=0 (flipped)
[K

  ok [1m[32m4537[0m undefined[K
  ok [1m[32m4538[0m correct number of entries[K
  ok [1m[32m4539[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0 (flipped)
[0m[1B[1G
# # test iterator with lt=0
[K

  ok [1m[32m4540[0m undefined[K
  ok [1m[32m4541[0m correct number of entries[K
  ok [1m[32m4542[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0
[0m[1B[1G
# # test iterator with lt=0 (flipped)
[K

  ok [1m[32m4543[0m undefined[K
  ok [1m[32m4544[0m correct number of entries[K
  ok [1m[32m4545[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70
[K

  ok [1m[32m4546[0m undefined[K
  ok [1m[32m4547[0m correct number of entries[K
  ok [1m[32m4548[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70
[0m[1B[1G
# # test iterator with gte=30 and lte=70 (flipped)
[K

  ok [1m[32m4549[0m undefined[K
  ok [1m[32m4550[0m correct number of entries[K
  ok [1m[32m4551[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 (flipped)
[0m[1B[1G
# # test iterator with gt=29 and lt=71
[K

  ok [1m[32m4552[0m undefined[K
  ok [1m[32m4553[0m correct number of entries[K
  ok [1m[32m4554[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71
[0m[1B[1G
# # test iterator with gt=29 and lt=71 (flipped)
[K

  ok [1m[32m4555[0m undefined[K
  ok [1m[32m4556[0m correct number of entries[K
  ok [1m[32m4557[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m4558[0m undefined[K
  ok [1m[32m4559[0m correct number of entries[K
  ok [1m[32m4560[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # test iterator with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m4561[0m undefined[K
  ok [1m[32m4562[0m correct number of entries[K
  ok [1m[32m4563[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # test iterator with limit=20
[K

  ok [1m[32m4564[0m undefined[K
  ok [1m[32m4565[0m correct number of entries[K
  ok [1m[32m4566[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20
[0m[1B[1G
# # test iterator with limit=20 and gte=20
[K

  ok [1m[32m4567[0m undefined[K
  ok [1m[32m4568[0m correct number of entries[K
  ok [1m[32m4569[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and gte=20
[0m[1B[1G
# # test iterator with limit=20 and reverse=true
[K

  ok [1m[32m4570[0m undefined[K
  ok [1m[32m4571[0m correct number of entries[K
  ok [1m[32m4572[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and reverse=true
[0m[1B[1G
# # test iterator with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m4573[0m undefined[K
  ok [1m[32m4574[0m correct number of entries[K
  ok [1m[32m4575[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # test iterator with limit=-1 should iterate over whole database
[K

  ok [1m[32m4576[0m undefined[K
  ok [1m[32m4577[0m correct number of entries[K
  ok [1m[32m4578[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=-1 should iterate over whole database
[0m[1B[1G
# # test iterator with limit=0 should not iterate over anything
[K

  ok [1m[32m4579[0m undefined[K
  ok [1m[32m4580[0m correct number of entries[K
  ok [1m[32m4581[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=0 should not iterate over anything
[0m[1B[1G
# # test iterator with lte after limit
[K

  ok [1m[32m4582[0m undefined[K
  ok [1m[32m4583[0m correct number of entries[K
  ok [1m[32m4584[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after limit
[0m[1B[1G
# # test iterator with lte before limit
[K

  ok [1m[32m4585[0m undefined[K
  ok [1m[32m4586[0m correct number of entries[K
  ok [1m[32m4587[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before limit
[0m[1B[1G
# # test iterator with gte after database end
[K

  ok [1m[32m4588[0m undefined[K
  ok [1m[32m4589[0m correct number of entries[K
  ok [1m[32m4590[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end
[0m[1B[1G
# # test iterator with gte after database end (flipped)
[K

  ok [1m[32m4591[0m undefined[K
  ok [1m[32m4592[0m correct number of entries[K
  ok [1m[32m4593[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end (flipped)
[0m[1B[1G
# # test iterator with gt after database end
[K

  ok [1m[32m4594[0m undefined[K
  ok [1m[32m4595[0m correct number of entries[K
  ok [1m[32m4596[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end
[0m[1B[1G
# # test iterator with gt after database end (flipped)
[K

  ok [1m[32m4597[0m undefined[K
  ok [1m[32m4598[0m correct number of entries[K
  ok [1m[32m4599[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end (flipped)
[0m[1B[1G
# # test iterator with lte after database end and reverse=true
[K

  ok [1m[32m4600[0m undefined[K
  ok [1m[32m4601[0m correct number of entries[K
  ok [1m[32m4602[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after database end and reverse=true
[0m[1B[1G
# # test iterator with lt after database end
[K

  ok [1m[32m4603[0m undefined[K
  ok [1m[32m4604[0m correct number of entries[K
  ok [1m[32m4605[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end
[0m[1B[1G
# # test iterator with lt after database end (flipped)
[K

  ok [1m[32m4606[0m undefined[K
  ok [1m[32m4607[0m correct number of entries[K
  ok [1m[32m4608[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end (flipped)
[0m[1B[1G
# # test iterator with lt at database end
[K

  ok [1m[32m4609[0m undefined[K
  ok [1m[32m4610[0m correct number of entries[K
  ok [1m[32m4611[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end
[0m[1B[1G
# # test iterator with lt at database end (flipped)
[K

  ok [1m[32m4612[0m undefined[K
  ok [1m[32m4613[0m correct number of entries[K
  ok [1m[32m4614[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end (flipped)
[0m[1B[1G
# # test iterator with lte at database end
[K

  ok [1m[32m4615[0m undefined[K
  ok [1m[32m4616[0m correct number of entries[K
  ok [1m[32m4617[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end
[0m[1B[1G
# # test iterator with lte at database end (flipped)
[K

  ok [1m[32m4618[0m undefined[K
  ok [1m[32m4619[0m correct number of entries[K
  ok [1m[32m4620[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end (flipped)
[0m[1B[1G
# # test iterator with lt before database end
[K

  ok [1m[32m4621[0m undefined[K
  ok [1m[32m4622[0m correct number of entries[K
  ok [1m[32m4623[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end
[0m[1B[1G
# # test iterator with lt before database end (flipped)
[K

  ok [1m[32m4624[0m undefined[K
  ok [1m[32m4625[0m correct number of entries[K
  ok [1m[32m4626[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end (flipped)
[0m[1B[1G
# # test iterator with lte before database end
[K

  ok [1m[32m4627[0m undefined[K
  ok [1m[32m4628[0m correct number of entries[K
  ok [1m[32m4629[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end
[0m[1B[1G
# # test iterator with lte before database end (flipped)
[K

  ok [1m[32m4630[0m undefined[K
  ok [1m[32m4631[0m correct number of entries[K
  ok [1m[32m4632[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end (flipped)
[0m[1B[1G
# # test iterator with lte and gte after database and reverse=true
[K

  ok [1m[32m4633[0m undefined[K
  ok [1m[32m4634[0m correct number of entries[K
  ok [1m[32m4635[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte and gte after database and reverse=true
[0m[1B[1G
# # test iterator with lt and gt after database and reverse=true
[K

  ok [1m[32m4636[0m undefined[K
  ok [1m[32m4637[0m correct number of entries[K
  ok [1m[32m4638[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setup
[K

  ok [1m[32m4639[0m no open() error[K
  ok [1m[32m4640[0m no batch() error[K
[1A[1G[1m[32m✓ # setup
[0m[1B[1G
# # for await...of db.iterator()
[K

  ok [1m[32m4641[0m ended[K
  ok [1m[32m4642[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # for await...of db.iterator()
[0m[1B[1G
# # for await...of db.iterator() does not permit reuse
[K

  ok [1m[32m4643[0m nexted[K
  ok [1m[32m4644[0m nexted[K
  ok [1m[32m4645[0m should be strictly equal[K
[1A[1G[1m[32m✓ # for await...of db.iterator() does not permit reuse
[0m[1B[1G
# # for await...of db.iterator() ends on user error
[K

  ok [1m[32m4646[0m should be strictly equal[K
  ok [1m[32m4647[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user error
[0m[1B[1G
# # for await...of db.iterator() with user error and end() error
[K

  ok [1m[32m4648[0m no real error from end()[K
  ok [1m[32m4649[0m should be strictly equal[K
  ok [1m[32m4650[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on iterator error
[K

  ok [1m[32m4651[0m nexted[K
  ok [1m[32m4652[0m should be strictly equal[K
  ok [1m[32m4653[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on iterator error
[0m[1B[1G
# # for await...of db.iterator() with iterator error and end() error
[K

  ok [1m[32m4654[0m nexted[K
  ok [1m[32m4655[0m no real error from end()[K
  ok [1m[32m4656[0m should be strictly equal[K
  ok [1m[32m4657[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with iterator error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on user break
[K

  ok [1m[32m4658[0m got a chance to break[K
  ok [1m[32m4659[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user break
[0m[1B[1G
# # for await...of db.iterator() with user break and end() error
[K

  ok [1m[32m4660[0m got a chance to break[K
  ok [1m[32m4661[0m no real error from end()[K
  ok [1m[32m4662[0m should be strictly equal[K
  ok [1m[32m4663[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user break and end() error
[0m[1B[1G
# # teardown
[K

  ok [1m[32m4664[0m no close() error[K
[1A[1G[1m[32m✓ # teardown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # iterator#seek() throws if next() has not completed
[K

  ok [1m[32m4665[0m no error from open()[K
  ok [1m[32m4666[0m got error[K
  ok [1m[32m4667[0m no error from next()[K
  ok [1m[32m4668[0m next is asynchronous[K
  ok [1m[32m4669[0m no error from done()[K
  ok [1m[32m4670[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws if next() has not completed
[0m[1B[1G
# # iterator#seek() throws after end()
[K

  ok [1m[32m4671[0m no error from open()[K
  ok [1m[32m4672[0m no error from next()[K
  ok [1m[32m4673[0m no error from end()[K
  ok [1m[32m4674[0m got error[K
  ok [1m[32m4675[0m no error from done()[K
  ok [1m[32m4676[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws after end()
[0m[1B[1G
# # iterator#seek() to string target
[K

  ok [1m[32m4677[0m no error from open()[K
  ok [1m[32m4678[0m no error from batch()[K
  ok [1m[32m4679[0m no error[K
  ok [1m[32m4680[0m key matches[K
  ok [1m[32m4681[0m value matches[K
  ok [1m[32m4682[0m no error[K
  ok [1m[32m4683[0m end of iterator[K
  ok [1m[32m4684[0m end of iterator[K
  ok [1m[32m4685[0m no error from done()[K
  ok [1m[32m4686[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to string target
[0m[1B[1G
# # iterator#seek() to buffer target
[K

  ok [1m[32m4687[0m no error from open()[K
  ok [1m[32m4688[0m no error from batch()[K
  ok [1m[32m4689[0m no error from next()[K
  ok [1m[32m4690[0m key matches[K
  ok [1m[32m4691[0m value matches[K
  ok [1m[32m4692[0m no error from next()[K
  ok [1m[32m4693[0m end of iterator[K
  ok [1m[32m4694[0m end of iterator[K
  ok [1m[32m4695[0m no error from done()[K
  ok [1m[32m4696[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to buffer target
[0m[1B[1G
# # iterator#seek() on reverse iterator
[K

  ok [1m[32m4697[0m no error from open()[K
  ok [1m[32m4698[0m no error from batch()[K
  ok [1m[32m4699[0m no error[K
  ok [1m[32m4700[0m key matches[K
  ok [1m[32m4701[0m value matches[K
  ok [1m[32m4702[0m no error from done()[K
  ok [1m[32m4703[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator
[0m[1B[1G
# # iterator#seek() to out of range target
[K

  ok [1m[32m4704[0m no error from open()[K
  ok [1m[32m4705[0m no error from batch()[K
  ok [1m[32m4706[0m no error[K
  ok [1m[32m4707[0m end of iterator[K
  ok [1m[32m4708[0m end of iterator[K
  ok [1m[32m4709[0m no error from done()[K
  ok [1m[32m4710[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to out of range target
[0m[1B[1G
# # iterator#seek() on reverse iterator to out of range target
[K

  ok [1m[32m4711[0m no error from open()[K
  ok [1m[32m4712[0m no error from batch()[K
  ok [1m[32m4713[0m no error[K
  ok [1m[32m4714[0m should be deeply equivalent[K
  ok [1m[32m4715[0m should be deeply equivalent[K
  ok [1m[32m4716[0m no error from done()[K
  ok [1m[32m4717[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator to out of range target
[0m[1B[1G
# # iterator#seek() respects range
[K

  ok [1m[32m4718[0m no error from open()[K
  ok [1m[32m4719[0m no error from batch()[K
  ok [1m[32m4720[0m no error from next()[K
  ok [1m[32m4721[0m seek(4) on {"gt":"5"} yields undefined[K
  ok [1m[32m4722[0m no error from next()[K
  ok [1m[32m4723[0m seek(5) on {"gt":"5"} yields undefined[K
  ok [1m[32m4724[0m no error from next()[K
  ok [1m[32m4725[0m seek(6) on {"gt":"5"} yields 6[K
  ok [1m[32m4726[0m no error from next()[K
  ok [1m[32m4727[0m seek(4) on {"gte":"5"} yields undefined[K
  ok [1m[32m4728[0m no error from next()[K
  ok [1m[32m4729[0m seek(5) on {"gte":"5"} yields 5[K
  ok [1m[32m4730[0m no error from next()[K
  ok [1m[32m4731[0m seek(6) on {"gte":"5"} yields 6[K
  ok [1m[32m4732[0m no error from next()[K
  ok [1m[32m4733[0m seek(4) on {"lt":"5"} yields 4[K
  ok [1m[32m4734[0m no error from next()[K
  ok [1m[32m4735[0m seek(5) on {"lt":"5"} yields undefined[K
  ok [1m[32m4736[0m no error from next()[K
  ok [1m[32m4737[0m seek(6) on {"lt":"5"} yields undefined[K
  ok [1m[32m4738[0m no error from next()[K
  ok [1m[32m4739[0m seek(4) on {"lte":"5"} yields 4[K
  ok [1m[32m4740[0m no error from next()[K
  ok [1m[32m4741[0m seek(5) on {"lte":"5"} yields 5[K
  ok [1m[32m4742[0m no error from next()[K
  ok [1m[32m4743[0m seek(6) on {"lte":"5"} yields undefined[K
  ok [1m[32m4744[0m no error from next()[K
  ok [1m[32m4745[0m seek(4) on {"lt":"5","reverse":true} yields 4[K
  ok [1m[32m4746[0m no error from next()[K
  ok [1m[32m4747[0m seek(5) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m4748[0m no error from next()[K
  ok [1m[32m4749[0m seek(6) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m4750[0m no error from next()[K
  ok [1m[32m4751[0m seek(4) on {"lte":"5","reverse":true} yields 4[K
  ok [1m[32m4752[0m no error from next()[K
  ok [1m[32m4753[0m seek(5) on {"lte":"5","reverse":true} yields 5[K
  ok [1m[32m4754[0m no error from next()[K
  ok [1m[32m4755[0m seek(6) on {"lte":"5","reverse":true} yields undefined[K
  ok [1m[32m4756[0m no error from next()[K
  ok [1m[32m4757[0m seek(4) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m4758[0m no error from next()[K
  ok [1m[32m4759[0m seek(5) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m4760[0m no error from next()[K
  ok [1m[32m4761[0m seek(6) on {"gt":"5","reverse":true} yields 6[K
  ok [1m[32m4762[0m no error from next()[K
  ok [1m[32m4763[0m seek(4) on {"gte":"5","reverse":true} yields undefined[K
  ok [1m[32m4764[0m no error from next()[K
  ok [1m[32m4765[0m seek(5) on {"gte":"5","reverse":true} yields 5[K
  ok [1m[32m4766[0m no error from next()[K
  ok [1m[32m4767[0m seek(6) on {"gte":"5","reverse":true} yields 6[K
  ok [1m[32m4768[0m no error from next()[K
  ok [1m[32m4769[0m seek(7) on {"gt":"7","lt":"8"} yields undefined[K
  ok [1m[32m4770[0m no error from next()[K
  ok [1m[32m4771[0m seek(7) on {"gte":"7","lt":"8"} yields 7[K
  ok [1m[32m4772[0m no error from next()[K
  ok [1m[32m4773[0m seek(8) on {"gte":"7","lt":"8"} yields undefined[K
  ok [1m[32m4774[0m no error from next()[K
  ok [1m[32m4775[0m seek(8) on {"gt":"7","lte":"8"} yields 8[K
  ok [1m[32m4776[0m no error from end()[K
  ok [1m[32m4777[0m no error from end()[K
  ok [1m[32m4778[0m no error from end()[K
  ok [1m[32m4779[0m no error from end()[K
  ok [1m[32m4780[0m no error from end()[K
  ok [1m[32m4781[0m no error from end()[K
  ok [1m[32m4782[0m no error from end()[K
  ok [1m[32m4783[0m no error from end()[K
  ok [1m[32m4784[0m no error from end()[K
  ok [1m[32m4785[0m no error from end()[K
  ok [1m[32m4786[0m no error from end()[K
  ok [1m[32m4787[0m no error from end()[K
  ok [1m[32m4788[0m no error from end()[K
  ok [1m[32m4789[0m no error from end()[K
  ok [1m[32m4790[0m no error from end()[K
  ok [1m[32m4791[0m no error from end()[K
  ok [1m[32m4792[0m no error from end()[K
  ok [1m[32m4793[0m no error from end()[K
  ok [1m[32m4794[0m no error from end()[K
  ok [1m[32m4795[0m no error from end()[K
  ok [1m[32m4796[0m no error from end()[K
  ok [1m[32m4797[0m no error from end()[K
  ok [1m[32m4798[0m no error from end()[K
  ok [1m[32m4799[0m no error from end()[K
  ok [1m[32m4800[0m no error from end()[K
  ok [1m[32m4801[0m no error from end()[K
  ok [1m[32m4802[0m no error from end()[K
  ok [1m[32m4803[0m no error from end()[K
  ok [1m[32m4804[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() respects range
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # delete key after snapshotting
[K

  ok [1m[32m4805[0m no open error[K
  ok [1m[32m4806[0m no put error[K
  ok [1m[32m4807[0m no del error[K
  ok [1m[32m4808[0m no next error[K
  ok [1m[32m4809[0m got a key[K
  ok [1m[32m4810[0m correct key[K
  ok [1m[32m4811[0m correct value[K
  ok [1m[32m4812[0m no run error[K
  ok [1m[32m4813[0m no iterator end error[K
[1A[1G[1m[32m✓ # delete key after snapshotting
[0m[1B[1G
# # overwrite key after snapshotting
[K

  ok [1m[32m4814[0m no open error[K
  ok [1m[32m4815[0m no put error[K
  ok [1m[32m4816[0m no put error[K
  ok [1m[32m4817[0m no next error[K
  ok [1m[32m4818[0m got a key[K
  ok [1m[32m4819[0m correct key[K
  ok [1m[32m4820[0m correct value[K
  ok [1m[32m4821[0m no run error[K
  ok [1m[32m4822[0m no iterator end error[K
[1A[1G[1m[32m✓ # overwrite key after snapshotting
[0m[1B[1G
# # add key after snapshotting that sorts first
[K

  ok [1m[32m4823[0m no open error[K
  ok [1m[32m4824[0m no put error[K
  ok [1m[32m4825[0m no put error[K
  ok [1m[32m4826[0m no next error[K
  ok [1m[32m4827[0m got a key[K
  ok [1m[32m4828[0m correct key[K
  ok [1m[32m4829[0m correct value[K
  ok [1m[32m4830[0m no run error[K
  ok [1m[32m4831[0m no iterator end error[K
[1A[1G[1m[32m✓ # add key after snapshotting that sorts first
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test argument-less clear() throws
[K

  ok [1m[32m4832[0m no-arg clear() throws[K
[1A[1G[1m[32m✓ # test argument-less clear() throws
[0m[1B[1G
# # test simple clear() on string keys
[K

  ok [1m[32m4833[0m no open error[K
  ok [1m[32m4834[0m no batch error[K
  ok [1m[32m4835[0m no concat error[K
  ok [1m[32m4836[0m has entries[K
  ok [1m[32m4837[0m no clear error[K
  ok [1m[32m4838[0m no concat error[K
  ok [1m[32m4839[0m has no entries[K
  ok [1m[32m4840[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on string keys
[0m[1B[1G
# # test simple clear() on buffer keys
[K

  ok [1m[32m4841[0m no open error[K
  ok [1m[32m4842[0m no batch error[K
  ok [1m[32m4843[0m no concat error[K
  ok [1m[32m4844[0m has entries[K
  ok [1m[32m4845[0m no clear error[K
  ok [1m[32m4846[0m no concat error[K
  ok [1m[32m4847[0m has no entries[K
  ok [1m[32m4848[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on buffer keys
[0m[1B[1G
# # test simple clear() on mixed keys
[K

  ok [1m[32m4849[0m no open error[K
  ok [1m[32m4850[0m no batch error[K
  ok [1m[32m4851[0m no concat error[K
  ok [1m[32m4852[0m has entries[K
  ok [1m[32m4853[0m no clear error[K
  ok [1m[32m4854[0m no concat error[K
  ok [1m[32m4855[0m has no entries[K
  ok [1m[32m4856[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on mixed keys
[0m[1B[1G
# # test simple clear() on non-utf8 buffer keys
[K

  ok [1m[32m4857[0m no open error[K
  ok [1m[32m4858[0m no batch error[K
  ok [1m[32m4859[0m no concat error[K
  ok [1m[32m4860[0m has entries[K
  ok [1m[32m4861[0m no clear error[K
  ok [1m[32m4862[0m no concat error[K
  ok [1m[32m4863[0m has no entries[K
  ok [1m[32m4864[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on non-utf8 buffer keys
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db#clear() with full range
[K

  ok [1m[32m4865[0m no open error[K
  ok [1m[32m4866[0m no batch error[K
  ok [1m[32m4867[0m no clear error[K
  ok [1m[32m4868[0m no concat error[K
  ok [1m[32m4869[0m correct number of entries[K
  ok [1m[32m4870[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with full range
[0m[1B[1G
# # db#clear() with reverse=true
[K

  ok [1m[32m4871[0m no open error[K
  ok [1m[32m4872[0m no batch error[K
  ok [1m[32m4873[0m no clear error[K
  ok [1m[32m4874[0m no concat error[K
  ok [1m[32m4875[0m correct number of entries[K
  ok [1m[32m4876[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with reverse=true
[0m[1B[1G
# # db#clear() with gte=00
[K

  ok [1m[32m4877[0m no open error[K
  ok [1m[32m4878[0m no batch error[K
  ok [1m[32m4879[0m no clear error[K
  ok [1m[32m4880[0m no concat error[K
  ok [1m[32m4881[0m correct number of entries[K
  ok [1m[32m4882[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=00
[0m[1B[1G
# # db#clear() with gte=50
[K

  ok [1m[32m4883[0m no open error[K
  ok [1m[32m4884[0m no batch error[K
  ok [1m[32m4885[0m no clear error[K
  ok [1m[32m4886[0m no concat error[K
  ok [1m[32m4887[0m correct number of entries[K
  ok [1m[32m4888[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50
[0m[1B[1G
# # db#clear() with lte=50 and reverse=true
[K

  ok [1m[32m4889[0m no open error[K
  ok [1m[32m4890[0m no batch error[K
  ok [1m[32m4891[0m no clear error[K
  ok [1m[32m4892[0m no concat error[K
  ok [1m[32m4893[0m correct number of entries[K
  ok [1m[32m4894[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50 and reverse=true
[0m[1B[1G
# # db#clear() with gte=49.5 (midway)
[K

  ok [1m[32m4895[0m no open error[K
  ok [1m[32m4896[0m no batch error[K
  ok [1m[32m4897[0m no clear error[K
  ok [1m[32m4898[0m no concat error[K
  ok [1m[32m4899[0m correct number of entries[K
  ok [1m[32m4900[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49.5 (midway)
[0m[1B[1G
# # db#clear() with gte=49999 (midway)
[K

  ok [1m[32m4901[0m no open error[K
  ok [1m[32m4902[0m no batch error[K
  ok [1m[32m4903[0m no clear error[K
  ok [1m[32m4904[0m no concat error[K
  ok [1m[32m4905[0m correct number of entries[K
  ok [1m[32m4906[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49999 (midway)
[0m[1B[1G
# # db#clear() with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m4907[0m no open error[K
  ok [1m[32m4908[0m no batch error[K
  ok [1m[32m4909[0m no clear error[K
  ok [1m[32m4910[0m no concat error[K
  ok [1m[32m4911[0m correct number of entries[K
  ok [1m[32m4912[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m4913[0m no open error[K
  ok [1m[32m4914[0m no batch error[K
  ok [1m[32m4915[0m no clear error[K
  ok [1m[32m4916[0m no concat error[K
  ok [1m[32m4917[0m correct number of entries[K
  ok [1m[32m4918[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=50 and reverse=true
[K

  ok [1m[32m4919[0m no open error[K
  ok [1m[32m4920[0m no batch error[K
  ok [1m[32m4921[0m no clear error[K
  ok [1m[32m4922[0m no concat error[K
  ok [1m[32m4923[0m correct number of entries[K
  ok [1m[32m4924[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=50
[K

  ok [1m[32m4925[0m no open error[K
  ok [1m[32m4926[0m no batch error[K
  ok [1m[32m4927[0m no clear error[K
  ok [1m[32m4928[0m no concat error[K
  ok [1m[32m4929[0m correct number of entries[K
  ok [1m[32m4930[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50
[0m[1B[1G
# # db#clear() with lte=50.5 (midway)
[K

  ok [1m[32m4931[0m no open error[K
  ok [1m[32m4932[0m no batch error[K
  ok [1m[32m4933[0m no clear error[K
  ok [1m[32m4934[0m no concat error[K
  ok [1m[32m4935[0m correct number of entries[K
  ok [1m[32m4936[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50.5 (midway)
[0m[1B[1G
# # db#clear() with lte=50555 (midway)
[K

  ok [1m[32m4937[0m no open error[K
  ok [1m[32m4938[0m no batch error[K
  ok [1m[32m4939[0m no clear error[K
  ok [1m[32m4940[0m no concat error[K
  ok [1m[32m4941[0m correct number of entries[K
  ok [1m[32m4942[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50555 (midway)
[0m[1B[1G
# # db#clear() with lt=50555 (midway)
[K

  ok [1m[32m4943[0m no open error[K
  ok [1m[32m4944[0m no batch error[K
  ok [1m[32m4945[0m no clear error[K
  ok [1m[32m4946[0m no concat error[K
  ok [1m[32m4947[0m correct number of entries[K
  ok [1m[32m4948[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50555 (midway)
[0m[1B[1G
# # db#clear() with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m4949[0m no open error[K
  ok [1m[32m4950[0m no batch error[K
  ok [1m[32m4951[0m no clear error[K
  ok [1m[32m4952[0m no concat error[K
  ok [1m[32m4953[0m correct number of entries[K
  ok [1m[32m4954[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m4955[0m no open error[K
  ok [1m[32m4956[0m no batch error[K
  ok [1m[32m4957[0m no clear error[K
  ok [1m[32m4958[0m no concat error[K
  ok [1m[32m4959[0m correct number of entries[K
  ok [1m[32m4960[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50 and reverse=true
[K

  ok [1m[32m4961[0m no open error[K
  ok [1m[32m4962[0m no batch error[K
  ok [1m[32m4963[0m no clear error[K
  ok [1m[32m4964[0m no concat error[K
  ok [1m[32m4965[0m correct number of entries[K
  ok [1m[32m4966[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=0
[K

  ok [1m[32m4967[0m no open error[K
  ok [1m[32m4968[0m no batch error[K
  ok [1m[32m4969[0m no clear error[K
  ok [1m[32m4970[0m no concat error[K
  ok [1m[32m4971[0m correct number of entries[K
  ok [1m[32m4972[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=0
[0m[1B[1G
# # db#clear() with lt=0
[K

  ok [1m[32m4973[0m no open error[K
  ok [1m[32m4974[0m no batch error[K
  ok [1m[32m4975[0m no clear error[K
  ok [1m[32m4976[0m no concat error[K
  ok [1m[32m4977[0m correct number of entries[K
  ok [1m[32m4978[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=0
[0m[1B[1G
# # db#clear() with gte=30 and lte=70
[K

  ok [1m[32m4979[0m no open error[K
  ok [1m[32m4980[0m no batch error[K
  ok [1m[32m4981[0m no clear error[K
  ok [1m[32m4982[0m no concat error[K
  ok [1m[32m4983[0m correct number of entries[K
  ok [1m[32m4984[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70
[0m[1B[1G
# # db#clear() with gt=29 and lt=71
[K

  ok [1m[32m4985[0m no open error[K
  ok [1m[32m4986[0m no batch error[K
  ok [1m[32m4987[0m no clear error[K
  ok [1m[32m4988[0m no concat error[K
  ok [1m[32m4989[0m correct number of entries[K
  ok [1m[32m4990[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71
[0m[1B[1G
# # db#clear() with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m4991[0m no open error[K
  ok [1m[32m4992[0m no batch error[K
  ok [1m[32m4993[0m no clear error[K
  ok [1m[32m4994[0m no concat error[K
  ok [1m[32m4995[0m correct number of entries[K
  ok [1m[32m4996[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # db#clear() with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m4997[0m no open error[K
  ok [1m[32m4998[0m no batch error[K
  ok [1m[32m4999[0m no clear error[K
  ok [1m[32m5000[0m no concat error[K
  ok [1m[32m5001[0m correct number of entries[K
  ok [1m[32m5002[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20
[K

  ok [1m[32m5003[0m no open error[K
  ok [1m[32m5004[0m no batch error[K
  ok [1m[32m5005[0m no clear error[K
  ok [1m[32m5006[0m no concat error[K
  ok [1m[32m5007[0m correct number of entries[K
  ok [1m[32m5008[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20
[0m[1B[1G
# # db#clear() with limit=20 and gte=20
[K

  ok [1m[32m5009[0m no open error[K
  ok [1m[32m5010[0m no batch error[K
  ok [1m[32m5011[0m no clear error[K
  ok [1m[32m5012[0m no concat error[K
  ok [1m[32m5013[0m correct number of entries[K
  ok [1m[32m5014[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and gte=20
[0m[1B[1G
# # db#clear() with limit=20 and reverse=true
[K

  ok [1m[32m5015[0m no open error[K
  ok [1m[32m5016[0m no batch error[K
  ok [1m[32m5017[0m no clear error[K
  ok [1m[32m5018[0m no concat error[K
  ok [1m[32m5019[0m correct number of entries[K
  ok [1m[32m5020[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m5021[0m no open error[K
  ok [1m[32m5022[0m no batch error[K
  ok [1m[32m5023[0m no clear error[K
  ok [1m[32m5024[0m no concat error[K
  ok [1m[32m5025[0m correct number of entries[K
  ok [1m[32m5026[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # db#clear() with limit=-1 should clear whole database
[K

  ok [1m[32m5027[0m no open error[K
  ok [1m[32m5028[0m no batch error[K
  ok [1m[32m5029[0m no clear error[K
  ok [1m[32m5030[0m no concat error[K
  ok [1m[32m5031[0m correct number of entries[K
  ok [1m[32m5032[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=-1 should clear whole database
[0m[1B[1G
# # db#clear() with limit=0 should not clear anything
[K

  ok [1m[32m5033[0m no open error[K
  ok [1m[32m5034[0m no batch error[K
  ok [1m[32m5035[0m no clear error[K
  ok [1m[32m5036[0m no concat error[K
  ok [1m[32m5037[0m correct number of entries[K
  ok [1m[32m5038[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=0 should not clear anything
[0m[1B[1G
# # db#clear() with lte after limit
[K

  ok [1m[32m5039[0m no open error[K
  ok [1m[32m5040[0m no batch error[K
  ok [1m[32m5041[0m no clear error[K
  ok [1m[32m5042[0m no concat error[K
  ok [1m[32m5043[0m correct number of entries[K
  ok [1m[32m5044[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after limit
[0m[1B[1G
# # db#clear() with lte before limit
[K

  ok [1m[32m5045[0m no open error[K
  ok [1m[32m5046[0m no batch error[K
  ok [1m[32m5047[0m no clear error[K
  ok [1m[32m5048[0m no concat error[K
  ok [1m[32m5049[0m correct number of entries[K
  ok [1m[32m5050[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte before limit
[0m[1B[1G
# # db#clear() with gte after database end
[K

  ok [1m[32m5051[0m no open error[K
  ok [1m[32m5052[0m no batch error[K
  ok [1m[32m5053[0m no clear error[K
  ok [1m[32m5054[0m no concat error[K
  ok [1m[32m5055[0m correct number of entries[K
  ok [1m[32m5056[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte after database end
[0m[1B[1G
# # db#clear() with gt after database end
[K

  ok [1m[32m5057[0m no open error[K
  ok [1m[32m5058[0m no batch error[K
  ok [1m[32m5059[0m no clear error[K
  ok [1m[32m5060[0m no concat error[K
  ok [1m[32m5061[0m correct number of entries[K
  ok [1m[32m5062[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt after database end
[0m[1B[1G
# # db#clear() with lte after database end and reverse=true
[K

  ok [1m[32m5063[0m no open error[K
  ok [1m[32m5064[0m no batch error[K
  ok [1m[32m5065[0m no clear error[K
  ok [1m[32m5066[0m no concat error[K
  ok [1m[32m5067[0m correct number of entries[K
  ok [1m[32m5068[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after database end and reverse=true
[0m[1B[1G
# # db#clear() with lte and gte after database and reverse=true
[K

  ok [1m[32m5069[0m no open error[K
  ok [1m[32m5070[0m no batch error[K
  ok [1m[32m5071[0m no clear error[K
  ok [1m[32m5072[0m no concat error[K
  ok [1m[32m5073[0m correct number of entries[K
  ok [1m[32m5074[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte and gte after database and reverse=true
[0m[1B[1G
# # db#clear() with lt and gt after database and reverse=true
[K

  ok [1m[32m5075[0m no open error[K
  ok [1m[32m5076[0m no batch error[K
  ok [1m[32m5077[0m no clear error[K
  ok [1m[32m5078[0m no concat error[K
  ok [1m[32m5079[0m correct number of entries[K
  ok [1m[32m5080[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # testCommon.factory() returns a unique database
[K

  ok [1m[32m5081[0m no error while opening db1[K
  ok [1m[32m5082[0m no error while opening db2[K
  ok [1m[32m5083[0m put key in db1[K
  ok [1m[32m5084[0m got items from db2[K
  ok [1m[32m5085[0m db2 should be empty[K
  ok [1m[32m5086[0m no error while closing db1[K
  ok [1m[32m5087[0m no error while closing db2[K
[1A[1G[1m[32m✓ # testCommon.factory() returns a unique database
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db has manifest
[K

  ok [1m[32m5088[0m manifest is object[K
  ok [1m[32m5089[0m additionalMethods is object[K
  ok [1m[32m5090[0m truthy: bufferKeys[K
  ok [1m[32m5091[0m truthy: snapshots[K
  ok [1m[32m5092[0m false: permanence[K
  ok [1m[32m5093[0m truthy: seek[K
  ok [1m[32m5094[0m truthy: clear[K
  ok [1m[32m5095[0m truthy: getMany[K
  ok [1m[32m5096[0m truthy: status[K
  ok [1m[32m5097[0m false: keyIterator[K
  ok [1m[32m5098[0m false: valueIterator[K
  ok [1m[32m5099[0m false: iteratorNextv[K
  ok [1m[32m5100[0m false: iteratorAll[K
  ok [1m[32m5101[0m false: idempotentOpen[K
  ok [1m[32m5102[0m false: passiveOpen[K
  ok [1m[32m5103[0m false: serialize[K
  ok [1m[32m5104[0m false: createIfMissing[K
  ok [1m[32m5105[0m false: errorIfExists[K
  ok [1m[32m5106[0m truthy: deferredOpen[K
  ok [1m[32m5107[0m truthy: openCallback[K
  ok [1m[32m5108[0m truthy: promises[K
  ok [1m[32m5109[0m truthy: streams[K
  ok [1m[32m5110[0m truthy: encodings[K
  ok [1m[32m5111[0m false: events[K
  ok [1m[32m5112[0m truthy: additionalMethods[K
  ok [1m[32m5113[0m manifest has unique identity[K
  ok [1m[32m5114[0m manifest.encodings has unique identity[K
  ok [1m[32m5115[0m manifest.additionalMethods has unique identity[K
  ok [1m[32m5116[0m no open error[K
  ok [1m[32m5117[0m manifest did not change after open[K
  ok [1m[32m5118[0m no close error[K
  ok [1m[32m5119[0m manifest did not change after close[K
[1A[1G[1m[32m✓ # db has manifest
[0m[1B[1G
# # manifest has status
[K

  ok [1m[32m5120[0m should be strictly equal[K
  ok [1m[32m5121[0m no open error[K
[1A[1G[1m[32m✓ # manifest has status
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # test database open method exists
[K

  ok [1m[32m5122[0m database object returned[K
  ok [1m[32m5123[0m open() function exists[K
[1A[1G[1m[32m✓ # test database open method exists
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp
[K

[1A[1G[1m[32m✓ # setUp
[0m[1B[1G
# # test database open, no options
[K

  ok [1m[32m5124[0m null[K
[1A[1G[1m[32m✓ # test database open, no options
[0m[1B[1G
# # test database open, options and callback
[K

  ok [1m[32m5125[0m null[K
[1A[1G[1m[32m✓ # test database open, options and callback
[0m[1B[1G
# # test database open, close and open
[K

  ok [1m[32m5126[0m null[K
  ok [1m[32m5127[0m undefined[K
  ok [1m[32m5128[0m null[K
[1A[1G[1m[32m✓ # test database open, close and open
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test close()
[K

  ok [1m[32m5129[0m undefined[K
[1A[1G[1m[32m✓ # test close()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test simple put()
[K

  ok [1m[32m5130[0m undefined[K
  ok [1m[32m5131[0m null[K
  ok [1m[32m5132[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple put()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test simple get()
[K

  ok [1m[32m5133[0m undefined[K
  ok [1m[32m5134[0m null[K
  ok [1m[32m5135[0m should be strictly equal[K
  ok [1m[32m5136[0m null[K
  ok [1m[32m5137[0m should be strictly equal[K
  ok [1m[32m5138[0m null[K
  ok [1m[32m5139[0m should be string if not buffer[K
  ok [1m[32m5140[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple get()
[0m[1B[1G
# # test simultaneous get()
[K

  ok [1m[32m5141[0m undefined[K
  ok [1m[32m5142[0m null[K
  ok [1m[32m5143[0m should be strictly equal[K
  ok [1m[32m5144[0m null[K
  ok [1m[32m5145[0m should be strictly equal[K
  ok [1m[32m5146[0m null[K
  ok [1m[32m5147[0m should be strictly equal[K
  ok [1m[32m5148[0m null[K
  ok [1m[32m5149[0m should be strictly equal[K
  ok [1m[32m5150[0m null[K
  ok [1m[32m5151[0m should be strictly equal[K
  ok [1m[32m5152[0m null[K
  ok [1m[32m5153[0m should be strictly equal[K
  ok [1m[32m5154[0m null[K
  ok [1m[32m5155[0m should be strictly equal[K
  ok [1m[32m5156[0m null[K
  ok [1m[32m5157[0m should be strictly equal[K
  ok [1m[32m5158[0m null[K
  ok [1m[32m5159[0m should be strictly equal[K
  ok [1m[32m5160[0m null[K
  ok [1m[32m5161[0m should be strictly equal[K
  ok [1m[32m5162[0m should error[K
  ok [1m[32m5163[0m should have correct error message[K
  ok [1m[32m5164[0m value is undefined[K
  ok [1m[32m5165[0m should error[K
  ok [1m[32m5166[0m should have correct error message[K
  ok [1m[32m5167[0m value is undefined[K
  ok [1m[32m5168[0m should error[K
  ok [1m[32m5169[0m should have correct error message[K
  ok [1m[32m5170[0m value is undefined[K
  ok [1m[32m5171[0m should error[K
  ok [1m[32m5172[0m should have correct error message[K
  ok [1m[32m5173[0m value is undefined[K
  ok [1m[32m5174[0m should error[K
  ok [1m[32m5175[0m should have correct error message[K
  ok [1m[32m5176[0m value is undefined[K
  ok [1m[32m5177[0m should error[K
  ok [1m[32m5178[0m should have correct error message[K
  ok [1m[32m5179[0m value is undefined[K
  ok [1m[32m5180[0m should error[K
  ok [1m[32m5181[0m should have correct error message[K
  ok [1m[32m5182[0m value is undefined[K
  ok [1m[32m5183[0m should error[K
  ok [1m[32m5184[0m should have correct error message[K
  ok [1m[32m5185[0m value is undefined[K
  ok [1m[32m5186[0m should error[K
  ok [1m[32m5187[0m should have correct error message[K
  ok [1m[32m5188[0m value is undefined[K
  ok [1m[32m5189[0m should error[K
  ok [1m[32m5190[0m should have correct error message[K
  ok [1m[32m5191[0m value is undefined[K
[1A[1G[1m[32m✓ # test simultaneous get()
[0m[1B[1G
# # test get() not found error is asynchronous
[K

  ok [1m[32m5192[0m should error[K
  ok [1m[32m5193[0m should have correct error message[K
  ok [1m[32m5194[0m value is undefined[K
  ok [1m[32m5195[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() not found error is asynchronous
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test simple del()
[K

  ok [1m[32m5196[0m undefined[K
  ok [1m[32m5197[0m undefined[K
  ok [1m[32m5198[0m entry properly deleted[K
  ok [1m[32m5199[0m value is undefined[K
  ok [1m[32m5200[0m NotFound error[K
[1A[1G[1m[32m✓ # test simple del()
[0m[1B[1G
# # test del on non-existent key
[K

  ok [1m[32m5201[0m undefined[K
[1A[1G[1m[32m✓ # test del on non-existent key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test get() with null key causes error
[K

  ok [1m[32m5202[0m has error[K
  ok [1m[32m5203[0m should be truthy[K
  ok [1m[32m5204[0m correct error message[K
  ok [1m[32m5205[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with null key causes error
[0m[1B[1G
# # test del() with null key causes error
[K

  ok [1m[32m5206[0m has error[K
  ok [1m[32m5207[0m should be truthy[K
  ok [1m[32m5208[0m correct error message[K
  ok [1m[32m5209[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with null key causes error
[0m[1B[1G
# # test getMany() with null key causes error
[K

  ok [1m[32m5210[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5211[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5212[0m has error[K
  ok [1m[32m5213[0m should be truthy[K
  ok [1m[32m5214[0m correct error message[K
  ok [1m[32m5215[0m has error[K
  ok [1m[32m5216[0m should be truthy[K
  ok [1m[32m5217[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with null key causes error
[0m[1B[1G
# # test put() with null key causes error
[K

  ok [1m[32m5218[0m has error[K
  ok [1m[32m5219[0m should be truthy[K
  ok [1m[32m5220[0m correct error message[K
  ok [1m[32m5221[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null key causes error
[0m[1B[1G
# # test get() with undefined key causes error
[K

  ok [1m[32m5222[0m has error[K
  ok [1m[32m5223[0m should be truthy[K
  ok [1m[32m5224[0m correct error message[K
  ok [1m[32m5225[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with undefined key causes error
[0m[1B[1G
# # test del() with undefined key causes error
[K

  ok [1m[32m5226[0m has error[K
  ok [1m[32m5227[0m should be truthy[K
  ok [1m[32m5228[0m correct error message[K
  ok [1m[32m5229[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with undefined key causes error
[0m[1B[1G
# # test getMany() with undefined key causes error
[K

  ok [1m[32m5230[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5231[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5232[0m has error[K
  ok [1m[32m5233[0m should be truthy[K
  ok [1m[32m5234[0m correct error message[K
  ok [1m[32m5235[0m has error[K
  ok [1m[32m5236[0m should be truthy[K
  ok [1m[32m5237[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with undefined key causes error
[0m[1B[1G
# # test put() with undefined key causes error
[K

  ok [1m[32m5238[0m has error[K
  ok [1m[32m5239[0m should be truthy[K
  ok [1m[32m5240[0m correct error message[K
  ok [1m[32m5241[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined key causes error
[0m[1B[1G
# # test get() with empty String key causes error
[K

  ok [1m[32m5242[0m has error[K
  ok [1m[32m5243[0m should be truthy[K
  ok [1m[32m5244[0m correct error message[K
  ok [1m[32m5245[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty String key causes error
[0m[1B[1G
# # test del() with empty String key causes error
[K

  ok [1m[32m5246[0m has error[K
  ok [1m[32m5247[0m should be truthy[K
  ok [1m[32m5248[0m correct error message[K
  ok [1m[32m5249[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty String key causes error
[0m[1B[1G
# # test getMany() with empty String key causes error
[K

  ok [1m[32m5250[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5251[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5252[0m has error[K
  ok [1m[32m5253[0m should be truthy[K
  ok [1m[32m5254[0m correct error message[K
  ok [1m[32m5255[0m has error[K
  ok [1m[32m5256[0m should be truthy[K
  ok [1m[32m5257[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty String key causes error
[0m[1B[1G
# # test put() with empty String key causes error
[K

  ok [1m[32m5258[0m has error[K
  ok [1m[32m5259[0m should be truthy[K
  ok [1m[32m5260[0m correct error message[K
  ok [1m[32m5261[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty String key causes error
[0m[1B[1G
# # test get() with empty Buffer key causes error
[K

  ok [1m[32m5262[0m has error[K
  ok [1m[32m5263[0m should be truthy[K
  ok [1m[32m5264[0m correct error message[K
  ok [1m[32m5265[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Buffer key causes error
[0m[1B[1G
# # test del() with empty Buffer key causes error
[K

  ok [1m[32m5266[0m has error[K
  ok [1m[32m5267[0m should be truthy[K
  ok [1m[32m5268[0m correct error message[K
  ok [1m[32m5269[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Buffer key causes error
[0m[1B[1G
# # test getMany() with empty Buffer key causes error
[K

  ok [1m[32m5270[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5271[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5272[0m has error[K
  ok [1m[32m5273[0m should be truthy[K
  ok [1m[32m5274[0m correct error message[K
  ok [1m[32m5275[0m has error[K
  ok [1m[32m5276[0m should be truthy[K
  ok [1m[32m5277[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Buffer key causes error
[0m[1B[1G
# # test put() with empty Buffer key causes error
[K

  ok [1m[32m5278[0m has error[K
  ok [1m[32m5279[0m should be truthy[K
  ok [1m[32m5280[0m correct error message[K
  ok [1m[32m5281[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Buffer key causes error
[0m[1B[1G
# # test get() with empty Array key causes error
[K

  ok [1m[32m5282[0m has error[K
  ok [1m[32m5283[0m should be truthy[K
  ok [1m[32m5284[0m correct error message[K
  ok [1m[32m5285[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test get() with empty Array key causes error
[0m[1B[1G
# # test del() with empty Array key causes error
[K

  ok [1m[32m5286[0m has error[K
  ok [1m[32m5287[0m should be truthy[K
  ok [1m[32m5288[0m correct error message[K
  ok [1m[32m5289[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test del() with empty Array key causes error
[0m[1B[1G
# # test getMany() with empty Array key causes error
[K

  ok [1m[32m5290[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5291[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5292[0m has error[K
  ok [1m[32m5293[0m should be truthy[K
  ok [1m[32m5294[0m correct error message[K
  ok [1m[32m5295[0m has error[K
  ok [1m[32m5296[0m should be truthy[K
  ok [1m[32m5297[0m correct error message[K
[1A[1G[1m[32m✓ # test getMany() with empty Array key causes error
[0m[1B[1G
# # test put() with empty Array key causes error
[K

  ok [1m[32m5298[0m has error[K
  ok [1m[32m5299[0m should be truthy[K
  ok [1m[32m5300[0m correct error message[K
  ok [1m[32m5301[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with empty Array key causes error
[0m[1B[1G
# # test put() with null value causes error
[K

  ok [1m[32m5302[0m has error[K
  ok [1m[32m5303[0m should be truthy[K
  ok [1m[32m5304[0m correct error message[K
  ok [1m[32m5305[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with null value causes error
[0m[1B[1G
# # test put() with undefined value causes error
[K

  ok [1m[32m5306[0m has error[K
  ok [1m[32m5307[0m should be truthy[K
  ok [1m[32m5308[0m correct error message[K
  ok [1m[32m5309[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put() with undefined value causes error
[0m[1B[1G
# # test put()/get()/del() with `0` key
[K

  ok [1m[32m5310[0m undefined[K
  ok [1m[32m5311[0m no error, has key/value for ``0` key`[K
  ok [1m[32m5312[0m is a string[K
  ok [1m[32m5313[0m should be strictly equal[K
  ok [1m[32m5314[0m no error, deleted key/value for ``0` key`[K
  ok [1m[32m5315[0m entry properly deleted[K
  ok [1m[32m5316[0m should have correct error message[K
  ok [1m[32m5317[0m value is undefined[K
  ok [1m[32m5318[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` key
[0m[1B[1G
# # test put()/get()/del() with long String key
[K

  ok [1m[32m5319[0m undefined[K
  ok [1m[32m5320[0m no error, has key/value for `long String key`[K
  ok [1m[32m5321[0m is a string[K
  ok [1m[32m5322[0m should be strictly equal[K
  ok [1m[32m5323[0m no error, deleted key/value for `long String key`[K
  ok [1m[32m5324[0m entry properly deleted[K
  ok [1m[32m5325[0m should have correct error message[K
  ok [1m[32m5326[0m value is undefined[K
  ok [1m[32m5327[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String key
[0m[1B[1G
# # test put()/get()/del() with Buffer key
[K

  ok [1m[32m5328[0m undefined[K
  ok [1m[32m5329[0m no error, has key/value for `Buffer key`[K
  ok [1m[32m5330[0m is a string[K
  ok [1m[32m5331[0m should be strictly equal[K
  ok [1m[32m5332[0m no error, deleted key/value for `Buffer key`[K
  ok [1m[32m5333[0m entry properly deleted[K
  ok [1m[32m5334[0m should have correct error message[K
  ok [1m[32m5335[0m value is undefined[K
  ok [1m[32m5336[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer key
[0m[1B[1G
# # test put()/get()/del() with Array value
[K

  ok [1m[32m5337[0m undefined[K
  ok [1m[32m5338[0m no error, has key/value for `Array value`[K
  ok [1m[32m5339[0m is a string[K
  ok [1m[32m5340[0m should be strictly equal[K
  ok [1m[32m5341[0m no error, deleted key/value for `Array value`[K
  ok [1m[32m5342[0m entry properly deleted[K
  ok [1m[32m5343[0m should have correct error message[K
  ok [1m[32m5344[0m value is undefined[K
  ok [1m[32m5345[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array value
[0m[1B[1G
# # test put()/get()/del() with `false` value
[K

  ok [1m[32m5346[0m undefined[K
  ok [1m[32m5347[0m no error, has key/value for ``false` value`[K
  ok [1m[32m5348[0m is a string[K
  ok [1m[32m5349[0m should be strictly equal[K
  ok [1m[32m5350[0m no error, deleted key/value for ``false` value`[K
  ok [1m[32m5351[0m entry properly deleted[K
  ok [1m[32m5352[0m should have correct error message[K
  ok [1m[32m5353[0m value is undefined[K
  ok [1m[32m5354[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `false` value
[0m[1B[1G
# # test put()/get()/del() with `0` value
[K

  ok [1m[32m5355[0m undefined[K
  ok [1m[32m5356[0m no error, has key/value for ``0` value`[K
  ok [1m[32m5357[0m is a string[K
  ok [1m[32m5358[0m should be strictly equal[K
  ok [1m[32m5359[0m no error, deleted key/value for ``0` value`[K
  ok [1m[32m5360[0m entry properly deleted[K
  ok [1m[32m5361[0m should have correct error message[K
  ok [1m[32m5362[0m value is undefined[K
  ok [1m[32m5363[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `0` value
[0m[1B[1G
# # test put()/get()/del() with `NaN` value
[K

  ok [1m[32m5364[0m undefined[K
  ok [1m[32m5365[0m no error, has key/value for ``NaN` value`[K
  ok [1m[32m5366[0m is a string[K
  ok [1m[32m5367[0m should be strictly equal[K
  ok [1m[32m5368[0m no error, deleted key/value for ``NaN` value`[K
  ok [1m[32m5369[0m entry properly deleted[K
  ok [1m[32m5370[0m should have correct error message[K
  ok [1m[32m5371[0m value is undefined[K
  ok [1m[32m5372[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with `NaN` value
[0m[1B[1G
# # test put()/get()/del() with empty String value
[K

  ok [1m[32m5373[0m undefined[K
  ok [1m[32m5374[0m no error, has key/value for `empty String value`[K
  ok [1m[32m5375[0m is a string[K
  ok [1m[32m5376[0m should be strictly equal[K
  ok [1m[32m5377[0m no error, deleted key/value for `empty String value`[K
  ok [1m[32m5378[0m entry properly deleted[K
  ok [1m[32m5379[0m should have correct error message[K
  ok [1m[32m5380[0m value is undefined[K
  ok [1m[32m5381[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty String value
[0m[1B[1G
# # test put()/get()/del() with empty Buffer value
[K

  ok [1m[32m5382[0m undefined[K
  ok [1m[32m5383[0m no error, has key/value for `empty Buffer value`[K
  ok [1m[32m5384[0m is a string[K
  ok [1m[32m5385[0m should be strictly equal[K
  ok [1m[32m5386[0m no error, deleted key/value for `empty Buffer value`[K
  ok [1m[32m5387[0m entry properly deleted[K
  ok [1m[32m5388[0m should have correct error message[K
  ok [1m[32m5389[0m value is undefined[K
  ok [1m[32m5390[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Buffer value
[0m[1B[1G
# # test put()/get()/del() with empty Array value
[K

  ok [1m[32m5391[0m undefined[K
  ok [1m[32m5392[0m no error, has key/value for `empty Array value`[K
  ok [1m[32m5393[0m is a string[K
  ok [1m[32m5394[0m should be strictly equal[K
  ok [1m[32m5395[0m no error, deleted key/value for `empty Array value`[K
  ok [1m[32m5396[0m entry properly deleted[K
  ok [1m[32m5397[0m should have correct error message[K
  ok [1m[32m5398[0m value is undefined[K
  ok [1m[32m5399[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with empty Array value
[0m[1B[1G
# # test put()/get()/del() with long String value
[K

  ok [1m[32m5400[0m undefined[K
  ok [1m[32m5401[0m no error, has key/value for `long String value`[K
  ok [1m[32m5402[0m is a string[K
  ok [1m[32m5403[0m should be strictly equal[K
  ok [1m[32m5404[0m no error, deleted key/value for `long String value`[K
  ok [1m[32m5405[0m entry properly deleted[K
  ok [1m[32m5406[0m should have correct error message[K
  ok [1m[32m5407[0m value is undefined[K
  ok [1m[32m5408[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with long String value
[0m[1B[1G
# # test put()/get()/del() with Buffer value
[K

  ok [1m[32m5409[0m undefined[K
  ok [1m[32m5410[0m no error, has key/value for `Buffer value`[K
  ok [1m[32m5411[0m is a string[K
  ok [1m[32m5412[0m should be strictly equal[K
  ok [1m[32m5413[0m no error, deleted key/value for `Buffer value`[K
  ok [1m[32m5414[0m entry properly deleted[K
  ok [1m[32m5415[0m should have correct error message[K
  ok [1m[32m5416[0m value is undefined[K
  ok [1m[32m5417[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Buffer value
[0m[1B[1G
# # test put()/get()/del() with Array key
[K

  ok [1m[32m5418[0m undefined[K
  ok [1m[32m5419[0m no error, has key/value for `Array key`[K
  ok [1m[32m5420[0m is a string[K
  ok [1m[32m5421[0m should be strictly equal[K
  ok [1m[32m5422[0m no error, deleted key/value for `Array key`[K
  ok [1m[32m5423[0m entry properly deleted[K
  ok [1m[32m5424[0m should have correct error message[K
  ok [1m[32m5425[0m value is undefined[K
  ok [1m[32m5426[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test put()/get()/del() with Array key
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test getMany() requires an array argument (callback)
[K

  ok [1m[32m5427[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5428[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5429[0m should be strictly equal[K
  ok [1m[32m5430[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (callback)
[0m[1B[1G
# # test getMany() requires an array argument (promise)
[K

  ok [1m[32m5431[0m should be strictly equal[K
  ok [1m[32m5432[0m should be strictly equal[K
  ok [1m[32m5433[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() requires an array argument (promise)
[0m[1B[1G
# # test getMany() support is reflected in manifest
[K

  ok [1m[32m5434[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() support is reflected in manifest
[0m[1B[1G
# # test simple getMany()
[K

  ok [1m[32m5435[0m undefined[K
  ok [1m[32m5436[0m null[K
  ok [1m[32m5437[0m got an array[K
  ok [1m[32m5438[0m array has 1 element[K
  ok [1m[32m5439[0m should be strictly equal[K
  ok [1m[32m5440[0m null[K
  ok [1m[32m5441[0m got an array[K
  ok [1m[32m5442[0m array has 1 element[K
  ok [1m[32m5443[0m should be strictly equal[K
  ok [1m[32m5444[0m null[K
  ok [1m[32m5445[0m should be string if not buffer[K
  ok [1m[32m5446[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simple getMany()
[0m[1B[1G
# # test getMany() with multiple keys
[K

  ok [1m[32m5447[0m undefined[K
  ok [1m[32m5448[0m null[K
  ok [1m[32m5449[0m should be deeply equivalent[K
  ok [1m[32m5450[0m null[K
  ok [1m[32m5451[0m maintains order of input keys[K
[1A[1G[1m[32m✓ # test getMany() with multiple keys
[0m[1B[1G
# # test empty getMany()
[K

  ok [1m[32m5452[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5453[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5454[0m null[K
  ok [1m[32m5455[0m should be deeply equivalent[K
  ok [1m[32m5456[0m null[K
  ok [1m[32m5457[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test empty getMany()
[0m[1B[1G
# # test not-found getMany()
[K

  ok [1m[32m5458[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5459[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5460[0m null[K
  ok [1m[32m5461[0m should be deeply equivalent[K
  ok [1m[32m5462[0m null[K
  ok [1m[32m5463[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test not-found getMany()
[0m[1B[1G
# # test getMany() with promise
[K

  ok [1m[32m5464[0m should be deeply equivalent[K
  ok [1m[32m5465[0m should be deeply equivalent[K
  ok [1m[32m5466[0m should be deeply equivalent[K
  ok [1m[32m5467[0m should be deeply equivalent[K
  ok [1m[32m5468[0m should be deeply equivalent[K
  ok [1m[32m5469[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test getMany() with promise
[0m[1B[1G
# # test simultaneous getMany()
[K

  ok [1m[32m5470[0m undefined[K
  ok [1m[32m5471[0m null[K
  ok [1m[32m5472[0m should be strictly equal[K
  ok [1m[32m5473[0m should be strictly equal[K
  ok [1m[32m5474[0m null[K
  ok [1m[32m5475[0m should be strictly equal[K
  ok [1m[32m5476[0m should be strictly equal[K
  ok [1m[32m5477[0m null[K
  ok [1m[32m5478[0m should be strictly equal[K
  ok [1m[32m5479[0m should be strictly equal[K
  ok [1m[32m5480[0m null[K
  ok [1m[32m5481[0m should be strictly equal[K
  ok [1m[32m5482[0m should be strictly equal[K
  ok [1m[32m5483[0m null[K
  ok [1m[32m5484[0m should be strictly equal[K
  ok [1m[32m5485[0m should be strictly equal[K
  ok [1m[32m5486[0m null[K
  ok [1m[32m5487[0m should be strictly equal[K
  ok [1m[32m5488[0m should be strictly equal[K
  ok [1m[32m5489[0m null[K
  ok [1m[32m5490[0m should be strictly equal[K
  ok [1m[32m5491[0m should be strictly equal[K
  ok [1m[32m5492[0m null[K
  ok [1m[32m5493[0m should be strictly equal[K
  ok [1m[32m5494[0m should be strictly equal[K
  ok [1m[32m5495[0m null[K
  ok [1m[32m5496[0m should be strictly equal[K
  ok [1m[32m5497[0m should be strictly equal[K
  ok [1m[32m5498[0m null[K
  ok [1m[32m5499[0m should be strictly equal[K
  ok [1m[32m5500[0m should be strictly equal[K
  ok [1m[32m5501[0m null[K
  ok [1m[32m5502[0m should be deeply equivalent[K
  ok [1m[32m5503[0m null[K
  ok [1m[32m5504[0m should be deeply equivalent[K
  ok [1m[32m5505[0m null[K
  ok [1m[32m5506[0m should be deeply equivalent[K
  ok [1m[32m5507[0m null[K
  ok [1m[32m5508[0m should be deeply equivalent[K
  ok [1m[32m5509[0m null[K
  ok [1m[32m5510[0m should be deeply equivalent[K
  ok [1m[32m5511[0m null[K
  ok [1m[32m5512[0m should be deeply equivalent[K
  ok [1m[32m5513[0m null[K
  ok [1m[32m5514[0m should be deeply equivalent[K
  ok [1m[32m5515[0m null[K
  ok [1m[32m5516[0m should be deeply equivalent[K
  ok [1m[32m5517[0m null[K
  ok [1m[32m5518[0m should be deeply equivalent[K
  ok [1m[32m5519[0m null[K
  ok [1m[32m5520[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test simultaneous getMany()
[0m[1B[1G
# # test getMany() on new db
[K

  ok [1m[32m5521[0m should be strictly equal[K
  ok [1m[32m5522[0m should be strictly equal[K
  ok [1m[32m5523[0m (unnamed assert)[K
  ok [1m[32m5524[0m should be strictly equal[K
  ok [1m[32m5525[0m should be strictly equal[K
  ok [1m[32m5526[0m (unnamed assert)[K
  ok [1m[32m5527[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5528[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5529[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5530[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5531[0m LevelUP[K
  ok [1m[32m5532[0m LevelUP[K
  ok [1m[32m5533[0m no error[K
  ok [1m[32m5534[0m should be deeply equivalent[K
  ok [1m[32m5535[0m no error[K
  ok [1m[32m5536[0m should be deeply equivalent[K
  ok [1m[32m5537[0m no error[K
  ok [1m[32m5538[0m should be deeply equivalent[K
  ok [1m[32m5539[0m no error[K
  ok [1m[32m5540[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test getMany() on new db
[0m[1B[1G
# # test getMany() on opening db
[K

  ok [1m[32m5541[0m callback (open) is asynchronous[K
  ok [1m[32m5542[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5543[0m callback (open) is asynchronous[K
  ok [1m[32m5544[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5545[0m LevelUP[K
  ok [1m[32m5546[0m LevelUP[K
  ok [1m[32m5547[0m no error[K
  ok [1m[32m5548[0m should be deeply equivalent[K
  ok [1m[32m5549[0m no error[K
  ok [1m[32m5550[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test getMany() on opening db
[0m[1B[1G
# # test getMany() on closed db
[K

  ok [1m[32m5551[0m null[K
  ok [1m[32m5552[0m should be strictly equal[K
  ok [1m[32m5553[0m undefined[K
  ok [1m[32m5554[0m should be strictly equal[K
  ok [1m[32m5555[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5556[0m should be strictly equal[K
  ok [1m[32m5557[0m null[K
  ok [1m[32m5558[0m should be strictly equal[K
  ok [1m[32m5559[0m undefined[K
  ok [1m[32m5560[0m should be strictly equal[K
  ok [1m[32m5561[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5562[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closed db
[0m[1B[1G
# # test getMany() on closing db
[K

  ok [1m[32m5563[0m null[K
  ok [1m[32m5564[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5565[0m undefined[K
  ok [1m[32m5566[0m should be strictly equal[K
  ok [1m[32m5567[0m null[K
  ok [1m[32m5568[0m callback (anonymous) is asynchronous[K
  ok [1m[32m5569[0m undefined[K
  ok [1m[32m5570[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test getMany() on closing db
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test batch() with missing `value`
[K

  ok [1m[32m5571[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with missing `value`
[0m[1B[1G
# # test batch() with null or undefined `value`
[K

  ok [1m[32m5572[0m correct error message[K
  ok [1m[32m5573[0m correct error message[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `value`
[0m[1B[1G
# # test batch() with missing `key`
[K

  ok [1m[32m5574[0m got error[K
  ok [1m[32m5575[0m correct error message[K
  ok [1m[32m5576[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key`
[0m[1B[1G
# # test batch() with null or undefined `key`
[K

  ok [1m[32m5577[0m got error[K
  ok [1m[32m5578[0m correct error message[K
  ok [1m[32m5579[0m callback is asynchronous[K
  ok [1m[32m5580[0m got error[K
  ok [1m[32m5581[0m correct error message[K
  ok [1m[32m5582[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null or undefined `key`
[0m[1B[1G
# # test batch() with empty `key`
[K

  ok [1m[32m5583[0m got error[K
  ok [1m[32m5584[0m correct error message[K
  ok [1m[32m5585[0m callback is asynchronous[K
  ok [1m[32m5586[0m got error[K
  ok [1m[32m5587[0m correct error message[K
  ok [1m[32m5588[0m callback is asynchronous[K
  ok [1m[32m5589[0m got error[K
  ok [1m[32m5590[0m correct error message[K
  ok [1m[32m5591[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty `key`
[0m[1B[1G
# # test batch() with missing `key` and `value`
[K

  ok [1m[32m5592[0m got error[K
  ok [1m[32m5593[0m correct error message[K
  ok [1m[32m5594[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `key` and `value`
[0m[1B[1G
# # test batch() with missing `type`
[K

  ok [1m[32m5595[0m got error[K
  ok [1m[32m5596[0m correct error message[K
  ok [1m[32m5597[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing `type`
[0m[1B[1G
# # test batch() with wrong `type`
[K

  ok [1m[32m5598[0m got error[K
  ok [1m[32m5599[0m correct error message[K
  ok [1m[32m5600[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with wrong `type`
[0m[1B[1G
# # test batch() with missing array
[K

  ok [1m[32m5601[0m got error[K
  ok [1m[32m5602[0m correct error message[K
  ok [1m[32m5603[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with missing array
[0m[1B[1G
# # test batch() with undefined array
[K

  ok [1m[32m5604[0m got error[K
  ok [1m[32m5605[0m correct error message[K
  ok [1m[32m5606[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined array
[0m[1B[1G
# # test batch() with null array
[K

  ok [1m[32m5607[0m got error[K
  ok [1m[32m5608[0m correct error message[K
  ok [1m[32m5609[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null array
[0m[1B[1G
# # test batch() with null options
[K

  ok [1m[32m5610[0m undefined[K
[1A[1G[1m[32m✓ # test batch() with null options
[0m[1B[1G
# # test batch() with null element
[K

  ok [1m[32m5611[0m got error[K
  ok [1m[32m5612[0m correct error message[K
  ok [1m[32m5613[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with null element
[0m[1B[1G
# # test batch() with undefined element
[K

  ok [1m[32m5614[0m got error[K
  ok [1m[32m5615[0m correct error message[K
  ok [1m[32m5616[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with undefined element
[0m[1B[1G
# # test batch() with number element
[K

  ok [1m[32m5617[0m got error[K
  ok [1m[32m5618[0m correct error message[K
  ok [1m[32m5619[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with number element
[0m[1B[1G
# # test batch() with boolean element
[K

  ok [1m[32m5620[0m got error[K
  ok [1m[32m5621[0m correct error message[K
  ok [1m[32m5622[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with boolean element
[0m[1B[1G
# # test batch() with empty array
[K

  ok [1m[32m5623[0m no error from batch()[K
  ok [1m[32m5624[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch() with empty array
[0m[1B[1G
# # test simple batch()
[K

  ok [1m[32m5625[0m undefined[K
  ok [1m[32m5626[0m null[K
  ok [1m[32m5627[0m should be strictly equal[K
  ok [1m[32m5628[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test simple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m5629[0m undefined[K
  ok [1m[32m5630[0m null[K
  ok [1m[32m5631[0m should be strictly equal[K
  ok [1m[32m5632[0m should be strictly equal[K
  ok [1m[32m5633[0m entry not found[K
  ok [1m[32m5634[0m value is undefined[K
  ok [1m[32m5635[0m NotFound error[K
  ok [1m[32m5636[0m null[K
  ok [1m[32m5637[0m should be strictly equal[K
  ok [1m[32m5638[0m should be strictly equal[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # test multiple batch()
[K

  ok [1m[32m5639[0m should error[K
  ok [1m[32m5640[0m callback is asynchronous[K
  ok [1m[32m5641[0m should not be found[K
  ok [1m[32m5642[0m should not be found[K
[1A[1G[1m[32m✓ # test multiple batch()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test batch has db reference
[K

  ok [1m[32m5643[0m should be truthy[K
[1A[1G[1m[32m✓ # test batch has db reference
[0m[1B[1G
# # test batch#put() with missing `value`
[K

  ok [1m[32m5644[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `value`
[0m[1B[1G
# # test batch#put() with missing `key`
[K

  ok [1m[32m5645[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key`
[0m[1B[1G
# # test batch#put() with null `key`
[K

  ok [1m[32m5646[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null `key`
[0m[1B[1G
# # test batch#put() with missing `key` and `value`
[K

  ok [1m[32m5647[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with missing `key` and `value`
[0m[1B[1G
# # test batch#put() with null or undefined `value`
[K

  ok [1m[32m5648[0m correct error message[K
  ok [1m[32m5649[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() with null or undefined `value`
[0m[1B[1G
# # test batch#del() with missing `key`
[K

  ok [1m[32m5650[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with missing `key`
[0m[1B[1G
# # test batch#del() with null or undefined `key`
[K

  ok [1m[32m5651[0m correct error message[K
  ok [1m[32m5652[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() with null or undefined `key`
[0m[1B[1G
# # test batch#clear() doesn't throw
[K

[1A[1G[1m[32m✓ # test batch#clear() doesn't throw
[0m[1B[1G
# # test batch#put() after write()
[K

  ok [1m[32m5653[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#put() after write()
[0m[1B[1G
# # test batch#del() after write()
[K

  ok [1m[32m5654[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#del() after write()
[0m[1B[1G
# # test batch#clear() after write()
[K

  ok [1m[32m5655[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#clear() after write()
[0m[1B[1G
# # test batch#write() after write()
[K

  ok [1m[32m5656[0m correct error message[K
[1A[1G[1m[32m✓ # test batch#write() after write()
[0m[1B[1G
# # test batch#write() with no operations
[K

  ok [1m[32m5657[0m no error from write()[K
  ok [1m[32m5658[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test batch#write() with no operations
[0m[1B[1G
# # test basic batch
[K

  ok [1m[32m5659[0m undefined[K
  ok [1m[32m5660[0m undefined[K
  ok [1m[32m5661[0m undefined[K
  ok [1m[32m5662[0m correct number of entries[K
  ok [1m[32m5663[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test basic batch
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test iterator has db reference
[K

  ok [1m[32m5664[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator has db reference
[0m[1B[1G
# # test iterator#next returns this in callback mode
[K

  ok [1m[32m5665[0m should be truthy[K
[1A[1G[1m[32m✓ # test iterator#next returns this in callback mode
[0m[1B[1G
# # test twice iterator#end() callback with error
[K

  ok [1m[32m5666[0m undefined[K
  ok [1m[32m5667[0m returned error[K
  ok [1m[32m5668[0m correct error[K
  ok [1m[32m5669[0m should be strictly equal[K
  ok [1m[32m5670[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test twice iterator#end() callback with error
[0m[1B[1G
# # test iterator#next after iterator#end() callback with error
[K

  ok [1m[32m5671[0m undefined[K
  ok [1m[32m5672[0m returned error[K
  ok [1m[32m5673[0m correct error[K
  ok [1m[32m5674[0m correct message[K
  ok [1m[32m5675[0m callback is asynchronous[K
[1A[1G[1m[32m✓ # test iterator#next after iterator#end() callback with error
[0m[1B[1G
# # test twice iterator#next() throws
[K

  ok [1m[32m5676[0m returned error[K
  ok [1m[32m5677[0m correct error[K
  ok [1m[32m5678[0m should be strictly equal[K
  ok [1m[32m5679[0m callback is asynchronous[K
  ok [1m[32m5680[0m null[K
  ok [1m[32m5681[0m undefined[K
[1A[1G[1m[32m✓ # test twice iterator#next() throws
[0m[1B[1G
# # test simple iterator()
[K

  ok [1m[32m5682[0m undefined[K
  ok [1m[32m5683[0m null[K
  ok [1m[32m5684[0m key argument is a string[K
  ok [1m[32m5685[0m value argument is a string[K
  ok [1m[32m5686[0m correct key[K
  ok [1m[32m5687[0m correct value[K
  ok [1m[32m5688[0m null[K
  ok [1m[32m5689[0m key argument is a string[K
  ok [1m[32m5690[0m value argument is a string[K
  ok [1m[32m5691[0m correct key[K
  ok [1m[32m5692[0m correct value[K
  ok [1m[32m5693[0m null[K
  ok [1m[32m5694[0m key argument is a string[K
  ok [1m[32m5695[0m value argument is a string[K
  ok [1m[32m5696[0m correct key[K
  ok [1m[32m5697[0m correct value[K
  ok [1m[32m5698[0m null[K
  ok [1m[32m5699[0m err argument is nullish[K
  ok [1m[32m5700[0m key argument is undefined[K
  ok [1m[32m5701[0m value argument is undefined[K
  ok [1m[32m5702[0m correct number of entries[K
[1A[1G[1m[32m✓ # test simple iterator()
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test full data collection
[K

  ok [1m[32m5703[0m undefined[K
  ok [1m[32m5704[0m correct number of entries[K
  ok [1m[32m5705[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection
[0m[1B[1G
# # test full data collection (flipped)
[K

  ok [1m[32m5706[0m undefined[K
  ok [1m[32m5707[0m correct number of entries[K
  ok [1m[32m5708[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test full data collection (flipped)
[0m[1B[1G
# # test iterator with reverse=true
[K

  ok [1m[32m5709[0m undefined[K
  ok [1m[32m5710[0m correct number of entries[K
  ok [1m[32m5711[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with reverse=true
[0m[1B[1G
# # test iterator with gte=00
[K

  ok [1m[32m5712[0m undefined[K
  ok [1m[32m5713[0m correct number of entries[K
  ok [1m[32m5714[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00
[0m[1B[1G
# # test iterator with gte=00 (flipped)
[K

  ok [1m[32m5715[0m undefined[K
  ok [1m[32m5716[0m correct number of entries[K
  ok [1m[32m5717[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=00 (flipped)
[0m[1B[1G
# # test iterator with gte=50
[K

  ok [1m[32m5718[0m undefined[K
  ok [1m[32m5719[0m correct number of entries[K
  ok [1m[32m5720[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50
[0m[1B[1G
# # test iterator with gte=50 (flipped)
[K

  ok [1m[32m5721[0m undefined[K
  ok [1m[32m5722[0m correct number of entries[K
  ok [1m[32m5723[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50 and reverse=true
[K

  ok [1m[32m5724[0m undefined[K
  ok [1m[32m5725[0m correct number of entries[K
  ok [1m[32m5726[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 and reverse=true
[0m[1B[1G
# # test iterator with gte=49.5 (midway)
[K

  ok [1m[32m5727[0m undefined[K
  ok [1m[32m5728[0m correct number of entries[K
  ok [1m[32m5729[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway)
[0m[1B[1G
# # test iterator with gte=49.5 (midway) (flipped)
[K

  ok [1m[32m5730[0m undefined[K
  ok [1m[32m5731[0m correct number of entries[K
  ok [1m[32m5732[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=49999 (midway)
[K

  ok [1m[32m5733[0m undefined[K
  ok [1m[32m5734[0m correct number of entries[K
  ok [1m[32m5735[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway)
[0m[1B[1G
# # test iterator with gte=49999 (midway) (flipped)
[K

  ok [1m[32m5736[0m undefined[K
  ok [1m[32m5737[0m correct number of entries[K
  ok [1m[32m5738[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=49999 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m5739[0m undefined[K
  ok [1m[32m5740[0m correct number of entries[K
  ok [1m[32m5741[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m5742[0m undefined[K
  ok [1m[32m5743[0m correct number of entries[K
  ok [1m[32m5744[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with lt=50 and reverse=true
[K

  ok [1m[32m5745[0m undefined[K
  ok [1m[32m5746[0m correct number of entries[K
  ok [1m[32m5747[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=50
[K

  ok [1m[32m5748[0m undefined[K
  ok [1m[32m5749[0m correct number of entries[K
  ok [1m[32m5750[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50
[0m[1B[1G
# # test iterator with lte=50 (flipped)
[K

  ok [1m[32m5751[0m undefined[K
  ok [1m[32m5752[0m correct number of entries[K
  ok [1m[32m5753[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50 (flipped)
[0m[1B[1G
# # test iterator with lte=50.5 (midway)
[K

  ok [1m[32m5754[0m undefined[K
  ok [1m[32m5755[0m correct number of entries[K
  ok [1m[32m5756[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway)
[0m[1B[1G
# # test iterator with lte=50.5 (midway) (flipped)
[K

  ok [1m[32m5757[0m undefined[K
  ok [1m[32m5758[0m correct number of entries[K
  ok [1m[32m5759[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50.5 (midway) (flipped)
[0m[1B[1G
# # test iterator with lte=50555 (midway)
[K

  ok [1m[32m5760[0m undefined[K
  ok [1m[32m5761[0m correct number of entries[K
  ok [1m[32m5762[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway)
[0m[1B[1G
# # test iterator with lte=50555 (midway) (flipped)
[K

  ok [1m[32m5763[0m undefined[K
  ok [1m[32m5764[0m correct number of entries[K
  ok [1m[32m5765[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with lt=50555 (midway)
[K

  ok [1m[32m5766[0m undefined[K
  ok [1m[32m5767[0m correct number of entries[K
  ok [1m[32m5768[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway)
[0m[1B[1G
# # test iterator with lt=50555 (midway) (flipped)
[K

  ok [1m[32m5769[0m undefined[K
  ok [1m[32m5770[0m correct number of entries[K
  ok [1m[32m5771[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=50555 (midway) (flipped)
[0m[1B[1G
# # test iterator with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m5772[0m undefined[K
  ok [1m[32m5773[0m correct number of entries[K
  ok [1m[32m5774[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m5775[0m undefined[K
  ok [1m[32m5776[0m correct number of entries[K
  ok [1m[32m5777[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # test iterator with gt=50 and reverse=true
[K

  ok [1m[32m5778[0m undefined[K
  ok [1m[32m5779[0m correct number of entries[K
  ok [1m[32m5780[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=50 and reverse=true
[0m[1B[1G
# # test iterator with lte=0
[K

  ok [1m[32m5781[0m undefined[K
  ok [1m[32m5782[0m correct number of entries[K
  ok [1m[32m5783[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0
[0m[1B[1G
# # test iterator with lte=0 (flipped)
[K

  ok [1m[32m5784[0m undefined[K
  ok [1m[32m5785[0m correct number of entries[K
  ok [1m[32m5786[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte=0 (flipped)
[0m[1B[1G
# # test iterator with lt=0
[K

  ok [1m[32m5787[0m undefined[K
  ok [1m[32m5788[0m correct number of entries[K
  ok [1m[32m5789[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0
[0m[1B[1G
# # test iterator with lt=0 (flipped)
[K

  ok [1m[32m5790[0m undefined[K
  ok [1m[32m5791[0m correct number of entries[K
  ok [1m[32m5792[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt=0 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70
[K

  ok [1m[32m5793[0m undefined[K
  ok [1m[32m5794[0m correct number of entries[K
  ok [1m[32m5795[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70
[0m[1B[1G
# # test iterator with gte=30 and lte=70 (flipped)
[K

  ok [1m[32m5796[0m undefined[K
  ok [1m[32m5797[0m correct number of entries[K
  ok [1m[32m5798[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 (flipped)
[0m[1B[1G
# # test iterator with gt=29 and lt=71
[K

  ok [1m[32m5799[0m undefined[K
  ok [1m[32m5800[0m correct number of entries[K
  ok [1m[32m5801[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71
[0m[1B[1G
# # test iterator with gt=29 and lt=71 (flipped)
[K

  ok [1m[32m5802[0m undefined[K
  ok [1m[32m5803[0m correct number of entries[K
  ok [1m[32m5804[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 (flipped)
[0m[1B[1G
# # test iterator with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m5805[0m undefined[K
  ok [1m[32m5806[0m correct number of entries[K
  ok [1m[32m5807[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # test iterator with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m5808[0m undefined[K
  ok [1m[32m5809[0m correct number of entries[K
  ok [1m[32m5810[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # test iterator with limit=20
[K

  ok [1m[32m5811[0m undefined[K
  ok [1m[32m5812[0m correct number of entries[K
  ok [1m[32m5813[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20
[0m[1B[1G
# # test iterator with limit=20 and gte=20
[K

  ok [1m[32m5814[0m undefined[K
  ok [1m[32m5815[0m correct number of entries[K
  ok [1m[32m5816[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and gte=20
[0m[1B[1G
# # test iterator with limit=20 and reverse=true
[K

  ok [1m[32m5817[0m undefined[K
  ok [1m[32m5818[0m correct number of entries[K
  ok [1m[32m5819[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and reverse=true
[0m[1B[1G
# # test iterator with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m5820[0m undefined[K
  ok [1m[32m5821[0m correct number of entries[K
  ok [1m[32m5822[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # test iterator with limit=-1 should iterate over whole database
[K

  ok [1m[32m5823[0m undefined[K
  ok [1m[32m5824[0m correct number of entries[K
  ok [1m[32m5825[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=-1 should iterate over whole database
[0m[1B[1G
# # test iterator with limit=0 should not iterate over anything
[K

  ok [1m[32m5826[0m undefined[K
  ok [1m[32m5827[0m correct number of entries[K
  ok [1m[32m5828[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with limit=0 should not iterate over anything
[0m[1B[1G
# # test iterator with lte after limit
[K

  ok [1m[32m5829[0m undefined[K
  ok [1m[32m5830[0m correct number of entries[K
  ok [1m[32m5831[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after limit
[0m[1B[1G
# # test iterator with lte before limit
[K

  ok [1m[32m5832[0m undefined[K
  ok [1m[32m5833[0m correct number of entries[K
  ok [1m[32m5834[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before limit
[0m[1B[1G
# # test iterator with gte after database end
[K

  ok [1m[32m5835[0m undefined[K
  ok [1m[32m5836[0m correct number of entries[K
  ok [1m[32m5837[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end
[0m[1B[1G
# # test iterator with gte after database end (flipped)
[K

  ok [1m[32m5838[0m undefined[K
  ok [1m[32m5839[0m correct number of entries[K
  ok [1m[32m5840[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gte after database end (flipped)
[0m[1B[1G
# # test iterator with gt after database end
[K

  ok [1m[32m5841[0m undefined[K
  ok [1m[32m5842[0m correct number of entries[K
  ok [1m[32m5843[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end
[0m[1B[1G
# # test iterator with gt after database end (flipped)
[K

  ok [1m[32m5844[0m undefined[K
  ok [1m[32m5845[0m correct number of entries[K
  ok [1m[32m5846[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with gt after database end (flipped)
[0m[1B[1G
# # test iterator with lte after database end and reverse=true
[K

  ok [1m[32m5847[0m undefined[K
  ok [1m[32m5848[0m correct number of entries[K
  ok [1m[32m5849[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte after database end and reverse=true
[0m[1B[1G
# # test iterator with lt after database end
[K

  ok [1m[32m5850[0m undefined[K
  ok [1m[32m5851[0m correct number of entries[K
  ok [1m[32m5852[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end
[0m[1B[1G
# # test iterator with lt after database end (flipped)
[K

  ok [1m[32m5853[0m undefined[K
  ok [1m[32m5854[0m correct number of entries[K
  ok [1m[32m5855[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt after database end (flipped)
[0m[1B[1G
# # test iterator with lt at database end
[K

  ok [1m[32m5856[0m undefined[K
  ok [1m[32m5857[0m correct number of entries[K
  ok [1m[32m5858[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end
[0m[1B[1G
# # test iterator with lt at database end (flipped)
[K

  ok [1m[32m5859[0m undefined[K
  ok [1m[32m5860[0m correct number of entries[K
  ok [1m[32m5861[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt at database end (flipped)
[0m[1B[1G
# # test iterator with lte at database end
[K

  ok [1m[32m5862[0m undefined[K
  ok [1m[32m5863[0m correct number of entries[K
  ok [1m[32m5864[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end
[0m[1B[1G
# # test iterator with lte at database end (flipped)
[K

  ok [1m[32m5865[0m undefined[K
  ok [1m[32m5866[0m correct number of entries[K
  ok [1m[32m5867[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte at database end (flipped)
[0m[1B[1G
# # test iterator with lt before database end
[K

  ok [1m[32m5868[0m undefined[K
  ok [1m[32m5869[0m correct number of entries[K
  ok [1m[32m5870[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end
[0m[1B[1G
# # test iterator with lt before database end (flipped)
[K

  ok [1m[32m5871[0m undefined[K
  ok [1m[32m5872[0m correct number of entries[K
  ok [1m[32m5873[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt before database end (flipped)
[0m[1B[1G
# # test iterator with lte before database end
[K

  ok [1m[32m5874[0m undefined[K
  ok [1m[32m5875[0m correct number of entries[K
  ok [1m[32m5876[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end
[0m[1B[1G
# # test iterator with lte before database end (flipped)
[K

  ok [1m[32m5877[0m undefined[K
  ok [1m[32m5878[0m correct number of entries[K
  ok [1m[32m5879[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte before database end (flipped)
[0m[1B[1G
# # test iterator with lte and gte after database and reverse=true
[K

  ok [1m[32m5880[0m undefined[K
  ok [1m[32m5881[0m correct number of entries[K
  ok [1m[32m5882[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lte and gte after database and reverse=true
[0m[1B[1G
# # test iterator with lt and gt after database and reverse=true
[K

  ok [1m[32m5883[0m undefined[K
  ok [1m[32m5884[0m correct number of entries[K
  ok [1m[32m5885[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # test iterator with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setup
[K

  ok [1m[32m5886[0m no open() error[K
  ok [1m[32m5887[0m no batch() error[K
[1A[1G[1m[32m✓ # setup
[0m[1B[1G
# # for await...of db.iterator()
[K

  ok [1m[32m5888[0m ended[K
  ok [1m[32m5889[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # for await...of db.iterator()
[0m[1B[1G
# # for await...of db.iterator() does not permit reuse
[K

  ok [1m[32m5890[0m nexted[K
  ok [1m[32m5891[0m nexted[K
  ok [1m[32m5892[0m should be strictly equal[K
[1A[1G[1m[32m✓ # for await...of db.iterator() does not permit reuse
[0m[1B[1G
# # for await...of db.iterator() ends on user error
[K

  ok [1m[32m5893[0m should be strictly equal[K
  ok [1m[32m5894[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user error
[0m[1B[1G
# # for await...of db.iterator() with user error and end() error
[K

  ok [1m[32m5895[0m no real error from end()[K
  ok [1m[32m5896[0m should be strictly equal[K
  ok [1m[32m5897[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on iterator error
[K

  ok [1m[32m5898[0m nexted[K
  ok [1m[32m5899[0m should be strictly equal[K
  ok [1m[32m5900[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on iterator error
[0m[1B[1G
# # for await...of db.iterator() with iterator error and end() error
[K

  ok [1m[32m5901[0m nexted[K
  ok [1m[32m5902[0m no real error from end()[K
  ok [1m[32m5903[0m should be strictly equal[K
  ok [1m[32m5904[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with iterator error and end() error
[0m[1B[1G
# # for await...of db.iterator() ends on user break
[K

  ok [1m[32m5905[0m got a chance to break[K
  ok [1m[32m5906[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() ends on user break
[0m[1B[1G
# # for await...of db.iterator() with user break and end() error
[K

  ok [1m[32m5907[0m got a chance to break[K
  ok [1m[32m5908[0m no real error from end()[K
  ok [1m[32m5909[0m should be strictly equal[K
  ok [1m[32m5910[0m ended[K
[1A[1G[1m[32m✓ # for await...of db.iterator() with user break and end() error
[0m[1B[1G
# # teardown
[K

  ok [1m[32m5911[0m no close() error[K
[1A[1G[1m[32m✓ # teardown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # iterator#seek() throws if next() has not completed
[K

  ok [1m[32m5912[0m no error from open()[K
  ok [1m[32m5913[0m got error[K
  ok [1m[32m5914[0m no error from next()[K
  ok [1m[32m5915[0m next is asynchronous[K
  ok [1m[32m5916[0m no error from done()[K
  ok [1m[32m5917[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws if next() has not completed
[0m[1B[1G
# # iterator#seek() throws after end()
[K

  ok [1m[32m5918[0m no error from open()[K
  ok [1m[32m5919[0m no error from next()[K
  ok [1m[32m5920[0m no error from end()[K
  ok [1m[32m5921[0m got error[K
  ok [1m[32m5922[0m no error from done()[K
  ok [1m[32m5923[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() throws after end()
[0m[1B[1G
# # iterator#seek() to string target
[K

  ok [1m[32m5924[0m no error from open()[K
  ok [1m[32m5925[0m no error from batch()[K
  ok [1m[32m5926[0m no error[K
  ok [1m[32m5927[0m key matches[K
  ok [1m[32m5928[0m value matches[K
  ok [1m[32m5929[0m no error[K
  ok [1m[32m5930[0m end of iterator[K
  ok [1m[32m5931[0m end of iterator[K
  ok [1m[32m5932[0m no error from done()[K
  ok [1m[32m5933[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to string target
[0m[1B[1G
# # iterator#seek() to buffer target
[K

  ok [1m[32m5934[0m no error from open()[K
  ok [1m[32m5935[0m no error from batch()[K
  ok [1m[32m5936[0m no error from next()[K
  ok [1m[32m5937[0m key matches[K
  ok [1m[32m5938[0m value matches[K
  ok [1m[32m5939[0m no error from next()[K
  ok [1m[32m5940[0m end of iterator[K
  ok [1m[32m5941[0m end of iterator[K
  ok [1m[32m5942[0m no error from done()[K
  ok [1m[32m5943[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to buffer target
[0m[1B[1G
# # iterator#seek() on reverse iterator
[K

  ok [1m[32m5944[0m no error from open()[K
  ok [1m[32m5945[0m no error from batch()[K
  ok [1m[32m5946[0m no error[K
  ok [1m[32m5947[0m key matches[K
  ok [1m[32m5948[0m value matches[K
  ok [1m[32m5949[0m no error from done()[K
  ok [1m[32m5950[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator
[0m[1B[1G
# # iterator#seek() to out of range target
[K

  ok [1m[32m5951[0m no error from open()[K
  ok [1m[32m5952[0m no error from batch()[K
  ok [1m[32m5953[0m no error[K
  ok [1m[32m5954[0m end of iterator[K
  ok [1m[32m5955[0m end of iterator[K
  ok [1m[32m5956[0m no error from done()[K
  ok [1m[32m5957[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() to out of range target
[0m[1B[1G
# # iterator#seek() on reverse iterator to out of range target
[K

  ok [1m[32m5958[0m no error from open()[K
  ok [1m[32m5959[0m no error from batch()[K
  ok [1m[32m5960[0m no error[K
  ok [1m[32m5961[0m should be deeply equivalent[K
  ok [1m[32m5962[0m should be deeply equivalent[K
  ok [1m[32m5963[0m no error from done()[K
  ok [1m[32m5964[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() on reverse iterator to out of range target
[0m[1B[1G
# # iterator#seek() respects range
[K

  ok [1m[32m5965[0m no error from open()[K
  ok [1m[32m5966[0m no error from batch()[K
  ok [1m[32m5967[0m no error from next()[K
  ok [1m[32m5968[0m seek(4) on {"gt":"5"} yields undefined[K
  ok [1m[32m5969[0m no error from next()[K
  ok [1m[32m5970[0m seek(5) on {"gt":"5"} yields undefined[K
  ok [1m[32m5971[0m no error from next()[K
  ok [1m[32m5972[0m seek(6) on {"gt":"5"} yields 6[K
  ok [1m[32m5973[0m no error from next()[K
  ok [1m[32m5974[0m seek(4) on {"gte":"5"} yields undefined[K
  ok [1m[32m5975[0m no error from next()[K
  ok [1m[32m5976[0m seek(5) on {"gte":"5"} yields 5[K
  ok [1m[32m5977[0m no error from next()[K
  ok [1m[32m5978[0m seek(6) on {"gte":"5"} yields 6[K
  ok [1m[32m5979[0m no error from next()[K
  ok [1m[32m5980[0m seek(4) on {"lt":"5"} yields 4[K
  ok [1m[32m5981[0m no error from next()[K
  ok [1m[32m5982[0m seek(5) on {"lt":"5"} yields undefined[K
  ok [1m[32m5983[0m no error from next()[K
  ok [1m[32m5984[0m seek(6) on {"lt":"5"} yields undefined[K
  ok [1m[32m5985[0m no error from next()[K
  ok [1m[32m5986[0m seek(4) on {"lte":"5"} yields 4[K
  ok [1m[32m5987[0m no error from next()[K
  ok [1m[32m5988[0m seek(5) on {"lte":"5"} yields 5[K
  ok [1m[32m5989[0m no error from next()[K
  ok [1m[32m5990[0m seek(6) on {"lte":"5"} yields undefined[K
  ok [1m[32m5991[0m no error from next()[K
  ok [1m[32m5992[0m seek(4) on {"lt":"5","reverse":true} yields 4[K
  ok [1m[32m5993[0m no error from next()[K
  ok [1m[32m5994[0m seek(5) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m5995[0m no error from next()[K
  ok [1m[32m5996[0m seek(6) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m5997[0m no error from next()[K
  ok [1m[32m5998[0m seek(4) on {"lte":"5","reverse":true} yields 4[K
  ok [1m[32m5999[0m no error from next()[K
  ok [1m[32m6000[0m seek(5) on {"lte":"5","reverse":true} yields 5[K
  ok [1m[32m6001[0m no error from next()[K
  ok [1m[32m6002[0m seek(6) on {"lte":"5","reverse":true} yields undefined[K
  ok [1m[32m6003[0m no error from next()[K
  ok [1m[32m6004[0m seek(4) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m6005[0m no error from next()[K
  ok [1m[32m6006[0m seek(5) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m6007[0m no error from next()[K
  ok [1m[32m6008[0m seek(6) on {"gt":"5","reverse":true} yields 6[K
  ok [1m[32m6009[0m no error from next()[K
  ok [1m[32m6010[0m seek(4) on {"gte":"5","reverse":true} yields undefined[K
  ok [1m[32m6011[0m no error from next()[K
  ok [1m[32m6012[0m seek(5) on {"gte":"5","reverse":true} yields 5[K
  ok [1m[32m6013[0m no error from next()[K
  ok [1m[32m6014[0m seek(6) on {"gte":"5","reverse":true} yields 6[K
  ok [1m[32m6015[0m no error from next()[K
  ok [1m[32m6016[0m seek(7) on {"gt":"7","lt":"8"} yields undefined[K
  ok [1m[32m6017[0m no error from next()[K
  ok [1m[32m6018[0m seek(7) on {"gte":"7","lt":"8"} yields 7[K
  ok [1m[32m6019[0m no error from next()[K
  ok [1m[32m6020[0m seek(8) on {"gte":"7","lt":"8"} yields undefined[K
  ok [1m[32m6021[0m no error from next()[K
  ok [1m[32m6022[0m seek(8) on {"gt":"7","lte":"8"} yields 8[K
  ok [1m[32m6023[0m no error from end()[K
  ok [1m[32m6024[0m no error from end()[K
  ok [1m[32m6025[0m no error from end()[K
  ok [1m[32m6026[0m no error from end()[K
  ok [1m[32m6027[0m no error from end()[K
  ok [1m[32m6028[0m no error from end()[K
  ok [1m[32m6029[0m no error from end()[K
  ok [1m[32m6030[0m no error from end()[K
  ok [1m[32m6031[0m no error from end()[K
  ok [1m[32m6032[0m no error from end()[K
  ok [1m[32m6033[0m no error from end()[K
  ok [1m[32m6034[0m no error from end()[K
  ok [1m[32m6035[0m no error from end()[K
  ok [1m[32m6036[0m no error from end()[K
  ok [1m[32m6037[0m no error from end()[K
  ok [1m[32m6038[0m no error from end()[K
  ok [1m[32m6039[0m no error from end()[K
  ok [1m[32m6040[0m no error from end()[K
  ok [1m[32m6041[0m no error from end()[K
  ok [1m[32m6042[0m no error from end()[K
  ok [1m[32m6043[0m no error from end()[K
  ok [1m[32m6044[0m no error from end()[K
  ok [1m[32m6045[0m no error from end()[K
  ok [1m[32m6046[0m no error from end()[K
  ok [1m[32m6047[0m no error from end()[K
  ok [1m[32m6048[0m no error from end()[K
  ok [1m[32m6049[0m no error from end()[K
  ok [1m[32m6050[0m no error from end()[K
  ok [1m[32m6051[0m no error from close()[K
[1A[1G[1m[32m✓ # iterator#seek() respects range
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # delete key after snapshotting
[K

  ok [1m[32m6052[0m no open error[K
  ok [1m[32m6053[0m no put error[K
  ok [1m[32m6054[0m no del error[K
  ok [1m[32m6055[0m no next error[K
  ok [1m[32m6056[0m got a key[K
  ok [1m[32m6057[0m correct key[K
  ok [1m[32m6058[0m correct value[K
  ok [1m[32m6059[0m no run error[K
  ok [1m[32m6060[0m no iterator end error[K
[1A[1G[1m[32m✓ # delete key after snapshotting
[0m[1B[1G
# # overwrite key after snapshotting
[K

  ok [1m[32m6061[0m no open error[K
  ok [1m[32m6062[0m no put error[K
  ok [1m[32m6063[0m no put error[K
  ok [1m[32m6064[0m no next error[K
  ok [1m[32m6065[0m got a key[K
  ok [1m[32m6066[0m correct key[K
  ok [1m[32m6067[0m correct value[K
  ok [1m[32m6068[0m no run error[K
  ok [1m[32m6069[0m no iterator end error[K
[1A[1G[1m[32m✓ # overwrite key after snapshotting
[0m[1B[1G
# # add key after snapshotting that sorts first
[K

  ok [1m[32m6070[0m no open error[K
  ok [1m[32m6071[0m no put error[K
  ok [1m[32m6072[0m no put error[K
  ok [1m[32m6073[0m no next error[K
  ok [1m[32m6074[0m got a key[K
  ok [1m[32m6075[0m correct key[K
  ok [1m[32m6076[0m correct value[K
  ok [1m[32m6077[0m no run error[K
  ok [1m[32m6078[0m no iterator end error[K
[1A[1G[1m[32m✓ # add key after snapshotting that sorts first
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # setUp db
[K

[1A[1G[1m[32m✓ # setUp db
[0m[1B[1G
# # test simple clear() on string keys
[K

  ok [1m[32m6079[0m no open error[K
  ok [1m[32m6080[0m no batch error[K
  ok [1m[32m6081[0m no concat error[K
  ok [1m[32m6082[0m has entries[K
  ok [1m[32m6083[0m no clear error[K
  ok [1m[32m6084[0m no concat error[K
  ok [1m[32m6085[0m has no entries[K
  ok [1m[32m6086[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on string keys
[0m[1B[1G
# # test simple clear() on buffer keys
[K

  ok [1m[32m6087[0m no open error[K
  ok [1m[32m6088[0m no batch error[K
  ok [1m[32m6089[0m no concat error[K
  ok [1m[32m6090[0m has entries[K
  ok [1m[32m6091[0m no clear error[K
  ok [1m[32m6092[0m no concat error[K
  ok [1m[32m6093[0m has no entries[K
  ok [1m[32m6094[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on buffer keys
[0m[1B[1G
# # test simple clear() on mixed keys
[K

  ok [1m[32m6095[0m no open error[K
  ok [1m[32m6096[0m no batch error[K
  ok [1m[32m6097[0m no concat error[K
  ok [1m[32m6098[0m has entries[K
  ok [1m[32m6099[0m no clear error[K
  ok [1m[32m6100[0m no concat error[K
  ok [1m[32m6101[0m has no entries[K
  ok [1m[32m6102[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on mixed keys
[0m[1B[1G
# # test simple clear() on non-utf8 buffer keys
[K

  ok [1m[32m6103[0m no open error[K
  ok [1m[32m6104[0m no batch error[K
  ok [1m[32m6105[0m no concat error[K
  ok [1m[32m6106[0m has entries[K
  ok [1m[32m6107[0m no clear error[K
  ok [1m[32m6108[0m no concat error[K
  ok [1m[32m6109[0m has no entries[K
  ok [1m[32m6110[0m no close error[K
[1A[1G[1m[32m✓ # test simple clear() on non-utf8 buffer keys
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # setUp common
[K

[1A[1G[1m[32m✓ # setUp common
[0m[1B[1G
# # db#clear() with full range
[K

  ok [1m[32m6111[0m no open error[K
  ok [1m[32m6112[0m no batch error[K
  ok [1m[32m6113[0m no clear error[K
  ok [1m[32m6114[0m no concat error[K
  ok [1m[32m6115[0m correct number of entries[K
  ok [1m[32m6116[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with full range
[0m[1B[1G
# # db#clear() with reverse=true
[K

  ok [1m[32m6117[0m no open error[K
  ok [1m[32m6118[0m no batch error[K
  ok [1m[32m6119[0m no clear error[K
  ok [1m[32m6120[0m no concat error[K
  ok [1m[32m6121[0m correct number of entries[K
  ok [1m[32m6122[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with reverse=true
[0m[1B[1G
# # db#clear() with gte=00
[K

  ok [1m[32m6123[0m no open error[K
  ok [1m[32m6124[0m no batch error[K
  ok [1m[32m6125[0m no clear error[K
  ok [1m[32m6126[0m no concat error[K
  ok [1m[32m6127[0m correct number of entries[K
  ok [1m[32m6128[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=00
[0m[1B[1G
# # db#clear() with gte=50
[K

  ok [1m[32m6129[0m no open error[K
  ok [1m[32m6130[0m no batch error[K
  ok [1m[32m6131[0m no clear error[K
  ok [1m[32m6132[0m no concat error[K
  ok [1m[32m6133[0m correct number of entries[K
  ok [1m[32m6134[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50
[0m[1B[1G
# # db#clear() with lte=50 and reverse=true
[K

  ok [1m[32m6135[0m no open error[K
  ok [1m[32m6136[0m no batch error[K
  ok [1m[32m6137[0m no clear error[K
  ok [1m[32m6138[0m no concat error[K
  ok [1m[32m6139[0m correct number of entries[K
  ok [1m[32m6140[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50 and reverse=true
[0m[1B[1G
# # db#clear() with gte=49.5 (midway)
[K

  ok [1m[32m6141[0m no open error[K
  ok [1m[32m6142[0m no batch error[K
  ok [1m[32m6143[0m no clear error[K
  ok [1m[32m6144[0m no concat error[K
  ok [1m[32m6145[0m correct number of entries[K
  ok [1m[32m6146[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49.5 (midway)
[0m[1B[1G
# # db#clear() with gte=49999 (midway)
[K

  ok [1m[32m6147[0m no open error[K
  ok [1m[32m6148[0m no batch error[K
  ok [1m[32m6149[0m no clear error[K
  ok [1m[32m6150[0m no concat error[K
  ok [1m[32m6151[0m correct number of entries[K
  ok [1m[32m6152[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=49999 (midway)
[0m[1B[1G
# # db#clear() with lte=49.5 (midway) and reverse=true
[K

  ok [1m[32m6153[0m no open error[K
  ok [1m[32m6154[0m no batch error[K
  ok [1m[32m6155[0m no clear error[K
  ok [1m[32m6156[0m no concat error[K
  ok [1m[32m6157[0m correct number of entries[K
  ok [1m[32m6158[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=49.5 (midway) and reverse=true
[K

  ok [1m[32m6159[0m no open error[K
  ok [1m[32m6160[0m no batch error[K
  ok [1m[32m6161[0m no clear error[K
  ok [1m[32m6162[0m no concat error[K
  ok [1m[32m6163[0m correct number of entries[K
  ok [1m[32m6164[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=49.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with lt=50 and reverse=true
[K

  ok [1m[32m6165[0m no open error[K
  ok [1m[32m6166[0m no batch error[K
  ok [1m[32m6167[0m no clear error[K
  ok [1m[32m6168[0m no concat error[K
  ok [1m[32m6169[0m correct number of entries[K
  ok [1m[32m6170[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=50
[K

  ok [1m[32m6171[0m no open error[K
  ok [1m[32m6172[0m no batch error[K
  ok [1m[32m6173[0m no clear error[K
  ok [1m[32m6174[0m no concat error[K
  ok [1m[32m6175[0m correct number of entries[K
  ok [1m[32m6176[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50
[0m[1B[1G
# # db#clear() with lte=50.5 (midway)
[K

  ok [1m[32m6177[0m no open error[K
  ok [1m[32m6178[0m no batch error[K
  ok [1m[32m6179[0m no clear error[K
  ok [1m[32m6180[0m no concat error[K
  ok [1m[32m6181[0m correct number of entries[K
  ok [1m[32m6182[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50.5 (midway)
[0m[1B[1G
# # db#clear() with lte=50555 (midway)
[K

  ok [1m[32m6183[0m no open error[K
  ok [1m[32m6184[0m no batch error[K
  ok [1m[32m6185[0m no clear error[K
  ok [1m[32m6186[0m no concat error[K
  ok [1m[32m6187[0m correct number of entries[K
  ok [1m[32m6188[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=50555 (midway)
[0m[1B[1G
# # db#clear() with lt=50555 (midway)
[K

  ok [1m[32m6189[0m no open error[K
  ok [1m[32m6190[0m no batch error[K
  ok [1m[32m6191[0m no clear error[K
  ok [1m[32m6192[0m no concat error[K
  ok [1m[32m6193[0m correct number of entries[K
  ok [1m[32m6194[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=50555 (midway)
[0m[1B[1G
# # db#clear() with gte=50.5 (midway) and reverse=true
[K

  ok [1m[32m6195[0m no open error[K
  ok [1m[32m6196[0m no batch error[K
  ok [1m[32m6197[0m no clear error[K
  ok [1m[32m6198[0m no concat error[K
  ok [1m[32m6199[0m correct number of entries[K
  ok [1m[32m6200[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50.5 (midway) and reverse=true
[K

  ok [1m[32m6201[0m no open error[K
  ok [1m[32m6202[0m no batch error[K
  ok [1m[32m6203[0m no clear error[K
  ok [1m[32m6204[0m no concat error[K
  ok [1m[32m6205[0m correct number of entries[K
  ok [1m[32m6206[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50.5 (midway) and reverse=true
[0m[1B[1G
# # db#clear() with gt=50 and reverse=true
[K

  ok [1m[32m6207[0m no open error[K
  ok [1m[32m6208[0m no batch error[K
  ok [1m[32m6209[0m no clear error[K
  ok [1m[32m6210[0m no concat error[K
  ok [1m[32m6211[0m correct number of entries[K
  ok [1m[32m6212[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=50 and reverse=true
[0m[1B[1G
# # db#clear() with lte=0
[K

  ok [1m[32m6213[0m no open error[K
  ok [1m[32m6214[0m no batch error[K
  ok [1m[32m6215[0m no clear error[K
  ok [1m[32m6216[0m no concat error[K
  ok [1m[32m6217[0m correct number of entries[K
  ok [1m[32m6218[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte=0
[0m[1B[1G
# # db#clear() with lt=0
[K

  ok [1m[32m6219[0m no open error[K
  ok [1m[32m6220[0m no batch error[K
  ok [1m[32m6221[0m no clear error[K
  ok [1m[32m6222[0m no concat error[K
  ok [1m[32m6223[0m correct number of entries[K
  ok [1m[32m6224[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt=0
[0m[1B[1G
# # db#clear() with gte=30 and lte=70
[K

  ok [1m[32m6225[0m no open error[K
  ok [1m[32m6226[0m no batch error[K
  ok [1m[32m6227[0m no clear error[K
  ok [1m[32m6228[0m no concat error[K
  ok [1m[32m6229[0m correct number of entries[K
  ok [1m[32m6230[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70
[0m[1B[1G
# # db#clear() with gt=29 and lt=71
[K

  ok [1m[32m6231[0m no open error[K
  ok [1m[32m6232[0m no batch error[K
  ok [1m[32m6233[0m no clear error[K
  ok [1m[32m6234[0m no concat error[K
  ok [1m[32m6235[0m correct number of entries[K
  ok [1m[32m6236[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71
[0m[1B[1G
# # db#clear() with gte=30 and lte=70 and reverse=true
[K

  ok [1m[32m6237[0m no open error[K
  ok [1m[32m6238[0m no batch error[K
  ok [1m[32m6239[0m no clear error[K
  ok [1m[32m6240[0m no concat error[K
  ok [1m[32m6241[0m correct number of entries[K
  ok [1m[32m6242[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte=30 and lte=70 and reverse=true
[0m[1B[1G
# # db#clear() with gt=29 and lt=71 and reverse=true
[K

  ok [1m[32m6243[0m no open error[K
  ok [1m[32m6244[0m no batch error[K
  ok [1m[32m6245[0m no clear error[K
  ok [1m[32m6246[0m no concat error[K
  ok [1m[32m6247[0m correct number of entries[K
  ok [1m[32m6248[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt=29 and lt=71 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20
[K

  ok [1m[32m6249[0m no open error[K
  ok [1m[32m6250[0m no batch error[K
  ok [1m[32m6251[0m no clear error[K
  ok [1m[32m6252[0m no concat error[K
  ok [1m[32m6253[0m correct number of entries[K
  ok [1m[32m6254[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20
[0m[1B[1G
# # db#clear() with limit=20 and gte=20
[K

  ok [1m[32m6255[0m no open error[K
  ok [1m[32m6256[0m no batch error[K
  ok [1m[32m6257[0m no clear error[K
  ok [1m[32m6258[0m no concat error[K
  ok [1m[32m6259[0m correct number of entries[K
  ok [1m[32m6260[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and gte=20
[0m[1B[1G
# # db#clear() with limit=20 and reverse=true
[K

  ok [1m[32m6261[0m no open error[K
  ok [1m[32m6262[0m no batch error[K
  ok [1m[32m6263[0m no clear error[K
  ok [1m[32m6264[0m no concat error[K
  ok [1m[32m6265[0m correct number of entries[K
  ok [1m[32m6266[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and reverse=true
[0m[1B[1G
# # db#clear() with limit=20 and lte=79 and reverse=true
[K

  ok [1m[32m6267[0m no open error[K
  ok [1m[32m6268[0m no batch error[K
  ok [1m[32m6269[0m no clear error[K
  ok [1m[32m6270[0m no concat error[K
  ok [1m[32m6271[0m correct number of entries[K
  ok [1m[32m6272[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=20 and lte=79 and reverse=true
[0m[1B[1G
# # db#clear() with limit=-1 should clear whole database
[K

  ok [1m[32m6273[0m no open error[K
  ok [1m[32m6274[0m no batch error[K
  ok [1m[32m6275[0m no clear error[K
  ok [1m[32m6276[0m no concat error[K
  ok [1m[32m6277[0m correct number of entries[K
  ok [1m[32m6278[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=-1 should clear whole database
[0m[1B[1G
# # db#clear() with limit=0 should not clear anything
[K

  ok [1m[32m6279[0m no open error[K
  ok [1m[32m6280[0m no batch error[K
  ok [1m[32m6281[0m no clear error[K
  ok [1m[32m6282[0m no concat error[K
  ok [1m[32m6283[0m correct number of entries[K
  ok [1m[32m6284[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with limit=0 should not clear anything
[0m[1B[1G
# # db#clear() with lte after limit
[K

  ok [1m[32m6285[0m no open error[K
  ok [1m[32m6286[0m no batch error[K
  ok [1m[32m6287[0m no clear error[K
  ok [1m[32m6288[0m no concat error[K
  ok [1m[32m6289[0m correct number of entries[K
  ok [1m[32m6290[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after limit
[0m[1B[1G
# # db#clear() with lte before limit
[K

  ok [1m[32m6291[0m no open error[K
  ok [1m[32m6292[0m no batch error[K
  ok [1m[32m6293[0m no clear error[K
  ok [1m[32m6294[0m no concat error[K
  ok [1m[32m6295[0m correct number of entries[K
  ok [1m[32m6296[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte before limit
[0m[1B[1G
# # db#clear() with gte after database end
[K

  ok [1m[32m6297[0m no open error[K
  ok [1m[32m6298[0m no batch error[K
  ok [1m[32m6299[0m no clear error[K
  ok [1m[32m6300[0m no concat error[K
  ok [1m[32m6301[0m correct number of entries[K
  ok [1m[32m6302[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gte after database end
[0m[1B[1G
# # db#clear() with gt after database end
[K

  ok [1m[32m6303[0m no open error[K
  ok [1m[32m6304[0m no batch error[K
  ok [1m[32m6305[0m no clear error[K
  ok [1m[32m6306[0m no concat error[K
  ok [1m[32m6307[0m correct number of entries[K
  ok [1m[32m6308[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with gt after database end
[0m[1B[1G
# # db#clear() with lte after database end and reverse=true
[K

  ok [1m[32m6309[0m no open error[K
  ok [1m[32m6310[0m no batch error[K
  ok [1m[32m6311[0m no clear error[K
  ok [1m[32m6312[0m no concat error[K
  ok [1m[32m6313[0m correct number of entries[K
  ok [1m[32m6314[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte after database end and reverse=true
[0m[1B[1G
# # db#clear() with lte and gte after database and reverse=true
[K

  ok [1m[32m6315[0m no open error[K
  ok [1m[32m6316[0m no batch error[K
  ok [1m[32m6317[0m no clear error[K
  ok [1m[32m6318[0m no concat error[K
  ok [1m[32m6319[0m correct number of entries[K
  ok [1m[32m6320[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lte and gte after database and reverse=true
[0m[1B[1G
# # db#clear() with lt and gt after database and reverse=true
[K

  ok [1m[32m6321[0m no open error[K
  ok [1m[32m6322[0m no batch error[K
  ok [1m[32m6323[0m no clear error[K
  ok [1m[32m6324[0m no concat error[K
  ok [1m[32m6325[0m correct number of entries[K
  ok [1m[32m6326[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # db#clear() with lt and gt after database and reverse=true
[0m[1B[1G
# # tearDown
[K

[1A[1G[1m[32m✓ # tearDown
[0m[1B[1G
# # SubDown constructor
[K

[1A[1G[1m[32m✓ # SubDown constructor
[0m[1B[1G
# # can be called without new
[K

  ok [1m[32m6327[0m instanceof subdown[K
[1A[1G[1m[32m✓ # can be called without new
[0m[1B[1G
# # missing prefix and missing separator
[K

  ok [1m[32m6328[0m should be strictly equal[K
[1A[1G[1m[32m✓ # missing prefix and missing separator
[0m[1B[1G
# # prefix and missing separator
[K

  ok [1m[32m6329[0m should be strictly equal[K
[1A[1G[1m[32m✓ # prefix and missing separator
[0m[1B[1G
# # prefix and separator (as string)
[K

  ok [1m[32m6330[0m should be strictly equal[K
[1A[1G[1m[32m✓ # prefix and separator (as string)
[0m[1B[1G
# # prefix and separator (as options)
[K

  ok [1m[32m6331[0m should be strictly equal[K
[1A[1G[1m[32m✓ # prefix and separator (as options)
[0m[1B[1G
# # prefix with same initial character as separator is sliced
[K

  ok [1m[32m6332[0m should be strictly equal[K
[1A[1G[1m[32m✓ # prefix with same initial character as separator is sliced
[0m[1B[1G
# # prefix with same ending character as separator is sliced
[K

  ok [1m[32m6333[0m should be strictly equal[K
[1A[1G[1m[32m✓ # prefix with same ending character as separator is sliced
[0m[1B[1G
# # SubDb main function
[K

[1A[1G[1m[32m✓ # SubDb main function
[0m[1B[1G
# # inherits manifest from parent db
[K

  ok [1m[32m6334[0m levelup inherits from down[K
  ok [1m[32m6335[0m subdb inherits from down via levelup[K
  ok [1m[32m6336[0m subdb inherits from down via levelup[K
  ok [1m[32m6337[0m subdb inherits from levelup[K
[1A[1G[1m[32m✓ # inherits manifest from parent db
[0m[1B[1G
# # does not support additionalMethods
[K

  ok [1m[32m6338[0m should be strictly equal[K
  ok [1m[32m6339[0m levelup exposes method[K
  ok [1m[32m6340[0m should be deeply equivalent[K
  ok [1m[32m6341[0m subdb does not expose method[K
[1A[1G[1m[32m✓ # does not support additionalMethods
[0m[1B[1G
# # opts.open hook
[K

  ok [1m[32m6342[0m opts.open called[K
[1A[1G[1m[32m✓ # opts.open hook
[0m[1B[1G
# # error from open() does not bubble up
[K

  ok [1m[32m6343[0m should be strictly equal[K
[1A[1G[1m[32m✓ # error from open() does not bubble up
[0m[1B[1G
# # levelup *down is set to subdown which has correct storage
[K

  ok [1m[32m6344[0m is encoding-down instance[K
  ok [1m[32m6345[0m is subdown instance[K
  ok [1m[32m6346[0m .type is subleveldown[K
  ok [1m[32m6347[0m memdown[K
[1A[1G[1m[32m✓ # levelup *down is set to subdown which has correct storage
[0m[1B[1G
# # different sub levels can have different encodings
[K

  ok [1m[32m6348[0m no error[K
  ok [1m[32m6349[0m no error[K
  ok [1m[32m6350[0m no error[K
  ok [1m[32m6351[0m should be deeply equivalent[K
  ok [1m[32m6352[0m no error[K
  ok [1m[32m6353[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # different sub levels can have different encodings
[0m[1B[1G
# # cannot create a sublevel on a closed db
[K

  ok [1m[32m6354[0m no error[K
  ok [1m[32m6355[0m sublevel not opened[K
  ok [1m[32m6356[0m no error[K
  ok [1m[32m6357[0m sublevel opened[K
[1A[1G[1m[32m✓ # cannot create a sublevel on a closed db
[0m[1B[1G
# # can close db and sublevel once opened
[K

  ok [1m[32m6358[0m no open error[K
  ok [1m[32m6359[0m no close error[K
  ok [1m[32m6360[0m no close error[K
[1A[1G[1m[32m✓ # can close db and sublevel once opened
[0m[1B[1G
# # rejects operations if parent db is closed
[K

  ok [1m[32m6361[0m no open error[K
  ok [1m[32m6362[0m no close error[K
  ok [1m[32m6363[0m should be strictly equal[K
  ok [1m[32m6364[0m should be strictly equal[K
  ok [1m[32m6365[0m should be strictly equal[K
  ok [1m[32m6366[0m should be strictly equal[K
  ok [1m[32m6367[0m should be strictly equal[K
  ok [1m[32m6368[0m should be strictly equal[K
  ok [1m[32m6369[0m should be strictly equal[K
[1A[1G[1m[32m✓ # rejects operations if parent db is closed
[0m[1B[1G
# # cannot close db while sublevel is opening
[K

  ok [1m[32m6370[0m no open error[K
  ok [1m[32m6371[0m should be strictly equal[K
  ok [1m[32m6372[0m no close error[K
  ok [1m[32m6373[0m should be strictly equal[K
  ok [1m[32m6374[0m should be strictly equal[K
[1A[1G[1m[32m✓ # cannot close db while sublevel is opening
[0m[1B[1G
# # cannot create sublevel while db is closing
[K

  ok [1m[32m6375[0m no open error[K
  ok [1m[32m6376[0m should be strictly equal[K
  ok [1m[32m6377[0m should be strictly equal[K
  ok [1m[32m6378[0m no close error[K
  ok [1m[32m6379[0m should be strictly equal[K
[1A[1G[1m[32m✓ # cannot create sublevel while db is closing
[0m[1B[1G
# # can reopen a sublevel without affecting encoding-down state of db
[K

  ok [1m[32m6380[0m no close error[K
  ok [1m[32m6381[0m no open error[K
  ok [1m[32m6382[0m should be strictly equal[K
[1A[1G[1m[32m✓ # can reopen a sublevel without affecting encoding-down state of db
[0m[1B[1G
# # can wrap a sublevel and reopen the wrapped sublevel
[K

  ok [1m[32m6383[0m sub1 encoding-down[K
  ok [1m[32m6384[0m sub1 prefix ok[K
  ok [1m[32m6385[0m memdown[K
  ok [1m[32m6386[0m sub2 encoding-down[K
  ok [1m[32m6387[0m sub2 prefix ok[K
  ok [1m[32m6388[0m .type is subleveldown[K
  ok [1m[32m6389[0m memdown[K
  ok [1m[32m6390[0m no close error[K
  ok [1m[32m6391[0m no open error[K
  ok [1m[32m6392[0m sub1 encoding-down[K
  ok [1m[32m6393[0m sub1 prefix ok[K
  ok [1m[32m6394[0m memdown[K
  ok [1m[32m6395[0m sub2 encoding-down[K
  ok [1m[32m6396[0m sub2 prefix ok[K
  ok [1m[32m6397[0m .type is subleveldown[K
  ok [1m[32m6398[0m memdown[K
[1A[1G[1m[32m✓ # can wrap a sublevel and reopen the wrapped sublevel
[0m[1B[1G
# # doubly nested sublevel has correct prefix
[K

  ok [1m[32m6399[0m null[K
  ok [1m[32m6400[0m undefined[K
  ok [1m[32m6401[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # doubly nested sublevel has correct prefix
[0m[1B[1G
# # iterator options are forwarded (issue #1)
[K

  ok [1m[32m6402[0m db key is utf8[K
  ok [1m[32m6403[0m db value is json[K
  ok [1m[32m6404[0m sub db key is utf8[K
  ok [1m[32m6405[0m db value is json[K
[1A[1G[1m[32m✓ # iterator options are forwarded (issue #1)
[0m[1B[1G
# # concatenating Buffer keys
[K

  ok [1m[32m6406[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # concatenating Buffer keys
[0m[1B[1G
# # subdb with no prefix
[K

  ok [1m[32m6407[0m should be strictly equal[K
[1A[1G[1m[32m✓ # subdb with no prefix
[0m[1B[1G
# # errors from iterator bubble up
[K

  ok [1m[32m6408[0m should be strictly equal[K
  ok [1m[32m6409[0m should be strictly equal[K
[1A[1G[1m[32m✓ # errors from iterator bubble up
[0m[1B[1G
# # can arbitrarily seek
[K

  ok [1m[32m6410[0m no error[K
  ok [1m[32m6411[0m no error[K
  ok [1m[32m6412[0m key is as expected[K
  ok [1m[32m6413[0m no error[K
  ok [1m[32m6414[0m key is as expected[K
  ok [1m[32m6415[0m no error[K
  ok [1m[32m6416[0m key is as expected[K
[1A[1G[1m[32m✓ # can arbitrarily seek
[0m[1B[1G
# # clear (optimized)
[K

  ok [1m[32m6417[0m has clear()[K
  ok [1m[32m6418[0m no populate error[K
  ok [1m[32m6419[0m no concat error[K
  ok [1m[32m6420[0m should be deeply equivalent[K
  ok [1m[32m6421[0m no clear error[K
  ok [1m[32m6422[0m no concat error[K
  ok [1m[32m6423[0m should be deeply equivalent[K
  ok [1m[32m6424[0m no populate error[K
  ok [1m[32m6425[0m no clear error[K
  ok [1m[32m6426[0m no concat error[K
  ok [1m[32m6427[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # clear (optimized)
[0m[1B[1G
# # clear (with iterator-based fallback)
[K

  ok [1m[32m6428[0m no populate error[K
  ok [1m[32m6429[0m no concat error[K
  ok [1m[32m6430[0m should be deeply equivalent[K
  ok [1m[32m6431[0m no clear error[K
  ok [1m[32m6432[0m no concat error[K
  ok [1m[32m6433[0m should be deeply equivalent[K
  ok [1m[32m6434[0m no populate error[K
  ok [1m[32m6435[0m no clear error[K
  ok [1m[32m6436[0m no concat error[K
  ok [1m[32m6437[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # clear (with iterator-based fallback)
[0m[1B[1G
# # can store any key
[K

[1A[1G[1m[32m✓ # can store any key
[0m[1B[1G
# # iterating buffer keys with bytes above 196
[K

  ok [1m[32m6438[0m no write error[K
  ok [1m[32m6439[0m no concat error[K
  ok [1m[32m6440[0m sub yields all entries[K
[1A[1G[1m[32m✓ # iterating buffer keys with bytes above 196
[0m[1B[1G
# # range logic
[K

  ok [1m[32m6441[0m should be deeply equivalent[K
  ok [1m[32m6442[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ # range logic
[0m[1B[1G
# # subleveldown on intermediate layer
[K

  ok [1m[32m6443[0m got _put call[K
  ok [1m[32m6444[0m no err[K
  ok [1m[32m6445[0m got _get call[K
  ok [1m[32m6446[0m no levelup get error[K
  ok [1m[32m6447[0m should be strictly equal[K
  ok [1m[32m6448[0m no memdown get error[K
  ok [1m[32m6449[0m should be strictly equal[K
[1A[1G[1m[32m✓ # subleveldown on intermediate layer
[0m[1B[1G
# # tests 6449
[K

[1A[1G[1m[32m✓ # tests 6449
[0m[1B[1G
# # pass  6449
[K

[1A[1G[1m[32m✓ # pass  6449
[0m[1B[1G
# # ok
[K
--------------|---------|----------|---------|---------|---------------------
File          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s   
--------------|---------|----------|---------|---------|---------------------
All files     |      95 |    88.46 |     100 |   95.45 |                     
 index.js     |     100 |      100 |     100 |     100 |                     
 leveldown.js |   95.03 |    87.77 |     100 |   94.95 | 23,71,84,92,103,106 
 matchdown.js |      90 |     87.5 |     100 |     100 | 8                   
--------------|---------|----------|---------|---------|---------------------
https://github.com/sindresorhus/eslint-formatter-pretty.git
index.js
DirectBloated/eslint-formatter-pretty
eslint-formatter-pretty
f8a490d

added 1064 packages, and audited 1065 packages in 19s

133 packages are looking for funding
  run `npm fund` for details

12 vulnerabilities (5 moderate, 7 high)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> eslint-formatter-pretty@4.1.0 test
> xo && ava && tsd


  ✔ output
  ✔ file heading links to the first error line
  ✔ file heading links to the first warning line if no errors in the file
  ✔ no line numbers
  ✔ show line numbers
  ✔ link rules to documentation when terminal supports links
  ✔ sort by severity, then line number, then column number
  ✔ display warning total before error total
  ✔ files will be sorted with least errors at the bottom, but zero errors at the top
  ✔ files with similar errorCounts will sort according to warningCounts
  ✔ use the `rulesMeta` property to get docs URL
  ✔ doesn't throw errors when rule docs aren't found

  12 tests passed

https://github.com/Level/iterator-stream.git
index.js
DirectBloated/iterator-stream
iterator-stream
6f88aba

added 1000 packages, and audited 1001 packages in 9s

239 packages are looking for funding
  run `npm fund` for details

2 vulnerabilities (1 moderate, 1 critical)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> level-iterator-stream@5.0.0 test
> standard && hallmark && (nyc -s node test.js | faucet) && nyc report


# setup[K

  ok [1m[32m1[0m no error[K
  ok [1m[32m2[0m no error[K
[1A[1G[1m[32m✓ setup[0m[1B[1G
# keys and values[K

  ok [1m[32m3[0m should be truthy[K
  ok [1m[32m4[0m should be truthy[K
  ok [1m[32m5[0m should be strictly equal[K
  ok [1m[32m6[0m should be strictly equal[K
  ok [1m[32m7[0m should be truthy[K
  ok [1m[32m8[0m should be truthy[K
  ok [1m[32m9[0m should be strictly equal[K
  ok [1m[32m10[0m should be strictly equal[K
  ok [1m[32m11[0m should be truthy[K
  ok [1m[32m12[0m should be truthy[K
  ok [1m[32m13[0m should be strictly equal[K
  ok [1m[32m14[0m should be strictly equal[K
  ok [1m[32m15[0m should be strictly equal[K
[1A[1G[1m[32m✓ keys and values[0m[1B[1G
# normal event order[K

  ok [1m[32m16[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ normal event order[0m[1B[1G
# error from iterator.next[K

  ok [1m[32m17[0m event order[K
[1A[1G[1m[32m✓ error from iterator.next[0m[1B[1G
# error from iterator end[K

  ok [1m[32m18[0m undefined[K
  ok [1m[32m19[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ error from iterator end[0m[1B[1G
# .destroy[K

  ok [1m[32m20[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ .destroy[0m[1B[1G
# .destroy(err)[K

  ok [1m[32m21[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ .destroy(err)[0m[1B[1G
# .destroy(err, callback)[K

  ok [1m[32m22[0m got error[K
  ok [1m[32m23[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ .destroy(err, callback)[0m[1B[1G
# .destroy(null, callback)[K

  ok [1m[32m24[0m no error[K
  ok [1m[32m25[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ .destroy(null, callback)[0m[1B[1G
# .destroy() during iterator.next[K

  ok [1m[32m26[0m event order[K
[1A[1G[1m[32m✓ .destroy() during iterator.next[0m[1B[1G
# .destroy(err) during iterator.next[K

  ok [1m[32m27[0m event order[K
[1A[1G[1m[32m✓ .destroy(err) during iterator.next[0m[1B[1G
# .destroy(err, callback) during iterator.next[K

  ok [1m[32m28[0m got error[K
  ok [1m[32m29[0m event order[K
[1A[1G[1m[32m✓ .destroy(err, callback) during iterator.next[0m[1B[1G
# .destroy(null, callback) during iterator.next[K

  ok [1m[32m30[0m no error[K
  ok [1m[32m31[0m event order[K
[1A[1G[1m[32m✓ .destroy(null, callback) during iterator.next[0m[1B[1G
# .destroy during iterator.next 1[K

  ok [1m[32m32[0m should be called once[K
[1A[1G[1m[32m✓ .destroy during iterator.next 1[0m[1B[1G
# .destroy during iterator.next 2[K

  ok [1m[32m33[0m should be called[K
  ok [1m[32m34[0m should be called[K
  ok [1m[32m35[0m should be called[K
[1A[1G[1m[32m✓ .destroy during iterator.next 2[0m[1B[1G
# .destroy after iterator.next 1[K

  ok [1m[32m36[0m should be called[K
[1A[1G[1m[32m✓ .destroy after iterator.next 1[0m[1B[1G
# .destroy after iterator.next 2[K

  ok [1m[32m37[0m should be called[K
  ok [1m[32m38[0m should be called[K
  ok [1m[32m39[0m should be called[K
[1A[1G[1m[32m✓ .destroy after iterator.next 2[0m[1B[1G
# keys=false[K

  ok [1m[32m40[0m should be strictly equal[K
[1A[1G[1m[32m✓ keys=false[0m[1B[1G
# values=false[K

  ok [1m[32m41[0m should be strictly equal[K
[1A[1G[1m[32m✓ values=false[0m[1B[1G
# keeps a reference to the iterator[K

  ok [1m[32m42[0m has reference[K
[1A[1G[1m[32m✓ keeps a reference to the iterator[0m[1B[1G
# it is safe to close db on end of stream[K

  ok [1m[32m43[0m no error[K
[1A[1G[1m[32m✓ it is safe to close db on end of stream[0m[1B[1G
# tests 43[K

tests 43
# pass  43[K

pass  43
# ok[K
[1A[1G[1m[32m✓ ok[0m[1B[1G----------|---------|----------|---------|---------|-------------------
File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------|---------|----------|---------|---------|-------------------
All files |     100 |      100 |     100 |     100 |                   
 index.js |     100 |      100 |     100 |     100 |                   
----------|---------|----------|---------|---------|-------------------
https://github.com/Level/encoding-down.git
index.js
DirectBloated/encoding-down
encoding-down
7b79f17

added 1101 packages, and audited 1102 packages in 10s

250 packages are looking for funding
  run `npm fund` for details

4 high severity vulnerabilities

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> encoding-down@7.1.0 test
> standard && hallmark && nyc node test

  /data/js-variants/multee/DirectBloated/encoding-down/test/index.js:12:3: Expected property shorthand. (object-shorthand) (warning)
TAP version 13
# setUp common
# testCommon.factory() returns a unique database
ok 1 no error while opening db1
ok 2 no error while opening db2
ok 3 put key in db1
ok 4 got items from db2
ok 5 db2 should be empty
ok 6 no error while closing db1
ok 7 no error while closing db2
# tearDown
# setUp common
# db has manifest
ok 8 manifest is object
ok 9 additionalMethods is object
ok 10 truthy: bufferKeys
ok 11 truthy: snapshots
ok 12 false: permanence
ok 13 truthy: seek
ok 14 truthy: clear
ok 15 truthy: getMany
ok 16 truthy: status
ok 17 false: keyIterator
ok 18 false: valueIterator
ok 19 false: iteratorNextv
ok 20 false: iteratorAll
ok 21 false: idempotentOpen
ok 22 false: passiveOpen
ok 23 false: serialize
ok 24 false: createIfMissing
ok 25 false: errorIfExists
ok 26 false: deferredOpen
ok 27 false: openCallback
ok 28 false: promises
ok 29 false: streams
ok 30 truthy: encodings
ok 31 false: events
ok 32 truthy: additionalMethods
ok 33 manifest has unique identity
ok 34 manifest.additionalMethods has unique identity
ok 35 no open error
ok 36 manifest did not change after open
ok 37 no close error
ok 38 manifest did not change after close
# manifest has status
ok 39 should be strictly equal
ok 40 no open error
# tearDown
# setUp common
# test database open method exists
ok 41 database object returned
ok 42 open() function exists
# tearDown
# setUp
# test database open no-arg throws
ok 43 no-arg open() throws
# test callback-less, 1-arg, open() throws
ok 44 callback-less, 1-arg open() throws
# test database open, no options
ok 45 undefined
# test database open, options and callback
ok 46 undefined
# test database open, close and open
ok 47 undefined
ok 48 undefined
ok 49 undefined
# tearDown
# setUp common
# setUp db
# test close()
ok 50 no-arg close() throws
ok 51 non-callback close() throws
ok 52 undefined
# tearDown
# setUp common
# setUp db
# test argument-less put() throws
ok 53 no-arg put() throws
# test callback-less, 1-arg, put() throws
ok 54 callback-less, 1-arg put() throws
# test callback-less, 2-arg, put() throws
ok 55 callback-less, 2-arg put() throws
# test callback-less, 3-arg, put() throws
ok 56 callback-less, 3-arg put() throws
# test simple put()
ok 57 undefined
ok 58 null
ok 59 should be strictly equal
# tearDown
# setUp common
# setUp db
# test argument-less get() throws
ok 60 no-arg get() throws
# test callback-less, 1-arg, get() throws
ok 61 callback-less, 1-arg get() throws
# test callback-less, 3-arg, get() throws
ok 62 callback-less, 2-arg get() throws
# test simple get()
ok 63 undefined
ok 64 null
ok 65 should be strictly equal
ok 66 null
ok 67 should be strictly equal
ok 68 null
ok 69 should be string if not buffer
ok 70 should be strictly equal
# test simultaneous get()
ok 71 undefined
ok 72 null
ok 73 should be strictly equal
ok 74 null
ok 75 should be strictly equal
ok 76 null
ok 77 should be strictly equal
ok 78 null
ok 79 should be strictly equal
ok 80 null
ok 81 should be strictly equal
ok 82 null
ok 83 should be strictly equal
ok 84 null
ok 85 should be strictly equal
ok 86 null
ok 87 should be strictly equal
ok 88 null
ok 89 should be strictly equal
ok 90 null
ok 91 should be strictly equal
ok 92 should error
ok 93 should have correct error message
ok 94 value is undefined
ok 95 should error
ok 96 should have correct error message
ok 97 value is undefined
ok 98 should error
ok 99 should have correct error message
ok 100 value is undefined
ok 101 should error
ok 102 should have correct error message
ok 103 value is undefined
ok 104 should error
ok 105 should have correct error message
ok 106 value is undefined
ok 107 should error
ok 108 should have correct error message
ok 109 value is undefined
ok 110 should error
ok 111 should have correct error message
ok 112 value is undefined
ok 113 should error
ok 114 should have correct error message
ok 115 value is undefined
ok 116 should error
ok 117 should have correct error message
ok 118 value is undefined
ok 119 should error
ok 120 should have correct error message
ok 121 value is undefined
# test get() not found error is asynchronous
ok 122 should error
ok 123 should have correct error message
ok 124 value is undefined
ok 125 callback is asynchronous
# tearDown
# setUp common
# setUp db
# test argument-less del() throws
ok 126 no-arg del() throws
# test callback-less, 1-arg, del() throws
ok 127 callback-less, 1-arg del() throws
# test callback-less, 3-arg, del() throws
ok 128 callback-less, 2-arg del() throws
# test simple del()
ok 129 undefined
ok 130 undefined
ok 131 entry properly deleted
ok 132 value is undefined
ok 133 NotFound error
# test del on non-existent key
ok 134 undefined
# tearDown
# setUp common
# setUp db
# test get() with null key causes error
ok 135 has error
ok 136 should be truthy
ok 137 correct error message
ok 138 callback is asynchronous
# test del() with null key causes error
ok 139 has error
ok 140 should be truthy
ok 141 correct error message
ok 142 callback is asynchronous
# test getMany() with null key causes error
ok 143 callback (anonymous) is asynchronous
ok 144 callback (anonymous) is asynchronous
ok 145 has error
ok 146 should be truthy
ok 147 correct error message
ok 148 has error
ok 149 should be truthy
ok 150 correct error message
# test put() with null key causes error
ok 151 has error
ok 152 should be truthy
ok 153 correct error message
ok 154 callback is asynchronous
# test get() with undefined key causes error
ok 155 has error
ok 156 should be truthy
ok 157 correct error message
ok 158 callback is asynchronous
# test del() with undefined key causes error
ok 159 has error
ok 160 should be truthy
ok 161 correct error message
ok 162 callback is asynchronous
# test getMany() with undefined key causes error
ok 163 callback (anonymous) is asynchronous
ok 164 callback (anonymous) is asynchronous
ok 165 has error
ok 166 should be truthy
ok 167 correct error message
ok 168 has error
ok 169 should be truthy
ok 170 correct error message
# test put() with undefined key causes error
ok 171 has error
ok 172 should be truthy
ok 173 correct error message
ok 174 callback is asynchronous
# test get() with empty String key causes error
ok 175 has error
ok 176 should be truthy
ok 177 correct error message
ok 178 callback is asynchronous
# test del() with empty String key causes error
ok 179 has error
ok 180 should be truthy
ok 181 correct error message
ok 182 callback is asynchronous
# test getMany() with empty String key causes error
ok 183 callback (anonymous) is asynchronous
ok 184 callback (anonymous) is asynchronous
ok 185 has error
ok 186 should be truthy
ok 187 correct error message
ok 188 has error
ok 189 should be truthy
ok 190 correct error message
# test put() with empty String key causes error
ok 191 has error
ok 192 should be truthy
ok 193 correct error message
ok 194 callback is asynchronous
# test get() with empty Buffer key causes error
ok 195 has error
ok 196 should be truthy
ok 197 correct error message
ok 198 callback is asynchronous
# test del() with empty Buffer key causes error
ok 199 has error
ok 200 should be truthy
ok 201 correct error message
ok 202 callback is asynchronous
# test getMany() with empty Buffer key causes error
ok 203 callback (anonymous) is asynchronous
ok 204 callback (anonymous) is asynchronous
ok 205 has error
ok 206 should be truthy
ok 207 correct error message
ok 208 has error
ok 209 should be truthy
ok 210 correct error message
# test put() with empty Buffer key causes error
ok 211 has error
ok 212 should be truthy
ok 213 correct error message
ok 214 callback is asynchronous
# test get() with empty Array key causes error
ok 215 has error
ok 216 should be truthy
ok 217 correct error message
ok 218 callback is asynchronous
# test del() with empty Array key causes error
ok 219 has error
ok 220 should be truthy
ok 221 correct error message
ok 222 callback is asynchronous
# test getMany() with empty Array key causes error
ok 223 callback (anonymous) is asynchronous
ok 224 callback (anonymous) is asynchronous
ok 225 has error
ok 226 should be truthy
ok 227 correct error message
ok 228 has error
ok 229 should be truthy
ok 230 correct error message
# test put() with empty Array key causes error
ok 231 has error
ok 232 should be truthy
ok 233 correct error message
ok 234 callback is asynchronous
# test put() with null value causes error
ok 235 has error
ok 236 should be truthy
ok 237 correct error message
ok 238 callback is asynchronous
# test put() with undefined value causes error
ok 239 has error
ok 240 should be truthy
ok 241 correct error message
ok 242 callback is asynchronous
# test put()/get()/del() with `0` key
ok 243 undefined
ok 244 no error, has key/value for ``0` key`
ok 245 is a string
ok 246 should be strictly equal
ok 247 no error, deleted key/value for ``0` key`
ok 248 entry properly deleted
ok 249 should have correct error message
ok 250 value is undefined
ok 251 callback is asynchronous
# test put()/get()/del() with long String key
ok 252 undefined
ok 253 no error, has key/value for `long String key`
ok 254 is a string
ok 255 should be strictly equal
ok 256 no error, deleted key/value for `long String key`
ok 257 entry properly deleted
ok 258 should have correct error message
ok 259 value is undefined
ok 260 callback is asynchronous
# test put()/get()/del() with Buffer key
ok 261 undefined
ok 262 no error, has key/value for `Buffer key`
ok 263 is a string
ok 264 should be strictly equal
ok 265 no error, deleted key/value for `Buffer key`
ok 266 entry properly deleted
ok 267 should have correct error message
ok 268 value is undefined
ok 269 callback is asynchronous
# test put()/get()/del() with Array value
ok 270 undefined
ok 271 no error, has key/value for `Array value`
ok 272 is a string
ok 273 should be strictly equal
ok 274 no error, deleted key/value for `Array value`
ok 275 entry properly deleted
ok 276 should have correct error message
ok 277 value is undefined
ok 278 callback is asynchronous
# test put()/get()/del() with `false` value
ok 279 undefined
ok 280 no error, has key/value for ``false` value`
ok 281 is a string
ok 282 should be strictly equal
ok 283 no error, deleted key/value for ``false` value`
ok 284 entry properly deleted
ok 285 should have correct error message
ok 286 value is undefined
ok 287 callback is asynchronous
# test put()/get()/del() with `0` value
ok 288 undefined
ok 289 no error, has key/value for ``0` value`
ok 290 is a string
ok 291 should be strictly equal
ok 292 no error, deleted key/value for ``0` value`
ok 293 entry properly deleted
ok 294 should have correct error message
ok 295 value is undefined
ok 296 callback is asynchronous
# test put()/get()/del() with `NaN` value
ok 297 undefined
ok 298 no error, has key/value for ``NaN` value`
ok 299 is a string
ok 300 should be strictly equal
ok 301 no error, deleted key/value for ``NaN` value`
ok 302 entry properly deleted
ok 303 should have correct error message
ok 304 value is undefined
ok 305 callback is asynchronous
# test put()/get()/del() with empty String value
ok 306 undefined
ok 307 no error, has key/value for `empty String value`
ok 308 is a string
ok 309 should be strictly equal
ok 310 no error, deleted key/value for `empty String value`
ok 311 entry properly deleted
ok 312 should have correct error message
ok 313 value is undefined
ok 314 callback is asynchronous
# test put()/get()/del() with empty Buffer value
ok 315 undefined
ok 316 no error, has key/value for `empty Buffer value`
ok 317 is a string
ok 318 should be strictly equal
ok 319 no error, deleted key/value for `empty Buffer value`
ok 320 entry properly deleted
ok 321 should have correct error message
ok 322 value is undefined
ok 323 callback is asynchronous
# test put()/get()/del() with empty Array value
ok 324 undefined
ok 325 no error, has key/value for `empty Array value`
ok 326 is a string
ok 327 should be strictly equal
ok 328 no error, deleted key/value for `empty Array value`
ok 329 entry properly deleted
ok 330 should have correct error message
ok 331 value is undefined
ok 332 callback is asynchronous
# test put()/get()/del() with long String value
ok 333 undefined
ok 334 no error, has key/value for `long String value`
ok 335 is a string
ok 336 should be strictly equal
ok 337 no error, deleted key/value for `long String value`
ok 338 entry properly deleted
ok 339 should have correct error message
ok 340 value is undefined
ok 341 callback is asynchronous
# test put()/get()/del() with Buffer value
ok 342 undefined
ok 343 no error, has key/value for `Buffer value`
ok 344 is a string
ok 345 should be strictly equal
ok 346 no error, deleted key/value for `Buffer value`
ok 347 entry properly deleted
ok 348 should have correct error message
ok 349 value is undefined
ok 350 callback is asynchronous
# test put()/get()/del() with Array key
ok 351 undefined
ok 352 no error, has key/value for `Array key`
ok 353 is a string
ok 354 should be strictly equal
ok 355 no error, deleted key/value for `Array key`
ok 356 entry properly deleted
ok 357 should have correct error message
ok 358 value is undefined
ok 359 callback is asynchronous
# tearDown
# setUp db
# test getMany() requires an array argument (callback)
ok 360 callback (anonymous) is asynchronous
ok 361 callback (anonymous) is asynchronous
ok 362 should be strictly equal
ok 363 should be strictly equal
# test getMany() requires an array argument (promise)
ok 364 should be strictly equal
ok 365 should be strictly equal
ok 366 should be strictly equal
# test getMany() support is reflected in manifest
ok 367 should be strictly equal
# test simple getMany()
ok 368 undefined
ok 369 null
ok 370 got an array
ok 371 array has 1 element
ok 372 should be strictly equal
ok 373 null
ok 374 got an array
ok 375 array has 1 element
ok 376 should be strictly equal
ok 377 null
ok 378 should be string if not buffer
ok 379 should be deeply equivalent
# test getMany() with multiple keys
ok 380 undefined
ok 381 null
ok 382 should be deeply equivalent
ok 383 null
ok 384 maintains order of input keys
# test empty getMany()
ok 385 callback (anonymous) is asynchronous
ok 386 callback (anonymous) is asynchronous
ok 387 null
ok 388 should be deeply equivalent
ok 389 null
ok 390 should be deeply equivalent
# test not-found getMany()
ok 391 callback (anonymous) is asynchronous
ok 392 callback (anonymous) is asynchronous
ok 393 null
ok 394 should be deeply equivalent
ok 395 null
ok 396 should be deeply equivalent
# test getMany() with promise
ok 397 should be deeply equivalent
ok 398 should be deeply equivalent
ok 399 should be deeply equivalent
ok 400 should be deeply equivalent
ok 401 should be deeply equivalent
ok 402 should be deeply equivalent
# test simultaneous getMany()
ok 403 undefined
ok 404 null
ok 405 should be strictly equal
ok 406 should be strictly equal
ok 407 null
ok 408 should be strictly equal
ok 409 should be strictly equal
ok 410 null
ok 411 should be strictly equal
ok 412 should be strictly equal
ok 413 null
ok 414 should be strictly equal
ok 415 should be strictly equal
ok 416 null
ok 417 should be strictly equal
ok 418 should be strictly equal
ok 419 null
ok 420 should be strictly equal
ok 421 should be strictly equal
ok 422 null
ok 423 should be strictly equal
ok 424 should be strictly equal
ok 425 null
ok 426 should be strictly equal
ok 427 should be strictly equal
ok 428 null
ok 429 should be strictly equal
ok 430 should be strictly equal
ok 431 null
ok 432 should be strictly equal
ok 433 should be strictly equal
ok 434 null
ok 435 should be deeply equivalent
ok 436 null
ok 437 should be deeply equivalent
ok 438 null
ok 439 should be deeply equivalent
ok 440 null
ok 441 should be deeply equivalent
ok 442 null
ok 443 should be deeply equivalent
ok 444 null
ok 445 should be deeply equivalent
ok 446 null
ok 447 should be deeply equivalent
ok 448 null
ok 449 should be deeply equivalent
ok 450 null
ok 451 should be deeply equivalent
ok 452 null
ok 453 should be deeply equivalent
# test getMany() on new db
ok 454 should be strictly equal
ok 455 should be strictly equal
ok 456 (unnamed assert)
ok 457 should be strictly equal
ok 458 should be strictly equal
ok 459 (unnamed assert)
ok 460 callback (anonymous) is asynchronous
ok 461 callback (anonymous) is asynchronous
ok 462 callback (anonymous) is asynchronous
ok 463 callback (anonymous) is asynchronous
ok 464 should be strictly equal
ok 465 should be strictly equal
ok 466 should be strictly equal
ok 467 should be strictly equal
ok 468 should be strictly equal
ok 469 should be strictly equal
ok 470 should be strictly equal
ok 471 should be strictly equal
ok 472 undefined
ok 473 undefined
# test getMany() on opening db
ok 474 callback (open) is asynchronous
ok 475 callback (anonymous) is asynchronous
ok 476 callback (open) is asynchronous
ok 477 callback (anonymous) is asynchronous
ok 478 should be strictly equal
ok 479 should be strictly equal
ok 480 should be strictly equal
ok 481 should be strictly equal
ok 482 undefined
ok 483 undefined
# test getMany() on closed db
ok 484 undefined
ok 485 should be strictly equal
ok 486 undefined
ok 487 should be strictly equal
ok 488 undefined
ok 489 should be strictly equal
ok 490 callback (anonymous) is asynchronous
ok 491 should be strictly equal
ok 492 undefined
ok 493 should be strictly equal
ok 494 callback (anonymous) is asynchronous
ok 495 should be strictly equal
# test getMany() on closing db
ok 496 undefined
ok 497 callback (anonymous) is asynchronous
ok 498 should be strictly equal
ok 499 undefined
ok 500 callback (anonymous) is asynchronous
ok 501 should be strictly equal
ok 502 undefined
ok 503 undefined
# tearDown
# setUp common
# setUp db
# test callback-less, 2-arg, batch() throws
ok 504 callback-less, 2-arg batch() throws
# test batch() with missing `value`
ok 505 correct error message
# test batch() with null or undefined `value`
ok 506 correct error message
ok 507 correct error message
# test batch() with missing `key`
ok 508 got error
ok 509 correct error message
ok 510 callback is asynchronous
# test batch() with null or undefined `key`
ok 511 got error
ok 512 correct error message
ok 513 callback is asynchronous
ok 514 got error
ok 515 correct error message
ok 516 callback is asynchronous
# test batch() with empty `key`
ok 517 got error
ok 518 correct error message
ok 519 callback is asynchronous
ok 520 got error
ok 521 correct error message
ok 522 callback is asynchronous
ok 523 got error
ok 524 correct error message
ok 525 callback is asynchronous
# test batch() with missing `key` and `value`
ok 526 got error
ok 527 correct error message
ok 528 callback is asynchronous
# test batch() with missing `type`
ok 529 got error
ok 530 correct error message
ok 531 callback is asynchronous
# test batch() with wrong `type`
ok 532 got error
ok 533 correct error message
ok 534 callback is asynchronous
# test batch() with missing array
ok 535 got error
ok 536 correct error message
ok 537 callback is asynchronous
# test batch() with undefined array
ok 538 got error
ok 539 correct error message
ok 540 callback is asynchronous
# test batch() with null array
ok 541 got error
ok 542 correct error message
ok 543 callback is asynchronous
# test batch() with null options
ok 544 undefined
# test batch() with null element
ok 545 got error
ok 546 correct error message
ok 547 callback is asynchronous
# test batch() with undefined element
ok 548 got error
ok 549 correct error message
ok 550 callback is asynchronous
# test batch() with number element
ok 551 got error
ok 552 correct error message
ok 553 callback is asynchronous
# test batch() with boolean element
ok 554 got error
ok 555 correct error message
ok 556 callback is asynchronous
# test batch() with empty array
ok 557 no error from batch()
ok 558 callback is asynchronous
# test simple batch()
ok 559 undefined
ok 560 null
ok 561 should be strictly equal
ok 562 should be strictly equal
# test multiple batch()
ok 563 undefined
ok 564 null
ok 565 should be strictly equal
ok 566 should be strictly equal
ok 567 entry not found
ok 568 value is undefined
ok 569 NotFound error
ok 570 null
ok 571 should be strictly equal
ok 572 should be strictly equal
# test multiple batch()
ok 573 should error
ok 574 callback is asynchronous
ok 575 should not be found
ok 576 should not be found
# tearDown
# setUp common
# setUp db
# test batch has db reference
ok 577 should be truthy
# test batch#put() with missing `value`
ok 578 correct error message
# test batch#put() with missing `key`
ok 579 correct error message
# test batch#put() with null `key`
ok 580 correct error message
# test batch#put() with missing `key` and `value`
ok 581 correct error message
# test batch#put() with null or undefined `value`
ok 582 correct error message
ok 583 correct error message
# test batch#del() with missing `key`
ok 584 correct error message
# test batch#del() with null or undefined `key`
ok 585 correct error message
ok 586 correct error message
# test batch#clear() doesn't throw
# test batch#write() with no callback
ok 587 correct error message
# test batch#put() after write()
ok 588 correct error message
# test batch#del() after write()
ok 589 correct error message
# test batch#clear() after write()
ok 590 correct error message
# test batch#write() after write()
ok 591 correct error message
# test serialize object
ok 592 .key is set for .put and .del operations
ok 593 .value is set for .put operation
ok 594 .key is set for .put and .del operations
# test custom _serialize*
ok 595 should be deeply equivalent
ok 596 should be deeply equivalent
ok 597 should be deeply equivalent
ok 598 should be deeply equivalent
# test batch#write() with no operations
ok 599 no error from write()
ok 600 callback is asynchronous
# test basic batch
ok 601 undefined
ok 602 undefined
ok 603 undefined
ok 604 correct number of entries
ok 605 should be deeply equivalent
# tearDown
# setUp common
# setUp db
# test iterator has db reference
ok 606 should be truthy
# test iterator#next returns this in callback mode
ok 607 should be truthy
# test twice iterator#end() callback with error
ok 608 undefined
ok 609 returned error
ok 610 correct error
ok 611 should be strictly equal
ok 612 callback is asynchronous
# test iterator#next after iterator#end() callback with error
ok 613 undefined
ok 614 returned error
ok 615 correct error
ok 616 correct message
ok 617 callback is asynchronous
# test twice iterator#next() throws
ok 618 returned error
ok 619 correct error
ok 620 should be strictly equal
ok 621 callback is asynchronous
ok 622 null
ok 623 undefined
# test simple iterator()
ok 624 undefined
ok 625 null
ok 626 key argument is a string
ok 627 value argument is a string
ok 628 correct key
ok 629 correct value
ok 630 null
ok 631 key argument is a string
ok 632 value argument is a string
ok 633 correct key
ok 634 correct value
ok 635 null
ok 636 key argument is a string
ok 637 value argument is a string
ok 638 correct key
ok 639 correct value
ok 640 null
ok 641 err argument is nullish
ok 642 key argument is undefined
ok 643 value argument is undefined
ok 644 correct number of entries
# tearDown
# setUp common
# setUp db
# test full data collection
ok 645 undefined
ok 646 correct number of entries
ok 647 should be deeply equivalent
# test full data collection (flipped)
ok 648 undefined
ok 649 correct number of entries
ok 650 should be deeply equivalent
# test iterator with reverse=true
ok 651 undefined
ok 652 correct number of entries
ok 653 should be deeply equivalent
# test iterator with gte=00
ok 654 undefined
ok 655 correct number of entries
ok 656 should be deeply equivalent
# test iterator with gte=00 (flipped)
ok 657 undefined
ok 658 correct number of entries
ok 659 should be deeply equivalent
# test iterator with gte=50
ok 660 undefined
ok 661 correct number of entries
ok 662 should be deeply equivalent
# test iterator with gte=50 (flipped)
ok 663 undefined
ok 664 correct number of entries
ok 665 should be deeply equivalent
# test iterator with lte=50 and reverse=true
ok 666 undefined
ok 667 correct number of entries
ok 668 should be deeply equivalent
# test iterator with gte=49.5 (midway)
ok 669 undefined
ok 670 correct number of entries
ok 671 should be deeply equivalent
# test iterator with gte=49.5 (midway) (flipped)
ok 672 undefined
ok 673 correct number of entries
ok 674 should be deeply equivalent
# test iterator with gte=49999 (midway)
ok 675 undefined
ok 676 correct number of entries
ok 677 should be deeply equivalent
# test iterator with gte=49999 (midway) (flipped)
ok 678 undefined
ok 679 correct number of entries
ok 680 should be deeply equivalent
# test iterator with lte=49.5 (midway) and reverse=true
ok 681 undefined
ok 682 correct number of entries
ok 683 should be deeply equivalent
# test iterator with lt=49.5 (midway) and reverse=true
ok 684 undefined
ok 685 correct number of entries
ok 686 should be deeply equivalent
# test iterator with lt=50 and reverse=true
ok 687 undefined
ok 688 correct number of entries
ok 689 should be deeply equivalent
# test iterator with lte=50
ok 690 undefined
ok 691 correct number of entries
ok 692 should be deeply equivalent
# test iterator with lte=50 (flipped)
ok 693 undefined
ok 694 correct number of entries
ok 695 should be deeply equivalent
# test iterator with lte=50.5 (midway)
ok 696 undefined
ok 697 correct number of entries
ok 698 should be deeply equivalent
# test iterator with lte=50.5 (midway) (flipped)
ok 699 undefined
ok 700 correct number of entries
ok 701 should be deeply equivalent
# test iterator with lte=50555 (midway)
ok 702 undefined
ok 703 correct number of entries
ok 704 should be deeply equivalent
# test iterator with lte=50555 (midway) (flipped)
ok 705 undefined
ok 706 correct number of entries
ok 707 should be deeply equivalent
# test iterator with lt=50555 (midway)
ok 708 undefined
ok 709 correct number of entries
ok 710 should be deeply equivalent
# test iterator with lt=50555 (midway) (flipped)
ok 711 undefined
ok 712 correct number of entries
ok 713 should be deeply equivalent
# test iterator with gte=50.5 (midway) and reverse=true
ok 714 undefined
ok 715 correct number of entries
ok 716 should be deeply equivalent
# test iterator with gt=50.5 (midway) and reverse=true
ok 717 undefined
ok 718 correct number of entries
ok 719 should be deeply equivalent
# test iterator with gt=50 and reverse=true
ok 720 undefined
ok 721 correct number of entries
ok 722 should be deeply equivalent
# test iterator with lte=0
ok 723 undefined
ok 724 correct number of entries
ok 725 should be deeply equivalent
# test iterator with lte=0 (flipped)
ok 726 undefined
ok 727 correct number of entries
ok 728 should be deeply equivalent
# test iterator with lt=0
ok 729 undefined
ok 730 correct number of entries
ok 731 should be deeply equivalent
# test iterator with lt=0 (flipped)
ok 732 undefined
ok 733 correct number of entries
ok 734 should be deeply equivalent
# test iterator with gte=30 and lte=70
ok 735 undefined
ok 736 correct number of entries
ok 737 should be deeply equivalent
# test iterator with gte=30 and lte=70 (flipped)
ok 738 undefined
ok 739 correct number of entries
ok 740 should be deeply equivalent
# test iterator with gt=29 and lt=71
ok 741 undefined
ok 742 correct number of entries
ok 743 should be deeply equivalent
# test iterator with gt=29 and lt=71 (flipped)
ok 744 undefined
ok 745 correct number of entries
ok 746 should be deeply equivalent
# test iterator with gte=30 and lte=70 and reverse=true
ok 747 undefined
ok 748 correct number of entries
ok 749 should be deeply equivalent
# test iterator with gt=29 and lt=71 and reverse=true
ok 750 undefined
ok 751 correct number of entries
ok 752 should be deeply equivalent
# test iterator with limit=20
ok 753 undefined
ok 754 correct number of entries
ok 755 should be deeply equivalent
# test iterator with limit=20 and gte=20
ok 756 undefined
ok 757 correct number of entries
ok 758 should be deeply equivalent
# test iterator with limit=20 and reverse=true
ok 759 undefined
ok 760 correct number of entries
ok 761 should be deeply equivalent
# test iterator with limit=20 and lte=79 and reverse=true
ok 762 undefined
ok 763 correct number of entries
ok 764 should be deeply equivalent
# test iterator with limit=-1 should iterate over whole database
ok 765 undefined
ok 766 correct number of entries
ok 767 should be deeply equivalent
# test iterator with limit=0 should not iterate over anything
ok 768 undefined
ok 769 correct number of entries
ok 770 should be deeply equivalent
# test iterator with lte after limit
ok 771 undefined
ok 772 correct number of entries
ok 773 should be deeply equivalent
# test iterator with lte before limit
ok 774 undefined
ok 775 correct number of entries
ok 776 should be deeply equivalent
# test iterator with gte after database end
ok 777 undefined
ok 778 correct number of entries
ok 779 should be deeply equivalent
# test iterator with gte after database end (flipped)
ok 780 undefined
ok 781 correct number of entries
ok 782 should be deeply equivalent
# test iterator with gt after database end
ok 783 undefined
ok 784 correct number of entries
ok 785 should be deeply equivalent
# test iterator with gt after database end (flipped)
ok 786 undefined
ok 787 correct number of entries
ok 788 should be deeply equivalent
# test iterator with lte after database end and reverse=true
ok 789 undefined
ok 790 correct number of entries
ok 791 should be deeply equivalent
# test iterator with lt after database end
ok 792 undefined
ok 793 correct number of entries
ok 794 should be deeply equivalent
# test iterator with lt after database end (flipped)
ok 795 undefined
ok 796 correct number of entries
ok 797 should be deeply equivalent
# test iterator with lt at database end
ok 798 undefined
ok 799 correct number of entries
ok 800 should be deeply equivalent
# test iterator with lt at database end (flipped)
ok 801 undefined
ok 802 correct number of entries
ok 803 should be deeply equivalent
# test iterator with lte at database end
ok 804 undefined
ok 805 correct number of entries
ok 806 should be deeply equivalent
# test iterator with lte at database end (flipped)
ok 807 undefined
ok 808 correct number of entries
ok 809 should be deeply equivalent
# test iterator with lt before database end
ok 810 undefined
ok 811 correct number of entries
ok 812 should be deeply equivalent
# test iterator with lt before database end (flipped)
ok 813 undefined
ok 814 correct number of entries
ok 815 should be deeply equivalent
# test iterator with lte before database end
ok 816 undefined
ok 817 correct number of entries
ok 818 should be deeply equivalent
# test iterator with lte before database end (flipped)
ok 819 undefined
ok 820 correct number of entries
ok 821 should be deeply equivalent
# test iterator with lte and gte after database and reverse=true
ok 822 undefined
ok 823 correct number of entries
ok 824 should be deeply equivalent
# test iterator with lt and gt after database and reverse=true
ok 825 undefined
ok 826 correct number of entries
ok 827 should be deeply equivalent
# tearDown
# setup
ok 828 no open() error
ok 829 no batch() error
# for await...of db.iterator()
ok 830 ended
ok 831 should be deeply equivalent
# for await...of db.iterator() does not permit reuse
ok 832 nexted
ok 833 nexted
ok 834 should be strictly equal
# for await...of db.iterator() ends on user error
ok 835 should be strictly equal
ok 836 ended
# for await...of db.iterator() with user error and end() error
ok 837 no real error from end()
ok 838 should be strictly equal
ok 839 ended
# for await...of db.iterator() ends on iterator error
ok 840 nexted
ok 841 should be strictly equal
ok 842 ended
# for await...of db.iterator() with iterator error and end() error
ok 843 nexted
ok 844 no real error from end()
ok 845 should be strictly equal
ok 846 ended
# for await...of db.iterator() ends on user break
ok 847 got a chance to break
ok 848 ended
# for await...of db.iterator() with user break and end() error
ok 849 got a chance to break
ok 850 no real error from end()
ok 851 should be strictly equal
ok 852 ended
# teardown
ok 853 no close() error
# setUp common
# iterator#seek() throws if next() has not completed
ok 854 no error from open()
ok 855 got error
ok 856 no error from next()
ok 857 next is asynchronous
ok 858 no error from done()
ok 859 no error from close()
# iterator#seek() throws after end()
ok 860 no error from open()
ok 861 no error from next()
ok 862 no error from end()
ok 863 got error
ok 864 no error from done()
ok 865 no error from close()
# iterator#seek() to string target
ok 866 no error from open()
ok 867 no error from batch()
ok 868 no error
ok 869 key matches
ok 870 value matches
ok 871 no error
ok 872 end of iterator
ok 873 end of iterator
ok 874 no error from done()
ok 875 no error from close()
# iterator#seek() to buffer target
ok 876 no error from open()
ok 877 no error from batch()
ok 878 no error from next()
ok 879 key matches
ok 880 value matches
ok 881 no error from next()
ok 882 end of iterator
ok 883 end of iterator
ok 884 no error from done()
ok 885 no error from close()
# iterator#seek() on reverse iterator
ok 886 no error from open()
ok 887 no error from batch()
ok 888 no error
ok 889 key matches
ok 890 value matches
ok 891 no error from done()
ok 892 no error from close()
# iterator#seek() to out of range target
ok 893 no error from open()
ok 894 no error from batch()
ok 895 no error
ok 896 end of iterator
ok 897 end of iterator
ok 898 no error from done()
ok 899 no error from close()
# iterator#seek() on reverse iterator to out of range target
ok 900 no error from open()
ok 901 no error from batch()
ok 902 no error
ok 903 should be deeply equivalent
ok 904 should be deeply equivalent
ok 905 no error from done()
ok 906 no error from close()
# iterator#seek() respects range
ok 907 no error from open()
ok 908 no error from batch()
ok 909 no error from next()
ok 910 seek(4) on {"gt":"5"} yields undefined
ok 911 no error from next()
ok 912 seek(5) on {"gt":"5"} yields undefined
ok 913 no error from next()
ok 914 seek(6) on {"gt":"5"} yields 6
ok 915 no error from next()
ok 916 seek(4) on {"gte":"5"} yields undefined
ok 917 no error from next()
ok 918 seek(5) on {"gte":"5"} yields 5
ok 919 no error from next()
ok 920 seek(6) on {"gte":"5"} yields 6
ok 921 no error from next()
ok 922 seek(4) on {"lt":"5"} yields 4
ok 923 no error from next()
ok 924 seek(5) on {"lt":"5"} yields undefined
ok 925 no error from next()
ok 926 seek(6) on {"lt":"5"} yields undefined
ok 927 no error from next()
ok 928 seek(4) on {"lte":"5"} yields 4
ok 929 no error from next()
ok 930 seek(5) on {"lte":"5"} yields 5
ok 931 no error from next()
ok 932 seek(6) on {"lte":"5"} yields undefined
ok 933 no error from next()
ok 934 seek(4) on {"lt":"5","reverse":true} yields 4
ok 935 no error from next()
ok 936 seek(5) on {"lt":"5","reverse":true} yields undefined
ok 937 no error from next()
ok 938 seek(6) on {"lt":"5","reverse":true} yields undefined
ok 939 no error from next()
ok 940 seek(4) on {"lte":"5","reverse":true} yields 4
ok 941 no error from next()
ok 942 seek(5) on {"lte":"5","reverse":true} yields 5
ok 943 no error from next()
ok 944 seek(6) on {"lte":"5","reverse":true} yields undefined
ok 945 no error from next()
ok 946 seek(4) on {"gt":"5","reverse":true} yields undefined
ok 947 no error from next()
ok 948 seek(5) on {"gt":"5","reverse":true} yields undefined
ok 949 no error from next()
ok 950 seek(6) on {"gt":"5","reverse":true} yields 6
ok 951 no error from next()
ok 952 seek(4) on {"gte":"5","reverse":true} yields undefined
ok 953 no error from next()
ok 954 seek(5) on {"gte":"5","reverse":true} yields 5
ok 955 no error from next()
ok 956 seek(6) on {"gte":"5","reverse":true} yields 6
ok 957 no error from next()
ok 958 seek(7) on {"gt":"7","lt":"8"} yields undefined
ok 959 no error from next()
ok 960 seek(7) on {"gte":"7","lt":"8"} yields 7
ok 961 no error from next()
ok 962 seek(8) on {"gte":"7","lt":"8"} yields undefined
ok 963 no error from next()
ok 964 seek(8) on {"gt":"7","lte":"8"} yields 8
ok 965 no error from end()
ok 966 no error from end()
ok 967 no error from end()
ok 968 no error from end()
ok 969 no error from end()
ok 970 no error from end()
ok 971 no error from end()
ok 972 no error from end()
ok 973 no error from end()
ok 974 no error from end()
ok 975 no error from end()
ok 976 no error from end()
ok 977 no error from end()
ok 978 no error from end()
ok 979 no error from end()
ok 980 no error from end()
ok 981 no error from end()
ok 982 no error from end()
ok 983 no error from end()
ok 984 no error from end()
ok 985 no error from end()
ok 986 no error from end()
ok 987 no error from end()
ok 988 no error from end()
ok 989 no error from end()
ok 990 no error from end()
ok 991 no error from end()
ok 992 no error from end()
ok 993 no error from close()
# tearDown
# setUp common
# delete key after snapshotting
ok 994 no open error
ok 995 no put error
ok 996 no del error
ok 997 no next error
ok 998 got a key
ok 999 correct key
ok 1000 correct value
ok 1001 no run error
ok 1002 no iterator end error
# overwrite key after snapshotting
ok 1003 no open error
ok 1004 no put error
ok 1005 no put error
ok 1006 no next error
ok 1007 got a key
ok 1008 correct key
ok 1009 correct value
ok 1010 no run error
ok 1011 no iterator end error
# add key after snapshotting that sorts first
ok 1012 no open error
ok 1013 no put error
ok 1014 no put error
ok 1015 no next error
ok 1016 got a key
ok 1017 correct key
ok 1018 correct value
ok 1019 no run error
ok 1020 no iterator end error
# tearDown
# setUp common
# setUp db
# test argument-less clear() throws
ok 1021 no-arg clear() throws
# test simple clear() on string keys
ok 1022 no open error
ok 1023 no batch error
ok 1024 no concat error
ok 1025 has entries
ok 1026 no clear error
ok 1027 no concat error
ok 1028 has no entries
ok 1029 no close error
# test simple clear() on buffer keys
ok 1030 no open error
ok 1031 no batch error
ok 1032 no concat error
ok 1033 has entries
ok 1034 no clear error
ok 1035 no concat error
ok 1036 has no entries
ok 1037 no close error
# test simple clear() on mixed keys
ok 1038 no open error
ok 1039 no batch error
ok 1040 no concat error
ok 1041 has entries
ok 1042 no clear error
ok 1043 no concat error
ok 1044 has no entries
ok 1045 no close error
# test simple clear() on non-utf8 buffer keys
ok 1046 no open error
ok 1047 no batch error
ok 1048 no concat error
ok 1049 has entries
ok 1050 no clear error
ok 1051 no concat error
ok 1052 has no entries
ok 1053 no close error
# tearDown
# setUp common
# db#clear() with full range
ok 1054 no open error
ok 1055 no batch error
ok 1056 no clear error
ok 1057 no concat error
ok 1058 correct number of entries
ok 1059 should be deeply equivalent
# db#clear() with reverse=true
ok 1060 no open error
ok 1061 no batch error
ok 1062 no clear error
ok 1063 no concat error
ok 1064 correct number of entries
ok 1065 should be deeply equivalent
# db#clear() with gte=00
ok 1066 no open error
ok 1067 no batch error
ok 1068 no clear error
ok 1069 no concat error
ok 1070 correct number of entries
ok 1071 should be deeply equivalent
# db#clear() with gte=50
ok 1072 no open error
ok 1073 no batch error
ok 1074 no clear error
ok 1075 no concat error
ok 1076 correct number of entries
ok 1077 should be deeply equivalent
# db#clear() with lte=50 and reverse=true
ok 1078 no open error
ok 1079 no batch error
ok 1080 no clear error
ok 1081 no concat error
ok 1082 correct number of entries
ok 1083 should be deeply equivalent
# db#clear() with gte=49.5 (midway)
ok 1084 no open error
ok 1085 no batch error
ok 1086 no clear error
ok 1087 no concat error
ok 1088 correct number of entries
ok 1089 should be deeply equivalent
# db#clear() with gte=49999 (midway)
ok 1090 no open error
ok 1091 no batch error
ok 1092 no clear error
ok 1093 no concat error
ok 1094 correct number of entries
ok 1095 should be deeply equivalent
# db#clear() with lte=49.5 (midway) and reverse=true
ok 1096 no open error
ok 1097 no batch error
ok 1098 no clear error
ok 1099 no concat error
ok 1100 correct number of entries
ok 1101 should be deeply equivalent
# db#clear() with lt=49.5 (midway) and reverse=true
ok 1102 no open error
ok 1103 no batch error
ok 1104 no clear error
ok 1105 no concat error
ok 1106 correct number of entries
ok 1107 should be deeply equivalent
# db#clear() with lt=50 and reverse=true
ok 1108 no open error
ok 1109 no batch error
ok 1110 no clear error
ok 1111 no concat error
ok 1112 correct number of entries
ok 1113 should be deeply equivalent
# db#clear() with lte=50
ok 1114 no open error
ok 1115 no batch error
ok 1116 no clear error
ok 1117 no concat error
ok 1118 correct number of entries
ok 1119 should be deeply equivalent
# db#clear() with lte=50.5 (midway)
ok 1120 no open error
ok 1121 no batch error
ok 1122 no clear error
ok 1123 no concat error
ok 1124 correct number of entries
ok 1125 should be deeply equivalent
# db#clear() with lte=50555 (midway)
ok 1126 no open error
ok 1127 no batch error
ok 1128 no clear error
ok 1129 no concat error
ok 1130 correct number of entries
ok 1131 should be deeply equivalent
# db#clear() with lt=50555 (midway)
ok 1132 no open error
ok 1133 no batch error
ok 1134 no clear error
ok 1135 no concat error
ok 1136 correct number of entries
ok 1137 should be deeply equivalent
# db#clear() with gte=50.5 (midway) and reverse=true
ok 1138 no open error
ok 1139 no batch error
ok 1140 no clear error
ok 1141 no concat error
ok 1142 correct number of entries
ok 1143 should be deeply equivalent
# db#clear() with gt=50.5 (midway) and reverse=true
ok 1144 no open error
ok 1145 no batch error
ok 1146 no clear error
ok 1147 no concat error
ok 1148 correct number of entries
ok 1149 should be deeply equivalent
# db#clear() with gt=50 and reverse=true
ok 1150 no open error
ok 1151 no batch error
ok 1152 no clear error
ok 1153 no concat error
ok 1154 correct number of entries
ok 1155 should be deeply equivalent
# db#clear() with lte=0
ok 1156 no open error
ok 1157 no batch error
ok 1158 no clear error
ok 1159 no concat error
ok 1160 correct number of entries
ok 1161 should be deeply equivalent
# db#clear() with lt=0
ok 1162 no open error
ok 1163 no batch error
ok 1164 no clear error
ok 1165 no concat error
ok 1166 correct number of entries
ok 1167 should be deeply equivalent
# db#clear() with gte=30 and lte=70
ok 1168 no open error
ok 1169 no batch error
ok 1170 no clear error
ok 1171 no concat error
ok 1172 correct number of entries
ok 1173 should be deeply equivalent
# db#clear() with gt=29 and lt=71
ok 1174 no open error
ok 1175 no batch error
ok 1176 no clear error
ok 1177 no concat error
ok 1178 correct number of entries
ok 1179 should be deeply equivalent
# db#clear() with gte=30 and lte=70 and reverse=true
ok 1180 no open error
ok 1181 no batch error
ok 1182 no clear error
ok 1183 no concat error
ok 1184 correct number of entries
ok 1185 should be deeply equivalent
# db#clear() with gt=29 and lt=71 and reverse=true
ok 1186 no open error
ok 1187 no batch error
ok 1188 no clear error
ok 1189 no concat error
ok 1190 correct number of entries
ok 1191 should be deeply equivalent
# db#clear() with limit=20
ok 1192 no open error
ok 1193 no batch error
ok 1194 no clear error
ok 1195 no concat error
ok 1196 correct number of entries
ok 1197 should be deeply equivalent
# db#clear() with limit=20 and gte=20
ok 1198 no open error
ok 1199 no batch error
ok 1200 no clear error
ok 1201 no concat error
ok 1202 correct number of entries
ok 1203 should be deeply equivalent
# db#clear() with limit=20 and reverse=true
ok 1204 no open error
ok 1205 no batch error
ok 1206 no clear error
ok 1207 no concat error
ok 1208 correct number of entries
ok 1209 should be deeply equivalent
# db#clear() with limit=20 and lte=79 and reverse=true
ok 1210 no open error
ok 1211 no batch error
ok 1212 no clear error
ok 1213 no concat error
ok 1214 correct number of entries
ok 1215 should be deeply equivalent
# db#clear() with limit=-1 should clear whole database
ok 1216 no open error
ok 1217 no batch error
ok 1218 no clear error
ok 1219 no concat error
ok 1220 correct number of entries
ok 1221 should be deeply equivalent
# db#clear() with limit=0 should not clear anything
ok 1222 no open error
ok 1223 no batch error
ok 1224 no clear error
ok 1225 no concat error
ok 1226 correct number of entries
ok 1227 should be deeply equivalent
# db#clear() with lte after limit
ok 1228 no open error
ok 1229 no batch error
ok 1230 no clear error
ok 1231 no concat error
ok 1232 correct number of entries
ok 1233 should be deeply equivalent
# db#clear() with lte before limit
ok 1234 no open error
ok 1235 no batch error
ok 1236 no clear error
ok 1237 no concat error
ok 1238 correct number of entries
ok 1239 should be deeply equivalent
# db#clear() with gte after database end
ok 1240 no open error
ok 1241 no batch error
ok 1242 no clear error
ok 1243 no concat error
ok 1244 correct number of entries
ok 1245 should be deeply equivalent
# db#clear() with gt after database end
ok 1246 no open error
ok 1247 no batch error
ok 1248 no clear error
ok 1249 no concat error
ok 1250 correct number of entries
ok 1251 should be deeply equivalent
# db#clear() with lte after database end and reverse=true
ok 1252 no open error
ok 1253 no batch error
ok 1254 no clear error
ok 1255 no concat error
ok 1256 correct number of entries
ok 1257 should be deeply equivalent
# db#clear() with lte and gte after database and reverse=true
ok 1258 no open error
ok 1259 no batch error
ok 1260 no clear error
ok 1261 no concat error
ok 1262 correct number of entries
ok 1263 should be deeply equivalent
# db#clear() with lt and gt after database and reverse=true
ok 1264 no open error
ok 1265 no batch error
ok 1266 no clear error
ok 1267 no concat error
ok 1268 correct number of entries
ok 1269 should be deeply equivalent
# tearDown
# opens and closes the underlying db
ok 1270 open called
ok 1271 no error
ok 1272 close called
ok 1273 no error
# encodings default to utf8
ok 1274 .db should be set
ok 1275 .codec should be set
ok 1276 correct defaults
# default utf8 encoding stringifies numbers
ok 1277 should be strictly equal
ok 1278 should be strictly equal
ok 1279 should be deeply equivalent
# test safe decode in get
ok 1280 no error
ok 1281 should be strictly equal
# can decode from string to json
ok 1282 no error
ok 1283 no error
ok 1284 JSON.parse
# can decode from json to string
ok 1285 no error
ok 1286 no error
ok 1287 JSON.stringify
# binary encoding, using batch
ok 1288 no error
ok 1289 no error
ok 1290 should be deeply equivalent
ok 1291 no error
ok 1292 should be deeply equivalent
# default encoding retrieves a string from underlying store
ok 1293 .asBuffer is false
# custom value encoding that retrieves a string from underlying store
ok 1294 .asBuffer is false
# get() forwards error from underlying store
ok 1295 should be strictly equal
# getMany() skips decoding not-found values
ok 1296 no open() error
ok 1297 no put() error
ok 1298 should be strictly equal
ok 1299 no getMany() error
ok 1300 should be deeply equivalent
ok 1301 undefined
# getMany() forwards decode error
ok 1302 no open() error
ok 1303 no put() error
ok 1304 should be strictly equal
ok 1305 should be strictly equal
# _del() encodes key
ok 1306 should be strictly equal
# chainedBatch.put() encodes key and value
ok 1307 should be strictly equal
ok 1308 should be strictly equal
# chainedBatch.put() takes custom encoding
ok 1309 should be strictly equal
ok 1310 should be strictly equal
ok 1311 should be strictly equal
ok 1312 should be strictly equal
# chainedBatch.del() encodes key
ok 1313 should be strictly equal
# chainedBatch.del() takes custom encoding
ok 1314 should be strictly equal
ok 1315 should be strictly equal
# chainedBatch.clear() is forwarded to underlying store
ok 1316 called
# chainedBatch.write() is forwarded to underlying store
ok 1317 called
# custom value encoding that retrieves a buffer from underlying store
ok 1318 .asBuffer is true
# .keyAsBuffer and .valueAsBuffer defaults to false
ok 1319 should be strictly equal
ok 1320 should be strictly equal
# .keyAsBuffer and .valueAsBuffer as buffers if encoding says so
ok 1321 should be strictly equal
ok 1322 should be strictly equal
# .keyAsBuffer and .valueAsBuffer as strings if encoding says so
ok 1323 should be strictly equal
ok 1324 should be strictly equal
# iterator options.keys and options.values default to true
ok 1325 should be strictly equal
ok 1326 should be strictly equal
# iterator skips keys if options.keys is false
ok 1327 should be strictly equal
ok 1328 no next error
ok 1329 normalized key to undefined
ok 1330 got value
# iterator skips values if options.values is false
ok 1331 should be strictly equal
ok 1332 no next error
ok 1333 got key
ok 1334 normalized value to undefined
# iterator encodes range options
ok 1335 should be strictly equal
ok 1336 should be strictly equal
ok 1337 should be strictly equal
ok 1338 should be strictly equal
ok 1339 should be strictly equal
# iterator does not strip nullish range options
ok 1340 should be strictly equal
ok 1341 should be strictly equal
ok 1342 should be strictly equal
ok 1343 should be strictly equal
ok 1344 should be truthy
ok 1345 should be truthy
ok 1346 should be truthy
ok 1347 should be truthy
ok 1348 should be strictly equal
ok 1349 should be strictly equal
ok 1350 should be strictly equal
ok 1351 should be strictly equal
# iterator does not add nullish range options
ok 1352 should be falsy
ok 1353 should be falsy
ok 1354 should be falsy
ok 1355 should be falsy
# iterator forwards next() error from underlying iterator
ok 1356 should be strictly equal
# iterator forwards end() to underlying iterator
ok 1357 called
ok 1358 called
# iterator catches decoding error from keyEncoding
ok 1359 should be strictly equal
ok 1360 should be strictly equal
ok 1361 should be strictly equal
ok 1362 should be strictly equal
ok 1363 should be strictly equal
# iterator catches decoding error from valueEncoding
ok 1364 should be strictly equal
ok 1365 should be strictly equal
ok 1366 should be strictly equal
ok 1367 should be strictly equal
ok 1368 should be strictly equal
# proxies approximateSize() if it exists
ok 1369 should be strictly equal
ok 1370 should be truthy
ok 1371 should be strictly equal
ok 1372 should be falsy
# proxies compactRange() if it exists
ok 1373 should be strictly equal
ok 1374 should be truthy
ok 1375 should be strictly equal
ok 1376 should be falsy
# encodes start and end of approximateSize()
ok 1377 should be strictly equal
ok 1378 should be strictly equal
# encodes start and end of compactRange()
ok 1379 should be strictly equal
ok 1380 should be strictly equal
# encodes start and end of approximateSize() with custom encoding
ok 1381 should be strictly equal
ok 1382 should be strictly equal
# encodes start and end of compactRange() with custom encoding
ok 1383 should be strictly equal
ok 1384 should be strictly equal
# encodes seek target
ok 1385 encoded number
# encodes seek target with custom encoding
ok 1386 encoded targets
# encodes nullish seek target
ok 1387 encoded
# clear() forwards default options
ok 1388 should be strictly equal
ok 1389 should be strictly equal
ok 1390 should be strictly equal
# clear() forwards error from underlying store
ok 1391 should be strictly equal
# clear() encodes range options
ok 1392 should be strictly equal
ok 1393 should be strictly equal
ok 1394 should be strictly equal
ok 1395 should be strictly equal
ok 1396 should be strictly equal
# clear() does not strip nullish range options
ok 1397 should be strictly equal
ok 1398 should be strictly equal
ok 1399 should be strictly equal
ok 1400 should be strictly equal
ok 1401 should be truthy
ok 1402 should be truthy
ok 1403 should be truthy
ok 1404 should be truthy
ok 1405 should be strictly equal
ok 1406 should be strictly equal
ok 1407 should be strictly equal
ok 1408 should be strictly equal
# clear() does not add nullish range options
ok 1409 should be falsy
ok 1410 should be falsy
ok 1411 should be falsy
ok 1412 should be falsy

1..1412
# tests 1412
# pass  1412

# ok

----------|---------|----------|---------|---------|-------------------
File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------|---------|----------|---------|---------|-------------------
All files |   99.19 |    96.87 |     100 |     100 |                   
 index.js |   99.19 |    96.87 |     100 |     100 | 92                
----------|---------|----------|---------|---------|-------------------
https://github.com/Level/memdown.git
memdown.js
DirectBloated/memdown
memdown
2d4b09c

added 1212 packages, and audited 1213 packages in 12s

251 packages are looking for funding
  run `npm fund` for details

6 vulnerabilities (1 moderate, 4 high, 1 critical)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> memdown@6.1.1 test
> standard && hallmark && (nyc -s node test.js | faucet) && nyc report

  /data/js-variants/multee/DirectBloated/memdown/test.js:12:3: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/memdown/test.js:479:25: Expected property shorthand. (object-shorthand) (warning)

# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# testCommon.factory() returns a unique database[K

  ok [1m[32m1[0m no error while opening db1[K
  ok [1m[32m2[0m no error while opening db2[K
  ok [1m[32m3[0m put key in db1[K
  ok [1m[32m4[0m got items from db2[K
  ok [1m[32m5[0m db2 should be empty[K
  ok [1m[32m6[0m no error while closing db1[K
  ok [1m[32m7[0m no error while closing db2[K
[1A[1G[1m[32m✓ testCommon.factory() returns a unique database[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# db has manifest[K

  ok [1m[32m8[0m manifest is object[K
  ok [1m[32m9[0m additionalMethods is object[K
  ok [1m[32m10[0m truthy: bufferKeys[K
  ok [1m[32m11[0m truthy: snapshots[K
  ok [1m[32m12[0m false: permanence[K
  ok [1m[32m13[0m truthy: seek[K
  ok [1m[32m14[0m truthy: clear[K
  ok [1m[32m15[0m truthy: getMany[K
  ok [1m[32m16[0m truthy: status[K
  ok [1m[32m17[0m false: keyIterator[K
  ok [1m[32m18[0m false: valueIterator[K
  ok [1m[32m19[0m false: iteratorNextv[K
  ok [1m[32m20[0m false: iteratorAll[K
  ok [1m[32m21[0m false: idempotentOpen[K
  ok [1m[32m22[0m false: passiveOpen[K
  ok [1m[32m23[0m false: serialize[K
  ok [1m[32m24[0m false: createIfMissing[K
  ok [1m[32m25[0m false: errorIfExists[K
  ok [1m[32m26[0m false: deferredOpen[K
  ok [1m[32m27[0m false: openCallback[K
  ok [1m[32m28[0m false: promises[K
  ok [1m[32m29[0m false: streams[K
  ok [1m[32m30[0m false: encodings[K
  ok [1m[32m31[0m false: events[K
  ok [1m[32m32[0m truthy: additionalMethods[K
  ok [1m[32m33[0m manifest has unique identity[K
  ok [1m[32m34[0m manifest.additionalMethods has unique identity[K
  ok [1m[32m35[0m no open error[K
  ok [1m[32m36[0m manifest did not change after open[K
  ok [1m[32m37[0m no close error[K
  ok [1m[32m38[0m manifest did not change after close[K
[1A[1G[1m[32m✓ db has manifest[0m[1B[1G
# manifest has status[K

  ok [1m[32m39[0m should be strictly equal[K
  ok [1m[32m40[0m no open error[K
[1A[1G[1m[32m✓ manifest has status[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# test database open method exists[K

  ok [1m[32m41[0m database object returned[K
  ok [1m[32m42[0m open() function exists[K
[1A[1G[1m[32m✓ test database open method exists[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp[K

[1A[1G[1m[32m✓ setUp[0m[1B[1G
# test database open no-arg throws[K

  ok [1m[32m43[0m no-arg open() throws[K
[1A[1G[1m[32m✓ test database open no-arg throws[0m[1B[1G
# test callback-less, 1-arg, open() throws[K

  ok [1m[32m44[0m callback-less, 1-arg open() throws[K
[1A[1G[1m[32m✓ test callback-less, 1-arg, open() throws[0m[1B[1G
# test database open, no options[K

  ok [1m[32m45[0m undefined[K
[1A[1G[1m[32m✓ test database open, no options[0m[1B[1G
# test database open, options and callback[K

  ok [1m[32m46[0m undefined[K
[1A[1G[1m[32m✓ test database open, options and callback[0m[1B[1G
# test database open, close and open[K

  ok [1m[32m47[0m undefined[K
  ok [1m[32m48[0m undefined[K
  ok [1m[32m49[0m undefined[K
[1A[1G[1m[32m✓ test database open, close and open[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test close()[K

  ok [1m[32m50[0m no-arg close() throws[K
  ok [1m[32m51[0m non-callback close() throws[K
  ok [1m[32m52[0m undefined[K
[1A[1G[1m[32m✓ test close()[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test argument-less put() throws[K

  ok [1m[32m53[0m no-arg put() throws[K
[1A[1G[1m[32m✓ test argument-less put() throws[0m[1B[1G
# test callback-less, 1-arg, put() throws[K

  ok [1m[32m54[0m callback-less, 1-arg put() throws[K
[1A[1G[1m[32m✓ test callback-less, 1-arg, put() throws[0m[1B[1G
# test callback-less, 2-arg, put() throws[K

  ok [1m[32m55[0m callback-less, 2-arg put() throws[K
[1A[1G[1m[32m✓ test callback-less, 2-arg, put() throws[0m[1B[1G
# test callback-less, 3-arg, put() throws[K

  ok [1m[32m56[0m callback-less, 3-arg put() throws[K
[1A[1G[1m[32m✓ test callback-less, 3-arg, put() throws[0m[1B[1G
# test simple put()[K

  ok [1m[32m57[0m undefined[K
  ok [1m[32m58[0m null[K
  ok [1m[32m59[0m should be strictly equal[K
[1A[1G[1m[32m✓ test simple put()[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test argument-less get() throws[K

  ok [1m[32m60[0m no-arg get() throws[K
[1A[1G[1m[32m✓ test argument-less get() throws[0m[1B[1G
# test callback-less, 1-arg, get() throws[K

  ok [1m[32m61[0m callback-less, 1-arg get() throws[K
[1A[1G[1m[32m✓ test callback-less, 1-arg, get() throws[0m[1B[1G
# test callback-less, 3-arg, get() throws[K

  ok [1m[32m62[0m callback-less, 2-arg get() throws[K
[1A[1G[1m[32m✓ test callback-less, 3-arg, get() throws[0m[1B[1G
# test simple get()[K

  ok [1m[32m63[0m undefined[K
  ok [1m[32m64[0m null[K
  ok [1m[32m65[0m should not be string by default[K
  ok [1m[32m66[0m should be strictly equal[K
  ok [1m[32m67[0m null[K
  ok [1m[32m68[0m should not be string by default[K
  ok [1m[32m69[0m should be strictly equal[K
  ok [1m[32m70[0m null[K
  ok [1m[32m71[0m should be string if not buffer[K
  ok [1m[32m72[0m should be strictly equal[K
[1A[1G[1m[32m✓ test simple get()[0m[1B[1G
# test simultaneous get()[K

  ok [1m[32m73[0m undefined[K
  ok [1m[32m74[0m null[K
  ok [1m[32m75[0m should be strictly equal[K
  ok [1m[32m76[0m null[K
  ok [1m[32m77[0m should be strictly equal[K
  ok [1m[32m78[0m null[K
  ok [1m[32m79[0m should be strictly equal[K
  ok [1m[32m80[0m null[K
  ok [1m[32m81[0m should be strictly equal[K
  ok [1m[32m82[0m null[K
  ok [1m[32m83[0m should be strictly equal[K
  ok [1m[32m84[0m null[K
  ok [1m[32m85[0m should be strictly equal[K
  ok [1m[32m86[0m null[K
  ok [1m[32m87[0m should be strictly equal[K
  ok [1m[32m88[0m null[K
  ok [1m[32m89[0m should be strictly equal[K
  ok [1m[32m90[0m null[K
  ok [1m[32m91[0m should be strictly equal[K
  ok [1m[32m92[0m null[K
  ok [1m[32m93[0m should be strictly equal[K
  ok [1m[32m94[0m should error[K
  ok [1m[32m95[0m should have correct error message[K
  ok [1m[32m96[0m value is undefined[K
  ok [1m[32m97[0m should error[K
  ok [1m[32m98[0m should have correct error message[K
  ok [1m[32m99[0m value is undefined[K
  ok [1m[32m100[0m should error[K
  ok [1m[32m101[0m should have correct error message[K
  ok [1m[32m102[0m value is undefined[K
  ok [1m[32m103[0m should error[K
  ok [1m[32m104[0m should have correct error message[K
  ok [1m[32m105[0m value is undefined[K
  ok [1m[32m106[0m should error[K
  ok [1m[32m107[0m should have correct error message[K
  ok [1m[32m108[0m value is undefined[K
  ok [1m[32m109[0m should error[K
  ok [1m[32m110[0m should have correct error message[K
  ok [1m[32m111[0m value is undefined[K
  ok [1m[32m112[0m should error[K
  ok [1m[32m113[0m should have correct error message[K
  ok [1m[32m114[0m value is undefined[K
  ok [1m[32m115[0m should error[K
  ok [1m[32m116[0m should have correct error message[K
  ok [1m[32m117[0m value is undefined[K
  ok [1m[32m118[0m should error[K
  ok [1m[32m119[0m should have correct error message[K
  ok [1m[32m120[0m value is undefined[K
  ok [1m[32m121[0m should error[K
  ok [1m[32m122[0m should have correct error message[K
  ok [1m[32m123[0m value is undefined[K
[1A[1G[1m[32m✓ test simultaneous get()[0m[1B[1G
# test get() not found error is asynchronous[K

  ok [1m[32m124[0m should error[K
  ok [1m[32m125[0m should have correct error message[K
  ok [1m[32m126[0m value is undefined[K
  ok [1m[32m127[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test get() not found error is asynchronous[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test argument-less del() throws[K

  ok [1m[32m128[0m no-arg del() throws[K
[1A[1G[1m[32m✓ test argument-less del() throws[0m[1B[1G
# test callback-less, 1-arg, del() throws[K

  ok [1m[32m129[0m callback-less, 1-arg del() throws[K
[1A[1G[1m[32m✓ test callback-less, 1-arg, del() throws[0m[1B[1G
# test callback-less, 3-arg, del() throws[K

  ok [1m[32m130[0m callback-less, 2-arg del() throws[K
[1A[1G[1m[32m✓ test callback-less, 3-arg, del() throws[0m[1B[1G
# test simple del()[K

  ok [1m[32m131[0m undefined[K
  ok [1m[32m132[0m undefined[K
  ok [1m[32m133[0m entry properly deleted[K
  ok [1m[32m134[0m value is undefined[K
  ok [1m[32m135[0m NotFound error[K
[1A[1G[1m[32m✓ test simple del()[0m[1B[1G
# test del on non-existent key[K

  ok [1m[32m136[0m undefined[K
[1A[1G[1m[32m✓ test del on non-existent key[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test get() with null key causes error[K

  ok [1m[32m137[0m has error[K
  ok [1m[32m138[0m should be truthy[K
  ok [1m[32m139[0m correct error message[K
  ok [1m[32m140[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test get() with null key causes error[0m[1B[1G
# test del() with null key causes error[K

  ok [1m[32m141[0m has error[K
  ok [1m[32m142[0m should be truthy[K
  ok [1m[32m143[0m correct error message[K
  ok [1m[32m144[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test del() with null key causes error[0m[1B[1G
# test getMany() with null key causes error[K

  ok [1m[32m145[0m callback (anonymous) is asynchronous[K
  ok [1m[32m146[0m callback (anonymous) is asynchronous[K
  ok [1m[32m147[0m has error[K
  ok [1m[32m148[0m should be truthy[K
  ok [1m[32m149[0m correct error message[K
  ok [1m[32m150[0m has error[K
  ok [1m[32m151[0m should be truthy[K
  ok [1m[32m152[0m correct error message[K
[1A[1G[1m[32m✓ test getMany() with null key causes error[0m[1B[1G
# test put() with null key causes error[K

  ok [1m[32m153[0m has error[K
  ok [1m[32m154[0m should be truthy[K
  ok [1m[32m155[0m correct error message[K
  ok [1m[32m156[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put() with null key causes error[0m[1B[1G
# test get() with undefined key causes error[K

  ok [1m[32m157[0m has error[K
  ok [1m[32m158[0m should be truthy[K
  ok [1m[32m159[0m correct error message[K
  ok [1m[32m160[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test get() with undefined key causes error[0m[1B[1G
# test del() with undefined key causes error[K

  ok [1m[32m161[0m has error[K
  ok [1m[32m162[0m should be truthy[K
  ok [1m[32m163[0m correct error message[K
  ok [1m[32m164[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test del() with undefined key causes error[0m[1B[1G
# test getMany() with undefined key causes error[K

  ok [1m[32m165[0m callback (anonymous) is asynchronous[K
  ok [1m[32m166[0m callback (anonymous) is asynchronous[K
  ok [1m[32m167[0m has error[K
  ok [1m[32m168[0m should be truthy[K
  ok [1m[32m169[0m correct error message[K
  ok [1m[32m170[0m has error[K
  ok [1m[32m171[0m should be truthy[K
  ok [1m[32m172[0m correct error message[K
[1A[1G[1m[32m✓ test getMany() with undefined key causes error[0m[1B[1G
# test put() with undefined key causes error[K

  ok [1m[32m173[0m has error[K
  ok [1m[32m174[0m should be truthy[K
  ok [1m[32m175[0m correct error message[K
  ok [1m[32m176[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put() with undefined key causes error[0m[1B[1G
# test get() with empty String key causes error[K

  ok [1m[32m177[0m has error[K
  ok [1m[32m178[0m should be truthy[K
  ok [1m[32m179[0m correct error message[K
  ok [1m[32m180[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test get() with empty String key causes error[0m[1B[1G
# test del() with empty String key causes error[K

  ok [1m[32m181[0m has error[K
  ok [1m[32m182[0m should be truthy[K
  ok [1m[32m183[0m correct error message[K
  ok [1m[32m184[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test del() with empty String key causes error[0m[1B[1G
# test getMany() with empty String key causes error[K

  ok [1m[32m185[0m callback (anonymous) is asynchronous[K
  ok [1m[32m186[0m callback (anonymous) is asynchronous[K
  ok [1m[32m187[0m has error[K
  ok [1m[32m188[0m should be truthy[K
  ok [1m[32m189[0m correct error message[K
  ok [1m[32m190[0m has error[K
  ok [1m[32m191[0m should be truthy[K
  ok [1m[32m192[0m correct error message[K
[1A[1G[1m[32m✓ test getMany() with empty String key causes error[0m[1B[1G
# test put() with empty String key causes error[K

  ok [1m[32m193[0m has error[K
  ok [1m[32m194[0m should be truthy[K
  ok [1m[32m195[0m correct error message[K
  ok [1m[32m196[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put() with empty String key causes error[0m[1B[1G
# test get() with empty Buffer key causes error[K

  ok [1m[32m197[0m has error[K
  ok [1m[32m198[0m should be truthy[K
  ok [1m[32m199[0m correct error message[K
  ok [1m[32m200[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test get() with empty Buffer key causes error[0m[1B[1G
# test del() with empty Buffer key causes error[K

  ok [1m[32m201[0m has error[K
  ok [1m[32m202[0m should be truthy[K
  ok [1m[32m203[0m correct error message[K
  ok [1m[32m204[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test del() with empty Buffer key causes error[0m[1B[1G
# test getMany() with empty Buffer key causes error[K

  ok [1m[32m205[0m callback (anonymous) is asynchronous[K
  ok [1m[32m206[0m callback (anonymous) is asynchronous[K
  ok [1m[32m207[0m has error[K
  ok [1m[32m208[0m should be truthy[K
  ok [1m[32m209[0m correct error message[K
  ok [1m[32m210[0m has error[K
  ok [1m[32m211[0m should be truthy[K
  ok [1m[32m212[0m correct error message[K
[1A[1G[1m[32m✓ test getMany() with empty Buffer key causes error[0m[1B[1G
# test put() with empty Buffer key causes error[K

  ok [1m[32m213[0m has error[K
  ok [1m[32m214[0m should be truthy[K
  ok [1m[32m215[0m correct error message[K
  ok [1m[32m216[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put() with empty Buffer key causes error[0m[1B[1G
# test get() with empty Array key causes error[K

  ok [1m[32m217[0m has error[K
  ok [1m[32m218[0m should be truthy[K
  ok [1m[32m219[0m correct error message[K
  ok [1m[32m220[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test get() with empty Array key causes error[0m[1B[1G
# test del() with empty Array key causes error[K

  ok [1m[32m221[0m has error[K
  ok [1m[32m222[0m should be truthy[K
  ok [1m[32m223[0m correct error message[K
  ok [1m[32m224[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test del() with empty Array key causes error[0m[1B[1G
# test getMany() with empty Array key causes error[K

  ok [1m[32m225[0m callback (anonymous) is asynchronous[K
  ok [1m[32m226[0m callback (anonymous) is asynchronous[K
  ok [1m[32m227[0m has error[K
  ok [1m[32m228[0m should be truthy[K
  ok [1m[32m229[0m correct error message[K
  ok [1m[32m230[0m has error[K
  ok [1m[32m231[0m should be truthy[K
  ok [1m[32m232[0m correct error message[K
[1A[1G[1m[32m✓ test getMany() with empty Array key causes error[0m[1B[1G
# test put() with empty Array key causes error[K

  ok [1m[32m233[0m has error[K
  ok [1m[32m234[0m should be truthy[K
  ok [1m[32m235[0m correct error message[K
  ok [1m[32m236[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put() with empty Array key causes error[0m[1B[1G
# test put() with null value causes error[K

  ok [1m[32m237[0m has error[K
  ok [1m[32m238[0m should be truthy[K
  ok [1m[32m239[0m correct error message[K
  ok [1m[32m240[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put() with null value causes error[0m[1B[1G
# test put() with undefined value causes error[K

  ok [1m[32m241[0m has error[K
  ok [1m[32m242[0m should be truthy[K
  ok [1m[32m243[0m correct error message[K
  ok [1m[32m244[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put() with undefined value causes error[0m[1B[1G
# test put()/get()/del() with `0` key[K

  ok [1m[32m245[0m undefined[K
  ok [1m[32m246[0m no error, has key/value for ``0` key`[K
  ok [1m[32m247[0m is a Buffer[K
  ok [1m[32m248[0m should be strictly equal[K
  ok [1m[32m249[0m no error, deleted key/value for ``0` key`[K
  ok [1m[32m250[0m entry properly deleted[K
  ok [1m[32m251[0m should have correct error message[K
  ok [1m[32m252[0m value is undefined[K
  ok [1m[32m253[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with `0` key[0m[1B[1G
# test put()/get()/del() with long String key[K

  ok [1m[32m254[0m undefined[K
  ok [1m[32m255[0m no error, has key/value for `long String key`[K
  ok [1m[32m256[0m is a Buffer[K
  ok [1m[32m257[0m should be strictly equal[K
  ok [1m[32m258[0m no error, deleted key/value for `long String key`[K
  ok [1m[32m259[0m entry properly deleted[K
  ok [1m[32m260[0m should have correct error message[K
  ok [1m[32m261[0m value is undefined[K
  ok [1m[32m262[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with long String key[0m[1B[1G
# test put()/get()/del() with Buffer key[K

  ok [1m[32m263[0m undefined[K
  ok [1m[32m264[0m no error, has key/value for `Buffer key`[K
  ok [1m[32m265[0m is a Buffer[K
  ok [1m[32m266[0m should be strictly equal[K
  ok [1m[32m267[0m no error, deleted key/value for `Buffer key`[K
  ok [1m[32m268[0m entry properly deleted[K
  ok [1m[32m269[0m should have correct error message[K
  ok [1m[32m270[0m value is undefined[K
  ok [1m[32m271[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with Buffer key[0m[1B[1G
# test put()/get()/del() with Array value[K

  ok [1m[32m272[0m undefined[K
  ok [1m[32m273[0m no error, has key/value for `Array value`[K
  ok [1m[32m274[0m is a Buffer[K
  ok [1m[32m275[0m should be strictly equal[K
  ok [1m[32m276[0m no error, deleted key/value for `Array value`[K
  ok [1m[32m277[0m entry properly deleted[K
  ok [1m[32m278[0m should have correct error message[K
  ok [1m[32m279[0m value is undefined[K
  ok [1m[32m280[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with Array value[0m[1B[1G
# test put()/get()/del() with `false` value[K

  ok [1m[32m281[0m undefined[K
  ok [1m[32m282[0m no error, has key/value for ``false` value`[K
  ok [1m[32m283[0m is a Buffer[K
  ok [1m[32m284[0m should be strictly equal[K
  ok [1m[32m285[0m no error, deleted key/value for ``false` value`[K
  ok [1m[32m286[0m entry properly deleted[K
  ok [1m[32m287[0m should have correct error message[K
  ok [1m[32m288[0m value is undefined[K
  ok [1m[32m289[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with `false` value[0m[1B[1G
# test put()/get()/del() with `0` value[K

  ok [1m[32m290[0m undefined[K
  ok [1m[32m291[0m no error, has key/value for ``0` value`[K
  ok [1m[32m292[0m is a Buffer[K
  ok [1m[32m293[0m should be strictly equal[K
  ok [1m[32m294[0m no error, deleted key/value for ``0` value`[K
  ok [1m[32m295[0m entry properly deleted[K
  ok [1m[32m296[0m should have correct error message[K
  ok [1m[32m297[0m value is undefined[K
  ok [1m[32m298[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with `0` value[0m[1B[1G
# test put()/get()/del() with `NaN` value[K

  ok [1m[32m299[0m undefined[K
  ok [1m[32m300[0m no error, has key/value for ``NaN` value`[K
  ok [1m[32m301[0m is a Buffer[K
  ok [1m[32m302[0m should be strictly equal[K
  ok [1m[32m303[0m no error, deleted key/value for ``NaN` value`[K
  ok [1m[32m304[0m entry properly deleted[K
  ok [1m[32m305[0m should have correct error message[K
  ok [1m[32m306[0m value is undefined[K
  ok [1m[32m307[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with `NaN` value[0m[1B[1G
# test put()/get()/del() with empty String value[K

  ok [1m[32m308[0m undefined[K
  ok [1m[32m309[0m no error, has key/value for `empty String value`[K
  ok [1m[32m310[0m is a Buffer[K
  ok [1m[32m311[0m should be strictly equal[K
  ok [1m[32m312[0m no error, deleted key/value for `empty String value`[K
  ok [1m[32m313[0m entry properly deleted[K
  ok [1m[32m314[0m should have correct error message[K
  ok [1m[32m315[0m value is undefined[K
  ok [1m[32m316[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with empty String value[0m[1B[1G
# test put()/get()/del() with empty Buffer value[K

  ok [1m[32m317[0m undefined[K
  ok [1m[32m318[0m no error, has key/value for `empty Buffer value`[K
  ok [1m[32m319[0m is a Buffer[K
  ok [1m[32m320[0m should be strictly equal[K
  ok [1m[32m321[0m no error, deleted key/value for `empty Buffer value`[K
  ok [1m[32m322[0m entry properly deleted[K
  ok [1m[32m323[0m should have correct error message[K
  ok [1m[32m324[0m value is undefined[K
  ok [1m[32m325[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with empty Buffer value[0m[1B[1G
# test put()/get()/del() with empty Array value[K

  ok [1m[32m326[0m undefined[K
  ok [1m[32m327[0m no error, has key/value for `empty Array value`[K
  ok [1m[32m328[0m is a Buffer[K
  ok [1m[32m329[0m should be strictly equal[K
  ok [1m[32m330[0m no error, deleted key/value for `empty Array value`[K
  ok [1m[32m331[0m entry properly deleted[K
  ok [1m[32m332[0m should have correct error message[K
  ok [1m[32m333[0m value is undefined[K
  ok [1m[32m334[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with empty Array value[0m[1B[1G
# test put()/get()/del() with long String value[K

  ok [1m[32m335[0m undefined[K
  ok [1m[32m336[0m no error, has key/value for `long String value`[K
  ok [1m[32m337[0m is a Buffer[K
  ok [1m[32m338[0m should be strictly equal[K
  ok [1m[32m339[0m no error, deleted key/value for `long String value`[K
  ok [1m[32m340[0m entry properly deleted[K
  ok [1m[32m341[0m should have correct error message[K
  ok [1m[32m342[0m value is undefined[K
  ok [1m[32m343[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with long String value[0m[1B[1G
# test put()/get()/del() with Buffer value[K

  ok [1m[32m344[0m undefined[K
  ok [1m[32m345[0m no error, has key/value for `Buffer value`[K
  ok [1m[32m346[0m is a Buffer[K
  ok [1m[32m347[0m should be strictly equal[K
  ok [1m[32m348[0m no error, deleted key/value for `Buffer value`[K
  ok [1m[32m349[0m entry properly deleted[K
  ok [1m[32m350[0m should have correct error message[K
  ok [1m[32m351[0m value is undefined[K
  ok [1m[32m352[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with Buffer value[0m[1B[1G
# test put()/get()/del() with Array key[K

  ok [1m[32m353[0m undefined[K
  ok [1m[32m354[0m no error, has key/value for `Array key`[K
  ok [1m[32m355[0m is a Buffer[K
  ok [1m[32m356[0m should be strictly equal[K
  ok [1m[32m357[0m no error, deleted key/value for `Array key`[K
  ok [1m[32m358[0m entry properly deleted[K
  ok [1m[32m359[0m should have correct error message[K
  ok [1m[32m360[0m value is undefined[K
  ok [1m[32m361[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test put()/get()/del() with Array key[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test getMany() requires an array argument (callback)[K

  ok [1m[32m362[0m callback (anonymous) is asynchronous[K
  ok [1m[32m363[0m callback (anonymous) is asynchronous[K
  ok [1m[32m364[0m should be strictly equal[K
  ok [1m[32m365[0m should be strictly equal[K
[1A[1G[1m[32m✓ test getMany() requires an array argument (callback)[0m[1B[1G
# test getMany() requires an array argument (promise)[K

  ok [1m[32m366[0m should be strictly equal[K
  ok [1m[32m367[0m should be strictly equal[K
  ok [1m[32m368[0m should be strictly equal[K
[1A[1G[1m[32m✓ test getMany() requires an array argument (promise)[0m[1B[1G
# test getMany() support is reflected in manifest[K

  ok [1m[32m369[0m should be strictly equal[K
[1A[1G[1m[32m✓ test getMany() support is reflected in manifest[0m[1B[1G
# test simple getMany()[K

  ok [1m[32m370[0m undefined[K
  ok [1m[32m371[0m null[K
  ok [1m[32m372[0m got an array[K
  ok [1m[32m373[0m array has 1 element[K
  ok [1m[32m374[0m should not be string by default[K
  ok [1m[32m375[0m should be strictly equal[K
  ok [1m[32m376[0m null[K
  ok [1m[32m377[0m got an array[K
  ok [1m[32m378[0m array has 1 element[K
  ok [1m[32m379[0m should not be string by default[K
  ok [1m[32m380[0m should be strictly equal[K
  ok [1m[32m381[0m null[K
  ok [1m[32m382[0m should be string if not buffer[K
  ok [1m[32m383[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test simple getMany()[0m[1B[1G
# test getMany() with multiple keys[K

  ok [1m[32m384[0m undefined[K
  ok [1m[32m385[0m null[K
  ok [1m[32m386[0m should be deeply equivalent[K
  ok [1m[32m387[0m null[K
  ok [1m[32m388[0m maintains order of input keys[K
[1A[1G[1m[32m✓ test getMany() with multiple keys[0m[1B[1G
# test empty getMany()[K

  ok [1m[32m389[0m callback (anonymous) is asynchronous[K
  ok [1m[32m390[0m callback (anonymous) is asynchronous[K
  ok [1m[32m391[0m null[K
  ok [1m[32m392[0m should be deeply equivalent[K
  ok [1m[32m393[0m null[K
  ok [1m[32m394[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test empty getMany()[0m[1B[1G
# test not-found getMany()[K

  ok [1m[32m395[0m callback (anonymous) is asynchronous[K
  ok [1m[32m396[0m callback (anonymous) is asynchronous[K
  ok [1m[32m397[0m null[K
  ok [1m[32m398[0m should be deeply equivalent[K
  ok [1m[32m399[0m null[K
  ok [1m[32m400[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test not-found getMany()[0m[1B[1G
# test getMany() with promise[K

  ok [1m[32m401[0m should be deeply equivalent[K
  ok [1m[32m402[0m should be deeply equivalent[K
  ok [1m[32m403[0m should be deeply equivalent[K
  ok [1m[32m404[0m should be deeply equivalent[K
  ok [1m[32m405[0m should be deeply equivalent[K
  ok [1m[32m406[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test getMany() with promise[0m[1B[1G
# test simultaneous getMany()[K

  ok [1m[32m407[0m undefined[K
  ok [1m[32m408[0m null[K
  ok [1m[32m409[0m should be strictly equal[K
  ok [1m[32m410[0m should be strictly equal[K
  ok [1m[32m411[0m null[K
  ok [1m[32m412[0m should be strictly equal[K
  ok [1m[32m413[0m should be strictly equal[K
  ok [1m[32m414[0m null[K
  ok [1m[32m415[0m should be strictly equal[K
  ok [1m[32m416[0m should be strictly equal[K
  ok [1m[32m417[0m null[K
  ok [1m[32m418[0m should be strictly equal[K
  ok [1m[32m419[0m should be strictly equal[K
  ok [1m[32m420[0m null[K
  ok [1m[32m421[0m should be strictly equal[K
  ok [1m[32m422[0m should be strictly equal[K
  ok [1m[32m423[0m null[K
  ok [1m[32m424[0m should be strictly equal[K
  ok [1m[32m425[0m should be strictly equal[K
  ok [1m[32m426[0m null[K
  ok [1m[32m427[0m should be strictly equal[K
  ok [1m[32m428[0m should be strictly equal[K
  ok [1m[32m429[0m null[K
  ok [1m[32m430[0m should be strictly equal[K
  ok [1m[32m431[0m should be strictly equal[K
  ok [1m[32m432[0m null[K
  ok [1m[32m433[0m should be strictly equal[K
  ok [1m[32m434[0m should be strictly equal[K
  ok [1m[32m435[0m null[K
  ok [1m[32m436[0m should be strictly equal[K
  ok [1m[32m437[0m should be strictly equal[K
  ok [1m[32m438[0m null[K
  ok [1m[32m439[0m should be deeply equivalent[K
  ok [1m[32m440[0m null[K
  ok [1m[32m441[0m should be deeply equivalent[K
  ok [1m[32m442[0m null[K
  ok [1m[32m443[0m should be deeply equivalent[K
  ok [1m[32m444[0m null[K
  ok [1m[32m445[0m should be deeply equivalent[K
  ok [1m[32m446[0m null[K
  ok [1m[32m447[0m should be deeply equivalent[K
  ok [1m[32m448[0m null[K
  ok [1m[32m449[0m should be deeply equivalent[K
  ok [1m[32m450[0m null[K
  ok [1m[32m451[0m should be deeply equivalent[K
  ok [1m[32m452[0m null[K
  ok [1m[32m453[0m should be deeply equivalent[K
  ok [1m[32m454[0m null[K
  ok [1m[32m455[0m should be deeply equivalent[K
  ok [1m[32m456[0m null[K
  ok [1m[32m457[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test simultaneous getMany()[0m[1B[1G
# test getMany() on new db[K

  ok [1m[32m458[0m should be strictly equal[K
  ok [1m[32m459[0m should be strictly equal[K
  ok [1m[32m460[0m (unnamed assert)[K
  ok [1m[32m461[0m should be strictly equal[K
  ok [1m[32m462[0m should be strictly equal[K
  ok [1m[32m463[0m (unnamed assert)[K
  ok [1m[32m464[0m callback (anonymous) is asynchronous[K
  ok [1m[32m465[0m callback (anonymous) is asynchronous[K
  ok [1m[32m466[0m callback (anonymous) is asynchronous[K
  ok [1m[32m467[0m callback (anonymous) is asynchronous[K
  ok [1m[32m468[0m should be strictly equal[K
  ok [1m[32m469[0m should be strictly equal[K
  ok [1m[32m470[0m undefined[K
  ok [1m[32m471[0m should be strictly equal[K
  ok [1m[32m472[0m should be strictly equal[K
  ok [1m[32m473[0m should be strictly equal[K
  ok [1m[32m474[0m should be strictly equal[K
  ok [1m[32m475[0m undefined[K
  ok [1m[32m476[0m should be strictly equal[K
  ok [1m[32m477[0m should be strictly equal[K
[1A[1G[1m[32m✓ test getMany() on new db[0m[1B[1G
# test getMany() on opening db[K

  ok [1m[32m478[0m callback (open) is asynchronous[K
  ok [1m[32m479[0m callback (anonymous) is asynchronous[K
  ok [1m[32m480[0m callback (open) is asynchronous[K
  ok [1m[32m481[0m callback (anonymous) is asynchronous[K
  ok [1m[32m482[0m undefined[K
  ok [1m[32m483[0m should be strictly equal[K
  ok [1m[32m484[0m should be strictly equal[K
  ok [1m[32m485[0m undefined[K
  ok [1m[32m486[0m should be strictly equal[K
  ok [1m[32m487[0m should be strictly equal[K
[1A[1G[1m[32m✓ test getMany() on opening db[0m[1B[1G
# test getMany() on closed db[K

  ok [1m[32m488[0m undefined[K
  ok [1m[32m489[0m should be strictly equal[K
  ok [1m[32m490[0m undefined[K
  ok [1m[32m491[0m should be strictly equal[K
  ok [1m[32m492[0m undefined[K
  ok [1m[32m493[0m should be strictly equal[K
  ok [1m[32m494[0m callback (anonymous) is asynchronous[K
  ok [1m[32m495[0m undefined[K
  ok [1m[32m496[0m should be strictly equal[K
  ok [1m[32m497[0m callback (anonymous) is asynchronous[K
  ok [1m[32m498[0m should be strictly equal[K
  ok [1m[32m499[0m should be strictly equal[K
[1A[1G[1m[32m✓ test getMany() on closed db[0m[1B[1G
# test getMany() on closing db[K

  ok [1m[32m500[0m undefined[K
  ok [1m[32m501[0m callback (anonymous) is asynchronous[K
  ok [1m[32m502[0m undefined[K
  ok [1m[32m503[0m callback (anonymous) is asynchronous[K
  ok [1m[32m504[0m undefined[K
  ok [1m[32m505[0m should be strictly equal[K
  ok [1m[32m506[0m undefined[K
  ok [1m[32m507[0m should be strictly equal[K
[1A[1G[1m[32m✓ test getMany() on closing db[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test callback-less, 2-arg, batch() throws[K

  ok [1m[32m508[0m callback-less, 2-arg batch() throws[K
[1A[1G[1m[32m✓ test callback-less, 2-arg, batch() throws[0m[1B[1G
# test batch() with missing `value`[K

  ok [1m[32m509[0m correct error message[K
[1A[1G[1m[32m✓ test batch() with missing `value`[0m[1B[1G
# test batch() with null or undefined `value`[K

  ok [1m[32m510[0m correct error message[K
  ok [1m[32m511[0m correct error message[K
[1A[1G[1m[32m✓ test batch() with null or undefined `value`[0m[1B[1G
# test batch() with missing `key`[K

  ok [1m[32m512[0m got error[K
  ok [1m[32m513[0m correct error message[K
  ok [1m[32m514[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with missing `key`[0m[1B[1G
# test batch() with null or undefined `key`[K

  ok [1m[32m515[0m got error[K
  ok [1m[32m516[0m correct error message[K
  ok [1m[32m517[0m callback is asynchronous[K
  ok [1m[32m518[0m got error[K
  ok [1m[32m519[0m correct error message[K
  ok [1m[32m520[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with null or undefined `key`[0m[1B[1G
# test batch() with empty `key`[K

  ok [1m[32m521[0m got error[K
  ok [1m[32m522[0m correct error message[K
  ok [1m[32m523[0m callback is asynchronous[K
  ok [1m[32m524[0m got error[K
  ok [1m[32m525[0m correct error message[K
  ok [1m[32m526[0m callback is asynchronous[K
  ok [1m[32m527[0m got error[K
  ok [1m[32m528[0m correct error message[K
  ok [1m[32m529[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with empty `key`[0m[1B[1G
# test batch() with missing `key` and `value`[K

  ok [1m[32m530[0m got error[K
  ok [1m[32m531[0m correct error message[K
  ok [1m[32m532[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with missing `key` and `value`[0m[1B[1G
# test batch() with missing `type`[K

  ok [1m[32m533[0m got error[K
  ok [1m[32m534[0m correct error message[K
  ok [1m[32m535[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with missing `type`[0m[1B[1G
# test batch() with wrong `type`[K

  ok [1m[32m536[0m got error[K
  ok [1m[32m537[0m correct error message[K
  ok [1m[32m538[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with wrong `type`[0m[1B[1G
# test batch() with missing array[K

  ok [1m[32m539[0m got error[K
  ok [1m[32m540[0m correct error message[K
  ok [1m[32m541[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with missing array[0m[1B[1G
# test batch() with undefined array[K

  ok [1m[32m542[0m got error[K
  ok [1m[32m543[0m correct error message[K
  ok [1m[32m544[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with undefined array[0m[1B[1G
# test batch() with null array[K

  ok [1m[32m545[0m got error[K
  ok [1m[32m546[0m correct error message[K
  ok [1m[32m547[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with null array[0m[1B[1G
# test batch() with null options[K

  ok [1m[32m548[0m undefined[K
[1A[1G[1m[32m✓ test batch() with null options[0m[1B[1G
# test batch() with null element[K

  ok [1m[32m549[0m got error[K
  ok [1m[32m550[0m correct error message[K
  ok [1m[32m551[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with null element[0m[1B[1G
# test batch() with undefined element[K

  ok [1m[32m552[0m got error[K
  ok [1m[32m553[0m correct error message[K
  ok [1m[32m554[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with undefined element[0m[1B[1G
# test batch() with number element[K

  ok [1m[32m555[0m got error[K
  ok [1m[32m556[0m correct error message[K
  ok [1m[32m557[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with number element[0m[1B[1G
# test batch() with boolean element[K

  ok [1m[32m558[0m got error[K
  ok [1m[32m559[0m correct error message[K
  ok [1m[32m560[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with boolean element[0m[1B[1G
# test batch() with empty array[K

  ok [1m[32m561[0m no error from batch()[K
  ok [1m[32m562[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch() with empty array[0m[1B[1G
# test simple batch()[K

  ok [1m[32m563[0m undefined[K
  ok [1m[32m564[0m null[K
  ok [1m[32m565[0m should be strictly equal[K
[1A[1G[1m[32m✓ test simple batch()[0m[1B[1G
# test multiple batch()[K

  ok [1m[32m566[0m undefined[K
  ok [1m[32m567[0m null[K
  ok [1m[32m568[0m should be strictly equal[K
  ok [1m[32m569[0m entry not found[K
  ok [1m[32m570[0m value is undefined[K
  ok [1m[32m571[0m NotFound error[K
  ok [1m[32m572[0m null[K
  ok [1m[32m573[0m should be strictly equal[K
[1A[1G[1m[32m✓ test multiple batch()[0m[1B[1G
# test multiple batch()[K

  ok [1m[32m574[0m should error[K
  ok [1m[32m575[0m callback is asynchronous[K
  ok [1m[32m576[0m should not be found[K
  ok [1m[32m577[0m should not be found[K
[1A[1G[1m[32m✓ test multiple batch()[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test batch has db reference[K

  ok [1m[32m578[0m should be truthy[K
[1A[1G[1m[32m✓ test batch has db reference[0m[1B[1G
# test batch#put() with missing `value`[K

  ok [1m[32m579[0m correct error message[K
[1A[1G[1m[32m✓ test batch#put() with missing `value`[0m[1B[1G
# test batch#put() with missing `key`[K

  ok [1m[32m580[0m correct error message[K
[1A[1G[1m[32m✓ test batch#put() with missing `key`[0m[1B[1G
# test batch#put() with null `key`[K

  ok [1m[32m581[0m correct error message[K
[1A[1G[1m[32m✓ test batch#put() with null `key`[0m[1B[1G
# test batch#put() with missing `key` and `value`[K

  ok [1m[32m582[0m correct error message[K
[1A[1G[1m[32m✓ test batch#put() with missing `key` and `value`[0m[1B[1G
# test batch#put() with null or undefined `value`[K

  ok [1m[32m583[0m correct error message[K
  ok [1m[32m584[0m correct error message[K
[1A[1G[1m[32m✓ test batch#put() with null or undefined `value`[0m[1B[1G
# test batch#del() with missing `key`[K

  ok [1m[32m585[0m correct error message[K
[1A[1G[1m[32m✓ test batch#del() with missing `key`[0m[1B[1G
# test batch#del() with null or undefined `key`[K

  ok [1m[32m586[0m correct error message[K
  ok [1m[32m587[0m correct error message[K
[1A[1G[1m[32m✓ test batch#del() with null or undefined `key`[0m[1B[1G
# test batch#clear() doesn't throw[K

[1A[1G[1m[32m✓ test batch#clear() doesn't throw[0m[1B[1G
# test batch#write() with no callback[K

  ok [1m[32m588[0m correct error message[K
[1A[1G[1m[32m✓ test batch#write() with no callback[0m[1B[1G
# test batch#put() after write()[K

  ok [1m[32m589[0m correct error message[K
[1A[1G[1m[32m✓ test batch#put() after write()[0m[1B[1G
# test batch#del() after write()[K

  ok [1m[32m590[0m correct error message[K
[1A[1G[1m[32m✓ test batch#del() after write()[0m[1B[1G
# test batch#clear() after write()[K

  ok [1m[32m591[0m correct error message[K
[1A[1G[1m[32m✓ test batch#clear() after write()[0m[1B[1G
# test batch#write() after write()[K

  ok [1m[32m592[0m correct error message[K
[1A[1G[1m[32m✓ test batch#write() after write()[0m[1B[1G
# test serialize object[K

  ok [1m[32m593[0m .key is set for .put and .del operations[K
  ok [1m[32m594[0m .value is set for .put operation[K
  ok [1m[32m595[0m .key is set for .put and .del operations[K
[1A[1G[1m[32m✓ test serialize object[0m[1B[1G
# test custom _serialize*[K

  ok [1m[32m596[0m should be deeply equivalent[K
  ok [1m[32m597[0m should be deeply equivalent[K
  ok [1m[32m598[0m should be deeply equivalent[K
  ok [1m[32m599[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test custom _serialize*[0m[1B[1G
# test batch#write() with no operations[K

  ok [1m[32m600[0m no error from write()[K
  ok [1m[32m601[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test batch#write() with no operations[0m[1B[1G
# test basic batch[K

  ok [1m[32m602[0m undefined[K
  ok [1m[32m603[0m undefined[K
  ok [1m[32m604[0m undefined[K
  ok [1m[32m605[0m correct number of entries[K
  ok [1m[32m606[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test basic batch[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test iterator has db reference[K

  ok [1m[32m607[0m should be truthy[K
[1A[1G[1m[32m✓ test iterator has db reference[0m[1B[1G
# test iterator#next returns this in callback mode[K

  ok [1m[32m608[0m should be truthy[K
[1A[1G[1m[32m✓ test iterator#next returns this in callback mode[0m[1B[1G
# test twice iterator#end() callback with error[K

  ok [1m[32m609[0m undefined[K
  ok [1m[32m610[0m returned error[K
  ok [1m[32m611[0m correct error[K
  ok [1m[32m612[0m should be strictly equal[K
  ok [1m[32m613[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test twice iterator#end() callback with error[0m[1B[1G
# test iterator#next after iterator#end() callback with error[K

  ok [1m[32m614[0m undefined[K
  ok [1m[32m615[0m returned error[K
  ok [1m[32m616[0m correct error[K
  ok [1m[32m617[0m correct message[K
  ok [1m[32m618[0m callback is asynchronous[K
[1A[1G[1m[32m✓ test iterator#next after iterator#end() callback with error[0m[1B[1G
# test twice iterator#next() throws[K

  ok [1m[32m619[0m undefined[K
  ok [1m[32m620[0m returned error[K
  ok [1m[32m621[0m correct error[K
  ok [1m[32m622[0m should be strictly equal[K
  ok [1m[32m623[0m callback is asynchronous[K
  ok [1m[32m624[0m undefined[K
[1A[1G[1m[32m✓ test twice iterator#next() throws[0m[1B[1G
# test simple iterator()[K

  ok [1m[32m625[0m undefined[K
  ok [1m[32m626[0m null[K
  ok [1m[32m627[0m key argument is a Buffer[K
  ok [1m[32m628[0m value argument is a Buffer[K
  ok [1m[32m629[0m correct key[K
  ok [1m[32m630[0m correct value[K
  ok [1m[32m631[0m null[K
  ok [1m[32m632[0m key argument is a Buffer[K
  ok [1m[32m633[0m value argument is a Buffer[K
  ok [1m[32m634[0m correct key[K
  ok [1m[32m635[0m correct value[K
  ok [1m[32m636[0m null[K
  ok [1m[32m637[0m key argument is a Buffer[K
  ok [1m[32m638[0m value argument is a Buffer[K
  ok [1m[32m639[0m correct key[K
  ok [1m[32m640[0m correct value[K
  ok [1m[32m641[0m undefined[K
  ok [1m[32m642[0m err argument is nullish[K
  ok [1m[32m643[0m key argument is undefined[K
  ok [1m[32m644[0m value argument is undefined[K
  ok [1m[32m645[0m correct number of entries[K
[1A[1G[1m[32m✓ test simple iterator()[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test full data collection[K

  ok [1m[32m646[0m undefined[K
  ok [1m[32m647[0m correct number of entries[K
  ok [1m[32m648[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test full data collection[0m[1B[1G
# test full data collection (flipped)[K

  ok [1m[32m649[0m undefined[K
  ok [1m[32m650[0m correct number of entries[K
  ok [1m[32m651[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test full data collection (flipped)[0m[1B[1G
# test iterator with reverse=true[K

  ok [1m[32m652[0m undefined[K
  ok [1m[32m653[0m correct number of entries[K
  ok [1m[32m654[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with reverse=true[0m[1B[1G
# test iterator with gte=00[K

  ok [1m[32m655[0m undefined[K
  ok [1m[32m656[0m correct number of entries[K
  ok [1m[32m657[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=00[0m[1B[1G
# test iterator with gte=00 (flipped)[K

  ok [1m[32m658[0m undefined[K
  ok [1m[32m659[0m correct number of entries[K
  ok [1m[32m660[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=00 (flipped)[0m[1B[1G
# test iterator with gte=50[K

  ok [1m[32m661[0m undefined[K
  ok [1m[32m662[0m correct number of entries[K
  ok [1m[32m663[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=50[0m[1B[1G
# test iterator with gte=50 (flipped)[K

  ok [1m[32m664[0m undefined[K
  ok [1m[32m665[0m correct number of entries[K
  ok [1m[32m666[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=50 (flipped)[0m[1B[1G
# test iterator with lte=50 and reverse=true[K

  ok [1m[32m667[0m undefined[K
  ok [1m[32m668[0m correct number of entries[K
  ok [1m[32m669[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=50 and reverse=true[0m[1B[1G
# test iterator with gte=49.5 (midway)[K

  ok [1m[32m670[0m undefined[K
  ok [1m[32m671[0m correct number of entries[K
  ok [1m[32m672[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=49.5 (midway)[0m[1B[1G
# test iterator with gte=49.5 (midway) (flipped)[K

  ok [1m[32m673[0m undefined[K
  ok [1m[32m674[0m correct number of entries[K
  ok [1m[32m675[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=49.5 (midway) (flipped)[0m[1B[1G
# test iterator with gte=49999 (midway)[K

  ok [1m[32m676[0m undefined[K
  ok [1m[32m677[0m correct number of entries[K
  ok [1m[32m678[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=49999 (midway)[0m[1B[1G
# test iterator with gte=49999 (midway) (flipped)[K

  ok [1m[32m679[0m undefined[K
  ok [1m[32m680[0m correct number of entries[K
  ok [1m[32m681[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=49999 (midway) (flipped)[0m[1B[1G
# test iterator with lte=49.5 (midway) and reverse=true[K

  ok [1m[32m682[0m undefined[K
  ok [1m[32m683[0m correct number of entries[K
  ok [1m[32m684[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=49.5 (midway) and reverse=true[0m[1B[1G
# test iterator with lt=49.5 (midway) and reverse=true[K

  ok [1m[32m685[0m undefined[K
  ok [1m[32m686[0m correct number of entries[K
  ok [1m[32m687[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt=49.5 (midway) and reverse=true[0m[1B[1G
# test iterator with lt=50 and reverse=true[K

  ok [1m[32m688[0m undefined[K
  ok [1m[32m689[0m correct number of entries[K
  ok [1m[32m690[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt=50 and reverse=true[0m[1B[1G
# test iterator with lte=50[K

  ok [1m[32m691[0m undefined[K
  ok [1m[32m692[0m correct number of entries[K
  ok [1m[32m693[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=50[0m[1B[1G
# test iterator with lte=50 (flipped)[K

  ok [1m[32m694[0m undefined[K
  ok [1m[32m695[0m correct number of entries[K
  ok [1m[32m696[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=50 (flipped)[0m[1B[1G
# test iterator with lte=50.5 (midway)[K

  ok [1m[32m697[0m undefined[K
  ok [1m[32m698[0m correct number of entries[K
  ok [1m[32m699[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=50.5 (midway)[0m[1B[1G
# test iterator with lte=50.5 (midway) (flipped)[K

  ok [1m[32m700[0m undefined[K
  ok [1m[32m701[0m correct number of entries[K
  ok [1m[32m702[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=50.5 (midway) (flipped)[0m[1B[1G
# test iterator with lte=50555 (midway)[K

  ok [1m[32m703[0m undefined[K
  ok [1m[32m704[0m correct number of entries[K
  ok [1m[32m705[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=50555 (midway)[0m[1B[1G
# test iterator with lte=50555 (midway) (flipped)[K

  ok [1m[32m706[0m undefined[K
  ok [1m[32m707[0m correct number of entries[K
  ok [1m[32m708[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=50555 (midway) (flipped)[0m[1B[1G
# test iterator with lt=50555 (midway)[K

  ok [1m[32m709[0m undefined[K
  ok [1m[32m710[0m correct number of entries[K
  ok [1m[32m711[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt=50555 (midway)[0m[1B[1G
# test iterator with lt=50555 (midway) (flipped)[K

  ok [1m[32m712[0m undefined[K
  ok [1m[32m713[0m correct number of entries[K
  ok [1m[32m714[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt=50555 (midway) (flipped)[0m[1B[1G
# test iterator with gte=50.5 (midway) and reverse=true[K

  ok [1m[32m715[0m undefined[K
  ok [1m[32m716[0m correct number of entries[K
  ok [1m[32m717[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=50.5 (midway) and reverse=true[0m[1B[1G
# test iterator with gt=50.5 (midway) and reverse=true[K

  ok [1m[32m718[0m undefined[K
  ok [1m[32m719[0m correct number of entries[K
  ok [1m[32m720[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gt=50.5 (midway) and reverse=true[0m[1B[1G
# test iterator with gt=50 and reverse=true[K

  ok [1m[32m721[0m undefined[K
  ok [1m[32m722[0m correct number of entries[K
  ok [1m[32m723[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gt=50 and reverse=true[0m[1B[1G
# test iterator with lte=0[K

  ok [1m[32m724[0m undefined[K
  ok [1m[32m725[0m correct number of entries[K
  ok [1m[32m726[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=0[0m[1B[1G
# test iterator with lte=0 (flipped)[K

  ok [1m[32m727[0m undefined[K
  ok [1m[32m728[0m correct number of entries[K
  ok [1m[32m729[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte=0 (flipped)[0m[1B[1G
# test iterator with lt=0[K

  ok [1m[32m730[0m undefined[K
  ok [1m[32m731[0m correct number of entries[K
  ok [1m[32m732[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt=0[0m[1B[1G
# test iterator with lt=0 (flipped)[K

  ok [1m[32m733[0m undefined[K
  ok [1m[32m734[0m correct number of entries[K
  ok [1m[32m735[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt=0 (flipped)[0m[1B[1G
# test iterator with gte=30 and lte=70[K

  ok [1m[32m736[0m undefined[K
  ok [1m[32m737[0m correct number of entries[K
  ok [1m[32m738[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=30 and lte=70[0m[1B[1G
# test iterator with gte=30 and lte=70 (flipped)[K

  ok [1m[32m739[0m undefined[K
  ok [1m[32m740[0m correct number of entries[K
  ok [1m[32m741[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=30 and lte=70 (flipped)[0m[1B[1G
# test iterator with gt=29 and lt=71[K

  ok [1m[32m742[0m undefined[K
  ok [1m[32m743[0m correct number of entries[K
  ok [1m[32m744[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gt=29 and lt=71[0m[1B[1G
# test iterator with gt=29 and lt=71 (flipped)[K

  ok [1m[32m745[0m undefined[K
  ok [1m[32m746[0m correct number of entries[K
  ok [1m[32m747[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gt=29 and lt=71 (flipped)[0m[1B[1G
# test iterator with gte=30 and lte=70 and reverse=true[K

  ok [1m[32m748[0m undefined[K
  ok [1m[32m749[0m correct number of entries[K
  ok [1m[32m750[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte=30 and lte=70 and reverse=true[0m[1B[1G
# test iterator with gt=29 and lt=71 and reverse=true[K

  ok [1m[32m751[0m undefined[K
  ok [1m[32m752[0m correct number of entries[K
  ok [1m[32m753[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gt=29 and lt=71 and reverse=true[0m[1B[1G
# test iterator with limit=20[K

  ok [1m[32m754[0m undefined[K
  ok [1m[32m755[0m correct number of entries[K
  ok [1m[32m756[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with limit=20[0m[1B[1G
# test iterator with limit=20 and gte=20[K

  ok [1m[32m757[0m undefined[K
  ok [1m[32m758[0m correct number of entries[K
  ok [1m[32m759[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with limit=20 and gte=20[0m[1B[1G
# test iterator with limit=20 and reverse=true[K

  ok [1m[32m760[0m undefined[K
  ok [1m[32m761[0m correct number of entries[K
  ok [1m[32m762[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with limit=20 and reverse=true[0m[1B[1G
# test iterator with limit=20 and lte=79 and reverse=true[K

  ok [1m[32m763[0m undefined[K
  ok [1m[32m764[0m correct number of entries[K
  ok [1m[32m765[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with limit=20 and lte=79 and reverse=true[0m[1B[1G
# test iterator with limit=-1 should iterate over whole database[K

  ok [1m[32m766[0m undefined[K
  ok [1m[32m767[0m correct number of entries[K
  ok [1m[32m768[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with limit=-1 should iterate over whole database[0m[1B[1G
# test iterator with limit=0 should not iterate over anything[K

  ok [1m[32m769[0m undefined[K
  ok [1m[32m770[0m correct number of entries[K
  ok [1m[32m771[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with limit=0 should not iterate over anything[0m[1B[1G
# test iterator with lte after limit[K

  ok [1m[32m772[0m undefined[K
  ok [1m[32m773[0m correct number of entries[K
  ok [1m[32m774[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte after limit[0m[1B[1G
# test iterator with lte before limit[K

  ok [1m[32m775[0m undefined[K
  ok [1m[32m776[0m correct number of entries[K
  ok [1m[32m777[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte before limit[0m[1B[1G
# test iterator with gte after database end[K

  ok [1m[32m778[0m undefined[K
  ok [1m[32m779[0m correct number of entries[K
  ok [1m[32m780[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte after database end[0m[1B[1G
# test iterator with gte after database end (flipped)[K

  ok [1m[32m781[0m undefined[K
  ok [1m[32m782[0m correct number of entries[K
  ok [1m[32m783[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gte after database end (flipped)[0m[1B[1G
# test iterator with gt after database end[K

  ok [1m[32m784[0m undefined[K
  ok [1m[32m785[0m correct number of entries[K
  ok [1m[32m786[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gt after database end[0m[1B[1G
# test iterator with gt after database end (flipped)[K

  ok [1m[32m787[0m undefined[K
  ok [1m[32m788[0m correct number of entries[K
  ok [1m[32m789[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with gt after database end (flipped)[0m[1B[1G
# test iterator with lte after database end and reverse=true[K

  ok [1m[32m790[0m undefined[K
  ok [1m[32m791[0m correct number of entries[K
  ok [1m[32m792[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte after database end and reverse=true[0m[1B[1G
# test iterator with lt after database end[K

  ok [1m[32m793[0m undefined[K
  ok [1m[32m794[0m correct number of entries[K
  ok [1m[32m795[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt after database end[0m[1B[1G
# test iterator with lt after database end (flipped)[K

  ok [1m[32m796[0m undefined[K
  ok [1m[32m797[0m correct number of entries[K
  ok [1m[32m798[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt after database end (flipped)[0m[1B[1G
# test iterator with lt at database end[K

  ok [1m[32m799[0m undefined[K
  ok [1m[32m800[0m correct number of entries[K
  ok [1m[32m801[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt at database end[0m[1B[1G
# test iterator with lt at database end (flipped)[K

  ok [1m[32m802[0m undefined[K
  ok [1m[32m803[0m correct number of entries[K
  ok [1m[32m804[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt at database end (flipped)[0m[1B[1G
# test iterator with lte at database end[K

  ok [1m[32m805[0m undefined[K
  ok [1m[32m806[0m correct number of entries[K
  ok [1m[32m807[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte at database end[0m[1B[1G
# test iterator with lte at database end (flipped)[K

  ok [1m[32m808[0m undefined[K
  ok [1m[32m809[0m correct number of entries[K
  ok [1m[32m810[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte at database end (flipped)[0m[1B[1G
# test iterator with lt before database end[K

  ok [1m[32m811[0m undefined[K
  ok [1m[32m812[0m correct number of entries[K
  ok [1m[32m813[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt before database end[0m[1B[1G
# test iterator with lt before database end (flipped)[K

  ok [1m[32m814[0m undefined[K
  ok [1m[32m815[0m correct number of entries[K
  ok [1m[32m816[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt before database end (flipped)[0m[1B[1G
# test iterator with lte before database end[K

  ok [1m[32m817[0m undefined[K
  ok [1m[32m818[0m correct number of entries[K
  ok [1m[32m819[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte before database end[0m[1B[1G
# test iterator with lte before database end (flipped)[K

  ok [1m[32m820[0m undefined[K
  ok [1m[32m821[0m correct number of entries[K
  ok [1m[32m822[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte before database end (flipped)[0m[1B[1G
# test iterator with lte and gte after database and reverse=true[K

  ok [1m[32m823[0m undefined[K
  ok [1m[32m824[0m correct number of entries[K
  ok [1m[32m825[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lte and gte after database and reverse=true[0m[1B[1G
# test iterator with lt and gt after database and reverse=true[K

  ok [1m[32m826[0m undefined[K
  ok [1m[32m827[0m correct number of entries[K
  ok [1m[32m828[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ test iterator with lt and gt after database and reverse=true[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setup[K

  ok [1m[32m829[0m no open() error[K
  ok [1m[32m830[0m no batch() error[K
[1A[1G[1m[32m✓ setup[0m[1B[1G
# for await...of db.iterator()[K

  ok [1m[32m831[0m ended[K
  ok [1m[32m832[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ for await...of db.iterator()[0m[1B[1G
# for await...of db.iterator() does not permit reuse[K

  ok [1m[32m833[0m nexted[K
  ok [1m[32m834[0m nexted[K
  ok [1m[32m835[0m should be strictly equal[K
[1A[1G[1m[32m✓ for await...of db.iterator() does not permit reuse[0m[1B[1G
# for await...of db.iterator() ends on user error[K

  ok [1m[32m836[0m should be strictly equal[K
  ok [1m[32m837[0m ended[K
[1A[1G[1m[32m✓ for await...of db.iterator() ends on user error[0m[1B[1G
# for await...of db.iterator() with user error and end() error[K

  ok [1m[32m838[0m no real error from end()[K
  ok [1m[32m839[0m should be strictly equal[K
  ok [1m[32m840[0m ended[K
[1A[1G[1m[32m✓ for await...of db.iterator() with user error and end() error[0m[1B[1G
# for await...of db.iterator() ends on iterator error[K

  ok [1m[32m841[0m nexted[K
  ok [1m[32m842[0m should be strictly equal[K
  ok [1m[32m843[0m ended[K
[1A[1G[1m[32m✓ for await...of db.iterator() ends on iterator error[0m[1B[1G
# for await...of db.iterator() with iterator error and end() error[K

  ok [1m[32m844[0m nexted[K
  ok [1m[32m845[0m no real error from end()[K
  ok [1m[32m846[0m should be strictly equal[K
  ok [1m[32m847[0m ended[K
[1A[1G[1m[32m✓ for await...of db.iterator() with iterator error and end() error[0m[1B[1G
# for await...of db.iterator() ends on user break[K

  ok [1m[32m848[0m got a chance to break[K
  ok [1m[32m849[0m ended[K
[1A[1G[1m[32m✓ for await...of db.iterator() ends on user break[0m[1B[1G
# for await...of db.iterator() with user break and end() error[K

  ok [1m[32m850[0m got a chance to break[K
  ok [1m[32m851[0m no real error from end()[K
  ok [1m[32m852[0m should be strictly equal[K
  ok [1m[32m853[0m ended[K
[1A[1G[1m[32m✓ for await...of db.iterator() with user break and end() error[0m[1B[1G
# teardown[K

  ok [1m[32m854[0m no close() error[K
[1A[1G[1m[32m✓ teardown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# iterator#seek() throws if next() has not completed[K

  ok [1m[32m855[0m no error from open()[K
  ok [1m[32m856[0m got error[K
  ok [1m[32m857[0m no error from next()[K
  ok [1m[32m858[0m next is asynchronous[K
  ok [1m[32m859[0m no error from done()[K
  ok [1m[32m860[0m no error from close()[K
[1A[1G[1m[32m✓ iterator#seek() throws if next() has not completed[0m[1B[1G
# iterator#seek() throws after end()[K

  ok [1m[32m861[0m no error from open()[K
  ok [1m[32m862[0m no error from next()[K
  ok [1m[32m863[0m no error from end()[K
  ok [1m[32m864[0m got error[K
  ok [1m[32m865[0m no error from done()[K
  ok [1m[32m866[0m no error from close()[K
[1A[1G[1m[32m✓ iterator#seek() throws after end()[0m[1B[1G
# iterator#seek() to string target[K

  ok [1m[32m867[0m no error from open()[K
  ok [1m[32m868[0m no error from batch()[K
  ok [1m[32m869[0m no error[K
  ok [1m[32m870[0m key matches[K
  ok [1m[32m871[0m value matches[K
  ok [1m[32m872[0m no error[K
  ok [1m[32m873[0m end of iterator[K
  ok [1m[32m874[0m end of iterator[K
  ok [1m[32m875[0m no error from done()[K
  ok [1m[32m876[0m no error from close()[K
[1A[1G[1m[32m✓ iterator#seek() to string target[0m[1B[1G
# iterator#seek() to buffer target[K

  ok [1m[32m877[0m no error from open()[K
  ok [1m[32m878[0m no error from batch()[K
  ok [1m[32m879[0m no error from next()[K
  ok [1m[32m880[0m key matches[K
  ok [1m[32m881[0m value matches[K
  ok [1m[32m882[0m no error from next()[K
  ok [1m[32m883[0m end of iterator[K
  ok [1m[32m884[0m end of iterator[K
  ok [1m[32m885[0m no error from done()[K
  ok [1m[32m886[0m no error from close()[K
[1A[1G[1m[32m✓ iterator#seek() to buffer target[0m[1B[1G
# iterator#seek() on reverse iterator[K

  ok [1m[32m887[0m no error from open()[K
  ok [1m[32m888[0m no error from batch()[K
  ok [1m[32m889[0m no error[K
  ok [1m[32m890[0m key matches[K
  ok [1m[32m891[0m value matches[K
  ok [1m[32m892[0m no error from done()[K
  ok [1m[32m893[0m no error from close()[K
[1A[1G[1m[32m✓ iterator#seek() on reverse iterator[0m[1B[1G
# iterator#seek() to out of range target[K

  ok [1m[32m894[0m no error from open()[K
  ok [1m[32m895[0m no error from batch()[K
  ok [1m[32m896[0m no error[K
  ok [1m[32m897[0m end of iterator[K
  ok [1m[32m898[0m end of iterator[K
  ok [1m[32m899[0m no error from done()[K
  ok [1m[32m900[0m no error from close()[K
[1A[1G[1m[32m✓ iterator#seek() to out of range target[0m[1B[1G
# iterator#seek() on reverse iterator to out of range target[K

  ok [1m[32m901[0m no error from open()[K
  ok [1m[32m902[0m no error from batch()[K
  ok [1m[32m903[0m no error[K
  ok [1m[32m904[0m should be deeply equivalent[K
  ok [1m[32m905[0m should be deeply equivalent[K
  ok [1m[32m906[0m no error from done()[K
  ok [1m[32m907[0m no error from close()[K
[1A[1G[1m[32m✓ iterator#seek() on reverse iterator to out of range target[0m[1B[1G
# iterator#seek() respects range[K

  ok [1m[32m908[0m no error from open()[K
  ok [1m[32m909[0m no error from batch()[K
  ok [1m[32m910[0m no error from next()[K
  ok [1m[32m911[0m seek(4) on {"gt":"5"} yields undefined[K
  ok [1m[32m912[0m no error from next()[K
  ok [1m[32m913[0m seek(5) on {"gt":"5"} yields undefined[K
  ok [1m[32m914[0m no error from next()[K
  ok [1m[32m915[0m seek(6) on {"gt":"5"} yields 6[K
  ok [1m[32m916[0m no error from next()[K
  ok [1m[32m917[0m seek(4) on {"gte":"5"} yields undefined[K
  ok [1m[32m918[0m no error from next()[K
  ok [1m[32m919[0m seek(5) on {"gte":"5"} yields 5[K
  ok [1m[32m920[0m no error from next()[K
  ok [1m[32m921[0m seek(6) on {"gte":"5"} yields 6[K
  ok [1m[32m922[0m no error from next()[K
  ok [1m[32m923[0m seek(4) on {"lt":"5"} yields 4[K
  ok [1m[32m924[0m no error from next()[K
  ok [1m[32m925[0m seek(5) on {"lt":"5"} yields undefined[K
  ok [1m[32m926[0m no error from next()[K
  ok [1m[32m927[0m seek(6) on {"lt":"5"} yields undefined[K
  ok [1m[32m928[0m no error from next()[K
  ok [1m[32m929[0m seek(4) on {"lte":"5"} yields 4[K
  ok [1m[32m930[0m no error from next()[K
  ok [1m[32m931[0m seek(5) on {"lte":"5"} yields 5[K
  ok [1m[32m932[0m no error from next()[K
  ok [1m[32m933[0m seek(6) on {"lte":"5"} yields undefined[K
  ok [1m[32m934[0m no error from next()[K
  ok [1m[32m935[0m seek(4) on {"lt":"5","reverse":true} yields 4[K
  ok [1m[32m936[0m no error from next()[K
  ok [1m[32m937[0m seek(5) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m938[0m no error from next()[K
  ok [1m[32m939[0m seek(6) on {"lt":"5","reverse":true} yields undefined[K
  ok [1m[32m940[0m no error from next()[K
  ok [1m[32m941[0m seek(4) on {"lte":"5","reverse":true} yields 4[K
  ok [1m[32m942[0m no error from next()[K
  ok [1m[32m943[0m seek(5) on {"lte":"5","reverse":true} yields 5[K
  ok [1m[32m944[0m no error from next()[K
  ok [1m[32m945[0m seek(6) on {"lte":"5","reverse":true} yields undefined[K
  ok [1m[32m946[0m no error from next()[K
  ok [1m[32m947[0m seek(4) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m948[0m no error from next()[K
  ok [1m[32m949[0m seek(5) on {"gt":"5","reverse":true} yields undefined[K
  ok [1m[32m950[0m no error from next()[K
  ok [1m[32m951[0m seek(6) on {"gt":"5","reverse":true} yields 6[K
  ok [1m[32m952[0m no error from next()[K
  ok [1m[32m953[0m seek(4) on {"gte":"5","reverse":true} yields undefined[K
  ok [1m[32m954[0m no error from next()[K
  ok [1m[32m955[0m seek(5) on {"gte":"5","reverse":true} yields 5[K
  ok [1m[32m956[0m no error from next()[K
  ok [1m[32m957[0m seek(6) on {"gte":"5","reverse":true} yields 6[K
  ok [1m[32m958[0m no error from next()[K
  ok [1m[32m959[0m seek(7) on {"gt":"7","lt":"8"} yields undefined[K
  ok [1m[32m960[0m no error from next()[K
  ok [1m[32m961[0m seek(7) on {"gte":"7","lt":"8"} yields 7[K
  ok [1m[32m962[0m no error from next()[K
  ok [1m[32m963[0m seek(8) on {"gte":"7","lt":"8"} yields undefined[K
  ok [1m[32m964[0m no error from next()[K
  ok [1m[32m965[0m seek(8) on {"gt":"7","lte":"8"} yields 8[K
  ok [1m[32m966[0m no error from end()[K
  ok [1m[32m967[0m no error from end()[K
  ok [1m[32m968[0m no error from end()[K
  ok [1m[32m969[0m no error from end()[K
  ok [1m[32m970[0m no error from end()[K
  ok [1m[32m971[0m no error from end()[K
  ok [1m[32m972[0m no error from end()[K
  ok [1m[32m973[0m no error from end()[K
  ok [1m[32m974[0m no error from end()[K
  ok [1m[32m975[0m no error from end()[K
  ok [1m[32m976[0m no error from end()[K
  ok [1m[32m977[0m no error from end()[K
  ok [1m[32m978[0m no error from end()[K
  ok [1m[32m979[0m no error from end()[K
  ok [1m[32m980[0m no error from end()[K
  ok [1m[32m981[0m no error from end()[K
  ok [1m[32m982[0m no error from end()[K
  ok [1m[32m983[0m no error from end()[K
  ok [1m[32m984[0m no error from end()[K
  ok [1m[32m985[0m no error from end()[K
  ok [1m[32m986[0m no error from end()[K
  ok [1m[32m987[0m no error from end()[K
  ok [1m[32m988[0m no error from end()[K
  ok [1m[32m989[0m no error from end()[K
  ok [1m[32m990[0m no error from end()[K
  ok [1m[32m991[0m no error from end()[K
  ok [1m[32m992[0m no error from end()[K
  ok [1m[32m993[0m no error from end()[K
  ok [1m[32m994[0m no error from close()[K
[1A[1G[1m[32m✓ iterator#seek() respects range[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# delete key after snapshotting[K

  ok [1m[32m995[0m no open error[K
  ok [1m[32m996[0m no put error[K
  ok [1m[32m997[0m no del error[K
  ok [1m[32m998[0m no next error[K
  ok [1m[32m999[0m got a key[K
  ok [1m[32m1000[0m correct key[K
  ok [1m[32m1001[0m correct value[K
  ok [1m[32m1002[0m no run error[K
  ok [1m[32m1003[0m no iterator end error[K
[1A[1G[1m[32m✓ delete key after snapshotting[0m[1B[1G
# overwrite key after snapshotting[K

  ok [1m[32m1004[0m no open error[K
  ok [1m[32m1005[0m no put error[K
  ok [1m[32m1006[0m no put error[K
  ok [1m[32m1007[0m no next error[K
  ok [1m[32m1008[0m got a key[K
  ok [1m[32m1009[0m correct key[K
  ok [1m[32m1010[0m correct value[K
  ok [1m[32m1011[0m no run error[K
  ok [1m[32m1012[0m no iterator end error[K
[1A[1G[1m[32m✓ overwrite key after snapshotting[0m[1B[1G
# add key after snapshotting that sorts first[K

  ok [1m[32m1013[0m no open error[K
  ok [1m[32m1014[0m no put error[K
  ok [1m[32m1015[0m no put error[K
  ok [1m[32m1016[0m no next error[K
  ok [1m[32m1017[0m got a key[K
  ok [1m[32m1018[0m correct key[K
  ok [1m[32m1019[0m correct value[K
  ok [1m[32m1020[0m no run error[K
  ok [1m[32m1021[0m no iterator end error[K
[1A[1G[1m[32m✓ add key after snapshotting that sorts first[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# setUp db[K

[1A[1G[1m[32m✓ setUp db[0m[1B[1G
# test argument-less clear() throws[K

  ok [1m[32m1022[0m no-arg clear() throws[K
[1A[1G[1m[32m✓ test argument-less clear() throws[0m[1B[1G
# test simple clear() on string keys[K

  ok [1m[32m1023[0m no open error[K
  ok [1m[32m1024[0m no batch error[K
  ok [1m[32m1025[0m no concat error[K
  ok [1m[32m1026[0m has entries[K
  ok [1m[32m1027[0m no clear error[K
  ok [1m[32m1028[0m no concat error[K
  ok [1m[32m1029[0m has no entries[K
  ok [1m[32m1030[0m no close error[K
[1A[1G[1m[32m✓ test simple clear() on string keys[0m[1B[1G
# test simple clear() on buffer keys[K

  ok [1m[32m1031[0m no open error[K
  ok [1m[32m1032[0m no batch error[K
  ok [1m[32m1033[0m no concat error[K
  ok [1m[32m1034[0m has entries[K
  ok [1m[32m1035[0m no clear error[K
  ok [1m[32m1036[0m no concat error[K
  ok [1m[32m1037[0m has no entries[K
  ok [1m[32m1038[0m no close error[K
[1A[1G[1m[32m✓ test simple clear() on buffer keys[0m[1B[1G
# test simple clear() on mixed keys[K

  ok [1m[32m1039[0m no open error[K
  ok [1m[32m1040[0m no batch error[K
  ok [1m[32m1041[0m no concat error[K
  ok [1m[32m1042[0m has entries[K
  ok [1m[32m1043[0m no clear error[K
  ok [1m[32m1044[0m no concat error[K
  ok [1m[32m1045[0m has no entries[K
  ok [1m[32m1046[0m no close error[K
[1A[1G[1m[32m✓ test simple clear() on mixed keys[0m[1B[1G
# test simple clear() on non-utf8 buffer keys[K

  ok [1m[32m1047[0m no open error[K
  ok [1m[32m1048[0m no batch error[K
  ok [1m[32m1049[0m no concat error[K
  ok [1m[32m1050[0m has entries[K
  ok [1m[32m1051[0m no clear error[K
  ok [1m[32m1052[0m no concat error[K
  ok [1m[32m1053[0m has no entries[K
  ok [1m[32m1054[0m no close error[K
[1A[1G[1m[32m✓ test simple clear() on non-utf8 buffer keys[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# setUp common[K

[1A[1G[1m[32m✓ setUp common[0m[1B[1G
# db#clear() with full range[K

  ok [1m[32m1055[0m no open error[K
  ok [1m[32m1056[0m no batch error[K
  ok [1m[32m1057[0m no clear error[K
  ok [1m[32m1058[0m no concat error[K
  ok [1m[32m1059[0m correct number of entries[K
  ok [1m[32m1060[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with full range[0m[1B[1G
# db#clear() with reverse=true[K

  ok [1m[32m1061[0m no open error[K
  ok [1m[32m1062[0m no batch error[K
  ok [1m[32m1063[0m no clear error[K
  ok [1m[32m1064[0m no concat error[K
  ok [1m[32m1065[0m correct number of entries[K
  ok [1m[32m1066[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with reverse=true[0m[1B[1G
# db#clear() with gte=00[K

  ok [1m[32m1067[0m no open error[K
  ok [1m[32m1068[0m no batch error[K
  ok [1m[32m1069[0m no clear error[K
  ok [1m[32m1070[0m no concat error[K
  ok [1m[32m1071[0m correct number of entries[K
  ok [1m[32m1072[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gte=00[0m[1B[1G
# db#clear() with gte=50[K

  ok [1m[32m1073[0m no open error[K
  ok [1m[32m1074[0m no batch error[K
  ok [1m[32m1075[0m no clear error[K
  ok [1m[32m1076[0m no concat error[K
  ok [1m[32m1077[0m correct number of entries[K
  ok [1m[32m1078[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gte=50[0m[1B[1G
# db#clear() with lte=50 and reverse=true[K

  ok [1m[32m1079[0m no open error[K
  ok [1m[32m1080[0m no batch error[K
  ok [1m[32m1081[0m no clear error[K
  ok [1m[32m1082[0m no concat error[K
  ok [1m[32m1083[0m correct number of entries[K
  ok [1m[32m1084[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte=50 and reverse=true[0m[1B[1G
# db#clear() with gte=49.5 (midway)[K

  ok [1m[32m1085[0m no open error[K
  ok [1m[32m1086[0m no batch error[K
  ok [1m[32m1087[0m no clear error[K
  ok [1m[32m1088[0m no concat error[K
  ok [1m[32m1089[0m correct number of entries[K
  ok [1m[32m1090[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gte=49.5 (midway)[0m[1B[1G
# db#clear() with gte=49999 (midway)[K

  ok [1m[32m1091[0m no open error[K
  ok [1m[32m1092[0m no batch error[K
  ok [1m[32m1093[0m no clear error[K
  ok [1m[32m1094[0m no concat error[K
  ok [1m[32m1095[0m correct number of entries[K
  ok [1m[32m1096[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gte=49999 (midway)[0m[1B[1G
# db#clear() with lte=49.5 (midway) and reverse=true[K

  ok [1m[32m1097[0m no open error[K
  ok [1m[32m1098[0m no batch error[K
  ok [1m[32m1099[0m no clear error[K
  ok [1m[32m1100[0m no concat error[K
  ok [1m[32m1101[0m correct number of entries[K
  ok [1m[32m1102[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte=49.5 (midway) and reverse=true[0m[1B[1G
# db#clear() with lt=49.5 (midway) and reverse=true[K

  ok [1m[32m1103[0m no open error[K
  ok [1m[32m1104[0m no batch error[K
  ok [1m[32m1105[0m no clear error[K
  ok [1m[32m1106[0m no concat error[K
  ok [1m[32m1107[0m correct number of entries[K
  ok [1m[32m1108[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lt=49.5 (midway) and reverse=true[0m[1B[1G
# db#clear() with lt=50 and reverse=true[K

  ok [1m[32m1109[0m no open error[K
  ok [1m[32m1110[0m no batch error[K
  ok [1m[32m1111[0m no clear error[K
  ok [1m[32m1112[0m no concat error[K
  ok [1m[32m1113[0m correct number of entries[K
  ok [1m[32m1114[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lt=50 and reverse=true[0m[1B[1G
# db#clear() with lte=50[K

  ok [1m[32m1115[0m no open error[K
  ok [1m[32m1116[0m no batch error[K
  ok [1m[32m1117[0m no clear error[K
  ok [1m[32m1118[0m no concat error[K
  ok [1m[32m1119[0m correct number of entries[K
  ok [1m[32m1120[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte=50[0m[1B[1G
# db#clear() with lte=50.5 (midway)[K

  ok [1m[32m1121[0m no open error[K
  ok [1m[32m1122[0m no batch error[K
  ok [1m[32m1123[0m no clear error[K
  ok [1m[32m1124[0m no concat error[K
  ok [1m[32m1125[0m correct number of entries[K
  ok [1m[32m1126[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte=50.5 (midway)[0m[1B[1G
# db#clear() with lte=50555 (midway)[K

  ok [1m[32m1127[0m no open error[K
  ok [1m[32m1128[0m no batch error[K
  ok [1m[32m1129[0m no clear error[K
  ok [1m[32m1130[0m no concat error[K
  ok [1m[32m1131[0m correct number of entries[K
  ok [1m[32m1132[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte=50555 (midway)[0m[1B[1G
# db#clear() with lt=50555 (midway)[K

  ok [1m[32m1133[0m no open error[K
  ok [1m[32m1134[0m no batch error[K
  ok [1m[32m1135[0m no clear error[K
  ok [1m[32m1136[0m no concat error[K
  ok [1m[32m1137[0m correct number of entries[K
  ok [1m[32m1138[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lt=50555 (midway)[0m[1B[1G
# db#clear() with gte=50.5 (midway) and reverse=true[K

  ok [1m[32m1139[0m no open error[K
  ok [1m[32m1140[0m no batch error[K
  ok [1m[32m1141[0m no clear error[K
  ok [1m[32m1142[0m no concat error[K
  ok [1m[32m1143[0m correct number of entries[K
  ok [1m[32m1144[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gte=50.5 (midway) and reverse=true[0m[1B[1G
# db#clear() with gt=50.5 (midway) and reverse=true[K

  ok [1m[32m1145[0m no open error[K
  ok [1m[32m1146[0m no batch error[K
  ok [1m[32m1147[0m no clear error[K
  ok [1m[32m1148[0m no concat error[K
  ok [1m[32m1149[0m correct number of entries[K
  ok [1m[32m1150[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gt=50.5 (midway) and reverse=true[0m[1B[1G
# db#clear() with gt=50 and reverse=true[K

  ok [1m[32m1151[0m no open error[K
  ok [1m[32m1152[0m no batch error[K
  ok [1m[32m1153[0m no clear error[K
  ok [1m[32m1154[0m no concat error[K
  ok [1m[32m1155[0m correct number of entries[K
  ok [1m[32m1156[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gt=50 and reverse=true[0m[1B[1G
# db#clear() with lte=0[K

  ok [1m[32m1157[0m no open error[K
  ok [1m[32m1158[0m no batch error[K
  ok [1m[32m1159[0m no clear error[K
  ok [1m[32m1160[0m no concat error[K
  ok [1m[32m1161[0m correct number of entries[K
  ok [1m[32m1162[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte=0[0m[1B[1G
# db#clear() with lt=0[K

  ok [1m[32m1163[0m no open error[K
  ok [1m[32m1164[0m no batch error[K
  ok [1m[32m1165[0m no clear error[K
  ok [1m[32m1166[0m no concat error[K
  ok [1m[32m1167[0m correct number of entries[K
  ok [1m[32m1168[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lt=0[0m[1B[1G
# db#clear() with gte=30 and lte=70[K

  ok [1m[32m1169[0m no open error[K
  ok [1m[32m1170[0m no batch error[K
  ok [1m[32m1171[0m no clear error[K
  ok [1m[32m1172[0m no concat error[K
  ok [1m[32m1173[0m correct number of entries[K
  ok [1m[32m1174[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gte=30 and lte=70[0m[1B[1G
# db#clear() with gt=29 and lt=71[K

  ok [1m[32m1175[0m no open error[K
  ok [1m[32m1176[0m no batch error[K
  ok [1m[32m1177[0m no clear error[K
  ok [1m[32m1178[0m no concat error[K
  ok [1m[32m1179[0m correct number of entries[K
  ok [1m[32m1180[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gt=29 and lt=71[0m[1B[1G
# db#clear() with gte=30 and lte=70 and reverse=true[K

  ok [1m[32m1181[0m no open error[K
  ok [1m[32m1182[0m no batch error[K
  ok [1m[32m1183[0m no clear error[K
  ok [1m[32m1184[0m no concat error[K
  ok [1m[32m1185[0m correct number of entries[K
  ok [1m[32m1186[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gte=30 and lte=70 and reverse=true[0m[1B[1G
# db#clear() with gt=29 and lt=71 and reverse=true[K

  ok [1m[32m1187[0m no open error[K
  ok [1m[32m1188[0m no batch error[K
  ok [1m[32m1189[0m no clear error[K
  ok [1m[32m1190[0m no concat error[K
  ok [1m[32m1191[0m correct number of entries[K
  ok [1m[32m1192[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gt=29 and lt=71 and reverse=true[0m[1B[1G
# db#clear() with limit=20[K

  ok [1m[32m1193[0m no open error[K
  ok [1m[32m1194[0m no batch error[K
  ok [1m[32m1195[0m no clear error[K
  ok [1m[32m1196[0m no concat error[K
  ok [1m[32m1197[0m correct number of entries[K
  ok [1m[32m1198[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with limit=20[0m[1B[1G
# db#clear() with limit=20 and gte=20[K

  ok [1m[32m1199[0m no open error[K
  ok [1m[32m1200[0m no batch error[K
  ok [1m[32m1201[0m no clear error[K
  ok [1m[32m1202[0m no concat error[K
  ok [1m[32m1203[0m correct number of entries[K
  ok [1m[32m1204[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with limit=20 and gte=20[0m[1B[1G
# db#clear() with limit=20 and reverse=true[K

  ok [1m[32m1205[0m no open error[K
  ok [1m[32m1206[0m no batch error[K
  ok [1m[32m1207[0m no clear error[K
  ok [1m[32m1208[0m no concat error[K
  ok [1m[32m1209[0m correct number of entries[K
  ok [1m[32m1210[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with limit=20 and reverse=true[0m[1B[1G
# db#clear() with limit=20 and lte=79 and reverse=true[K

  ok [1m[32m1211[0m no open error[K
  ok [1m[32m1212[0m no batch error[K
  ok [1m[32m1213[0m no clear error[K
  ok [1m[32m1214[0m no concat error[K
  ok [1m[32m1215[0m correct number of entries[K
  ok [1m[32m1216[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with limit=20 and lte=79 and reverse=true[0m[1B[1G
# db#clear() with limit=-1 should clear whole database[K

  ok [1m[32m1217[0m no open error[K
  ok [1m[32m1218[0m no batch error[K
  ok [1m[32m1219[0m no clear error[K
  ok [1m[32m1220[0m no concat error[K
  ok [1m[32m1221[0m correct number of entries[K
  ok [1m[32m1222[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with limit=-1 should clear whole database[0m[1B[1G
# db#clear() with limit=0 should not clear anything[K

  ok [1m[32m1223[0m no open error[K
  ok [1m[32m1224[0m no batch error[K
  ok [1m[32m1225[0m no clear error[K
  ok [1m[32m1226[0m no concat error[K
  ok [1m[32m1227[0m correct number of entries[K
  ok [1m[32m1228[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with limit=0 should not clear anything[0m[1B[1G
# db#clear() with lte after limit[K

  ok [1m[32m1229[0m no open error[K
  ok [1m[32m1230[0m no batch error[K
  ok [1m[32m1231[0m no clear error[K
  ok [1m[32m1232[0m no concat error[K
  ok [1m[32m1233[0m correct number of entries[K
  ok [1m[32m1234[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte after limit[0m[1B[1G
# db#clear() with lte before limit[K

  ok [1m[32m1235[0m no open error[K
  ok [1m[32m1236[0m no batch error[K
  ok [1m[32m1237[0m no clear error[K
  ok [1m[32m1238[0m no concat error[K
  ok [1m[32m1239[0m correct number of entries[K
  ok [1m[32m1240[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte before limit[0m[1B[1G
# db#clear() with gte after database end[K

  ok [1m[32m1241[0m no open error[K
  ok [1m[32m1242[0m no batch error[K
  ok [1m[32m1243[0m no clear error[K
  ok [1m[32m1244[0m no concat error[K
  ok [1m[32m1245[0m correct number of entries[K
  ok [1m[32m1246[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gte after database end[0m[1B[1G
# db#clear() with gt after database end[K

  ok [1m[32m1247[0m no open error[K
  ok [1m[32m1248[0m no batch error[K
  ok [1m[32m1249[0m no clear error[K
  ok [1m[32m1250[0m no concat error[K
  ok [1m[32m1251[0m correct number of entries[K
  ok [1m[32m1252[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with gt after database end[0m[1B[1G
# db#clear() with lte after database end and reverse=true[K

  ok [1m[32m1253[0m no open error[K
  ok [1m[32m1254[0m no batch error[K
  ok [1m[32m1255[0m no clear error[K
  ok [1m[32m1256[0m no concat error[K
  ok [1m[32m1257[0m correct number of entries[K
  ok [1m[32m1258[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte after database end and reverse=true[0m[1B[1G
# db#clear() with lte and gte after database and reverse=true[K

  ok [1m[32m1259[0m no open error[K
  ok [1m[32m1260[0m no batch error[K
  ok [1m[32m1261[0m no clear error[K
  ok [1m[32m1262[0m no concat error[K
  ok [1m[32m1263[0m correct number of entries[K
  ok [1m[32m1264[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lte and gte after database and reverse=true[0m[1B[1G
# db#clear() with lt and gt after database and reverse=true[K

  ok [1m[32m1265[0m no open error[K
  ok [1m[32m1266[0m no batch error[K
  ok [1m[32m1267[0m no clear error[K
  ok [1m[32m1268[0m no concat error[K
  ok [1m[32m1269[0m correct number of entries[K
  ok [1m[32m1270[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ db#clear() with lt and gt after database and reverse=true[0m[1B[1G
# tearDown[K

[1A[1G[1m[32m✓ tearDown[0m[1B[1G
# unsorted entry, sorted iterator[K

  ok [1m[32m1271[0m no open error[K
  ok [1m[32m1272[0m no error[K
  ok [1m[32m1273[0m correct number of entries[K
  ok [1m[32m1274[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ unsorted entry, sorted iterator[0m[1B[1G
# reading while putting[K

  ok [1m[32m1275[0m no open error[K
  ok [1m[32m1276[0m no next error[K
  ok [1m[32m1277[0m should be strictly equal[K
  ok [1m[32m1278[0m should be strictly equal[K
  ok [1m[32m1279[0m no next error[K
  ok [1m[32m1280[0m should be strictly equal[K
  ok [1m[32m1281[0m should be strictly equal[K
[1A[1G[1m[32m✓ reading while putting[0m[1B[1G
# reading while deleting[K

  ok [1m[32m1282[0m no open error[K
  ok [1m[32m1283[0m no next error[K
  ok [1m[32m1284[0m should be strictly equal[K
  ok [1m[32m1285[0m should be strictly equal[K
  ok [1m[32m1286[0m no next error[K
  ok [1m[32m1287[0m should be strictly equal[K
  ok [1m[32m1288[0m should be strictly equal[K
[1A[1G[1m[32m✓ reading while deleting[0m[1B[1G
# reverse ranges[K

  ok [1m[32m1289[0m no open error[K
  ok [1m[32m1290[0m no next error[K
  ok [1m[32m1291[0m should be strictly equal[K
  ok [1m[32m1292[0m should be strictly equal[K
[1A[1G[1m[32m✓ reverse ranges[0m[1B[1G
# delete while iterating[K

  ok [1m[32m1293[0m no open error[K
  ok [1m[32m1294[0m no next error[K
  ok [1m[32m1295[0m should be strictly equal[K
  ok [1m[32m1296[0m should be strictly equal[K
  ok [1m[32m1297[0m no error[K
  ok [1m[32m1298[0m no error[K
  ok [1m[32m1299[0m should be strictly equal[K
  ok [1m[32m1300[0m should be strictly equal[K
[1A[1G[1m[32m✓ delete while iterating[0m[1B[1G
# iterator with byte range[K

  ok [1m[32m1301[0m no open error[K
  ok [1m[32m1302[0m undefined[K
  ok [1m[32m1303[0m no error[K
  ok [1m[32m1304[0m should be strictly equal[K
  ok [1m[32m1305[0m should be strictly equal[K
[1A[1G[1m[32m✓ iterator with byte range[0m[1B[1G
# iterator does not clone buffers[K

  ok [1m[32m1306[0m no open error[K
  ok [1m[32m1307[0m no iterator error[K
  ok [1m[32m1308[0m key is same buffer[K
  ok [1m[32m1309[0m value is same buffer[K
[1A[1G[1m[32m✓ iterator does not clone buffers[0m[1B[1G
# iterator stringifies buffer input[K

  ok [1m[32m1310[0m no open error[K
  ok [1m[32m1311[0m no iterator error[K
  ok [1m[32m1312[0m key is stringified[K
  ok [1m[32m1313[0m value is stringified[K
[1A[1G[1m[32m✓ iterator stringifies buffer input[0m[1B[1G
# backing rbtree is buffer-aware[K

  ok [1m[32m1314[0m no open error[K
  ok [1m[32m1315[0m would be equal when not buffer-aware[K
  ok [1m[32m1316[0m but greater when buffer-aware[K
  ok [1m[32m1317[0m no error[K
  ok [1m[32m1318[0m no error[K
  ok [1m[32m1319[0m value one ok[K
  ok [1m[32m1320[0m no error[K
  ok [1m[32m1321[0m no error[K
  ok [1m[32m1322[0m value one is the same[K
[1A[1G[1m[32m✓ backing rbtree is buffer-aware[0m[1B[1G
# empty value in batch[K

  ok [1m[32m1323[0m no open error[K
  ok [1m[32m1324[0m no error[K
  ok [1m[32m1325[0m no error[K
  ok [1m[32m1326[0m empty string[K
  ok [1m[32m1327[0m no error[K
  ok [1m[32m1328[0m empty buffer[K
[1A[1G[1m[32m✓ empty value in batch[0m[1B[1G
# empty buffer key in batch[K

  ok [1m[32m1329[0m no open error[K
  ok [1m[32m1330[0m got an error[K
[1A[1G[1m[32m✓ empty buffer key in batch[0m[1B[1G
# buffer key in batch[K

  ok [1m[32m1331[0m no open error[K
  ok [1m[32m1332[0m no error[K
  ok [1m[32m1333[0m no error[K
  ok [1m[32m1334[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ buffer key in batch[0m[1B[1G
# put multiple times[K

  ok [1m[32m1335[0m no open error[K
  ok [1m[32m1336[0m no error[K
  ok [1m[32m1337[0m no error[K
  ok [1m[32m1338[0m no error[K
  ok [1m[32m1339[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ put multiple times[0m[1B[1G
# put as string, get as buffer and vice versa[K

  ok [1m[32m1340[0m no open error[K
  ok [1m[32m1341[0m no put error[K
  ok [1m[32m1342[0m no put error[K
  ok [1m[32m1343[0m no get error[K
  ok [1m[32m1344[0m got value[K
  ok [1m[32m1345[0m no get error[K
  ok [1m[32m1346[0m got value[K
[1A[1G[1m[32m✓ put as string, get as buffer and vice versa[0m[1B[1G
# put as string, iterate as buffer[K

  ok [1m[32m1347[0m no open error[K
  ok [1m[32m1348[0m no put error[K
  ok [1m[32m1349[0m no concat error[K
  ok [1m[32m1350[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ put as string, iterate as buffer[0m[1B[1G
# put as buffer, iterate as string[K

  ok [1m[32m1351[0m no open error[K
  ok [1m[32m1352[0m no put error[K
  ok [1m[32m1353[0m no concat error[K
  ok [1m[32m1354[0m should be deeply equivalent[K
[1A[1G[1m[32m✓ put as buffer, iterate as string[0m[1B[1G
# number keys[K

  ok [1m[32m1355[0m no open error[K
  ok [1m[32m1356[0m no iterator error[K
  ok [1m[32m1357[0m sorts lexicographically[K
  ok [1m[32m1358[0m no iterator error[K
  ok [1m[32m1359[0m buffer input is stringified[K
[1A[1G[1m[32m✓ number keys[0m[1B[1G
# tests 1359[K

tests 1359
# pass  1359[K

pass  1359
# ok[K
[1A[1G[1m[32m✓ ok[0m[1B[1G------------|---------|----------|---------|---------|-------------------
File        | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
------------|---------|----------|---------|---------|-------------------
All files   |   98.79 |     95.6 |     100 |   98.71 |                   
 memdown.js |   98.79 |     95.6 |     100 |   98.71 | 139,273           
------------|---------|----------|---------|---------|-------------------
https://github.com/bevry/taskgroup.git
source/index.js
DirectBloated/taskgroup
taskgroup
b49282f

added 571 packages, and audited 572 packages in 5s

65 packages are looking for funding
  run `npm fund` for details

15 vulnerabilities (1 low, 1 moderate, 9 high, 4 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> taskgroup@7.19.0 test
> node ./source/test.js

test-usage: task
test-usage: task ➞ Task.create(...).done(...) should time out when run was not called
test-usage: task ➞ Task.create(...).done(...) should time out when run was not called ✔
test-usage: task ➞ Task.create().run().done(...) should fail as there was no task method defined
test-usage: task ➞ Task.create().run().done(...) should fail as there was no task method defined ✔
test-usage: task ➞ Task.create(...).run().done(...) should fire the completion callback with the expected result
test-usage: task ➞ Task.create(...).run().done(...) should fire the completion callback with the expected result ✔
test-usage: task ➞ Task.create(...).done(...).run() should fire the completion callback with the expected result
test-usage: task ➞ Task.create(...).done(...).run() should fire the completion callback with the expected result ✔
test-usage: task ➞ Task.create(...).done(...).run().run() should fail as a task is not allowed to run twice
test-usage: task ➞ Task.create(...).done(...).run().run() should fail as a task is not allowed to run twice ✔
test-usage: task ➞ Task.create(...).run().run().done(...) should fail as a task is not allowed to run twice
test-usage: task ➞ Task.create(...).run().run().done(...) should fail as a task is not allowed to run twice ✔
test-usage: task ✔
test-usage: taskgroup
test-usage: taskgroup ➞ TaskGroup.create().run().done(...) should complete with no result
test-usage: taskgroup ➞ TaskGroup.create().run().done(...) should complete with no result ✔
test-usage: taskgroup ➞ Taskgroup should be able to complete multiple times with destroyOnceDone: false
test-usage: taskgroup ➞ Taskgroup should be able to complete multiple times with destroyOnceDone: false ✔
test-usage: taskgroup ➞ TaskGroup.create().run().done(...).addTask(...) should complete with the tasks result
test-usage: taskgroup ➞ TaskGroup.create().run().done(...).addTask(...) should complete with the tasks result ✔
test-usage: taskgroup ➞ TaskGroup.create().done().addTask(...).run().addTask(...).done(...) should complete correctly
test-usage: taskgroup ➞ TaskGroup.create().done().addTask(...).run().addTask(...).done(...) should complete correctly ✔
test-usage: taskgroup ➞ TaskGroup.create().run().run().done(...) should complete only once
test-usage: taskgroup ➞ TaskGroup.create().run().run().done(...) should complete only once ✔
test-usage: taskgroup ➞ Taskgroup should pause when encountering an error
test-usage: taskgroup ➞ Taskgroup should pause when encountering an error ✔
test-usage: taskgroup ➞ Taskgroup should ignore when encountering an error with different config
test-usage: taskgroup ➞ Taskgroup should ignore when encountering an error with different config ✔
test-usage: taskgroup ➞ Taskgroup should be able to resume after an error
test-usage: taskgroup ➞ Taskgroup should be able to resume after an error ✔
test-usage: taskgroup ✔
test-unit: task
test-unit: task ➞ basic
test-unit: task ➞ basic ➞ should work with async
test-unit: task ➞ basic ➞ should work with async ✔
test-unit: task ➞ basic ➞ should work with sync
test-unit: task ➞ basic ➞ should work with sync ✔
test-unit: task ➞ basic ✔
test-unit: task ➞ errors
test-unit: task ➞ errors ➞ should detect return error on synchronous task
test-unit: task ➞ errors ➞ should detect return error on synchronous task ✔
test-unit: task ➞ errors ➞ should detect sync throw error on synchronous task
test-unit: task ➞ errors ➞ should detect sync throw error on synchronous task ✔
test-unit: task ➞ errors ➞ should detect async throw error on asynchronous task
test-unit: task ➞ errors ➞ should detect async throw error on asynchronous task ✔
test-unit: task ➞ errors ➞ it should not catch errors within the completion callback: issue 17, with domains
test-unit: task ➞ errors ➞ it should not catch errors within the completion callback: issue 17, with domains ✔
test-unit: task ➞ errors ➞ it should not catch errors within the completion callback: issue 17, without domains
test-unit: task ➞ errors ➞ it should not catch errors within the completion callback: issue 17, without domains ✔
test-unit: task ➞ errors ✔
test-unit: task ➞ arguments
test-unit: task ➞ arguments ➞ should work with arguments in sync
test-unit: task ➞ arguments ➞ should work with arguments in sync ✔
test-unit: task ➞ arguments ➞ should work with arguments in async
test-unit: task ➞ arguments ➞ should work with arguments in async ✔
test-unit: task ➞ arguments ✔
test-unit: task ✔
test-unit: taskgroup
test-unit: taskgroup ➞ basic
test-unit: taskgroup ➞ basic ➞ should work when running in serial
test-unit: taskgroup ➞ basic ➞ should work when running in serial ✔
test-unit: taskgroup ➞ basic ➞ should work when running in parallel
test-unit: taskgroup ➞ basic ➞ should work when running in parallel ✔
test-unit: taskgroup ➞ basic ➞ should work when running in parallel with new API
test-unit: taskgroup ➞ basic ➞ should work when running in parallel with new API ✔
test-unit: taskgroup ➞ basic ✔
test-unit: taskgroup ➞ errors
test-unit: taskgroup ➞ errors ➞ should handle error correctly in serial
test-unit: taskgroup ➞ errors ➞ should handle error correctly in serial ✔
test-unit: taskgroup ➞ errors ➞ should handle error correctly in parallel
test-unit: taskgroup ➞ errors ➞ should handle error correctly in parallel ✔
test-unit: taskgroup ➞ errors ✔
test-unit: taskgroup ✔
test-unit: nested
test-unit: nested ➞ traditional format
test-unit: nested ➞ traditional format ✔
test-unit: nested ➞ inline format
test-unit: nested ➞ inline format ✔
test-unit: nested ➞ mixed format
test-unit: nested ➞ mixed format ✔
test-unit: nested ✔

31/31 tests ran successfully, everything passed
https://github.com/Level/deferred-leveldown.git
deferred-leveldown.js
DirectBloated/deferred-leveldown
deferred-leveldown
f85f58e

up to date, audited 1101 packages in 2s

250 packages are looking for funding
  run `npm fund` for details

4 high severity vulnerabilities

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

> deferred-leveldown@7.0.0 test
> standard && hallmark && nyc node test.js

  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:13:3: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:315:44: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:319:44: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:326:44: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:330:44: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:334:46: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:446:22: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:446:32: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:507:22: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:507:36: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:532:22: Expected property shorthand. (object-shorthand) (warning)
  /data/js-variants/multee/DirectBloated/deferred-leveldown/test.js:532:36: Expected property shorthand. (object-shorthand) (warning)
TAP version 13
# setUp common
# testCommon.factory() returns a unique database
ok 1 no error while opening db1
ok 2 no error while opening db2
ok 3 put key in db1
ok 4 got items from db2
ok 5 db2 should be empty
ok 6 no error while closing db1
ok 7 no error while closing db2
# tearDown
# setUp common
# db has manifest
ok 8 manifest is object
ok 9 additionalMethods is object
ok 10 truthy: bufferKeys
ok 11 truthy: snapshots
ok 12 false: permanence
ok 13 truthy: seek
ok 14 truthy: clear
ok 15 truthy: getMany
ok 16 truthy: status
ok 17 false: keyIterator
ok 18 false: valueIterator
ok 19 false: iteratorNextv
ok 20 false: iteratorAll
ok 21 false: idempotentOpen
ok 22 false: passiveOpen
ok 23 false: serialize
ok 24 false: createIfMissing
ok 25 false: errorIfExists
ok 26 false: deferredOpen
ok 27 false: openCallback
ok 28 false: promises
ok 29 false: streams
ok 30 false: encodings
ok 31 false: events
ok 32 truthy: additionalMethods
ok 33 manifest has unique identity
ok 34 manifest.additionalMethods has unique identity
ok 35 no open error
ok 36 manifest did not change after open
ok 37 no close error
ok 38 manifest did not change after close
# manifest has status
ok 39 should be strictly equal
ok 40 no open error
# tearDown
# setUp common
# test database open method exists
ok 41 database object returned
ok 42 open() function exists
# tearDown
# setUp
# test database open no-arg throws
ok 43 no-arg open() throws
# test callback-less, 1-arg, open() throws
ok 44 callback-less, 1-arg open() throws
# test database open, no options
ok 45 undefined
# test database open, options and callback
ok 46 undefined
# test database open, close and open
ok 47 undefined
ok 48 undefined
ok 49 undefined
# tearDown
# setUp common
# setUp db
# test close()
ok 50 no-arg close() throws
ok 51 non-callback close() throws
ok 52 undefined
# tearDown
# setUp common
# setUp db
# test argument-less put() throws
ok 53 no-arg put() throws
# test callback-less, 1-arg, put() throws
ok 54 callback-less, 1-arg put() throws
# test callback-less, 2-arg, put() throws
ok 55 callback-less, 2-arg put() throws
# test callback-less, 3-arg, put() throws
ok 56 callback-less, 3-arg put() throws
# test simple put()
ok 57 undefined
ok 58 null
ok 59 should be strictly equal
# tearDown
# setUp common
# setUp db
# test argument-less get() throws
ok 60 no-arg get() throws
# test callback-less, 1-arg, get() throws
ok 61 callback-less, 1-arg get() throws
# test callback-less, 3-arg, get() throws
ok 62 callback-less, 2-arg get() throws
# test simple get()
ok 63 undefined
ok 64 null
ok 65 should not be string by default
ok 66 should be strictly equal
ok 67 null
ok 68 should not be string by default
ok 69 should be strictly equal
ok 70 null
ok 71 should be string if not buffer
ok 72 should be strictly equal
# test simultaneous get()
ok 73 undefined
ok 74 null
ok 75 should be strictly equal
ok 76 null
ok 77 should be strictly equal
ok 78 null
ok 79 should be strictly equal
ok 80 null
ok 81 should be strictly equal
ok 82 null
ok 83 should be strictly equal
ok 84 null
ok 85 should be strictly equal
ok 86 null
ok 87 should be strictly equal
ok 88 null
ok 89 should be strictly equal
ok 90 null
ok 91 should be strictly equal
ok 92 null
ok 93 should be strictly equal
ok 94 should error
ok 95 should have correct error message
ok 96 value is undefined
ok 97 should error
ok 98 should have correct error message
ok 99 value is undefined
ok 100 should error
ok 101 should have correct error message
ok 102 value is undefined
ok 103 should error
ok 104 should have correct error message
ok 105 value is undefined
ok 106 should error
ok 107 should have correct error message
ok 108 value is undefined
ok 109 should error
ok 110 should have correct error message
ok 111 value is undefined
ok 112 should error
ok 113 should have correct error message
ok 114 value is undefined
ok 115 should error
ok 116 should have correct error message
ok 117 value is undefined
ok 118 should error
ok 119 should have correct error message
ok 120 value is undefined
ok 121 should error
ok 122 should have correct error message
ok 123 value is undefined
# test get() not found error is asynchronous
ok 124 should error
ok 125 should have correct error message
ok 126 value is undefined
ok 127 callback is asynchronous
# tearDown
# setUp common
# setUp db
# test argument-less del() throws
ok 128 no-arg del() throws
# test callback-less, 1-arg, del() throws
ok 129 callback-less, 1-arg del() throws
# test callback-less, 3-arg, del() throws
ok 130 callback-less, 2-arg del() throws
# test simple del()
ok 131 undefined
ok 132 undefined
ok 133 entry properly deleted
ok 134 value is undefined
ok 135 NotFound error
# test del on non-existent key
ok 136 undefined
# tearDown
# setUp common
# setUp db
# test get() with null key causes error
ok 137 has error
ok 138 should be truthy
ok 139 correct error message
ok 140 callback is asynchronous
# test del() with null key causes error
ok 141 has error
ok 142 should be truthy
ok 143 correct error message
ok 144 callback is asynchronous
# test getMany() with null key causes error
ok 145 callback (anonymous) is asynchronous
ok 146 callback (anonymous) is asynchronous
ok 147 has error
ok 148 should be truthy
ok 149 correct error message
ok 150 has error
ok 151 should be truthy
ok 152 correct error message
# test put() with null key causes error
ok 153 has error
ok 154 should be truthy
ok 155 correct error message
ok 156 callback is asynchronous
# test get() with undefined key causes error
ok 157 has error
ok 158 should be truthy
ok 159 correct error message
ok 160 callback is asynchronous
# test del() with undefined key causes error
ok 161 has error
ok 162 should be truthy
ok 163 correct error message
ok 164 callback is asynchronous
# test getMany() with undefined key causes error
ok 165 callback (anonymous) is asynchronous
ok 166 callback (anonymous) is asynchronous
ok 167 has error
ok 168 should be truthy
ok 169 correct error message
ok 170 has error
ok 171 should be truthy
ok 172 correct error message
# test put() with undefined key causes error
ok 173 has error
ok 174 should be truthy
ok 175 correct error message
ok 176 callback is asynchronous
# test get() with empty String key causes error
ok 177 has error
ok 178 should be truthy
ok 179 correct error message
ok 180 callback is asynchronous
# test del() with empty String key causes error
ok 181 has error
ok 182 should be truthy
ok 183 correct error message
ok 184 callback is asynchronous
# test getMany() with empty String key causes error
ok 185 callback (anonymous) is asynchronous
ok 186 callback (anonymous) is asynchronous
ok 187 has error
ok 188 should be truthy
ok 189 correct error message
ok 190 has error
ok 191 should be truthy
ok 192 correct error message
# test put() with empty String key causes error
ok 193 has error
ok 194 should be truthy
ok 195 correct error message
ok 196 callback is asynchronous
# test get() with empty Buffer key causes error
ok 197 has error
ok 198 should be truthy
ok 199 correct error message
ok 200 callback is asynchronous
# test del() with empty Buffer key causes error
ok 201 has error
ok 202 should be truthy
ok 203 correct error message
ok 204 callback is asynchronous
# test getMany() with empty Buffer key causes error
ok 205 callback (anonymous) is asynchronous
ok 206 callback (anonymous) is asynchronous
ok 207 has error
ok 208 should be truthy
ok 209 correct error message
ok 210 has error
ok 211 should be truthy
ok 212 correct error message
# test put() with empty Buffer key causes error
ok 213 has error
ok 214 should be truthy
ok 215 correct error message
ok 216 callback is asynchronous
# test get() with empty Array key causes error
ok 217 has error
ok 218 should be truthy
ok 219 correct error message
ok 220 callback is asynchronous
# test del() with empty Array key causes error
ok 221 has error
ok 222 should be truthy
ok 223 correct error message
ok 224 callback is asynchronous
# test getMany() with empty Array key causes error
ok 225 callback (anonymous) is asynchronous
ok 226 callback (anonymous) is asynchronous
ok 227 has error
ok 228 should be truthy
ok 229 correct error message
ok 230 has error
ok 231 should be truthy
ok 232 correct error message
# test put() with empty Array key causes error
ok 233 has error
ok 234 should be truthy
ok 235 correct error message
ok 236 callback is asynchronous
# test put() with null value causes error
ok 237 has error
ok 238 should be truthy
ok 239 correct error message
ok 240 callback is asynchronous
# test put() with undefined value causes error
ok 241 has error
ok 242 should be truthy
ok 243 correct error message
ok 244 callback is asynchronous
# test put()/get()/del() with `0` key
ok 245 undefined
ok 246 no error, has key/value for ``0` key`
ok 247 is a Buffer
ok 248 should be strictly equal
ok 249 no error, deleted key/value for ``0` key`
ok 250 entry properly deleted
ok 251 should have correct error message
ok 252 value is undefined
ok 253 callback is asynchronous
# test put()/get()/del() with long String key
ok 254 undefined
ok 255 no error, has key/value for `long String key`
ok 256 is a Buffer
ok 257 should be strictly equal
ok 258 no error, deleted key/value for `long String key`
ok 259 entry properly deleted
ok 260 should have correct error message
ok 261 value is undefined
ok 262 callback is asynchronous
# test put()/get()/del() with Buffer key
ok 263 undefined
ok 264 no error, has key/value for `Buffer key`
ok 265 is a Buffer
ok 266 should be strictly equal
ok 267 no error, deleted key/value for `Buffer key`
ok 268 entry properly deleted
ok 269 should have correct error message
ok 270 value is undefined
ok 271 callback is asynchronous
# test put()/get()/del() with Array value
ok 272 undefined
ok 273 no error, has key/value for `Array value`
ok 274 is a Buffer
ok 275 should be strictly equal
ok 276 no error, deleted key/value for `Array value`
ok 277 entry properly deleted
ok 278 should have correct error message
ok 279 value is undefined
ok 280 callback is asynchronous
# test put()/get()/del() with `false` value
ok 281 undefined
ok 282 no error, has key/value for ``false` value`
ok 283 is a Buffer
ok 284 should be strictly equal
ok 285 no error, deleted key/value for ``false` value`
ok 286 entry properly deleted
ok 287 should have correct error message
ok 288 value is undefined
ok 289 callback is asynchronous
# test put()/get()/del() with `0` value
ok 290 undefined
ok 291 no error, has key/value for ``0` value`
ok 292 is a Buffer
ok 293 should be strictly equal
ok 294 no error, deleted key/value for ``0` value`
ok 295 entry properly deleted
ok 296 should have correct error message
ok 297 value is undefined
ok 298 callback is asynchronous
# test put()/get()/del() with `NaN` value
ok 299 undefined
ok 300 no error, has key/value for ``NaN` value`
ok 301 is a Buffer
ok 302 should be strictly equal
ok 303 no error, deleted key/value for ``NaN` value`
ok 304 entry properly deleted
ok 305 should have correct error message
ok 306 value is undefined
ok 307 callback is asynchronous
# test put()/get()/del() with empty String value
ok 308 undefined
ok 309 no error, has key/value for `empty String value`
ok 310 is a Buffer
ok 311 should be strictly equal
ok 312 no error, deleted key/value for `empty String value`
ok 313 entry properly deleted
ok 314 should have correct error message
ok 315 value is undefined
ok 316 callback is asynchronous
# test put()/get()/del() with empty Buffer value
ok 317 undefined
ok 318 no error, has key/value for `empty Buffer value`
ok 319 is a Buffer
ok 320 should be strictly equal
ok 321 no error, deleted key/value for `empty Buffer value`
ok 322 entry properly deleted
ok 323 should have correct error message
ok 324 value is undefined
ok 325 callback is asynchronous
# test put()/get()/del() with empty Array value
ok 326 undefined
ok 327 no error, has key/value for `empty Array value`
ok 328 is a Buffer
ok 329 should be strictly equal
ok 330 no error, deleted key/value for `empty Array value`
ok 331 entry properly deleted
ok 332 should have correct error message
ok 333 value is undefined
ok 334 callback is asynchronous
# test put()/get()/del() with long String value
ok 335 undefined
ok 336 no error, has key/value for `long String value`
ok 337 is a Buffer
ok 338 should be strictly equal
ok 339 no error, deleted key/value for `long String value`
ok 340 entry properly deleted
ok 341 should have correct error message
ok 342 value is undefined
ok 343 callback is asynchronous
# test put()/get()/del() with Buffer value
ok 344 undefined
ok 345 no error, has key/value for `Buffer value`
ok 346 is a Buffer
ok 347 should be strictly equal
ok 348 no error, deleted key/value for `Buffer value`
ok 349 entry properly deleted
ok 350 should have correct error message
ok 351 value is undefined
ok 352 callback is asynchronous
# test put()/get()/del() with Array key
ok 353 undefined
ok 354 no error, has key/value for `Array key`
ok 355 is a Buffer
ok 356 should be strictly equal
ok 357 no error, deleted key/value for `Array key`
ok 358 entry properly deleted
ok 359 should have correct error message
ok 360 value is undefined
ok 361 callback is asynchronous
# tearDown
# setUp db
# test getMany() requires an array argument (callback)
ok 362 callback (anonymous) is asynchronous
ok 363 callback (anonymous) is asynchronous
ok 364 should be strictly equal
ok 365 should be strictly equal
# test getMany() requires an array argument (promise)
ok 366 should be strictly equal
ok 367 should be strictly equal
ok 368 should be strictly equal
# test getMany() support is reflected in manifest
ok 369 should be strictly equal
# test simple getMany()
ok 370 undefined
ok 371 null
ok 372 got an array
ok 373 array has 1 element
ok 374 should not be string by default
ok 375 should be strictly equal
ok 376 null
ok 377 got an array
ok 378 array has 1 element
ok 379 should not be string by default
ok 380 should be strictly equal
ok 381 null
ok 382 should be string if not buffer
ok 383 should be deeply equivalent
# test getMany() with multiple keys
ok 384 undefined
ok 385 null
ok 386 should be deeply equivalent
ok 387 null
ok 388 maintains order of input keys
# test empty getMany()
ok 389 callback (anonymous) is asynchronous
ok 390 callback (anonymous) is asynchronous
ok 391 null
ok 392 should be deeply equivalent
ok 393 null
ok 394 should be deeply equivalent
# test not-found getMany()
ok 395 callback (anonymous) is asynchronous
ok 396 callback (anonymous) is asynchronous
ok 397 null
ok 398 should be deeply equivalent
ok 399 null
ok 400 should be deeply equivalent
# test getMany() with promise
ok 401 should be deeply equivalent
ok 402 should be deeply equivalent
ok 403 should be deeply equivalent
ok 404 should be deeply equivalent
ok 405 should be deeply equivalent
ok 406 should be deeply equivalent
# test simultaneous getMany()
ok 407 undefined
ok 408 null
ok 409 should be strictly equal
ok 410 should be strictly equal
ok 411 null
ok 412 should be strictly equal
ok 413 should be strictly equal
ok 414 null
ok 415 should be strictly equal
ok 416 should be strictly equal
ok 417 null
ok 418 should be strictly equal
ok 419 should be strictly equal
ok 420 null
ok 421 should be strictly equal
ok 422 should be strictly equal
ok 423 null
ok 424 should be strictly equal
ok 425 should be strictly equal
ok 426 null
ok 427 should be strictly equal
ok 428 should be strictly equal
ok 429 null
ok 430 should be strictly equal
ok 431 should be strictly equal
ok 432 null
ok 433 should be strictly equal
ok 434 should be strictly equal
ok 435 null
ok 436 should be strictly equal
ok 437 should be strictly equal
ok 438 null
ok 439 should be deeply equivalent
ok 440 null
ok 441 should be deeply equivalent
ok 442 null
ok 443 should be deeply equivalent
ok 444 null
ok 445 should be deeply equivalent
ok 446 null
ok 447 should be deeply equivalent
ok 448 null
ok 449 should be deeply equivalent
ok 450 null
ok 451 should be deeply equivalent
ok 452 null
ok 453 should be deeply equivalent
ok 454 null
ok 455 should be deeply equivalent
ok 456 null
ok 457 should be deeply equivalent
# test getMany() on new db
ok 458 should be strictly equal
ok 459 should be strictly equal
ok 460 (unnamed assert)
ok 461 should be strictly equal
ok 462 should be strictly equal
ok 463 (unnamed assert)
ok 464 callback (anonymous) is asynchronous
ok 465 callback (anonymous) is asynchronous
ok 466 callback (anonymous) is asynchronous
ok 467 callback (anonymous) is asynchronous
ok 468 should be strictly equal
ok 469 should be strictly equal
ok 470 should be strictly equal
ok 471 should be strictly equal
ok 472 should be strictly equal
ok 473 should be strictly equal
ok 474 should be strictly equal
ok 475 should be strictly equal
ok 476 undefined
ok 477 undefined
# test getMany() on opening db
ok 478 callback (open) is asynchronous
ok 479 callback (anonymous) is asynchronous
ok 480 callback (open) is asynchronous
ok 481 callback (anonymous) is asynchronous
ok 482 undefined
ok 483 undefined
ok 484 no error
ok 485 should be deeply equivalent
ok 486 no error
ok 487 should be deeply equivalent
# test getMany() on closed db
ok 488 undefined
ok 489 should be strictly equal
ok 490 undefined
ok 491 should be strictly equal
ok 492 undefined
ok 493 should be strictly equal
ok 494 callback (anonymous) is asynchronous
ok 495 should be strictly equal
ok 496 undefined
ok 497 should be strictly equal
ok 498 callback (anonymous) is asynchronous
ok 499 should be strictly equal
# test getMany() on closing db
ok 500 undefined
ok 501 callback (anonymous) is asynchronous
ok 502 should be strictly equal
ok 503 undefined
ok 504 callback (anonymous) is asynchronous
ok 505 should be strictly equal
ok 506 undefined
ok 507 undefined
# tearDown
# setUp common
# setUp db
# test callback-less, 2-arg, batch() throws
ok 508 callback-less, 2-arg batch() throws
# test batch() with missing `value`
ok 509 correct error message
# test batch() with null or undefined `value`
ok 510 correct error message
ok 511 correct error message
# test batch() with missing `key`
ok 512 got error
ok 513 correct error message
ok 514 callback is asynchronous
# test batch() with null or undefined `key`
ok 515 got error
ok 516 correct error message
ok 517 callback is asynchronous
ok 518 got error
ok 519 correct error message
ok 520 callback is asynchronous
# test batch() with empty `key`
ok 521 got error
ok 522 correct error message
ok 523 callback is asynchronous
ok 524 got error
ok 525 correct error message
ok 526 callback is asynchronous
ok 527 got error
ok 528 correct error message
ok 529 callback is asynchronous
# test batch() with missing `key` and `value`
ok 530 got error
ok 531 correct error message
ok 532 callback is asynchronous
# test batch() with missing `type`
ok 533 got error
ok 534 correct error message
ok 535 callback is asynchronous
# test batch() with wrong `type`
ok 536 got error
ok 537 correct error message
ok 538 callback is asynchronous
# test batch() with missing array
ok 539 got error
ok 540 correct error message
ok 541 callback is asynchronous
# test batch() with undefined array
ok 542 got error
ok 543 correct error message
ok 544 callback is asynchronous
# test batch() with null array
ok 545 got error
ok 546 correct error message
ok 547 callback is asynchronous
# test batch() with null options
ok 548 undefined
# test batch() with null element
ok 549 got error
ok 550 correct error message
ok 551 callback is asynchronous
# test batch() with undefined element
ok 552 got error
ok 553 correct error message
ok 554 callback is asynchronous
# test batch() with number element
ok 555 got error
ok 556 correct error message
ok 557 callback is asynchronous
# test batch() with boolean element
ok 558 got error
ok 559 correct error message
ok 560 callback is asynchronous
# test batch() with empty array
ok 561 no error from batch()
ok 562 callback is asynchronous
# test simple batch()
ok 563 undefined
ok 564 null
ok 565 should be strictly equal
# test multiple batch()
ok 566 undefined
ok 567 null
ok 568 should be strictly equal
ok 569 entry not found
ok 570 value is undefined
ok 571 NotFound error
ok 572 null
ok 573 should be strictly equal
# test multiple batch()
ok 574 should error
ok 575 callback is asynchronous
ok 576 should not be found
ok 577 should not be found
# tearDown
# setUp common
# setUp db
# test batch has db reference
ok 578 should be truthy
# test batch#put() with missing `value`
ok 579 correct error message
# test batch#put() with missing `key`
ok 580 correct error message
# test batch#put() with null `key`
ok 581 correct error message
# test batch#put() with missing `key` and `value`
ok 582 correct error message
# test batch#put() with null or undefined `value`
ok 583 correct error message
ok 584 correct error message
# test batch#del() with missing `key`
ok 585 correct error message
# test batch#del() with null or undefined `key`
ok 586 correct error message
ok 587 correct error message
# test batch#clear() doesn't throw
# test batch#write() with no callback
ok 588 correct error message
# test batch#put() after write()
ok 589 correct error message
# test batch#del() after write()
ok 590 correct error message
# test batch#clear() after write()
ok 591 correct error message
# test batch#write() after write()
ok 592 correct error message
# test serialize object
ok 593 .key is set for .put and .del operations
ok 594 .value is set for .put operation
ok 595 .key is set for .put and .del operations
# test custom _serialize*
ok 596 should be deeply equivalent
ok 597 should be deeply equivalent
ok 598 should be deeply equivalent
ok 599 should be deeply equivalent
# test batch#write() with no operations
ok 600 no error from write()
ok 601 callback is asynchronous
# test basic batch
ok 602 undefined
ok 603 undefined
ok 604 undefined
ok 605 correct number of entries
ok 606 should be deeply equivalent
# tearDown
# setUp common
# setUp db
# test iterator has db reference
ok 607 should be truthy
# test iterator#next returns this in callback mode
ok 608 should be truthy
# test twice iterator#end() callback with error
ok 609 undefined
ok 610 returned error
ok 611 correct error
ok 612 should be strictly equal
ok 613 callback is asynchronous
# test iterator#next after iterator#end() callback with error
ok 614 undefined
ok 615 returned error
ok 616 correct error
ok 617 correct message
ok 618 callback is asynchronous
# test twice iterator#next() throws
ok 619 undefined
ok 620 returned error
ok 621 correct error
ok 622 should be strictly equal
ok 623 callback is asynchronous
ok 624 undefined
# test simple iterator()
ok 625 undefined
ok 626 null
ok 627 key argument is a Buffer
ok 628 value argument is a Buffer
ok 629 correct key
ok 630 correct value
ok 631 null
ok 632 key argument is a Buffer
ok 633 value argument is a Buffer
ok 634 correct key
ok 635 correct value
ok 636 null
ok 637 key argument is a Buffer
ok 638 value argument is a Buffer
ok 639 correct key
ok 640 correct value
ok 641 undefined
ok 642 err argument is nullish
ok 643 key argument is undefined
ok 644 value argument is undefined
ok 645 correct number of entries
# tearDown
# setUp common
# setUp db
# test full data collection
ok 646 undefined
ok 647 correct number of entries
ok 648 should be deeply equivalent
# test full data collection (flipped)
ok 649 undefined
ok 650 correct number of entries
ok 651 should be deeply equivalent
# test iterator with reverse=true
ok 652 undefined
ok 653 correct number of entries
ok 654 should be deeply equivalent
# test iterator with gte=00
ok 655 undefined
ok 656 correct number of entries
ok 657 should be deeply equivalent
# test iterator with gte=00 (flipped)
ok 658 undefined
ok 659 correct number of entries
ok 660 should be deeply equivalent
# test iterator with gte=50
ok 661 undefined
ok 662 correct number of entries
ok 663 should be deeply equivalent
# test iterator with gte=50 (flipped)
ok 664 undefined
ok 665 correct number of entries
ok 666 should be deeply equivalent
# test iterator with lte=50 and reverse=true
ok 667 undefined
ok 668 correct number of entries
ok 669 should be deeply equivalent
# test iterator with gte=49.5 (midway)
ok 670 undefined
ok 671 correct number of entries
ok 672 should be deeply equivalent
# test iterator with gte=49.5 (midway) (flipped)
ok 673 undefined
ok 674 correct number of entries
ok 675 should be deeply equivalent
# test iterator with gte=49999 (midway)
ok 676 undefined
ok 677 correct number of entries
ok 678 should be deeply equivalent
# test iterator with gte=49999 (midway) (flipped)
ok 679 undefined
ok 680 correct number of entries
ok 681 should be deeply equivalent
# test iterator with lte=49.5 (midway) and reverse=true
ok 682 undefined
ok 683 correct number of entries
ok 684 should be deeply equivalent
# test iterator with lt=49.5 (midway) and reverse=true
ok 685 undefined
ok 686 correct number of entries
ok 687 should be deeply equivalent
# test iterator with lt=50 and reverse=true
ok 688 undefined
ok 689 correct number of entries
ok 690 should be deeply equivalent
# test iterator with lte=50
ok 691 undefined
ok 692 correct number of entries
ok 693 should be deeply equivalent
# test iterator with lte=50 (flipped)
ok 694 undefined
ok 695 correct number of entries
ok 696 should be deeply equivalent
# test iterator with lte=50.5 (midway)
ok 697 undefined
ok 698 correct number of entries
ok 699 should be deeply equivalent
# test iterator with lte=50.5 (midway) (flipped)
ok 700 undefined
ok 701 correct number of entries
ok 702 should be deeply equivalent
# test iterator with lte=50555 (midway)
ok 703 undefined
ok 704 correct number of entries
ok 705 should be deeply equivalent
# test iterator with lte=50555 (midway) (flipped)
ok 706 undefined
ok 707 correct number of entries
ok 708 should be deeply equivalent
# test iterator with lt=50555 (midway)
ok 709 undefined
ok 710 correct number of entries
ok 711 should be deeply equivalent
# test iterator with lt=50555 (midway) (flipped)
ok 712 undefined
ok 713 correct number of entries
ok 714 should be deeply equivalent
# test iterator with gte=50.5 (midway) and reverse=true
ok 715 undefined
ok 716 correct number of entries
ok 717 should be deeply equivalent
# test iterator with gt=50.5 (midway) and reverse=true
ok 718 undefined
ok 719 correct number of entries
ok 720 should be deeply equivalent
# test iterator with gt=50 and reverse=true
ok 721 undefined
ok 722 correct number of entries
ok 723 should be deeply equivalent
# test iterator with lte=0
ok 724 undefined
ok 725 correct number of entries
ok 726 should be deeply equivalent
# test iterator with lte=0 (flipped)
ok 727 undefined
ok 728 correct number of entries
ok 729 should be deeply equivalent
# test iterator with lt=0
ok 730 undefined
ok 731 correct number of entries
ok 732 should be deeply equivalent
# test iterator with lt=0 (flipped)
ok 733 undefined
ok 734 correct number of entries
ok 735 should be deeply equivalent
# test iterator with gte=30 and lte=70
ok 736 undefined
ok 737 correct number of entries
ok 738 should be deeply equivalent
# test iterator with gte=30 and lte=70 (flipped)
ok 739 undefined
ok 740 correct number of entries
ok 741 should be deeply equivalent
# test iterator with gt=29 and lt=71
ok 742 undefined
ok 743 correct number of entries
ok 744 should be deeply equivalent
# test iterator with gt=29 and lt=71 (flipped)
ok 745 undefined
ok 746 correct number of entries
ok 747 should be deeply equivalent
# test iterator with gte=30 and lte=70 and reverse=true
ok 748 undefined
ok 749 correct number of entries
ok 750 should be deeply equivalent
# test iterator with gt=29 and lt=71 and reverse=true
ok 751 undefined
ok 752 correct number of entries
ok 753 should be deeply equivalent
# test iterator with limit=20
ok 754 undefined
ok 755 correct number of entries
ok 756 should be deeply equivalent
# test iterator with limit=20 and gte=20
ok 757 undefined
ok 758 correct number of entries
ok 759 should be deeply equivalent
# test iterator with limit=20 and reverse=true
ok 760 undefined
ok 761 correct number of entries
ok 762 should be deeply equivalent
# test iterator with limit=20 and lte=79 and reverse=true
ok 763 undefined
ok 764 correct number of entries
ok 765 should be deeply equivalent
# test iterator with limit=-1 should iterate over whole database
ok 766 undefined
ok 767 correct number of entries
ok 768 should be deeply equivalent
# test iterator with limit=0 should not iterate over anything
ok 769 undefined
ok 770 correct number of entries
ok 771 should be deeply equivalent
# test iterator with lte after limit
ok 772 undefined
ok 773 correct number of entries
ok 774 should be deeply equivalent
# test iterator with lte before limit
ok 775 undefined
ok 776 correct number of entries
ok 777 should be deeply equivalent
# test iterator with gte after database end
ok 778 undefined
ok 779 correct number of entries
ok 780 should be deeply equivalent
# test iterator with gte after database end (flipped)
ok 781 undefined
ok 782 correct number of entries
ok 783 should be deeply equivalent
# test iterator with gt after database end
ok 784 undefined
ok 785 correct number of entries
ok 786 should be deeply equivalent
# test iterator with gt after database end (flipped)
ok 787 undefined
ok 788 correct number of entries
ok 789 should be deeply equivalent
# test iterator with lte after database end and reverse=true
ok 790 undefined
ok 791 correct number of entries
ok 792 should be deeply equivalent
# test iterator with lt after database end
ok 793 undefined
ok 794 correct number of entries
ok 795 should be deeply equivalent
# test iterator with lt after database end (flipped)
ok 796 undefined
ok 797 correct number of entries
ok 798 should be deeply equivalent
# test iterator with lt at database end
ok 799 undefined
ok 800 correct number of entries
ok 801 should be deeply equivalent
# test iterator with lt at database end (flipped)
ok 802 undefined
ok 803 correct number of entries
ok 804 should be deeply equivalent
# test iterator with lte at database end
ok 805 undefined
ok 806 correct number of entries
ok 807 should be deeply equivalent
# test iterator with lte at database end (flipped)
ok 808 undefined
ok 809 correct number of entries
ok 810 should be deeply equivalent
# test iterator with lt before database end
ok 811 undefined
ok 812 correct number of entries
ok 813 should be deeply equivalent
# test iterator with lt before database end (flipped)
ok 814 undefined
ok 815 correct number of entries
ok 816 should be deeply equivalent
# test iterator with lte before database end
ok 817 undefined
ok 818 correct number of entries
ok 819 should be deeply equivalent
# test iterator with lte before database end (flipped)
ok 820 undefined
ok 821 correct number of entries
ok 822 should be deeply equivalent
# test iterator with lte and gte after database and reverse=true
ok 823 undefined
ok 824 correct number of entries
ok 825 should be deeply equivalent
# test iterator with lt and gt after database and reverse=true
ok 826 undefined
ok 827 correct number of entries
ok 828 should be deeply equivalent
# tearDown
# setup
ok 829 no open() error
ok 830 no batch() error
# for await...of db.iterator()
ok 831 ended
ok 832 should be deeply equivalent
# for await...of db.iterator() does not permit reuse
ok 833 nexted
ok 834 nexted
ok 835 should be strictly equal
# for await...of db.iterator() ends on user error
ok 836 should be strictly equal
ok 837 ended
# for await...of db.iterator() with user error and end() error
ok 838 no real error from end()
ok 839 should be strictly equal
ok 840 ended
# for await...of db.iterator() ends on iterator error
ok 841 nexted
ok 842 should be strictly equal
ok 843 ended
# for await...of db.iterator() with iterator error and end() error
ok 844 nexted
ok 845 no real error from end()
ok 846 should be strictly equal
ok 847 ended
# for await...of db.iterator() ends on user break
ok 848 got a chance to break
ok 849 ended
# for await...of db.iterator() with user break and end() error
ok 850 got a chance to break
ok 851 no real error from end()
ok 852 should be strictly equal
ok 853 ended
# teardown
ok 854 no close() error
# setUp common
# iterator#seek() throws if next() has not completed
ok 855 no error from open()
ok 856 got error
ok 857 no error from next()
ok 858 next is asynchronous
ok 859 no error from done()
ok 860 no error from close()
# iterator#seek() throws after end()
ok 861 no error from open()
ok 862 no error from next()
ok 863 no error from end()
ok 864 got error
ok 865 no error from done()
ok 866 no error from close()
# iterator#seek() to string target
ok 867 no error from open()
ok 868 no error from batch()
ok 869 no error
ok 870 key matches
ok 871 value matches
ok 872 no error
ok 873 end of iterator
ok 874 end of iterator
ok 875 no error from done()
ok 876 no error from close()
# iterator#seek() to buffer target
ok 877 no error from open()
ok 878 no error from batch()
ok 879 no error from next()
ok 880 key matches
ok 881 value matches
ok 882 no error from next()
ok 883 end of iterator
ok 884 end of iterator
ok 885 no error from done()
ok 886 no error from close()
# iterator#seek() on reverse iterator
ok 887 no error from open()
ok 888 no error from batch()
ok 889 no error
ok 890 key matches
ok 891 value matches
ok 892 no error from done()
ok 893 no error from close()
# iterator#seek() to out of range target
ok 894 no error from open()
ok 895 no error from batch()
ok 896 no error
ok 897 end of iterator
ok 898 end of iterator
ok 899 no error from done()
ok 900 no error from close()
# iterator#seek() on reverse iterator to out of range target
ok 901 no error from open()
ok 902 no error from batch()
ok 903 no error
ok 904 should be deeply equivalent
ok 905 should be deeply equivalent
ok 906 no error from done()
ok 907 no error from close()
# iterator#seek() respects range
ok 908 no error from open()
ok 909 no error from batch()
ok 910 no error from next()
ok 911 seek(4) on {"gt":"5"} yields undefined
ok 912 no error from next()
ok 913 seek(5) on {"gt":"5"} yields undefined
ok 914 no error from next()
ok 915 seek(6) on {"gt":"5"} yields 6
ok 916 no error from next()
ok 917 seek(4) on {"gte":"5"} yields undefined
ok 918 no error from next()
ok 919 seek(5) on {"gte":"5"} yields 5
ok 920 no error from next()
ok 921 seek(6) on {"gte":"5"} yields 6
ok 922 no error from next()
ok 923 seek(4) on {"lt":"5"} yields 4
ok 924 no error from next()
ok 925 seek(5) on {"lt":"5"} yields undefined
ok 926 no error from next()
ok 927 seek(6) on {"lt":"5"} yields undefined
ok 928 no error from next()
ok 929 seek(4) on {"lte":"5"} yields 4
ok 930 no error from next()
ok 931 seek(5) on {"lte":"5"} yields 5
ok 932 no error from next()
ok 933 seek(6) on {"lte":"5"} yields undefined
ok 934 no error from next()
ok 935 seek(4) on {"lt":"5","reverse":true} yields 4
ok 936 no error from next()
ok 937 seek(5) on {"lt":"5","reverse":true} yields undefined
ok 938 no error from next()
ok 939 seek(6) on {"lt":"5","reverse":true} yields undefined
ok 940 no error from next()
ok 941 seek(4) on {"lte":"5","reverse":true} yields 4
ok 942 no error from next()
ok 943 seek(5) on {"lte":"5","reverse":true} yields 5
ok 944 no error from next()
ok 945 seek(6) on {"lte":"5","reverse":true} yields undefined
ok 946 no error from next()
ok 947 seek(4) on {"gt":"5","reverse":true} yields undefined
ok 948 no error from next()
ok 949 seek(5) on {"gt":"5","reverse":true} yields undefined
ok 950 no error from next()
ok 951 seek(6) on {"gt":"5","reverse":true} yields 6
ok 952 no error from next()
ok 953 seek(4) on {"gte":"5","reverse":true} yields undefined
ok 954 no error from next()
ok 955 seek(5) on {"gte":"5","reverse":true} yields 5
ok 956 no error from next()
ok 957 seek(6) on {"gte":"5","reverse":true} yields 6
ok 958 no error from next()
ok 959 seek(7) on {"gt":"7","lt":"8"} yields undefined
ok 960 no error from next()
ok 961 seek(7) on {"gte":"7","lt":"8"} yields 7
ok 962 no error from next()
ok 963 seek(8) on {"gte":"7","lt":"8"} yields undefined
ok 964 no error from next()
ok 965 seek(8) on {"gt":"7","lte":"8"} yields 8
ok 966 no error from end()
ok 967 no error from end()
ok 968 no error from end()
ok 969 no error from end()
ok 970 no error from end()
ok 971 no error from end()
ok 972 no error from end()
ok 973 no error from end()
ok 974 no error from end()
ok 975 no error from end()
ok 976 no error from end()
ok 977 no error from end()
ok 978 no error from end()
ok 979 no error from end()
ok 980 no error from end()
ok 981 no error from end()
ok 982 no error from end()
ok 983 no error from end()
ok 984 no error from end()
ok 985 no error from end()
ok 986 no error from end()
ok 987 no error from end()
ok 988 no error from end()
ok 989 no error from end()
ok 990 no error from end()
ok 991 no error from end()
ok 992 no error from end()
ok 993 no error from end()
ok 994 no error from close()
# tearDown
# setUp common
# delete key after snapshotting
ok 995 no open error
ok 996 no put error
ok 997 no del error
ok 998 no next error
ok 999 got a key
ok 1000 correct key
ok 1001 correct value
ok 1002 no run error
ok 1003 no iterator end error
# overwrite key after snapshotting
ok 1004 no open error
ok 1005 no put error
ok 1006 no put error
ok 1007 no next error
ok 1008 got a key
ok 1009 correct key
ok 1010 correct value
ok 1011 no run error
ok 1012 no iterator end error
# add key after snapshotting that sorts first
ok 1013 no open error
ok 1014 no put error
ok 1015 no put error
ok 1016 no next error
ok 1017 got a key
ok 1018 correct key
ok 1019 correct value
ok 1020 no run error
ok 1021 no iterator end error
# tearDown
# setUp common
# setUp db
# test argument-less clear() throws
ok 1022 no-arg clear() throws
# test simple clear() on string keys
ok 1023 no open error
ok 1024 no batch error
ok 1025 no concat error
ok 1026 has entries
ok 1027 no clear error
ok 1028 no concat error
ok 1029 has no entries
ok 1030 no close error
# test simple clear() on buffer keys
ok 1031 no open error
ok 1032 no batch error
ok 1033 no concat error
ok 1034 has entries
ok 1035 no clear error
ok 1036 no concat error
ok 1037 has no entries
ok 1038 no close error
# test simple clear() on mixed keys
ok 1039 no open error
ok 1040 no batch error
ok 1041 no concat error
ok 1042 has entries
ok 1043 no clear error
ok 1044 no concat error
ok 1045 has no entries
ok 1046 no close error
# test simple clear() on non-utf8 buffer keys
ok 1047 no open error
ok 1048 no batch error
ok 1049 no concat error
ok 1050 has entries
ok 1051 no clear error
ok 1052 no concat error
ok 1053 has no entries
ok 1054 no close error
# tearDown
# setUp common
# db#clear() with full range
ok 1055 no open error
ok 1056 no batch error
ok 1057 no clear error
ok 1058 no concat error
ok 1059 correct number of entries
ok 1060 should be deeply equivalent
# db#clear() with reverse=true
ok 1061 no open error
ok 1062 no batch error
ok 1063 no clear error
ok 1064 no concat error
ok 1065 correct number of entries
ok 1066 should be deeply equivalent
# db#clear() with gte=00
ok 1067 no open error
ok 1068 no batch error
ok 1069 no clear error
ok 1070 no concat error
ok 1071 correct number of entries
ok 1072 should be deeply equivalent
# db#clear() with gte=50
ok 1073 no open error
ok 1074 no batch error
ok 1075 no clear error
ok 1076 no concat error
ok 1077 correct number of entries
ok 1078 should be deeply equivalent
# db#clear() with lte=50 and reverse=true
ok 1079 no open error
ok 1080 no batch error
ok 1081 no clear error
ok 1082 no concat error
ok 1083 correct number of entries
ok 1084 should be deeply equivalent
# db#clear() with gte=49.5 (midway)
ok 1085 no open error
ok 1086 no batch error
ok 1087 no clear error
ok 1088 no concat error
ok 1089 correct number of entries
ok 1090 should be deeply equivalent
# db#clear() with gte=49999 (midway)
ok 1091 no open error
ok 1092 no batch error
ok 1093 no clear error
ok 1094 no concat error
ok 1095 correct number of entries
ok 1096 should be deeply equivalent
# db#clear() with lte=49.5 (midway) and reverse=true
ok 1097 no open error
ok 1098 no batch error
ok 1099 no clear error
ok 1100 no concat error
ok 1101 correct number of entries
ok 1102 should be deeply equivalent
# db#clear() with lt=49.5 (midway) and reverse=true
ok 1103 no open error
ok 1104 no batch error
ok 1105 no clear error
ok 1106 no concat error
ok 1107 correct number of entries
ok 1108 should be deeply equivalent
# db#clear() with lt=50 and reverse=true
ok 1109 no open error
ok 1110 no batch error
ok 1111 no clear error
ok 1112 no concat error
ok 1113 correct number of entries
ok 1114 should be deeply equivalent
# db#clear() with lte=50
ok 1115 no open error
ok 1116 no batch error
ok 1117 no clear error
ok 1118 no concat error
ok 1119 correct number of entries
ok 1120 should be deeply equivalent
# db#clear() with lte=50.5 (midway)
ok 1121 no open error
ok 1122 no batch error
ok 1123 no clear error
ok 1124 no concat error
ok 1125 correct number of entries
ok 1126 should be deeply equivalent
# db#clear() with lte=50555 (midway)
ok 1127 no open error
ok 1128 no batch error
ok 1129 no clear error
ok 1130 no concat error
ok 1131 correct number of entries
ok 1132 should be deeply equivalent
# db#clear() with lt=50555 (midway)
ok 1133 no open error
ok 1134 no batch error
ok 1135 no clear error
ok 1136 no concat error
ok 1137 correct number of entries
ok 1138 should be deeply equivalent
# db#clear() with gte=50.5 (midway) and reverse=true
ok 1139 no open error
ok 1140 no batch error
ok 1141 no clear error
ok 1142 no concat error
ok 1143 correct number of entries
ok 1144 should be deeply equivalent
# db#clear() with gt=50.5 (midway) and reverse=true
ok 1145 no open error
ok 1146 no batch error
ok 1147 no clear error
ok 1148 no concat error
ok 1149 correct number of entries
ok 1150 should be deeply equivalent
# db#clear() with gt=50 and reverse=true
ok 1151 no open error
ok 1152 no batch error
ok 1153 no clear error
ok 1154 no concat error
ok 1155 correct number of entries
ok 1156 should be deeply equivalent
# db#clear() with lte=0
ok 1157 no open error
ok 1158 no batch error
ok 1159 no clear error
ok 1160 no concat error
ok 1161 correct number of entries
ok 1162 should be deeply equivalent
# db#clear() with lt=0
ok 1163 no open error
ok 1164 no batch error
ok 1165 no clear error
ok 1166 no concat error
ok 1167 correct number of entries
ok 1168 should be deeply equivalent
# db#clear() with gte=30 and lte=70
ok 1169 no open error
ok 1170 no batch error
ok 1171 no clear error
ok 1172 no concat error
ok 1173 correct number of entries
ok 1174 should be deeply equivalent
# db#clear() with gt=29 and lt=71
ok 1175 no open error
ok 1176 no batch error
ok 1177 no clear error
ok 1178 no concat error
ok 1179 correct number of entries
ok 1180 should be deeply equivalent
# db#clear() with gte=30 and lte=70 and reverse=true
ok 1181 no open error
ok 1182 no batch error
ok 1183 no clear error
ok 1184 no concat error
ok 1185 correct number of entries
ok 1186 should be deeply equivalent
# db#clear() with gt=29 and lt=71 and reverse=true
ok 1187 no open error
ok 1188 no batch error
ok 1189 no clear error
ok 1190 no concat error
ok 1191 correct number of entries
ok 1192 should be deeply equivalent
# db#clear() with limit=20
ok 1193 no open error
ok 1194 no batch error
ok 1195 no clear error
ok 1196 no concat error
ok 1197 correct number of entries
ok 1198 should be deeply equivalent
# db#clear() with limit=20 and gte=20
ok 1199 no open error
ok 1200 no batch error
ok 1201 no clear error
ok 1202 no concat error
ok 1203 correct number of entries
ok 1204 should be deeply equivalent
# db#clear() with limit=20 and reverse=true
ok 1205 no open error
ok 1206 no batch error
ok 1207 no clear error
ok 1208 no concat error
ok 1209 correct number of entries
ok 1210 should be deeply equivalent
# db#clear() with limit=20 and lte=79 and reverse=true
ok 1211 no open error
ok 1212 no batch error
ok 1213 no clear error
ok 1214 no concat error
ok 1215 correct number of entries
ok 1216 should be deeply equivalent
# db#clear() with limit=-1 should clear whole database
ok 1217 no open error
ok 1218 no batch error
ok 1219 no clear error
ok 1220 no concat error
ok 1221 correct number of entries
ok 1222 should be deeply equivalent
# db#clear() with limit=0 should not clear anything
ok 1223 no open error
ok 1224 no batch error
ok 1225 no clear error
ok 1226 no concat error
ok 1227 correct number of entries
ok 1228 should be deeply equivalent
# db#clear() with lte after limit
ok 1229 no open error
ok 1230 no batch error
ok 1231 no clear error
ok 1232 no concat error
ok 1233 correct number of entries
ok 1234 should be deeply equivalent
# db#clear() with lte before limit
ok 1235 no open error
ok 1236 no batch error
ok 1237 no clear error
ok 1238 no concat error
ok 1239 correct number of entries
ok 1240 should be deeply equivalent
# db#clear() with gte after database end
ok 1241 no open error
ok 1242 no batch error
ok 1243 no clear error
ok 1244 no concat error
ok 1245 correct number of entries
ok 1246 should be deeply equivalent
# db#clear() with gt after database end
ok 1247 no open error
ok 1248 no batch error
ok 1249 no clear error
ok 1250 no concat error
ok 1251 correct number of entries
ok 1252 should be deeply equivalent
# db#clear() with lte after database end and reverse=true
ok 1253 no open error
ok 1254 no batch error
ok 1255 no clear error
ok 1256 no concat error
ok 1257 correct number of entries
ok 1258 should be deeply equivalent
# db#clear() with lte and gte after database and reverse=true
ok 1259 no open error
ok 1260 no batch error
ok 1261 no clear error
ok 1262 no concat error
ok 1263 correct number of entries
ok 1264 should be deeply equivalent
# db#clear() with lt and gt after database and reverse=true
ok 1265 no open error
ok 1266 no batch error
ok 1267 no clear error
ok 1268 no concat error
ok 1269 correct number of entries
ok 1270 should be deeply equivalent
# tearDown
# can open a new db
ok 1271 should be strictly equal
ok 1272 should be strictly equal
ok 1273 called
ok 1274 should be strictly equal
ok 1275 should be strictly equal
ok 1276 undefined
ok 1277 should be strictly equal
ok 1278 should be strictly equal
# can open an open db
ok 1279 called
ok 1280 undefined
ok 1281 should be strictly equal
ok 1282 should be strictly equal
ok 1283 should be strictly equal
ok 1284 should be strictly equal
ok 1285 undefined
ok 1286 should be strictly equal
ok 1287 should be strictly equal
# can open a closed db
ok 1288 undefined
ok 1289 should be strictly equal
ok 1290 undefined
ok 1291 should be strictly equal
ok 1292 should be strictly equal
ok 1293 undefined
ok 1294 should be strictly equal
ok 1295 should be strictly equal
ok 1296 should be strictly equal
# cannot open a opening db
ok 1297 called
ok 1298 should be strictly equal
ok 1299 should be strictly equal
ok 1300 should be strictly equal
ok 1301 should be strictly equal
ok 1302 undefined
ok 1303 should be strictly equal
# cannot open a closing db
ok 1304 undefined
ok 1305 should be strictly equal
ok 1306 called
ok 1307 should be strictly equal
ok 1308 should be strictly equal
ok 1309 should be strictly equal
ok 1310 should be strictly equal
ok 1311 undefined
ok 1312 should be strictly equal
# deferred open gets correct options
ok 1313 options passed on to open
ok 1314 no error
# single operation
ok 1315 not yet called
ok 1316 correct key
ok 1317 correct value
ok 1318 empty options
ok 1319 called
ok 1320 no error
ok 1321 no error
# many operations
ok 1322 not called
ok 1323 correct key
ok 1324 correct value
ok 1325 empty options
ok 1326 correct key
ok 1327 empty options
ok 1328 default options
ok 1329 correct key
ok 1330 correct value
ok 1331 empty options
ok 1332 correct key
ok 1333 empty options
ok 1334 correct key
ok 1335 empty options
ok 1336 correct batch
ok 1337 correct batch
ok 1338 range option
ok 1339 no error
ok 1340 not called
ok 1341 no error
ok 1342 no error
ok 1343 no error
ok 1344 no error
ok 1345 no error
ok 1346 all functions called
ok 1347 calls correctly behaved
# cannot operate on new db
ok 1348 should be strictly equal
ok 1349 should be strictly equal
# cannot operate on closed db
ok 1350 undefined
ok 1351 undefined
ok 1352 should be strictly equal
ok 1353 should be strictly equal
# cannot operate on closing db
ok 1354 undefined
ok 1355 should be strictly equal
ok 1356 undefined
ok 1357 should be strictly equal
# keys and values should not be serialized
# put
ok 1358 no error
ok 1359 value ok
# get
ok 1360 no error
ok 1361 value ok
# getMany
ok 1362 no error
ok 1363 value ok
# del
ok 1364 no error
ok 1365 value ok
# clear
ok 1366 no error
ok 1367 value ok
# approximateSize
ok 1368 no error
ok 1369 value ok
# store not supporting approximateSize
ok 1370 should throw
# compactRange
ok 1371 no error
ok 1372 value ok
# store not supporting compactRange
ok 1373 should throw
# close calls close for underlying store
ok 1374 close for underlying store is called
ok 1375 no error
# open error on underlying store calls back with error
ok 1376 db.open called
ok 1377 should be strictly equal
# close error on underlying store calls back with error
ok 1378 db.close called
ok 1379 should be strictly equal
# clear() can schedule other operations itself
ok 1380 should be strictly equal
ok 1381 no error
ok 1382 no error
# chained batch serializes
ok 1383 not yet called
ok 1384 not yet called
ok 1385 should be strictly equal
ok 1386 should be strictly equal
ok 1387 called
ok 1388 no error
ok 1389 no error
# non-deferred approximateSize
ok 1390 undefined
ok 1391 should be strictly equal
ok 1392 should be strictly equal
ok 1393 undefined
# non-deferred compactRange
ok 1394 undefined
ok 1395 should be strictly equal
ok 1396 should be strictly equal
ok 1397 undefined
# deferred iterator
ok 1398 should be truthy
ok 1399 should be strictly equal
ok 1400 should be strictly equal
ok 1401 should be strictly equal
ok 1402 no error
ok 1403 seek was called with correct target
ok 1404 no error
ok 1405 should be strictly equal
ok 1406 should be strictly equal
ok 1407 no error
ok 1408 should be truthy
# non-deferred iterator
ok 1409 no error
ok 1410 should be falsy
ok 1411 seek was called with correct target
ok 1412 no error
ok 1413 should be strictly equal
ok 1414 should be strictly equal
# deferred iterator - non-deferred operations
ok 1415 should be truthy
ok 1416 no error
ok 1417 should be strictly equal
ok 1418 no error
ok 1419 should be strictly equal
ok 1420 should be strictly equal
ok 1421 no error
# deferred iterator - cannot operate on closed db
ok 1422 should be truthy
ok 1423 no error
ok 1424 undefined
ok 1425 should be strictly equal
ok 1426 should be strictly equal
ok 1427 should be strictly equal
ok 1428 should be strictly equal
ok 1429 should be strictly equal
# deferred iterator - cannot operate on closing db
ok 1430 should be truthy
ok 1431 no error
ok 1432 should be strictly equal
ok 1433 undefined
ok 1434 should be strictly equal
ok 1435 should be strictly equal
ok 1436 should be strictly equal
ok 1437 should be strictly equal
# iterator - is created in order
ok 1438 no error
ok 1439 should be deeply equivalent
ok 1440 no error
ok 1441 should be deeply equivalent
# for await...of iterator
ok 1442 undefined
ok 1443 undefined
ok 1444 should be deeply equivalent
# for await...of iterator (empty)
ok 1445 undefined
ok 1446 should be deeply equivalent
# reachdown supports deferred-leveldown
ok 1447 should be strictly equal
ok 1448 should be strictly equal
ok 1449 should be strictly equal

1..1449
# tests 1449
# pass  1449

# ok

---------------------------|---------|----------|---------|---------|-------------------
File                       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
---------------------------|---------|----------|---------|---------|-------------------
All files                  |     100 |    98.24 |      92 |     100 |                   
 deferred-chained-batch.js |     100 |      100 |     100 |     100 |                   
 deferred-iterator.js      |     100 |      100 |   85.71 |     100 |                   
 deferred-leveldown.js     |     100 |      100 |      90 |     100 |                   
 util.js                   |     100 |    83.33 |     100 |     100 | 10                
---------------------------|---------|----------|---------|---------|-------------------
