I am package axios
(node:186003) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 beforeExit listeners added to [process]. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
Generated an empty chunk: "enhanceError.spec"
I am package node-fs-extra
(node:186167) [fs-extra-WARN0003] Warning: fs.realpath.native is not a function. Is fs being monkey-patched?
(Use `node --trace-warnings ...` to show where the warning was created)
ESM tests pass!
I am package ts-node
I am package qs
evalmd info it worked if it ends with ok
evalmd info README.md running blocks 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62
evalmd info ok
npm WARN config production Use `--omit=dev` instead.
I am package readable-stream

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)
node:assert:124
  throw new AssertionError(obj);
  ^

AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:
+ actual - expected

+ 'Unexpected global(s) found: __coverage__'
- 'asd'
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/parallel/test-stream-pipe-error-unhandled.js:14:12)
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:406:15)
    at process.emit (node:events:513:28)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at process._fatalException (node:internal/process/execution:167:25) {
  generatedMessage: true,
  code: 'ERR_ASSERTION',
  actual: 'Unexpected global(s) found: __coverage__',
  expected: 'asd',
  operator: 'strictEqual'
}

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)
node:assert:124
  throw new AssertionError(obj);
  ^

AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:
+ actual - expected

+ 'Unexpected global(s) found: __coverage__'
- 'no way'
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/parallel/test-stream-pipeline-listeners.js:14:12)
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:406:15)
    at process.emit (node:events:513:28)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at process._fatalException (node:internal/process/execution:167:25) {
  generatedMessage: true,
  code: 'ERR_ASSERTION',
  actual: 'Unexpected global(s) found: __coverage__',
  expected: 'no way',
  operator: 'strictEqual'
}

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Command failed: echo hello | "/usr/local/bin/node" "/data/js-variants/multee/Original/readable-stream/test/parallel/test-stream-pipeline-process.js" child

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

    at ChildProcess.exithandler (node:child_process:400:12)
    at ChildProcess.emit (node:events:513:28)
    at maybeClose (node:internal/child_process:1093:16)
    at Process.ChildProcess._handle.onexit (node:internal/child_process:302:5)
node:assert:124
  throw new AssertionError(obj);
  ^

AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:
+ actual - expected

+ 'Unexpected global(s) found: __coverage__'
- 'error'
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/parallel/test-stream-pipeline-uncaught.js:14:12)
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:406:15)
    at process.emit (node:events:513:28)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at process._fatalException (node:internal/process/execution:167:25) {
  generatedMessage: true,
  code: 'ERR_ASSERTION',
  actual: 'Unexpected global(s) found: __coverage__',
  expected: 'error',
  operator: 'strictEqual'
}

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)
node:assert:124
  throw new AssertionError(obj);
  ^

AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:
+ actual - expected

+ 'Unexpected global(s) found: __coverage__'
- 'kaboom'
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/parallel/test-stream-writable-end-cb-uncaught.js:14:12)
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:406:15)
    at process.emit (node:events:513:28)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at process._fatalException (node:internal/process/execution:167:25) {
  generatedMessage: true,
  code: 'ERR_ASSERTION',
  actual: 'Unexpected global(s) found: __coverage__',
  expected: 'kaboom',
  operator: 'strictEqual'
}

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)

/data/js-variants/multee/Original/readable-stream/test/common/index.js:346
      assert.fail(`Unexpected global(s) found: ${leaked.join(', ')}`)
             ^
AssertionError [ERR_ASSERTION]: Unexpected global(s) found: __coverage__
    at process.<anonymous> (/data/js-variants/multee/Original/readable-stream/test/common/index.js:346:14)
    at process.emit (node:events:525:35)
    at processEmit (/usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:191:37)
    at process.emit (/data/js-variants/multee/Original/readable-stream/node_modules/source-map-support/source-map-support.js:516:21)
    at processEmit [as emit] (/data/js-variants/multee/Original/readable-stream/node_modules/signal-exit/index.js:191:37)
I am package resolve
(node:188652) [DEP0128] DeprecationWarning: Invalid 'main' field in '/data/js-variants/multee/Original/resolve/test/resolver/incorrect_main/package.json' of 'wrong.js'. Please either fix that or report it to the module author
(Use `node --trace-deprecation ...` to show where the warning was created)
npm WARN deprecated readdir-scoped-modules@1.1.0: This functionality has been moved to @npmcli/fs
npm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecated
npm WARN deprecated mkdirp-promise@5.0.1: This package is broken and no longer maintained. 'mkdirp' itself supports promises now, please switch to that.
npm WARN deprecated read-package-tree@5.3.1: The functionality that this package provided is now in @npmcli/arborist
npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated
npm WARN deprecated har-validator@5.1.5: this library is no longer supported
npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated
npm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecated
npm WARN deprecated @evocateur/npm-registry-fetch@4.0.0: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.
npm WARN deprecated node-fetch-npm@2.0.4: This module is not used anymore, npm uses minipass-fetch for its fetch implementation now
npm WARN deprecated @evocateur/libnpmaccess@3.1.2: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.
npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
npm WARN deprecated @evocateur/libnpmpublish@1.2.2: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.
npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142
npm WARN deprecated @evocateur/pacote@9.6.5: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.
lerna notice cli v3.22.1
lerna info Bootstrapping 2 packages
lerna WARN ECYCLE Dependency cycles detected, you should fix these!
lerna WARN ECYCLE @my-scope/package-a -> @my-scope/package-b -> @my-scope/package-a
lerna info Symlinking packages and binaries
lerna WARN ECYCLE Dependency cycles detected, you should fix these!
lerna WARN ECYCLE @my-scope/package-a -> @my-scope/package-b -> @my-scope/package-a
lerna WARN ECYCLE Dependency cycles detected, you should fix these!
lerna WARN ECYCLE @my-scope/package-a -> @my-scope/package-b -> @my-scope/package-a
lerna WARN ECYCLE Dependency cycles detected, you should fix these!
lerna WARN ECYCLE @my-scope/package-a -> @my-scope/package-b -> @my-scope/package-a
lerna WARN ECYCLE Dependency cycles detected, you should fix these!
lerna WARN ECYCLE @my-scope/package-a -> @my-scope/package-b -> @my-scope/package-a
lerna success Bootstrapped 2 packages
npm WARN config production Use `--omit=dev` instead.
I am package http-proxy-middleware
PASS test/e2e/http-proxy-middleware.spec.ts (13.827 s)
PASS test/unit/path-filter.spec.ts
PASS test/e2e/router.spec.ts
PASS test/unit/router.spec.ts
PASS test/unit/path-rewriter.spec.ts
PASS test/types.spec.ts
PASS test/e2e/websocket.spec.ts
PASS test/e2e/response-interceptor.spec.ts
PASS test/legacy/http-proxy-middleware.spec.ts
PASS test/unit/fix-request-body.spec.ts
PASS test/unit/get-plugins.spec.ts
PASS test/e2e/path-rewriter.spec.ts
PASS test/unit/response-interceptor.spec.ts
PASS test/e2e/express-router.spec.ts
PASS test/e2e/plugins.spec.ts
PASS test/unit/configuration.spec.ts
PASS test/e2e/express-error-middleware.spec.ts
PASS test/unit/utils/function.spec.ts
PASS test/e2e/http-server.spec.ts
PASS test/unit/logger.spec.ts
PASS test/unit/status-code.spec.ts

Test Suites: 21 passed, 21 total
Tests:       162 passed, 162 total
Snapshots:   7 passed, 7 total
Time:        33.443 s
Ran all test suites.
I am package meow
I am package got
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:189691) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
I am package jsdom
node:internal/modules/cjs/loader:959
  throw err;
  ^

Error: Cannot find module 'rimraf'
Require stack:
- /data/js-variants/multee/Original/jsdom/scripts/webidl/convert.js
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:956:15)
    at Function.Module._load (node:internal/modules/cjs/loader:804:27)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/jsdom/scripts/webidl/convert.js:2:232)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/data/js-variants/multee/Original/jsdom/scripts/webidl/convert.js'
  ]
}
error Command failed with exit code 1.
error Command failed with exit code 1.
I am package svgo
PASS lib/path.test.js (40.371 s)
PASS lib/style.test.js (52.084 s)
PASS test/cli/cli.test.js (9.422 s)
PASS test/svg2js/_index.test.js
PASS lib/xast.test.js
(node:190864) ExperimentalWarning: VM Modules is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
PASS lib/svgo.test.js (64.219 s)
  ● Console

    console.warn
      You are trying to configure cleanupListOfValues which is not part of preset-default.
      Try to put it before or after, for example
      
      plugins: [
        {
          name: 'preset-default',
        },
        'cleanupListOfValues'
      ]

      42 |         for (const pluginName of Object.keys(overrides)) {
      43 |           if (!pluginNames.includes(pluginName)) {
    > 44 |             console.warn(
         |                     ^
      45 |               `You are trying to configure ${pluginName} which is not part of ${name}.\n` +
      46 |                 `Try to put it before or after, for example\n\n` +
      47 |                 `plugins: [\n` +

      at console.<anonymous> (node_modules/jest-mock/build/index.js:744:25)
      at Object.warn [as fn] (lib/svgo/plugins.js:44:21)
      at fn (lib/svgo/plugins.js:23:28)
      at invokePlugins (lib/svgo.js:78:5)
      at Object.optimize (lib/svgo.test.js:74:3)

PASS lib/svgo-node.test.js (64.521 s)
PASS test/svgo/_index.test.js
PASS test/plugins/prefixIds.test.js
PASS test/coa/_index.test.js (27.246 s)
PASS test/plugins/_index.test.js (5.082 s)
  ● Console

    console.warn
      Warning: The plugin "removeAttrs" requires the "attrs" parameter.
      It should have a pattern to remove, otherwise the plugin is a noop.
      Config example:
      
      plugins: [
        {
          name: "removeAttrs",
          params: {
            attrs: "(fill|stroke)"
          }
        }
      ]

      86 | exports.fn = (root, params) => {
      87 |   if (typeof params.attrs == 'undefined') {
    > 88 |     console.warn(ENOATTRS);
         |             ^
      89 |     return null;
      90 |   }
      91 |

      at Object.warn [as fn] (plugins/removeAttrs.js:88:13)
      at fn (lib/svgo/plugins.js:23:28)
      at invokePlugins (lib/svgo.js:78:5)
      at optimize (test/plugins/_index.test.js:38:28)

    console.warn
      Warning: The plugin "removeAttrs" requires the "attrs" parameter.
      It should have a pattern to remove, otherwise the plugin is a noop.
      Config example:
      
      plugins: [
        {
          name: "removeAttrs",
          params: {
            attrs: "(fill|stroke)"
          }
        }
      ]

      86 | exports.fn = (root, params) => {
      87 |   if (typeof params.attrs == 'undefined') {
    > 88 |     console.warn(ENOATTRS);
         |             ^
      89 |     return null;
      90 |   }
      91 |

      at Object.warn [as fn] (plugins/removeAttrs.js:88:13)
      at fn (lib/svgo/plugins.js:23:28)
      at invokePlugins (lib/svgo.js:78:5)
      at optimize (test/plugins/_index.test.js:38:28)


Test Suites: 11 passed, 11 total
Tests:       3 skipped, 366 passed, 369 total
Snapshots:   6 passed, 6 total
Time:        71.443 s
Ran all test suites.
I am package execa
I am package compression
I am package ioredis
I am package morgan
I am package node-util
(node:193319) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 exit listeners added to [process]. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
I am package node-notifier
Browserslist: caniuse-lite is outdated. Please run:
npx browserslist@latest --update-db

Why you should do it regularly:
https://github.com/browserslist/browserslist#browsers-data-updating
PASS test/toaster.js
PASS test/terminal-notifier.js
PASS test/balloon.js
PASS test/notify-send.js
PASS test/utils.js
PASS test/index.js
PASS test/growl.js

Test Suites: 7 passed, 7 total
Tests:       75 passed, 75 total
Snapshots:   0 total
Time:        4.021 s
Ran all test suites.
I am package globby
I am package finalhandler
I am package session
I am package engine.io
I am package node-chromedriver
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-01T11_55_27_832Z-debug-0.log
I am package find-cache-dir
I am package mysql
I am package file-type
I am package fastify
(node:198257) [FSTDEP013] FastifyDeprecation: Direct return of "trailers" function is deprecated. Please use "callback" or "async-await" for return value. The support of direct return will removed in `fastify@5`.
(Use `node --trace-warnings ...` to show where the warning was created)
(node:198320) [FSTDEP012] FastifyDeprecation: Request#context property access is deprecated. Please use "Request#routeConfig" or "Request#routeSchema" instead for accessing Route settings. The "Request#context" will be removed in `fastify@5`.
(Use `node --trace-warnings ...` to show where the warning was created)
I am package gulp-autoprefixer
I am package shelljs
Warning: skipping platform-dependent test 'Windows can search with or without a .exe extension'
I am package node-archiver
I am package pg-promise
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection TypeError: Cannot read properties of undefined (reading '1')
    at /data/js-variants/multee/Original/pg-promise/test/db.spec.js:1277:40
    at tryCatcher (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/promise.js:725:18)
    at _drainQueueStep (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (node:internal/timers:466:21)
Unhandled rejection TypeError: Cannot read properties of undefined (reading '1')
    at /data/js-variants/multee/Original/pg-promise/test/db.spec.js:1336:44
    at tryCatcher (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/promise.js:725:18)
    at _drainQueueStep (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/data/js-variants/multee/Original/pg-promise/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (node:internal/timers:466:21)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Unhandled rejection Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
I am package imagemin
I am package cookie-session
I am package jest-junit
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
PASS Unit Tests __tests__/buildJsonResults.test.js (33.87 s)
PASS Unit Tests __tests__/testResultProcessor.test.js
PASS Unit Tests __tests__/getOptions.test.js (208.619 s)
PASS Unit Tests __tests__/getTestSuitePropertiesPath.test.js
PASS Reporter Integration Tests integration-tests/reporter/__tests__/simple.test.js
PASS TestResultsProcessor Integration Tests integration-tests/testResultsProcessor/__tests__/simple.test.js

Test Suites: 6 passed, 6 total
Tests:       52 passed, 52 total
Snapshots:   1 passed, 1 total
Time:        248.35 s
Ran all test suites in 3 projects.
I am package serve-index
I am package multiparty
I am package ow
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
(node:200861) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
I am package bitcoinjs-lib
WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.
WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.
WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.
WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.
I am package leveldown
/data/js-variants/multee/Original/leveldown/node_modules/node-gyp-build/node-gyp-build.js:60
  throw new Error('No native build was found for ' + target + '\n    loaded from: ' + dir + '\n')
  ^

Error: No native build was found for platform=linux arch=x64 runtime=node abi=93 uv=1 libc=glibc node=16.17.0
    loaded from: /data/js-variants/multee/Original/leveldown

    at Function.load.resolve.load.path (/data/js-variants/multee/Original/leveldown/node_modules/node-gyp-build/node-gyp-build.js:60:9)
    at load (/data/js-variants/multee/Original/leveldown/node_modules/node-gyp-build/node-gyp-build.js:22:30)
    at Object.<anonymous> (/data/js-variants/multee/Original/leveldown/binding.js:2:153)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module.replacementCompile (/data/js-variants/multee/Original/leveldown/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at /usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4
    at /data/js-variants/multee/Original/leveldown/node_modules/append-transform/index.js:64:4
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/leveldown/leveldown.js:2:282)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module.replacementCompile (/data/js-variants/multee/Original/leveldown/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at /usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4
    at /data/js-variants/multee/Original/leveldown/node_modules/append-transform/index.js:64:4
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/leveldown/test/common.js:3:19)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module.replacementCompile (/data/js-variants/multee/Original/leveldown/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at /usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4
    at /data/js-variants/multee/Original/leveldown/node_modules/append-transform/index.js:64:4
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/leveldown/test/abstract-leveldown-test.js:1:36)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module.replacementCompile (/data/js-variants/multee/Original/leveldown/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at /usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4
    at /data/js-variants/multee/Original/leveldown/node_modules/append-transform/index.js:64:4
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
I am package couchdb-nano
PASS test/document.changesreader.test.js (13.728 s)
PASS test/nano.request.test.js
PASS test/partition.list.test.js
PASS test/design.view.test.js
PASS test/attachment.insert.test.js
PASS test/document.insert.test.js
PASS test/document.fetch.test.js
PASS test/database.replication.enable.test.js
PASS test/multipart.insert.test.js
PASS test/notnocked.test.js
PASS test/document.fetchRevs.test.js
PASS test/database.replication.query.test.js
PASS test/multipart.get.test.js
PASS test/partition.view.test.js
PASS test/design.atomic.test.js
PASS test/nano.config.test.js
PASS test/database.replicate.test.js
PASS test/document.get.test.js
PASS test/partition.listAsStream.test.js
PASS test/database.changes.test.js
PASS test/partition.search.test.js
PASS test/document.listAsStream.test.js
PASS test/database.replication.disable.test.js
PASS test/document.list.test.js
PASS test/database.get.test.js
PASS test/database.compact.test.js
PASS test/partition.info.test.js
PASS test/nano.updates.test.js
PASS test/partition.find.test.js
PASS test/attachment.destroy.test.js
PASS test/design.search.test.js
PASS test/design.createIndex.test.js
PASS test/attachment.get.test.js
PASS test/database.create.test.js
PASS test/design.show.test.js
PASS test/document.head.test.js
PASS test/design.find.test.js
PASS test/database.changesAsStream.test.js
PASS test/multipart.test.js
PASS test/nano.uuids.test.js
PASS test/document.destroy.test.js
PASS test/attachment.getAsStream.test.js
PASS test/database.destroy.test.js
PASS test/document.bulk.test.js
PASS test/partition.findAsStream.test.js
PASS test/partition.viewAsStream.test.js
PASS test/nano.customheaders.test.js
PASS test/partition.searchAsStream.test.js
PASS test/design.findAsStream.test.js
PASS test/nano.timeout.test.js
PASS test/nano.auth.test.js
PASS test/design.searchAsStream.test.js
PASS test/design.viewWithListAsStream.test.js
PASS test/design.viewAsStream.test.js
PASS test/nano.agent.test.js
PASS test/nano.info.test.js
PASS test/database.listAsStream.test.js
PASS test/design.viewWithList.test.js
PASS test/nano.logger.test.js
PASS test/nano.session.test.js
PASS test/nano.use.test.js
PASS test/database.list.test.js

Test Suites: 62 passed, 62 total
Tests:       261 passed, 261 total
Snapshots:   0 total
Time:        38.945 s
Ran all test suites matching /test\/attachment.destroy.test.js|test\/attachment.get.test.js|test\/attachment.getAsStream.test.js|test\/attachment.insert.test.js|test\/changes.json|test\/changes_numeric.json|test\/database.changes.test.js|test\/database.changesAsStream.test.js|test\/database.compact.test.js|test\/database.create.test.js|test\/database.destroy.test.js|test\/database.get.test.js|test\/database.list.test.js|test\/database.listAsStream.test.js|test\/database.replicate.test.js|test\/database.replication.disable.test.js|test\/database.replication.enable.test.js|test\/database.replication.query.test.js|test\/design.atomic.test.js|test\/design.createIndex.test.js|test\/design.find.test.js|test\/design.findAsStream.test.js|test\/design.search.test.js|test\/design.searchAsStream.test.js|test\/design.show.test.js|test\/design.view.test.js|test\/design.viewAsStream.test.js|test\/design.viewWithList.test.js|test\/design.viewWithListAsStream.test.js|test\/document.bulk.test.js|test\/document.changesreader.test.js|test\/document.destroy.test.js|test\/document.fetch.test.js|test\/document.fetchRevs.test.js|test\/document.get.test.js|test\/document.head.test.js|test\/document.insert.test.js|test\/document.list.test.js|test\/document.listAsStream.test.js|test\/logo.jpg|test\/multipart.get.test.js|test\/multipart.insert.test.js|test\/multipart.test.js|test\/nano.agent.test.js|test\/nano.auth.test.js|test\/nano.config.test.js|test\/nano.customheaders.test.js|test\/nano.info.test.js|test\/nano.logger.test.js|test\/nano.request.test.js|test\/nano.session.test.js|test\/nano.timeout.test.js|test\/nano.updates.test.js|test\/nano.use.test.js|test\/nano.uuids.test.js|test\/notnocked.test.js|test\/partition.find.test.js|test\/partition.findAsStream.test.js|test\/partition.info.test.js|test\/partition.list.test.js|test\/partition.listAsStream.test.js|test\/partition.search.test.js|test\/partition.searchAsStream.test.js|test\/partition.view.test.js|test\/partition.viewAsStream.test.js/i.
Jest did not exit one second after the test run has completed.

This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.
I am package errorhandler
I am package send
I am package sharp
Fontconfig error: Cannot load default config file: No such file: (null)
I am package pino
PASS test/jest/basic.spec.js
  ✓ transport should work in jest (21 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.91 s
Ran all test suites matching /test\/jest/i.
I am package eslint-formatter-pretty

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             no-warning-comments

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             @typescript-eslint/no-unused-vars

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:18:2
  ⚠   8:2  Unexpected todo comment.             no-warning-comments
  ✖  18:2  More than 1 blank line not allowed.  no-multiple-empty-lines

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/test.js:1:1
  ✖   1:1  AVA should be imported as test.      ava/use-test

  3 warnings
  2 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             no-warning-comments

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             @typescript-eslint/no-unused-vars

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:18:2
  ⚠   8:2  Unexpected todo comment.             no-warning-comments
  ✖  18:2  More than 1 blank line not allowed.  no-multiple-empty-lines

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/test.js:1:1
  ✖   1:1  AVA should be imported as test.      ava/use-test

  3 warnings
  2 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             no-warning-comments

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             @typescript-eslint/no-unused-vars

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:18:2
  ⚠   8:2  Unexpected todo comment.             no-warning-comments
  ✖  18:2  More than 1 blank line not allowed.  no-multiple-empty-lines

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/test.js:1:1
  ✖   1:1  AVA should be imported as test.      ava/use-test

  3 warnings
  2 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js
  ⚠  Unexpected todo comment.             no-warning-comments
  ✖  More than 1 blank line not allowed.  no-multiple-empty-lines

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/test.js
  ✖  AVA should be imported as test.      ava/use-test

  1 warning
  2 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:18:2
  ⚠   0:0  Unexpected todo comment.             no-warning-comments
  ✖  18:2  More than 1 blank line not allowed.  no-multiple-empty-lines

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/test.js:1:1
  ✖   1:1  AVA should be imported as test.      ava/use-test

  1 warning
  2 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             ]8;;https://eslint.org/docs/rules/no-warning-commentsno-warning-comments]8;;

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             @typescript-eslint/no-unused-vars

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:18:2
  ⚠   8:2  Unexpected todo comment.             ]8;;https://eslint.org/docs/rules/no-warning-commentsno-warning-comments]8;;
  ✖  18:2  More than 1 blank line not allowed.  ]8;;https://eslint.org/docs/rules/no-multiple-empty-linesno-multiple-empty-lines]8;;

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/test.js:1:1
  ✖   1:1  AVA should be imported as test.      ]8;;https://github.com/avajs/eslint-plugin-ava/blob/main/docs/rules/use-test.mdava/use-test]8;;

  3 warnings
  2 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:3:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ⚠  10:2  Unexpected todo comment.             no-warning-comments
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  30:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  40:5  i is defined but never used.         no-unused-vars
  ✖  40:8  j is defined but never used.         no-unused-vars

  2 warnings
  4 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:3:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ⚠  10:2  Unexpected todo comment.             no-warning-comments
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  30:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  40:5  i is defined but never used.         no-unused-vars
  ✖  40:8  j is defined but never used.         no-unused-vars

  2 warnings
  4 errors


  0-error.1-warning.js:1:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments

  3-error.0-warning.js:3:1
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  30:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  40:5  i is defined but never used.         no-unused-vars

  2-error.2-warning.js:3:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ⚠  10:2  Unexpected todo comment.             no-warning-comments
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  30:1  More than 1 blank line not allowed.  no-multiple-empty-lines

  1-error.0-warning.js:3:1
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines

  3 warnings
  6 errors


  0-error.3-warning.js:1:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ⚠  10:2  Unexpected todo comment.             no-warning-comments
  ⚠  15:2  Unexpected todo comment.             no-warning-comments

  0-error.2-warning.js:1:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ⚠  10:2  Unexpected todo comment.             no-warning-comments

  0-error.1-warning.js:1:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments

  2-error.2-warning.js:3:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ⚠  10:2  Unexpected todo comment.             no-warning-comments
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  30:1  More than 1 blank line not allowed.  no-multiple-empty-lines

  2-error.1-warning.js:3:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines
  ✖  30:1  More than 1 blank line not allowed.  no-multiple-empty-lines

  1-error.2-warning.js:3:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ⚠  10:2  Unexpected todo comment.             no-warning-comments
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines

  1-error.1-warning.js:3:1
  ⚠   1:1  Unexpected todo comment.             no-warning-comments
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines

  1-error.0-warning.js:3:1
  ✖   3:1  More than 1 blank line not allowed.  no-multiple-empty-lines

  12 warnings
  7 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             ]8;;https://eslint.org/docs/rules/test/no-warning-commentsno-warning-comments]8;;

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             @typescript-eslint/no-unused-vars

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:18:2
  ⚠   8:2  Unexpected todo comment.             ]8;;https://eslint.org/docs/rules/test/no-warning-commentsno-warning-comments]8;;
  ✖  18:2  More than 1 blank line not allowed.  ]8;;https://eslint.org/docs/rules/no-multiple-empty-linesno-multiple-empty-lines]8;;

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/test.js:1:1
  ✖   1:1  AVA should be imported as test.      ]8;;https://github.com/avajs/eslint-plugin-ava/blob/main/docs/rules/use-test.mdava/use-test]8;;

  3 warnings
  2 errors


  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             ]8;;https://eslint.org/docs/rules/test/no-warning-commentsno-warning-comments]8;;

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/foo.js:8:2
  ⚠   8:2  Unexpected todo comment.             @typescript-eslint/no-unused-vars

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/index.js:18:2
  ⚠   8:2  Unexpected todo comment.             ]8;;https://eslint.org/docs/rules/test/no-warning-commentsno-warning-comments]8;;
  ✖  18:2  More than 1 blank line not allowed.  ]8;;https://eslint.org/docs/rules/no-multiple-empty-linesno-multiple-empty-lines]8;;

  ../../../../../Users/sindresorhus/dev/eslint-formatter-pretty/test.js:1:1
  ✖   1:1  AVA should be imported as test.      ]8;;https://github.com/avajs/eslint-plugin-ava/blob/main/docs/rules/use-test.mdava/use-test]8;;

  3 warnings
  2 errors

I am package serve-favicon
I am package signale
I am package engine.io-client
I am package cson
node:internal/modules/cjs/loader:959
  throw err;
  ^

Error: Cannot find module '/data/js-variants/multee/Original/cson/edition-esnext/test.js'
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:956:15)
    at Function.Module._load (node:internal/modules/cjs/loader:804:27)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}
I am package global-modules
I am package decompress
I am package sockjs-node
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-01T12_25_54_531Z-debug-0.log
I am package to-regex
I am package dockerode
Unhandled rejection AssertionError: expected [Error: connect ENOENT /var/run/docker.sock] to be null
    at /data/js-variants/multee/Original/dockerode/test/promises.js:135:26
    at tryCatcher (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/promise.js:725:18)
    at _drainQueueStep (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/data/js-variants/multee/Original/dockerode/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (node:internal/timers:466:21)
I am package gray-matter
I am package gulp-changed
I am package amqplib
(node:204894) [DEP0097] DeprecationWarning: Using a domain property in MakeCallback is deprecated. Use the async_context variant of MakeCallback or the AsyncResource class instead. (Triggered by calling processImmediate on process.)
(Use `node --trace-deprecation ...` to show where the warning was created)
make: *** [Makefile:28: test] Error 53
I am package cacheable-request
(node:205089) ExperimentalWarning: VM Modules is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
PASS test/cache.test.ts (15.399 s)
PASS test/cacheable-request-instance.test.ts
PASS test/cacheable-request-class.test.ts
PASS test/dependencies.test.ts

Test Suites: 4 passed, 4 total
Tests:       69 passed, 69 total
Snapshots:   0 total
Time:        18.206 s
Ran all test suites.
I am package elasticsearch-js
I am package node-rest-client

Error: ENOENT: no such file or directory, open './blacklist'
    at Object.openSync (node:fs:594:3)
    at Object.readFileSync (node:fs:462:35)
    at update_blacklist (/data/js-variants/multee/Original/node-rest-client/test/test-proxy.js:12:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/node-rest-client/test/test-proxy.js:90:1)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at ModuleWrap.<anonymous> (node:internal/modules/esm/translators:170:29)
    at ModuleJob.run (node:internal/modules/esm/module_job:193:25)
    at async Promise.all (index 0)
    at async ESMLoader.import (node:internal/modules/esm/loader:533:24)
    at async importModuleDynamicallyWrapper (node:internal/vm/module:438:15)
    at async formattedImport (/data/js-variants/multee/Original/node-rest-client/node_modules/mocha/lib/nodejs/esm-utils.js:7:14)
    at async Object.exports.requireOrImport (/data/js-variants/multee/Original/node-rest-client/node_modules/mocha/lib/nodejs/esm-utils.js:48:32)
    at async Object.exports.loadFilesAsync (/data/js-variants/multee/Original/node-rest-client/node_modules/mocha/lib/nodejs/esm-utils.js:103:20)
    at async singleRun (/data/js-variants/multee/Original/node-rest-client/node_modules/mocha/lib/cli/run-helpers.js:125:3)
    at async Object.exports.handler (/data/js-variants/multee/Original/node-rest-client/node_modules/mocha/lib/cli/run.js:374:5)
I am package method-override
I am package hapi
I am package base
I am package memdown
standard: Use JavaScript Standard Style (https://standardjs.com)
standard: Some warnings are present which will be errors in the next version (https://standardjs.com)
standard: Run `standard --fix` to automatically fix some problems.
I am package terminal-link
I am package cli-progress
I am package snazzy
I am package simple-get
standard: Use JavaScript Standard Style (https://standardjs.com)
I am package nanomatch
I am package markdown-toc
I am package swagger
PASS test/explorer/swagger-explorer.spec.ts (13.937 s)
  SwaggerExplorer
    when module only uses metadata
      ✓ sees two controller operations and their responses (16 ms)
      ✓ sees two controller operations and their responses with custom operationIdFactory to return methodKey (13 ms)
      ✓ sees two controller operations and their responses with custom operationIdFactory to return controllerKey.methodKey (7 ms)
    when explicit decorators and metadata are used
      ✓ sees two controller operations and their responses (15 ms)
      ✓ sees two controller operations and their responses with custom operationIdFactory to return methodKey (6 ms)
      ✓ sees two controller operations and their responses with custom operationIdFactory to return controllerKey.methodKey (4 ms)
    when only explicit decorators are used
      ✓ sees two controller operations and their responses (4 ms)
      ✓ sees two controller operations and their responses with custom operationIdFactory to return methodKey (4 ms)
      ✓ sees two controller operations and their responses with custom operationIdFactory to return controllerKey.methodKey (5 ms)
    when custom properties are passed
      ✓ should merge implicit metadata with explicit options (4 ms)
      ✓ should merge implicit metadata with explicit options and use default operationIdFactory (3 ms)
    when enum is used
      ✓ should properly define enums (1 ms)
      ✓ should properly define enum and not add isArray prop to params (1 ms)
      ✓ should properly define enum as schema with lazy function (1 ms)
    when headers are defined
      ✓ should properly define headers (1 ms)
    should include extra models
      ✓ when multiple decorators is used on controller (2 ms)
      ✓ when multiple decorators is used on controller`s method (1 ms)
    when a controller is excluded
      ✓ should correctly define controller exclusion
    when defaultVersion is defined
      and controller/route versions are defined
        ✓ should use controller version defined
        ✓ should use route version defined (1 ms)
        ✓ should use multiple versions defined (1 ms)
      and controller/route versions are not defined
        ✓ should use the global default version  (1 ms)
    when multiple versions are defined
      and controller versions are defined
        ✓ should use multiple versions (1 ms)
        ✓ should have the requestBody in each version of POST route (1 ms)

PASS test/services/schema-object-factory.spec.ts
  SchemaObjectFactory
    exploreModelSchema
      ✓ should explore enum (9 ms)
      ✓ should create openapi schema (9 ms)
      ✓ should override base class metadata (2 ms)

PASS test/plugin/model-class-visitor.spec.ts (15.353 s)
  API model properties
    ✓ should add the metadata factory when no decorators exist, and generated propertyKey is title (2993 ms)
    ✓ should add partial metadata factory when some decorators exist (2381 ms)
    ✓ should add partial metadata factory when some decorators exist when exist node without type (1534 ms)
    ✓ should manage imports statements when code "downleveled" (1710 ms)
    ✓ should support & understand nullable type unions (1548 ms)
    ✓ should remove properties from metadata when properties removed from dto (1672 ms)
    ✓ should support & understand string literals (1416 ms)

PASS test/plugin/controller-class-visitor.spec.ts (8.575 s)
  Controller methods
    ✓ should add response based on the return value (spaces) (3516 ms)
    ✓ should add response based on the return value (tabs) (2140 ms)
    ✓ should add response based on the return value (without modifiers) (1669 ms)

PASS test/type-helpers/partial-type.helper.spec.ts
  PartialType
    Validation metadata
      ✓ should apply @IsOptional to properties reflected by the plugin (4 ms)
    OpenAPI metadata
      ✓ should return partial class (2 ms)
      ✓ should set "required" option to "false" for each property (1 ms)

PASS test/type-helpers/intersection-type.helper.spec.ts
  IntersectionType
    OpenAPI metadata
      ✓ should return combined class (3 ms)

PASS test/type-helpers/omit-type.helper.spec.ts
  OmitType
    OpenAPI metadata
      ✓ should omit "login" property (3 ms)

PASS test/type-helpers/pick-type.helper.spec.ts
  PickType
    OpenAPI metadata
      ✓ should pick "login" property (2 ms)

PASS test/services/model-properties-accessor.spec.ts
  ModelPropertiesAccessor
    getModelProperties
      ✓ should return all decorated properties (3 ms)

PASS test/extra/shim.spec.ts
  Shim file
    ✓ contains all types export by package (3 ms)

Test Suites: 10 passed, 10 total
Tests:       45 passed, 45 total
Snapshots:   0 total
Time:        48.341 s
Ran all test suites.
I am package extglob
I am package expand-brackets
I am package gulp-filter
I am package sitemap.js
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
PASS tests/sitemap-utils.test.ts (5.494 s)
PASS tests/sitemap-simple.test.ts
PASS tests/sitemap-item-stream.test.ts
PASS tests/sitemap-index.test.ts
PASS tests/sitemap-parser.test.ts
  ● Console

    console.warn
      unhandled tag foo

      69 |   logger?: Logger | false;
      70 | }
    > 71 | const defaultLogger: Logger = (level, ...message) => console[level](...message);
         |                                                      ^
      72 | const defaultStreamOpts: XMLToSitemapItemStreamOptions = {
      73 |   logger: defaultLogger,
      74 | };

      at XMLToSitemapItemStream.logger (lib/sitemap-parser.ts:71:54)
      at SAXStream.<anonymous> (lib/sitemap-parser.ts:145:14)
      at SAXParser.me._parser.<computed> [as onopentag] (node_modules/sax/lib/sax.js:258:17)
      at emit (node_modules/sax/lib/sax.js:624:35)
      at emitNode (node_modules/sax/lib/sax.js:629:5)
      at openTag (node_modules/sax/lib/sax.js:825:5)
      at SAXParser.write (node_modules/sax/lib/sax.js:1278:15)

    console.log
      unhandled text for tag: foo 'This is not a good tag'

      at XMLToSitemapItemStream.logger (lib/sitemap-parser.ts:71:54)

PASS tests/sitemap-index-parser.test.ts
PASS tests/sitemap-stream.test.ts
PASS tests/sitemap-shape.test.ts

Test Suites: 8 passed, 8 total
Tests:       86 passed, 86 total
Snapshots:   0 total
Time:        9.003 s
Ran all test suites matching /.\/tests\/sitemap-index-parser.test.ts|.\/tests\/sitemap-index.test.ts|.\/tests\/sitemap-item-stream.test.ts|.\/tests\/sitemap-parser.test.ts|.\/tests\/sitemap-shape.test.ts|.\/tests\/sitemap-simple.test.ts|.\/tests\/sitemap-stream.test.ts|.\/tests\/sitemap-utils.test.ts/i.
I am package gulp-zip
I am package define-property
I am package clone-deep
I am package cache-base
I am package level
I am package cordova-node-xcode
I am package gulp-size
I am package gulp-ruby-sass
I am package snapdragon
I am package node-core-test
/data/js-variants/multee/Original/node-core-test/test/fixtures/node-core-test/unfinished-tla.mjs:1
await new Promise(() => {})
^^^^^

SyntaxError: await is only valid in async functions and the top level bodies of modules
    at Object.compileFunction (node:vm:360:18)
    at wrapSafe (node:internal/modules/cjs/loader:1055:15)
    at Module._compile (node:internal/modules/cjs/loader:1090:27)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at module.exports (/usr/local/lib/node_modules/nyc/node_modules/default-require-extensions/js.js:7:9)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at loadMainModule (/data/js-variants/multee/Original/node-core-test/bin/node-core-test.js:76:19)
    at Object.<anonymous> (/data/js-variants/multee/Original/node-core-test/bin/node-core-test.js:22:5)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
/data/js-variants/multee/Original/node-core-test/test/fixtures/node-core-test/finished-tla-with-explicit-exitCode-modification.mjs:1
await Promise.resolve()
^^^^^

SyntaxError: await is only valid in async functions and the top level bodies of modules
    at Object.compileFunction (node:vm:360:18)
    at wrapSafe (node:internal/modules/cjs/loader:1055:15)
    at Module._compile (node:internal/modules/cjs/loader:1090:27)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at module.exports (/usr/local/lib/node_modules/nyc/node_modules/default-require-extensions/js.js:7:9)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at loadMainModule (/data/js-variants/multee/Original/node-core-test/bin/node-core-test.js:76:19)
    at Object.<anonymous> (/data/js-variants/multee/Original/node-core-test/bin/node-core-test.js:22:5)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
/data/js-variants/multee/Original/node-core-test/test/fixtures/node-core-test/finished-tla-with-explicit-process.exit-call.mjs:1
await Promise.resolve()
^^^^^

SyntaxError: await is only valid in async functions and the top level bodies of modules
    at Object.compileFunction (node:vm:360:18)
    at wrapSafe (node:internal/modules/cjs/loader:1055:15)
    at Module._compile (node:internal/modules/cjs/loader:1090:27)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at module.exports (/usr/local/lib/node_modules/nyc/node_modules/default-require-extensions/js.js:7:9)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at loadMainModule (/data/js-variants/multee/Original/node-core-test/bin/node-core-test.js:76:19)
    at Object.<anonymous> (/data/js-variants/multee/Original/node-core-test/bin/node-core-test.js:22:5)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
I am package cli-table3
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1mcell-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1mutils-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2msrc/[22m[1mcell.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1mtable-layout-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mexamples/[22m[1mbasic-usage-examples.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mexamples/[22m[1mcol-and-row-span-examples.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1moriginal-cli-table-index-tests.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1mtable-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2msrc/[22m[1mutils.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2msrc/[22m[1mlayout-manager.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1mlayout-manager-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1mverify-legacy-compatibility-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mlib/[22m[1mprint-example.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2msrc/[22m[1mtable.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1moriginal-cli-table-newlines-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/issues/[22m[1m289-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/issues/[22m[1m124-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/issues/[22m[1m269-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2msrc/[22m[1mdebug.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mtest/[22m[1mexample-tests.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mscripts/[22m[1mupdate-docs.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[35m lint [39m[27m[0m [2mscripts/[22m[1mprint-examples.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1mcell-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1mutils-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1mtable-layout-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1moriginal-cli-table-index-tests.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1mtable-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1mlayout-manager-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1mverify-legacy-compatibility-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1moriginal-cli-table-newlines-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/issues/[22m[1m289-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/issues/[22m[1m124-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/issues/[22m[1m269-test.js[22m
[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m test [39m[27m[0m [2mtest/[22m[1mexample-tests.js[22m

[1mTest Suites: [22m[1m[32m34 passed[39m[22m, 34 total
[1mTests:       [22m[1m[33m1 skipped[39m[22m, [1m[32m287 passed[39m[22m, 288 total
[1mSnapshots:   [22m0 total
[1mTime:[22m        16.236s
[2mRan all test suites[22m[2m in [22m2[2m projects[22m[2m.[22m
I am package levelup
standard: Use JavaScript Standard Style (https://standardjs.com)
standard: Some warnings are present which will be errors in the next version (https://standardjs.com)
standard: Run `standard --fix` to automatically fix some problems.
I am package node-mocks-http
sh: gulp: command not found
I am package cat-names
I am package schematics
/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:859
    return new TSError(diagnosticText, diagnosticCodes, diagnostics);
           ^
TSError: ⨯ Unable to compile TypeScript:
tools/gulp/tasks/clean.ts(13,13): error TS2695: Left side of comma operator is unused and has no side effects.
tools/gulp/tasks/clean.ts(18,2): error TS2695: Left side of comma operator is unused and has no side effects.

    at createTSError (/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:859:12)
    at reportTSError (/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:863:19)
    at getOutput (/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:1077:36)
    at Object.compile (/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:1433:41)
    at Module.m._compile (/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:1617:30)
    at Module.m._compile (/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:1618:23)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at require.extensions.<computed> (/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:1621:12)
    at /usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4
    at require.extensions.<computed> (/data/js-variants/multee/Original/schematics/node_modules/ts-node/src/index.ts:1621:12) {
  diagnosticCodes: [ 2695, 2695 ]
}
I am package moleculer
PASS test/unit/service-broker.spec.js (14.782 s)
PASS test/unit/transit.spec.js (6.008 s)
PASS test/unit/middlewares/tracing.spec.js
PASS test/unit/service.spec.js
PASS test/unit/transporters/tcp.spec.js
PASS test/unit/registry/discoverers/redis.spec.js
PASS test/unit/cachers/base.spec.js
PASS test/unit/errors.spec.js
PASS test/unit/registry/discoverers/etcd3.spec.js
PASS test/unit/context.spec.js
PASS test/unit/middlewares/metrics.spec.js
PASS test/unit/registry/registry.spec.js
PASS test/unit/transporters/nats.spec.js
PASS test/unit/strategies/shard.spec.js
PASS test/unit/utils.spec.js
PASS test/unit/metrics/registry.spec.js
PASS test/unit/tracing/exporters/jaeger.spec.js
PASS test/unit/transporters/amqp.spec.js
PASS test/unit/cachers/redis.spec.js
PASS test/integration/middlewares.spec.js
PASS test/unit/transporters/base.spec.js
PASS test/unit/registry/discoverers/base.spec.js
PASS test/unit/middlewares/action-hook.spec.js
PASS test/unit/tracing/tracer.spec.js
PASS test/unit/transporters/amqp10.spec.js
PASS test/unit/registry/event-catalog.spec.js
PASS test/unit/tracing/exporters/datadog.spec.js
PASS test/unit/transporters/tcp/udp-broadcaster.spec.js
PASS test/unit/middlewares/bulkhead.spec.js
PASS test/unit/metrics/types/histogram.spec.js
PASS test/integration/service-mixins.spec.js
PASS test/unit/registry/endpoint-list.spec.js
PASS test/integration/stream.spec.js (16.938 s)
PASS test/unit/validators/base.spec.js
PASS test/integration/broker-internal.spec.js
PASS test/unit/strategies/latency.spec.js
PASS test/unit/serializers/thrift.spec.js
PASS test/unit/serializers/avro.spec.js
PASS test/unit/serializers/protobuf.spec.js
PASS test/unit/middlewares/circuit-breaker.spec.js
PASS test/unit/registry/node-catalog.spec.js
PASS test/unit/cachers/memory.spec.js
PASS test/unit/serializers/base.spec.js
PASS test/unit/transporters/stan.spec.js
PASS test/unit/transporters/tcp/tcp-writer.spec.js
PASS test/unit/loggers/formatted.spec.js
PASS test/integration/event-balancer.spec.js (6.241 s)
PASS test/unit/cachers/memory-lru.spec.js
PASS test/unit/loggers/datadog.spec.js
PASS test/unit/tracing/exporters/event.spec.js
PASS test/unit/tracing/span.spec.js
PASS test/unit/metrics/reporters/statsd.spec.js
PASS test/unit/async-storage.spec.js
PASS test/unit/middlewares/context-tracker.spec.js
PASS test/unit/transporters/mqtt.spec.js
PASS test/unit/metrics/reporters/csv.spec.js
PASS test/unit/middlewares/retry.spec.js
PASS test/unit/transporters/kafka.spec.js
PASS test/unit/loggers/file.spec.js
PASS test/unit/logger-factory.spec.js
PASS test/unit/middleware.spec.js
PASS test/integration/broker.spec.js
PASS test/unit/middlewares/debugging/action-logger.spec.js
PASS test/unit/transporters/redis.spec.js
PASS test/integration/registry.spec.js (16.979 s)
PASS test/unit/metrics/reporters/event.spec.js
PASS test/unit/tracing/exporters/event-legacy.spec.js
PASS test/unit/tracing/exporters/newrelic.spec.js
PASS test/unit/tracing/exporters/zipkin.spec.js
PASS test/unit/transporters/index.spec.js
PASS test/unit/metrics/reporters/prometheus.spec.js
PASS test/unit/registry/service-catalog.spec.js
PASS test/unit/tracing/exporters/console.spec.js
PASS test/unit/metrics/reporters/console.spec.js
PASS test/unit/transporters/tcp/tcp-reader.spec.js
PASS test/unit/metrics/reporters/datadog.spec.js
PASS test/unit/middlewares/transmit/compression.spec.js
PASS test/unit/metrics/types/gauge.spec.js
PASS test/unit/middlewares/debugging/transit-logger.spec.js
PASS test/unit/loggers/winston.spec.js
PASS test/unit/metrics/types/base.spec.js
PASS test/unit/middlewares/error-handler.spec.js
PASS test/unit/middlewares/timeout.spec.js
PASS test/integration/circuit-breaker.spec.js (5.05 s)
PASS test/unit/loggers/console.spec.js
PASS test/unit/serializers/cbor.spec.js
PASS test/unit/metrics/reporters/base.spec.js
PASS test/unit/registry/action-catalog.spec.js
PASS test/unit/middlewares/fallback.spec.js
PASS test/integration/tracing.spec.js
PASS test/unit/loggers/index.spec.js
PASS test/unit/tracing/rate-limiter.spec.js
PASS test/integration/retry.spec.js (7.577 s)
PASS test/unit/loggers/bunyan.spec.js
PASS test/unit/loggers/log4js.spec.js
PASS test/unit/loggers/pino.spec.js
PASS test/unit/metrics/types/counter.spec.js
PASS test/unit/metrics/reporters/index.spec.js
PASS test/integration/service.lifecycle.spec.js
PASS test/unit/tracing/exporters/index.spec.js
PASS test/unit/loggers/debug.spec.js
PASS test/unit/internals.spec.js
PASS test/unit/registry/discoverers/index.spec.js
PASS test/unit/cachers/lock.spec.js
PASS test/unit/registry/discoverers/local.spec.js
PASS test/unit/serializers/msgpack.spec.js
PASS test/unit/serializers/notepack.spec.js
PASS test/unit/cachers/index.spec.js
PASS test/unit/tracing/exporters/base.spec.js
PASS test/unit/validators/fastest.spec.js
PASS test/unit/registry/service-item.spec.js
PASS test/unit/metrics/types/info.spec.js
PASS test/integration/broker-transit.spec.js
PASS test/unit/transporters/tcp/parser.spec.js
PASS test/unit/metrics/rates.spec.js
PASS test/unit/registry/node.spec.js
(node:208320) [DEP0106] DeprecationWarning: crypto.createCipher is deprecated.
(Use `node --trace-deprecation ...` to show where the warning was created)
PASS test/unit/middlewares/transmit/encryption.spec.js
PASS test/unit/loggers/base.spec.js
PASS test/unit/transporters/fake.spec.js
PASS test/unit/middlewares/throttle.spec.js
PASS test/integration/service-deps.spec.js (9.864 s)
PASS test/unit/strategies/cpu-usage.spec.js
PASS test/unit/middlewares/debounce.spec.js
PASS test/unit/validators/index.spec.js
PASS test/unit/strategies/index.spec.js
PASS test/unit/serializers/index.spec.js
PASS test/unit/health.spec.js
PASS test/integration/validator.spec.js
PASS test/unit/lock.spec.js
PASS test/unit/metrics/types/index.spec.js
PASS test/unit/registry/endpoint.spec.js
PASS test/unit/cpu-usage.spec.js
PASS test/unit/serializers/json.spec.js
PASS test/unit/packets.spec.js
PASS test/unit/registry/endpoint-action.spec.js
PASS test/unit/registry/endpoint-event.spec.js
PASS test/integration/async-storage.spec.js
PASS test/unit/strategies/base.spec.js
PASS test/unit/strategies/round-robin.spec.js
PASS test/unit/strategies/random.spec.js

Test Suites: 140 passed, 140 total
Tests:       4 skipped, 2435 passed, 2439 total
Snapshots:   33 passed, 33 total
Time:        314.486 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
I am package gulp-debug
[12:46:56] gulp-debug: foo.js
[12:46:56] gulp-debug: 1 item
I am package agenda
err Error: intended error :-)
    at Object.fn (/data/js-variants/multee/Original/agenda/test/fixtures/someJobDefinition.ts:7:10)
    at Job.runJob (/data/js-variants/multee/Original/agenda/src/Job.ts:63:1829)
    at Agenda.runForkedJob (/data/js-variants/multee/Original/agenda/src/index.ts:7:2971)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async /data/js-variants/multee/Original/agenda/test/helpers/forkHelper.ts:53:2
child process exited with code: 1 {}
child process exited with code: 2 undefined
I am package express-status-monitor
ℹ [mocha] waiting for changes...
I am package primus
I am package into-stream
I am package gulp-template
I am package ms-rest-js
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/credentialTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9jcmVkZW50aWFsVGVzdHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL3Rlc3QvY3JlZGVudGlhbFRlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFFL0YsZ0NBQThCO0FBQzlCLDREQUF3QztBQUN4QyxpRUFBNkM7QUFDN0MsSUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7QUFDakQsSUFBTSw4QkFBOEIsR0FBRyxNQUFNLENBQUMsOEJBQThCLENBQUM7QUFDN0UsSUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFDbkQsSUFBTSxVQUFVLEdBQUcsc0JBQXNCLENBQUM7QUFDMUMsSUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUM7QUFDdEMsSUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFDeEMsSUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDO0FBRXJDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRTtJQUM1QixRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ2hCLEVBQUUsQ0FBQyxzREFBc0QsRUFBRSxVQUFDLElBQUk7WUFDOUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMvQyxJQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUV6QyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLGFBQXFDO2dCQUNwRSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUN6RCxhQUFhLENBQUMsT0FBTztxQkFDbEIsR0FBRyxDQUFDLGVB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Y2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCBcImNoYWkvcmVnaXN0ZXItc2hvdWxkXCI7XG5pbXBvcnQgKiBhcyBtc1Jlc3QgZnJvbSBcIi4uL2xpYi9tc1Jlc3RcIjtcbmltcG9ydCAqIGFzIGJhc2U2NCBmcm9tIFwiLi4vbGliL3V0aWwvYmFzZTY0XCI7XG5jb25zdCBUb2tlbkNyZWRlbnRpYWxzID0gbXNSZXN0LlRva2VuQ3JlZGVudGlhbHM7XG5jb25zdCBCYXNpY0F1dGhlbnRpY2F0aW9uQ3JlZGVudGlhbHMgPSBtc1Jlc3QuQmFzaWNBdXRoZW50aWNhdGlvbkNyZWRlbnRpYWxzO1xuY29uc3QgQXBpS2V5Q3JlZGVudGlhbHMgPSBtc1Jlc3QuQXBpS2V5Q3JlZGVudGlhbHM7XG5jb25zdCBkdW1teVRva2VuID0gXCJBLWR1bW15LWFjY2Vzcy10b2tlblwiO1xuY29uc3QgZmFrZVNjaGVtZSA9IFwiZmFrZS1hdXRoLXNjaGVtZVwiO1xuY29uc3QgZHVtbXlVc2VybmFtZSA9IFwiZHVtbXlAbXVtbXkuY29tXCI7XG5jb25zdCBkdW1teVBhc3N3b3JkID0gXCJJTDB2ZUR1bW1pZXNcIjtcblxuZGVzY3JpYmUoXCJUb2tlbiBjcmVkZW50aWFsc1wiLCAoKSA9PiB7XG4gIGRlc2NyaWJlKFwidXNhZ2VcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIHNldCBhdXRoIGhlYWRlciB3aXRoIGJlYXJlciBzY2hlbWUgaW4gcmVxdWVzdFwiLCAoZG9uZSkgPT4ge1xuICAgICAgY29uc3QgY3JlZHMgPSBuZXcgVG9rZW5DcmVkZW50aWFscyhkdW1teVRva2VuKTtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgbXNSZXN0LldlYlJlc291cmNlKCk7XG5cbiAgICAgIGNyZWRzLnNpZ25SZXF1ZXN0KHJlcXVlc3QpLnRoZW4oKHNpZ25lZFJlcXVlc3Q6IG1zUmVzdC5XZWJSZXNvdXJjZUxpa2UpID0+IHtcbiAgICAgICAgc2lnbmVkUmVxdWVzdC5oZWFkZXJzLmdldChcImF1dGhvcml6YXRpb25cIikhLnNob3VsZC5leGlzdDtcbiAgICAgICAgc2lnbmVkUmVxdWVzdC5oZWFkZXJzXG4gICAgICAgICAgLmdldChcImF1dGhvcml6YXRpb25cIikhXG4gICAgICAgICAgLnNob3VsZC5tYXRjaChuZXcgUmVnRXhwKFwiXkJlYXJlclxcXFxzK1wiICsgZHVtbXlUb2tlbiArIFwiJFwiKSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgc2V0IGF1dGggaGVhZGVyIHdpdGggY3VzdG9tIHNjaGVtZSBpbiByZXF1ZXN0XCIsIChkb25lKSA9PiB7XG4gICAgICBjb25zdCBjcmVkcyA9IG5ldyBUb2tlbkNyZWRlbnRpYWxzKGR1bW15VG9rZW4sIGZha2VTY2hlbWUpO1xuICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBtc1Jlc3QuV2ViUmVzb3VyY2UoKTtcbiAgICAgIGNyZWRzLnNpZ25SZXF1ZXN0KHJlcXVlc3QpLnRoZW4oKHNpZ25lZFJlcXVlc3Q6IG1zUmVzdC5XZWJSZXNvdXJjZUxpa2UpID0+IHtcbiAgICAgICAgc2lnbmVkUmVxdWVzdC5oZWFkZXJzLmdldChcImF1dGhvcml6YXRpb25cIikhLnNob3VsZC5leGlzdDtcbiAgICAgICAgc2lnbmVkUmVxdWVzdC5oZWFkZXJzXG4gICAgICAgICAgLmdldChcImF1dGhvcml6YXRpb25cIikhXG4gICAgICAgICAgLnNob3VsZC5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgZmFrZVNjaGVtZSArIFwiXFxcXHMrXCIgKyBkdW1teVRva2VuICsgXCIkXCIpKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiY29uc3RydWN0aW9uXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBzdWNjZWVkIHdpdGggdG9rZW5cIiwgKCkgPT4ge1xuICAgICAgKCgpID0+IHtcbiAgICAgICAgbmV3IFRva2VuQ3JlZGVudGlhbHMoZHVtbXlUb2tlbik7XG4gICAgICB9KS5zaG91bGQubm90LnRocm93KCk7XG4gICAgfSk7XG5cbiAgICAvLyBpdChcInNob3VsZCBmYWlsIHdpdGhvdXQgY3JlZGVudGlhbHNcIiwgKCkgPT4ge1xuICAgIC8vICAgKCgpID0+IHtcbiAgICAvLyAgICAgbmV3IFRva2VuQ3JlZGVudGlhbHMoKTtcbiAgICAvLyAgIH0pLnNob3VsZC50aHJvdygpO1xuICAgIC8vIH0pO1xuXG4gICAgLy8gaXQoXCJzaG91bGQgZmFpbCB3aXRob3V0IHRva2VuXCIsICgpID0+IHtcbiAgICAvLyAgICgoKSA9PiB7XG4gICAgLy8gICAgIG5ldyBUb2tlbkNyZWRlbnRpYWxzKG51bGwsIGZha2VTY2hlbWUpO1xuICAgIC8vICAgfSkuc2hvdWxkLnRocm93KCk7XG4gICAgLy8gfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKFwiQmFzaWMgQXV0aGVudGljYXRpb24gY3JlZGVudGlhbHNcIiwgKCkgPT4ge1xuICBjb25zdCBlbmNvZGVkQ3JlZGVudGlhbHMgPSBiYXNlNjQuZW5jb2RlU3RyaW5nKGR1bW15VXNlcm5hbWUgKyBcIjpcIiArIGR1bW15UGFzc3dvcmQpO1xuICBkZXNjcmliZShcInVzYWdlXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBiYXNlNjQgZW5jb2RlIHRoZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQgYW5kIHNldCBhdXRoIGhlYWRlciB3aXRoIGJhaXNjIHNjaGVtZSBpbiByZXF1ZXN0XCIsIChkb25lKSA9PiB7XG4gICAgICBjb25zdCBjcmVkcyA9IG5ldyBCYXNpY0F1dGhlbnRpY2F0aW9uQ3JlZGVudGlhbHMoZHVtbXlVc2VybmFtZSwgZHVtbXlQYXNzd29yZCk7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IG1zUmVzdC5XZWJSZXNvdXJjZSgpO1xuICAgICAgY3JlZHMuc2lnblJlcXVlc3QocmVxdWVzdCkudGhlbigoc2lnbmVkUmVxdWVzdDogbXNSZXN0LldlYlJlc291cmNlTGlrZSkgPT4ge1xuICAgICAgICBzaWduZWRSZXF1ZXN0LmhlYWRlcnMuZ2V0KFwiYXV0aG9yaXphdGlvblwiKSEuc2hvdWxkLmV4aXN0O1xuICAgICAgICBzaWduZWRSZXF1ZXN0LmhlYWRlcnNcbiAgICAgICAgICAuZ2V0KFwiYXV0aG9yaXphdGlvblwiKSFcbiAgICAgICAgICAuc2hvdWxkLm1hdGNoKG5ldyBSZWdFeHAoXCJeQmFzaWNcXFxccytcIiArIGVuY29kZWRDcmVkZW50aWFscyArIFwiJFwiKSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgYmFzZTY0IGVuY29kZSB0aGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIGFuZCBzZXQgYXV0aCBoZWFkZXIgd2l0aCBjdXN0b20gc2NoZW1lIGluIHJlcXVlc3RcIiwgKGRvbmUpID0+IHtcbiAgICAgIGNvbnN0IGNyZWRzID0gbmV3IEJhc2ljQXV0aGVudGljYXRpb25DcmVkZW50aWFscyhkdW1teVVzZXJuYW1lLCBkdW1teVBhc3N3b3JkLCBmYWtlU2NoZW1lKTtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgbXNSZXN0LldlYlJlc291cmNlKCk7XG5cbiAgICAgIGNyZWRzLnNpZ25SZXF1ZXN0KHJlcXVlc3QpLnRoZW4oKHNpZ25lZFJlcXVlc3Q6IG1zUmVzdC5XZWJSZXNvdXJjZUxpa2UpID0+IHtcbiAgICAgICAgc2lnbmVkUmVxdWVzdC5oZWFkZXJzLmdldChcImF1dGhvcml6YXRpb25cIikhLnNob3VsZC5leGlzdDtcbiAgICAgICAgc2lnbmVkUmVxdWVzdC5oZWFkZXJzXG4gICAgICAgICAgLmdldChcImF1dGhvcml6YXRpb25cIikhXG4gICAgICAgICAgLnNob3VsZC5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgZmFrZVNjaGVtZSArIFwiXFxcXHMrXCIgKyBlbmNvZGVkQ3JlZGVudGlhbHMgKyBcIiRcIikpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJjb25zdHJ1Y3Rpb25cIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIHN1Y2NlZWQgd2l0aCB1c2VyTmFtZSBhbmQgcGFzc3dvcmRcIiwgKCkgPT4ge1xuICAgICAgKCgpID0+IHtcbiAgICAgICAgbmV3IEJhc2ljQXV0aGVudGljYXRpb25DcmVkZW50aWFscyhkdW1teVVzZXJuYW1lLCBkdW1teVBhc3N3b3JkKTtcbiAgICAgIH0pLnNob3VsZC5ub3QudGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJBcGlLZXkgY3JlZGVudGlhbHNcIiwgKCkgPT4ge1xuICAgIGRlc2NyaWJlKFwidXNhZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoXCJzaG91bGQgc2V0IGhlYWRlciBwYXJhbWV0ZXJzIHByb3Blcmx5IGluIHJlcXVlc3RcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBjcmVkcyA9IG5ldyBBcGlLZXlDcmVkZW50aWFscyh7IGluSGVhZGVyOiB7IGtleTE6IFwidmFsdWUxXCIsIGtleTI6IFwidmFsdWUyXCIgfSB9KTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBtc1Jlc3QuV2ViUmVzb3VyY2UoKTtcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzID0gbmV3IG1zUmVzdC5IdHRwSGVhZGVycygpO1xuXG4gICAgICAgIGF3YWl0IGNyZWRzLnNpZ25SZXF1ZXN0KHJlcXVlc3QpO1xuXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoXCJrZXkxXCIpIS5zaG91bGQuZXhpc3Q7XG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoXCJrZXkyXCIpIS5zaG91bGQuZXhpc3Q7XG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoXCJrZXkxXCIpIS5zaG91bGQubWF0Y2gobmV3IFJlZ0V4cChcIl52YWx1ZTEkXCIpKTtcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldChcImtleTJcIikhLnNob3VsZC5tYXRjaChuZXcgUmVnRXhwKFwiXnZhbHVlMiRcIikpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KFwic2hvdWxkIHNldCBxdWVyeSBwYXJhbWV0ZXJzIHByb3Blcmx5IGluIHRoZSByZXF1ZXN0IHVybCB3aXRob3V0IGFueSBxdWVyeSBwYXJhbWV0ZXJzXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY3JlZHMgPSBuZXcgQXBpS2V5Q3JlZGVudGlhbHMoeyBpblF1ZXJ5OiB7IGtleTE6IFwidmFsdWUxXCIsIGtleTI6IFwidmFsdWUyXCIgfSB9KTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9leGFtcGxlLmNvbVwiLFxuICAgICAgICB9IGFzIG1zUmVzdC5XZWJSZXNvdXJjZTtcblxuICAgICAgICBhd2FpdCBjcmVkcy5zaWduUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgcmVxdWVzdC51cmwuc2hvdWxkLmVxdWFsKFwiaHR0cHM6Ly9leGFtcGxlLmNvbT9rZXkxPXZhbHVlMSZrZXkyPXZhbHVlMlwiKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdChcInNob3VsZCBzZXQgcXVlcnkgcGFyYW1ldGVycyBwcm9wZXJseSBpbiB0aGUgcmVxdWVzdCB1cmwgd2l0aCBleGlzdGluZyBxdWVyeSBwYXJhbWV0ZXJzXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY3JlZHMgPSBuZXcgQXBpS2V5Q3JlZGVudGlhbHMoeyBpblF1ZXJ5OiB7IGtleTE6IFwidmFsdWUxXCIsIGtleTI6IFwidmFsdWUyXCIgfSB9KTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9leGFtcGxlLmNvbT9xMT12MlwiLFxuICAgICAgICB9IGFzIG1zUmVzdC5XZWJSZXNvdXJjZTtcblxuICAgICAgICBhd2FpdCBjcmVkcy5zaWduUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgcmVxdWVzdC51cmwuc2hvdWxkLmVxdWFsKFwiaHR0cHM6Ly9leGFtcGxlLmNvbT9xMT12MiZrZXkxPXZhbHVlMSZrZXkyPXZhbHVlMlwiKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJjb25zdHJ1Y3Rpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoXCJzaG91bGQgZmFpbCB3aXRoIG9wdGlvbnMuaW5IZWFkZXIgYW5kIG9wdGlvbnMuaW5RdWVyeSBzZXQgdG8gbnVsbCBvciB1bmRlZmluZWRcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBuZXcgQXBpS2V5Q3JlZGVudGlhbHMoeyBpbkhlYWRlcjogdW5kZWZpbmVkLCBpblF1ZXJ5OiB1bmRlZmluZWQgfSBhcyBhbnkpO1xuICAgICAgICB9LnNob3VsZC50aHJvdygpKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KFwic2hvdWxkIGZhaWwgd2l0aG91dCBvcHRpb25zXCIsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbmV3IChBcGlLZXlDcmVkZW50aWFscyBhcyBhbnkpKCk7XG4gICAgICAgIH0uc2hvdWxkLnRocm93KCkpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoXCJzaG91bGQgZmFpbCB3aXRoIGVtcHR5IG9wdGlvbnNcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBuZXcgQXBpS2V5Q3JlZGVudGlhbHMoe30pO1xuICAgICAgICB9LnNob3VsZC50aHJvdygpKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/msRest.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL21zUmVzdC50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL21zUmVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7QUFFL0YseUNBQXlDO0FBRXpDLDZDQVV1QjtBQVRyQiwwR0FBQSxXQUFXLE9BQUE7QUFVYix5REFBd0Q7QUFBL0Msc0hBQUEsaUJBQWlCLE9BQUE7QUFHMUIsNkNBQXlGO0FBQXBFLDBHQUFBLFdBQVcsT0FBQTtBQUdoQywrREFBOEQ7QUFBckQsNEhBQUEsb0JBQW9CLE9BQUE7QUFDN0IseUNBQXdDO0FBQS9CLHNHQUFBLFNBQVMsT0FBQTtBQVVsQixpREFNeUI7QUFIdkIsOEdBQUEsYUFBYSxPQUFBO0FBRWIsZ0hBQUEsZUFBZSxPQUFBO0FBRWpCLGlFQUFnRTtBQUF2RCw4SEFBQSxxQkFBcUIsT0FBQTtBQUM5Qiw4Q0FBNkM7QUFBcEMsc0dBQUEsU0FBUyxPQUFBO0FBQ2xCLGtEQUFpRDtBQUF4QyxzR0FBQSxTQUFTLE9BQUE7QUFDbEIsMERBTWtDO0FBTGhDLGtIQUFBLGlCQUFpQixPQUFBO0FBR2pCLHFIQUFBLG9CQUFvQixPQUFBO0FBR3RCLDBGQUF5RjtBQUFoRiw4SUFBQSw2QkFBNkIsT0FBQTtBQUN0Qyw0RUFBMkU7QUFBbEUsZ0lBQUEsc0JBQXNCLE9BQUE7QUFDL0IsNEVBQTJFO0FBQWxFLGdJQUFBLHNCQUFzQixPQUFBO0FBQy9CLDBFQUF5RTtBQUFoRSw4SEFBQSxxQkFBcUIsT0FBQTtBQUM5QixzREFBcUQ7QUFBNUMsMEdBQUEsV0FBVyxPQUFBO0FBQ3BCLHNEQUE4RTtBQUFyRSxzSEFBQSx1QkFBdUIsT0FBQTtBQUFFLDBHQUFBLFdBQVcsT0FBQTtBQUM3Qyw0REFBNEU7QUFBbEQsZ0hBQUEsY0FBYyxPQUFBO0FBQ3hDLDBEQUF5RDtBQUFoRCw4R0FBQSxhQUFhLE9BQUE7QUFDdEIsOERBSW9DO0FBRmxDLGtIQUFBLGVBQWUsT0FBQTtBQUNmLDJIQUFBLHdCQUF3QixPQUFBO0FBRTFCLDBFQUkwQztBQUZ4Qyw4SEFBQSxxQkFBcUIsT0FBQTtBQUNyQixnSUFBQSx1QkFBdUIsT0FBQTtBQUV6QiwyQ0FrQnNCO0FBakJwQix3R0FBQSxVQUFVLE9BQUE7QUFjVix3R0FBQSxVQUFVLE9BQUE7QUFFViw2R0FBQSxlQUFlLE9BQUE7QUFFakIsc0NBY3NCO0FBYnBCLHFHQUFBLFlBQVksT0FBQTtBQUNaLHNHQUFBLGFBQWEsT0FBQTtBQUNiLDhGQUFBLEtBQUssT0FBQTtBQUNMLG9IQUFBLDJCQUEyQixPQUFBO0FBQzNCLHFHQUFBLFlBQVksT0FBQTtBQUNaLGtHQUFBLFNBQVMsT0FBQTtBQUVULDBHQUFBLGlCQUFpQixPQUFBO0FBQ2pCLGlIQUFBLHdCQUF3QixPQUFBO0FBQ3hCLG9HQUFBLFdBQVcsT0FBQTtBQUNYLG9HQUFBLFdBQVcsT0FBQTtBQUNYLCtGQUFBLE1BQU0sT0FBQTtBQUNOLG1HQUFBLFVBQVUsT0FBQTtBQUVaLDZCQUE2QztBQUFwQyxpR0FBQSxVQUFVLE9BQUE7QUFBRSwrRkFBQSxRQUFRLE9BQUE7QUFFN0IsY0FBYztBQUNkLG1FQUFrRTtBQUF6RCxvSEFBQSxnQkFBZ0IsT0FBQTtBQUV6QiwrRkFBOEY7QUFBckYsZ0pBQUEsOEJBQThCLE9BQUE7QUFDdkMscUVBQTZGO0FBQXBGLHNIQUFBLGlCQUFpQixPQUFBO0FBRTFCLG1FQUFrRTtBQUF6RCxvSEFBQSxnQkFBZ0IsT0FBQTtBQUN6QixxRUFBb0U7QUFBM0Qsc0hBQUEsaUJBQWlCLE9BQUE7QUFFMUIseUdBQW1HO0FBQTFGLHFKQUFBLDhCQUE4QixPQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZG9tLXNoaW0uZC50c1wiIC8+XG5cbmV4cG9ydCB7XG4gIFdlYlJlc291cmNlLFxuICBXZWJSZXNvdXJjZUxpa2UsXG4gIEh0dHBSZXF1ZXN0Qm9keSxcbiAgUmVxdWVzdFByZXBhcmVPcHRpb25zLFxuICBIdHRwTWV0aG9kcyxcbiAgUGFyYW1ldGVyVmFsdWUsXG4gIFJlcXVlc3RPcHRpb25zQmFzZSxcbiAgVHJhbnNmZXJQcm9ncmVzc0V2ZW50LFxuICBBYm9ydFNpZ25hbExpa2UsXG59IGZyb20gXCIuL3dlYlJlc291cmNlXCI7XG5leHBvcnQgeyBEZWZhdWx0SHR0cENsaWVudCB9IGZyb20gXCIuL2RlZmF1bHRIdHRwQ2xpZW50XCI7XG5leHBvcnQgeyBDb21tb25SZXF1ZXN0SW5mbywgQ29tbW9uUmVxdWVzdEluaXQsIENvbW1vblJlc3BvbnNlIH0gZnJvbSBcIi4vZmV0Y2hIdHRwQ2xpZW50XCI7XG5leHBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIi4vaHR0cENsaWVudFwiO1xuZXhwb3J0IHsgSHR0cEhlYWRlciwgSHR0cEhlYWRlcnMsIEh0dHBIZWFkZXJzTGlrZSwgUmF3SHR0cEhlYWRlcnMgfSBmcm9tIFwiLi9odHRwSGVhZGVyc1wiO1xuZXhwb3J0IHsgSHR0cE9wZXJhdGlvblJlc3BvbnNlLCBIdHRwUmVzcG9uc2UsIFJlc3RSZXNwb25zZSB9IGZyb20gXCIuL2h0dHBPcGVyYXRpb25SZXNwb25zZVwiO1xuZXhwb3J0IHsgSHR0cFBpcGVsaW5lTG9nZ2VyIH0gZnJvbSBcIi4vaHR0cFBpcGVsaW5lTG9nZ2VyXCI7XG5leHBvcnQgeyBIdHRwUGlwZWxpbmVMb2dMZXZlbCB9IGZyb20gXCIuL2h0dHBQaXBlbGluZUxvZ0xldmVsXCI7XG5leHBvcnQgeyBSZXN0RXJyb3IgfSBmcm9tIFwiLi9yZXN0RXJyb3JcIjtcbmV4cG9ydCB7IE9wZXJhdGlvbkFyZ3VtZW50cyB9IGZyb20gXCIuL29wZXJhdGlvbkFyZ3VtZW50c1wiO1xuZXhwb3J0IHtcbiAgT3BlcmF0aW9uUGFyYW1ldGVyLFxuICBPcGVyYXRpb25RdWVyeVBhcmFtZXRlcixcbiAgT3BlcmF0aW9uVVJMUGFyYW1ldGVyLFxuICBQYXJhbWV0ZXJQYXRoLFxufSBmcm9tIFwiLi9vcGVyYXRpb25QYXJhbWV0ZXJcIjtcbmV4cG9ydCB7IE9wZXJhdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4vb3BlcmF0aW9uUmVzcG9uc2VcIjtcbmV4cG9ydCB7IE9wZXJhdGlvblNwZWMgfSBmcm9tIFwiLi9vcGVyYXRpb25TcGVjXCI7XG5leHBvcnQge1xuICBBZ2VudFNldHRpbmdzLFxuICBQcm94eVNldHRpbmdzLFxuICBTZXJ2aWNlQ2xpZW50LFxuICBTZXJ2aWNlQ2xpZW50T3B0aW9ucyxcbiAgZmxhdHRlblJlc3BvbnNlLFxufSBmcm9tIFwiLi9zZXJ2aWNlQ2xpZW50XCI7XG5leHBvcnQgeyBRdWVyeUNvbGxlY3Rpb25Gb3JtYXQgfSBmcm9tIFwiLi9xdWVyeUNvbGxlY3Rpb25Gb3JtYXRcIjtcbmV4cG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuL3V0aWwvY29uc3RhbnRzXCI7XG5leHBvcnQgeyBsb2dQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9sb2dQb2xpY3lcIjtcbmV4cG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5RmFjdG9yeSxcbiAgUmVxdWVzdFBvbGljeU9wdGlvbnMsXG4gIFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbn0gZnJvbSBcIi4vcG9saWNpZXMvcmVxdWVzdFBvbGljeVwiO1xuZXhwb3J0IHsgZ2VuZXJhdGVDbGllbnRSZXF1ZXN0SWRQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9nZW5lcmF0ZUNsaWVudFJlcXVlc3RJZFBvbGljeVwiO1xuZXhwb3J0IHsgZXhwb25lbnRpYWxSZXRyeVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL2V4cG9uZW50aWFsUmV0cnlQb2xpY3lcIjtcbmV4cG9ydCB7IHN5c3RlbUVycm9yUmV0cnlQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9zeXN0ZW1FcnJvclJldHJ5UG9saWN5XCI7XG5leHBvcnQgeyB0aHJvdHRsaW5nUmV0cnlQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy90aHJvdHRsaW5nUmV0cnlQb2xpY3lcIjtcbmV4cG9ydCB7IGFnZW50UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvYWdlbnRQb2xpY3lcIjtcbmV4cG9ydCB7IGdldERlZmF1bHRQcm94eVNldHRpbmdzLCBwcm94eVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3Byb3h5UG9saWN5XCI7XG5leHBvcnQgeyBSZWRpcmVjdE9wdGlvbnMsIHJlZGlyZWN0UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvcmVkaXJlY3RQb2xpY3lcIjtcbmV4cG9ydCB7IHNpZ25pbmdQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9zaWduaW5nUG9saWN5XCI7XG5leHBvcnQge1xuICBUZWxlbWV0cnlJbmZvLFxuICB1c2VyQWdlbnRQb2xpY3ksXG4gIGdldERlZmF1bHRVc2VyQWdlbnRWYWx1ZSxcbn0gZnJvbSBcIi4vcG9saWNpZXMvdXNlckFnZW50UG9saWN5XCI7XG5leHBvcnQge1xuICBEZXNlcmlhbGl6YXRpb25Db250ZW50VHlwZXMsXG4gIGRlc2VyaWFsaXphdGlvblBvbGljeSxcbiAgZGVzZXJpYWxpemVSZXNwb25zZUJvZHksXG59IGZyb20gXCIuL3BvbGljaWVzL2Rlc2VyaWFsaXphdGlvblBvbGljeVwiO1xuZXhwb3J0IHtcbiAgTWFwcGVyVHlwZSxcbiAgU2ltcGxlTWFwcGVyVHlwZSxcbiAgQ29tcG9zaXRlTWFwcGVyVHlwZSxcbiAgRGljdGlvbmFyeU1hcHBlclR5cGUsXG4gIFNlcXVlbmNlTWFwcGVyVHlwZSxcbiAgRW51bU1hcHBlclR5cGUsXG4gIE1hcHBlcixcbiAgQmFzZU1hcHBlcixcbiAgQ29tcG9zaXRlTWFwcGVyLFxuICBTZXF1ZW5jZU1hcHBlcixcbiAgRGljdGlvbmFyeU1hcHBlcixcbiAgRW51bU1hcHBlcixcbiAgTWFwcGVyQ29uc3RyYWludHMsXG4gIFBvbHltb3JwaGljRGlzY3JpbWluYXRvcixcbiAgU2VyaWFsaXplcixcbiAgVXJsUGFyYW1ldGVyVmFsdWUsXG4gIHNlcmlhbGl6ZU9iamVjdCxcbn0gZnJvbSBcIi4vc2VyaWFsaXplclwiO1xuZXhwb3J0IHtcbiAgc3RyaXBSZXF1ZXN0LFxuICBzdHJpcFJlc3BvbnNlLFxuICBkZWxheSxcbiAgZXhlY3V0ZVByb21pc2VzU2VxdWVudGlhbGx5LFxuICBnZW5lcmF0ZVV1aWQsXG4gIGVuY29kZVVyaSxcbiAgU2VydmljZUNhbGxiYWNrLFxuICBwcm9taXNlVG9DYWxsYmFjayxcbiAgcHJvbWlzZVRvU2VydmljZUNhbGxiYWNrLFxuICBpc1ZhbGlkVXVpZCxcbiAgYXBwbHlNaXhpbnMsXG4gIGlzTm9kZSxcbiAgaXNEdXJhdGlvbixcbn0gZnJvbSBcIi4vdXRpbC91dGlsc1wiO1xuZXhwb3J0IHsgVVJMQnVpbGRlciwgVVJMUXVlcnkgfSBmcm9tIFwiLi91cmxcIjtcblxuLy8gQ3JlZGVudGlhbHNcbmV4cG9ydCB7IFRva2VuQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi9jcmVkZW50aWFscy90b2tlbkNyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBUb2tlblJlc3BvbnNlIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvdG9rZW5SZXNwb25zZVwiO1xuZXhwb3J0IHsgQmFzaWNBdXRoZW50aWNhdGlvbkNyZWRlbnRpYWxzIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvYmFzaWNBdXRoZW50aWNhdGlvbkNyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBBcGlLZXlDcmVkZW50aWFscywgQXBpS2V5Q3JlZGVudGlhbE9wdGlvbnMgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9hcGlLZXlDcmVkZW50aWFsc1wiO1xuZXhwb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvc2VydmljZUNsaWVudENyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBUb3BpY0NyZWRlbnRpYWxzIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvdG9waWNDcmVkZW50aWFsc1wiO1xuZXhwb3J0IHsgRG9tYWluQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9kb21haW5DcmVkZW50aWFsc1wiO1xuZXhwb3J0IHsgQXV0aGVudGljYXRvciB9IGZyb20gXCIuL2NyZWRlbnRpYWxzL2NyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBBenVyZUlkZW50aXR5Q3JlZGVudGlhbEFkYXB0ZXIgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9henVyZUlkZW50aXR5VG9rZW5DcmVkZW50aWFsQWRhcHRlclwiO1xuIl19
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL21zUmVzdC50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL21zUmVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7QUFFL0YseUNBQXlDO0FBRXpDLDZDQVV1QjtBQVRyQiwwR0FBQSxXQUFXLE9BQUE7QUFVYix5REFBd0Q7QUFBL0Msc0hBQUEsaUJBQWlCLE9BQUE7QUFHMUIsNkNBQXlGO0FBQXBFLDBHQUFBLFdBQVcsT0FBQTtBQUdoQywrREFBOEQ7QUFBckQsNEhBQUEsb0JBQW9CLE9BQUE7QUFDN0IseUNBQXdDO0FBQS9CLHNHQUFBLFNBQVMsT0FBQTtBQVVsQixpREFNeUI7QUFIdkIsOEdBQUEsYUFBYSxPQUFBO0FBRWIsZ0hBQUEsZUFBZSxPQUFBO0FBRWpCLGlFQUFnRTtBQUF2RCw4SEFBQSxxQkFBcUIsT0FBQTtBQUM5Qiw4Q0FBNkM7QUFBcEMsc0dBQUEsU0FBUyxPQUFBO0FBQ2xCLGtEQUFpRDtBQUF4QyxzR0FBQSxTQUFTLE9BQUE7QUFDbEIsMERBTWtDO0FBTGhDLGtIQUFBLGlCQUFpQixPQUFBO0FBR2pCLHFIQUFBLG9CQUFvQixPQUFBO0FBR3RCLDBGQUF5RjtBQUFoRiw4SUFBQSw2QkFBNkIsT0FBQTtBQUN0Qyw0RUFBMkU7QUFBbEUsZ0lBQUEsc0JBQXNCLE9BQUE7QUFDL0IsNEVBQTJFO0FBQWxFLGdJQUFBLHNCQUFzQixPQUFBO0FBQy9CLDBFQUF5RTtBQUFoRSw4SEFBQSxxQkFBcUIsT0FBQTtBQUM5QixzREFBcUQ7QUFBNUMsMEdBQUEsV0FBVyxPQUFBO0FBQ3BCLHNEQUE4RTtBQUFyRSxzSEFBQSx1QkFBdUIsT0FBQTtBQUFFLDBHQUFBLFdBQVcsT0FBQTtBQUM3Qyw0REFBNEU7QUFBbEQsZ0hBQUEsY0FBYyxPQUFBO0FBQ3hDLDBEQUF5RDtBQUFoRCw4R0FBQSxhQUFhLE9BQUE7QUFDdEIsOERBSW9DO0FBRmxDLGtIQUFBLGVBQWUsT0FBQTtBQUNmLDJIQUFBLHdCQUF3QixPQUFBO0FBRTFCLDBFQUkwQztBQUZ4Qyw4SEFBQSxxQkFBcUIsT0FBQTtBQUNyQixnSUFBQSx1QkFBdUIsT0FBQTtBQUV6QiwyQ0FrQnNCO0FBakJwQix3R0FBQSxVQUFVLE9BQUE7QUFjVix3R0FBQSxVQUFVLE9BQUE7QUFFViw2R0FBQSxlQUFlLE9BQUE7QUFFakIsc0NBY3NCO0FBYnBCLHFHQUFBLFlBQVksT0FBQTtBQUNaLHNHQUFBLGFBQWEsT0FBQTtBQUNiLDhGQUFBLEtBQUssT0FBQTtBQUNMLG9IQUFBLDJCQUEyQixPQUFBO0FBQzNCLHFHQUFBLFlBQVksT0FBQTtBQUNaLGtHQUFBLFNBQVMsT0FBQTtBQUVULDBHQUFBLGlCQUFpQixPQUFBO0FBQ2pCLGlIQUFBLHdCQUF3QixPQUFBO0FBQ3hCLG9HQUFBLFdBQVcsT0FBQTtBQUNYLG9HQUFBLFdBQVcsT0FBQTtBQUNYLCtGQUFBLE1BQU0sT0FBQTtBQUNOLG1HQUFBLFVBQVUsT0FBQTtBQUVaLDZCQUE2QztBQUFwQyxpR0FBQSxVQUFVLE9BQUE7QUFBRSwrRkFBQSxRQUFRLE9BQUE7QUFFN0IsY0FBYztBQUNkLG1FQUFrRTtBQUF6RCxvSEFBQSxnQkFBZ0IsT0FBQTtBQUV6QiwrRkFBOEY7QUFBckYsZ0pBQUEsOEJBQThCLE9BQUE7QUFDdkMscUVBQTZGO0FBQXBGLHNIQUFBLGlCQUFpQixPQUFBO0FBRTFCLG1FQUFrRTtBQUF6RCxvSEFBQSxnQkFBZ0IsT0FBQTtBQUN6QixxRUFBb0U7QUFBM0Qsc0hBQUEsaUJBQWlCLE9BQUE7QUFFMUIseUdBQW1HO0FBQTFGLHFKQUFBLDhCQUE4QixPQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZG9tLXNoaW0uZC50c1wiIC8+XG5cbmV4cG9ydCB7XG4gIFdlYlJlc291cmNlLFxuICBXZWJSZXNvdXJjZUxpa2UsXG4gIEh0dHBSZXF1ZXN0Qm9keSxcbiAgUmVxdWVzdFByZXBhcmVPcHRpb25zLFxuICBIdHRwTWV0aG9kcyxcbiAgUGFyYW1ldGVyVmFsdWUsXG4gIFJlcXVlc3RPcHRpb25zQmFzZSxcbiAgVHJhbnNmZXJQcm9ncmVzc0V2ZW50LFxuICBBYm9ydFNpZ25hbExpa2UsXG59IGZyb20gXCIuL3dlYlJlc291cmNlXCI7XG5leHBvcnQgeyBEZWZhdWx0SHR0cENsaWVudCB9IGZyb20gXCIuL2RlZmF1bHRIdHRwQ2xpZW50XCI7XG5leHBvcnQgeyBDb21tb25SZXF1ZXN0SW5mbywgQ29tbW9uUmVxdWVzdEluaXQsIENvbW1vblJlc3BvbnNlIH0gZnJvbSBcIi4vZmV0Y2hIdHRwQ2xpZW50XCI7XG5leHBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIi4vaHR0cENsaWVudFwiO1xuZXhwb3J0IHsgSHR0cEhlYWRlciwgSHR0cEhlYWRlcnMsIEh0dHBIZWFkZXJzTGlrZSwgUmF3SHR0cEhlYWRlcnMgfSBmcm9tIFwiLi9odHRwSGVhZGVyc1wiO1xuZXhwb3J0IHsgSHR0cE9wZXJhdGlvblJlc3BvbnNlLCBIdHRwUmVzcG9uc2UsIFJlc3RSZXNwb25zZSB9IGZyb20gXCIuL2h0dHBPcGVyYXRpb25SZXNwb25zZVwiO1xuZXhwb3J0IHsgSHR0cFBpcGVsaW5lTG9nZ2VyIH0gZnJvbSBcIi4vaHR0cFBpcGVsaW5lTG9nZ2VyXCI7XG5leHBvcnQgeyBIdHRwUGlwZWxpbmVMb2dMZXZlbCB9IGZyb20gXCIuL2h0dHBQaXBlbGluZUxvZ0xldmVsXCI7XG5leHBvcnQgeyBSZXN0RXJyb3IgfSBmcm9tIFwiLi9yZXN0RXJyb3JcIjtcbmV4cG9ydCB7IE9wZXJhdGlvbkFyZ3VtZW50cyB9IGZyb20gXCIuL29wZXJhdGlvbkFyZ3VtZW50c1wiO1xuZXhwb3J0IHtcbiAgT3BlcmF0aW9uUGFyYW1ldGVyLFxuICBPcGVyYXRpb25RdWVyeVBhcmFtZXRlcixcbiAgT3BlcmF0aW9uVVJMUGFyYW1ldGVyLFxuICBQYXJhbWV0ZXJQYXRoLFxufSBmcm9tIFwiLi9vcGVyYXRpb25QYXJhbWV0ZXJcIjtcbmV4cG9ydCB7IE9wZXJhdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4vb3BlcmF0aW9uUmVzcG9uc2VcIjtcbmV4cG9ydCB7IE9wZXJhdGlvblNwZWMgfSBmcm9tIFwiLi9vcGVyYXRpb25TcGVjXCI7XG5leHBvcnQge1xuICBBZ2VudFNldHRpbmdzLFxuICBQcm94eVNldHRpbmdzLFxuICBTZXJ2aWNlQ2xpZW50LFxuICBTZXJ2aWNlQ2xpZW50T3B0aW9ucyxcbiAgZmxhdHRlblJlc3BvbnNlLFxufSBmcm9tIFwiLi9zZXJ2aWNlQ2xpZW50XCI7XG5leHBvcnQgeyBRdWVyeUNvbGxlY3Rpb25Gb3JtYXQgfSBmcm9tIFwiLi9xdWVyeUNvbGxlY3Rpb25Gb3JtYXRcIjtcbmV4cG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuL3V0aWwvY29uc3RhbnRzXCI7XG5leHBvcnQgeyBsb2dQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9sb2dQb2xpY3lcIjtcbmV4cG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5RmFjdG9yeSxcbiAgUmVxdWVzdFBvbGljeU9wdGlvbnMsXG4gIFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbn0gZnJvbSBcIi4vcG9saWNpZXMvcmVxdWVzdFBvbGljeVwiO1xuZXhwb3J0IHsgZ2VuZXJhdGVDbGllbnRSZXF1ZXN0SWRQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9nZW5lcmF0ZUNsaWVudFJlcXVlc3RJZFBvbGljeVwiO1xuZXhwb3J0IHsgZXhwb25lbnRpYWxSZXRyeVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL2V4cG9uZW50aWFsUmV0cnlQb2xpY3lcIjtcbmV4cG9ydCB7IHN5c3RlbUVycm9yUmV0cnlQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9zeXN0ZW1FcnJvclJldHJ5UG9saWN5XCI7XG5leHBvcnQgeyB0aHJvdHRsaW5nUmV0cnlQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy90aHJvdHRsaW5nUmV0cnlQb2xpY3lcIjtcbmV4cG9ydCB7IGFnZW50UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvYWdlbnRQb2xpY3lcIjtcbmV4cG9ydCB7IGdldERlZmF1bHRQcm94eVNldHRpbmdzLCBwcm94eVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3Byb3h5UG9saWN5XCI7XG5leHBvcnQgeyBSZWRpcmVjdE9wdGlvbnMsIHJlZGlyZWN0UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvcmVkaXJlY3RQb2xpY3lcIjtcbmV4cG9ydCB7IHNpZ25pbmdQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9zaWduaW5nUG9saWN5XCI7XG5leHBvcnQge1xuICBUZWxlbWV0cnlJbmZvLFxuICB1c2VyQWdlbnRQb2xpY3ksXG4gIGdldERlZmF1bHRVc2VyQWdlbnRWYWx1ZSxcbn0gZnJvbSBcIi4vcG9saWNpZXMvdXNlckFnZW50UG9saWN5XCI7XG5leHBvcnQge1xuICBEZXNlcmlhbGl6YXRpb25Db250ZW50VHlwZXMsXG4gIGRlc2VyaWFsaXphdGlvblBvbGljeSxcbiAgZGVzZXJpYWxpemVSZXNwb25zZUJvZHksXG59IGZyb20gXCIuL3BvbGljaWVzL2Rlc2VyaWFsaXphdGlvblBvbGljeVwiO1xuZXhwb3J0IHtcbiAgTWFwcGVyVHlwZSxcbiAgU2ltcGxlTWFwcGVyVHlwZSxcbiAgQ29tcG9zaXRlTWFwcGVyVHlwZSxcbiAgRGljdGlvbmFyeU1hcHBlclR5cGUsXG4gIFNlcXVlbmNlTWFwcGVyVHlwZSxcbiAgRW51bU1hcHBlclR5cGUsXG4gIE1hcHBlcixcbiAgQmFzZU1hcHBlcixcbiAgQ29tcG9zaXRlTWFwcGVyLFxuICBTZXF1ZW5jZU1hcHBlcixcbiAgRGljdGlvbmFyeU1hcHBlcixcbiAgRW51bU1hcHBlcixcbiAgTWFwcGVyQ29uc3RyYWludHMsXG4gIFBvbHltb3JwaGljRGlzY3JpbWluYXRvcixcbiAgU2VyaWFsaXplcixcbiAgVXJsUGFyYW1ldGVyVmFsdWUsXG4gIHNlcmlhbGl6ZU9iamVjdCxcbn0gZnJvbSBcIi4vc2VyaWFsaXplclwiO1xuZXhwb3J0IHtcbiAgc3RyaXBSZXF1ZXN0LFxuICBzdHJpcFJlc3BvbnNlLFxuICBkZWxheSxcbiAgZXhlY3V0ZVByb21pc2VzU2VxdWVudGlhbGx5LFxuICBnZW5lcmF0ZVV1aWQsXG4gIGVuY29kZVVyaSxcbiAgU2VydmljZUNhbGxiYWNrLFxuICBwcm9taXNlVG9DYWxsYmFjayxcbiAgcHJvbWlzZVRvU2VydmljZUNhbGxiYWNrLFxuICBpc1ZhbGlkVXVpZCxcbiAgYXBwbHlNaXhpbnMsXG4gIGlzTm9kZSxcbiAgaXNEdXJhdGlvbixcbn0gZnJvbSBcIi4vdXRpbC91dGlsc1wiO1xuZXhwb3J0IHsgVVJMQnVpbGRlciwgVVJMUXVlcnkgfSBmcm9tIFwiLi91cmxcIjtcblxuLy8gQ3JlZGVudGlhbHNcbmV4cG9ydCB7IFRva2VuQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi9jcmVkZW50aWFscy90b2tlbkNyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBUb2tlblJlc3BvbnNlIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvdG9rZW5SZXNwb25zZVwiO1xuZXhwb3J0IHsgQmFzaWNBdXRoZW50aWNhdGlvbkNyZWRlbnRpYWxzIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvYmFzaWNBdXRoZW50aWNhdGlvbkNyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBBcGlLZXlDcmVkZW50aWFscywgQXBpS2V5Q3JlZGVudGlhbE9wdGlvbnMgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9hcGlLZXlDcmVkZW50aWFsc1wiO1xuZXhwb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvc2VydmljZUNsaWVudENyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBUb3BpY0NyZWRlbnRpYWxzIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvdG9waWNDcmVkZW50aWFsc1wiO1xuZXhwb3J0IHsgRG9tYWluQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9kb21haW5DcmVkZW50aWFsc1wiO1xuZXhwb3J0IHsgQXV0aGVudGljYXRvciB9IGZyb20gXCIuL2NyZWRlbnRpYWxzL2NyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBBenVyZUlkZW50aXR5Q3JlZGVudGlhbEFkYXB0ZXIgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9henVyZUlkZW50aXR5VG9rZW5DcmVkZW50aWFsQWRhcHRlclwiO1xuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/webResource.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/httpHeaders.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/serializer.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3NlcmlhbGl6ZXIudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRS9GLDREQUF3QztBQUN4QywwREFBc0M7QUFFdEM7SUFDRSxvQkFDa0IsWUFBeUMsRUFDekMsS0FBZTtRQURmLDZCQUFBLEVBQUEsaUJBQXlDO1FBQXpDLGlCQUFZLEdBQVosWUFBWSxDQUE2QjtRQUN6QyxVQUFLLEdBQUwsS0FBSyxDQUFVO0lBQzlCLENBQUM7SUFFSix3Q0FBbUIsR0FBbkIsVUFBb0IsTUFBYyxFQUFFLEtBQVUsRUFBRSxVQUFrQjtRQUNoRSxJQUFNLGNBQWMsR0FBRyxVQUFDLGNBQXVDLEVBQUUsZUFBb0I7WUFDbkYsTUFBTSxJQUFJLEtBQUssQ0FDYixPQUFJLFVBQVUsd0JBQWlCLEtBQUssMkNBQW9DLGNBQWMsWUFBTSxlQUFlLE1BQUcsQ0FDL0csQ0FBQztRQUNKLENBQUMsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLFdBQVcsSUFBSSxLQUFLLElBQUksU0FBUyxFQUFFO1lBQ3RDLElBQUEsS0FZRixNQUFNLENBQUMsV0FBVyxFQVhwQixnQkFBZ0Isc0JBQUEsRUFDaEIsZ0JBQWdCLHNCQUFBLEVBQ2hCLGdCQUFnQixzQkFBQSxFQUNoQixnQkFBZ0Isc0JBQUEsRUFDaEIsUUFBUSxjQUFBLEVBQ1IsU0FBUyxlQUFBLEVBQ1QsUUFBUSxjQUFBLEVBQ1IsU0FBUyxlQUFBLEVBQ1QsVUFBVSxnQkFBQSxFQUNWLE9BQU8sYUFBQSxFQUNQLFdBQVcsaUJBQ1MsQ0FBQztZQUN2QixJQUFJLGdCQUFnQixJQUFJLFNBQVMsSUFBSSxLQUFLLElBQUksZ0JBQWdCLEVBQUU7Z0JBQzlELGNBQWMsQ0FBQyxr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LFVBQVU7Q0FDWCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCAqIGFzIGJhc2U2NCBmcm9tIFwiLi91dGlsL2Jhc2U2NFwiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4vdXRpbC91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgU2VyaWFsaXplciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBtb2RlbE1hcHBlcnM6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNYTUw/OiBib29sZWFuXG4gICkge31cblxuICB2YWxpZGF0ZUNvbnN0cmFpbnRzKG1hcHBlcjogTWFwcGVyLCB2YWx1ZTogYW55LCBvYmplY3ROYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBmYWlsVmFsaWRhdGlvbiA9IChjb25zdHJhaW50TmFtZToga2V5b2YgTWFwcGVyQ29uc3RyYWludHMsIGNvbnN0cmFpbnRWYWx1ZTogYW55KSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBcIiR7b2JqZWN0TmFtZX1cIiB3aXRoIHZhbHVlIFwiJHt2YWx1ZX1cIiBzaG91bGQgc2F0aXNmeSB0aGUgY29uc3RyYWludCBcIiR7Y29uc3RyYWludE5hbWV9XCI6ICR7Y29uc3RyYWludFZhbHVlfS5gXG4gICAgICApO1xuICAgIH07XG4gICAgaWYgKG1hcHBlci5jb25zdHJhaW50cyAmJiB2YWx1ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgRXhjbHVzaXZlTWF4aW11bSxcbiAgICAgICAgRXhjbHVzaXZlTWluaW11bSxcbiAgICAgICAgSW5jbHVzaXZlTWF4aW11bSxcbiAgICAgICAgSW5jbHVzaXZlTWluaW11bSxcbiAgICAgICAgTWF4SXRlbXMsXG4gICAgICAgIE1heExlbmd0aCxcbiAgICAgICAgTWluSXRlbXMsXG4gICAgICAgIE1pbkxlbmd0aCxcbiAgICAgICAgTXVsdGlwbGVPZixcbiAgICAgICAgUGF0dGVybixcbiAgICAgICAgVW5pcXVlSXRlbXMsXG4gICAgICB9ID0gbWFwcGVyLmNvbnN0cmFpbnRzO1xuICAgICAgaWYgKEV4Y2x1c2l2ZU1heGltdW0gIT0gdW5kZWZpbmVkICYmIHZhbHVlID49IEV4Y2x1c2l2ZU1heGltdW0pIHtcbiAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJFeGNsdXNpdmVNYXhpbXVtXCIsIEV4Y2x1c2l2ZU1heGltdW0pO1xuICAgICAgfVxuICAgICAgaWYgKEV4Y2x1c2l2ZU1pbmltdW0gIT0gdW5kZWZpbmVkICYmIHZhbHVlIDw9IEV4Y2x1c2l2ZU1pbmltdW0pIHtcbiAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJFeGNsdXNpdmVNaW5pbXVtXCIsIEV4Y2x1c2l2ZU1pbmltdW0pO1xuICAgICAgfVxuICAgICAgaWYgKEluY2x1c2l2ZU1heGltdW0gIT0gdW5kZWZpbmVkICYmIHZhbHVlID4gSW5jbHVzaXZlTWF4aW11bSkge1xuICAgICAgICBmYWlsVmFsaWRhdGlvbihcIkluY2x1c2l2ZU1heGltdW1cIiwgSW5jbHVzaXZlTWF4aW11bSk7XG4gICAgICB9XG4gICAgICBpZiAoSW5jbHVzaXZlTWluaW11bSAhPSB1bmRlZmluZWQgJiYgdmFsdWUgPCBJbmNsdXNpdmVNaW5pbXVtKSB7XG4gICAgICAgIGZhaWxWYWxpZGF0aW9uKFwiSW5jbHVzaXZlTWluaW11bVwiLCBJbmNsdXNpdmVNaW5pbXVtKTtcbiAgICAgIH1cbiAgICAgIGlmIChNYXhJdGVtcyAhPSB1bmRlZmluZWQgJiYgdmFsdWUubGVuZ3RoID4gTWF4SXRlbXMpIHtcbiAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNYXhJdGVtc1wiLCBNYXhJdGVtcyk7XG4gICAgICB9XG4gICAgICBpZiAoTWF4TGVuZ3RoICE9IHVuZGVmaW5lZCAmJiB2YWx1ZS5sZW5ndGggPiBNYXhMZW5ndGgpIHtcbiAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNYXhMZW5ndGhcIiwgTWF4TGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmIChNaW5JdGVtcyAhPSB1bmRlZmluZWQgJiYgdmFsdWUubGVuZ3RoIDwgTWluSXRlbXMpIHtcbiAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNaW5JdGVtc1wiLCBNaW5JdGVtcyk7XG4gICAgICB9XG4gICAgICBpZiAoTWluTGVuZ3RoICE9IHVuZGVmaW5lZCAmJiB2YWx1ZS5sZW5ndGggPCBNaW5MZW5ndGgpIHtcbiAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNaW5MZW5ndGhcIiwgTWluTGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmIChNdWx0aXBsZU9mICE9IHVuZGVmaW5lZCAmJiB2YWx1ZSAlIE11bHRpcGxlT2YgIT09IDApIHtcbiAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNdWx0aXBsZU9mXCIsIE11bHRpcGxlT2YpO1xuICAgICAgfVxuICAgICAgaWYgKFBhdHRlcm4pIHtcbiAgICAgICAgY29uc3QgcGF0dGVybjogUmVnRXhwID0gdHlwZW9mIFBhdHRlcm4gPT09IFwic3RyaW5nXCIgPyBuZXcgUmVnRXhwKFBhdHRlcm4pIDogUGF0dGVybjtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIiB8fCB2YWx1ZS5tYXRjaChwYXR0ZXJuKSA9PT0gbnVsbCkge1xuICAgICAgICAgIGZhaWxWYWxpZGF0aW9uKFwiUGF0dGVyblwiLCBQYXR0ZXJuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBVbmlxdWVJdGVtcyAmJlxuICAgICAgICB2YWx1ZS5zb21lKChpdGVtOiBhbnksIGk6IG51bWJlciwgYXI6IEFycmF5PGFueT4pID0+IGFyLmluZGV4T2YoaXRlbSkgIT09IGkpXG4gICAgICApIHtcbiAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJVbmlxdWVJdGVtc1wiLCBVbmlxdWVJdGVtcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZSB0aGUgZ2l2ZW4gb2JqZWN0IGJhc2VkIG9uIGl0cyBtZXRhZGF0YSBkZWZpbmVkIGluIHRoZSBtYXBwZXJcbiAgICpcbiAgICogQHBhcmFtIHtNYXBwZXJ9IG1hcHBlciBUaGUgbWFwcGVyIHdoaWNoIGRlZmluZXMgdGhlIG1ldGFkYXRhIG9mIHRoZSBzZXJpYWxpemFibGUgb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ3xBcnJheXxudW1iZXJ8Ym9vbGVhbnxEYXRlfHN0cmVhbX0gb2JqZWN0IEEgdmFsaWQgSmF2YXNjcmlwdCBvYmplY3QgdG8gYmUgc2VyaWFsaXplZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqZWN0TmFtZSBOYW1lIG9mIHRoZSBzZXJpYWxpemVkIG9iamVjdFxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fHN0cmluZ3xBcnJheXxudW1iZXJ8Ym9vbGVhbnxEYXRlfHN0cmVhbX0gQSB2YWxpZCBzZXJpYWxpemVkIEphdmFzY3JpcHQgb2JqZWN0XG4gICAqL1xuICBzZXJpYWxpemUobWFwcGVyOiBNYXBwZXIsIG9iamVjdDogYW55LCBvYmplY3ROYW1lPzogc3RyaW5nKTogYW55IHtcbiAgICBsZXQgcGF5bG9hZDogYW55ID0ge307XG4gICAgY29uc3QgbWFwcGVyVHlwZSA9IG1hcHBlci50eXBlLm5hbWUgYXMgc3RyaW5nO1xuICAgIGlmICghb2JqZWN0TmFtZSkge1xuICAgICAgb2JqZWN0TmFtZSA9IG1hcHBlci5zZXJpYWxpemVkTmFtZSE7XG4gICAgfVxuICAgIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eU2VxdWVuY2UkL2dpKSAhPT0gbnVsbCkge1xuICAgICAgcGF5bG9hZCA9IFtdO1xuICAgIH1cblxuICAgIGlmIChtYXBwZXIuaXNDb25zdGFudCkge1xuICAgICAgb2JqZWN0ID0gbWFwcGVyLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIHRhYmxlIG9mIGFsbG93ZWQgdmFsdWVzIHNob3VsZCBoZWxwIGV4cGxhaW5cbiAgICAvLyB0aGUgbWFwcGVyLnJlcXVpcmVkIGFuZCBtYXBwZXIubnVsbGFibGUgcHJvcGVydGllcy5cbiAgICAvLyBYIG1lYW5zIFwibmVpdGhlciB1bmRlZmluZWQgb3IgbnVsbCBhcmUgYWxsb3dlZFwiLlxuICAgIC8vICAgICAgICAgICB8fCByZXF1aXJlZFxuICAgIC8vICAgICAgICAgICB8fCB0cnVlICAgICAgfCBmYWxzZVxuICAgIC8vICBudWxsYWJsZSB8fCA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vICAgICAgdHJ1ZSB8fCBudWxsICAgICAgfCB1bmRlZmluZWQvbnVsbFxuICAgIC8vICAgICBmYWxzZSB8fCBYICAgICAgICAgfCB1bmRlZmluZWRcbiAgICAvLyB1bmRlZmluZWQgfHwgWCAgICAgICAgIHwgdW5kZWZpbmVkL251bGxcblxuICAgIGNvbnN0IHsgcmVxdWlyZWQsIG51bGxhYmxlIH0gPSBtYXBwZXI7XG5cbiAgICBpZiAocmVxdWlyZWQgJiYgbnVsbGFibGUgJiYgb2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBjYW5ub3QgYmUgdW5kZWZpbmVkLmApO1xuICAgIH1cbiAgICBpZiAocmVxdWlyZWQgJiYgIW51bGxhYmxlICYmIG9iamVjdCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuYCk7XG4gICAgfVxuICAgIGlmICghcmVxdWlyZWQgJiYgbnVsbGFibGUgPT09IGZhbHNlICYmIG9iamVjdCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IGNhbm5vdCBiZSBudWxsLmApO1xuICAgIH1cblxuICAgIGlmIChvYmplY3QgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXlsb2FkID0gb2JqZWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBWYWxpZGF0ZSBDb25zdHJhaW50cyBpZiBhbnlcbiAgICAgIHRoaXMudmFsaWRhdGVDb25zdHJhaW50cyhtYXBwZXIsIG9iamVjdCwgb2JqZWN0TmFtZSk7XG4gICAgICBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXmFueSQvZ2kpICE9PSBudWxsKSB7XG4gICAgICAgIHBheWxvYWQgPSBvYmplY3Q7XG4gICAgICB9IGVsc2UgaWYgKG1hcHBlclR5cGUubWF0Y2goL14oTnVtYmVyfFN0cmluZ3xCb29sZWFufE9iamVjdHxTdHJlYW18VXVpZCkkL2dpKSAhPT0gbnVsbCkge1xuICAgICAgICBwYXlsb2FkID0gc2VyaWFsaXplQmFzaWNUeXBlcyhtYXBwZXJUeXBlLCBvYmplY3ROYW1lLCBvYmplY3QpO1xuICAgICAgfSBlbHNlIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eRW51bSQvZ2kpICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGVudW1NYXBwZXI6IEVudW1NYXBwZXIgPSBtYXBwZXIgYXMgRW51bU1hcHBlcjtcbiAgICAgICAgcGF5bG9hZCA9IHNlcmlhbGl6ZUVudW1UeXBlKG9iamVjdE5hbWUsIGVudW1NYXBwZXIudHlwZS5hbGxvd2VkVmFsdWVzLCBvYmplY3QpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgbWFwcGVyVHlwZS5tYXRjaCgvXihEYXRlfERhdGVUaW1lfFRpbWVTcGFufERhdGVUaW1lUmZjMTEyM3xVbml4VGltZSkkL2dpKSAhPT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHBheWxvYWQgPSBzZXJpYWxpemVEYXRlVHlwZXMobWFwcGVyVHlwZSwgb2JqZWN0LCBvYmplY3ROYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkJ5dGVBcnJheSQvZ2kpICE9PSBudWxsKSB7XG4gICAgICAgIHBheWxvYWQgPSBzZXJpYWxpemVCeXRlQXJyYXlUeXBlKG9iamVjdE5hbWUsIG9iamVjdCk7XG4gICAgICB9IGVsc2UgaWYgKG1hcHBlclR5cGUubWF0Y2goL15CYXNlNjRVcmwkL2dpKSAhPT0gbnVsbCkge1xuICAgICAgICBwYXlsb2FkID0gc2VyaWFsaXplQmFzZTY0VXJsVHlwZShvYmplY3ROYW1lLCBvYmplY3QpO1xuICAgICAgfSBlbHNlIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eU2VxdWVuY2UkL2dpKSAhPT0gbnVsbCkge1xuICAgICAgICBwYXlsb2FkID0gc2VyaWFsaXplU2VxdWVuY2VUeXBlKHRoaXMsIG1hcHBlciBhcyBTZXF1ZW5jZU1hcHBlciwgb2JqZWN0LCBvYmplY3ROYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkRpY3Rpb25hcnkkL2dpKSAhPT0gbnVsbCkge1xuICAgICAgICBwYXlsb2FkID0gc2VyaWFsaXplRGljdGlvbmFyeVR5cGUodGhpcywgbWFwcGVyIGFzIERpY3Rpb25hcnlNYXBwZXIsIG9iamVjdCwgb2JqZWN0TmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKG1hcHBlclR5cGUubWF0Y2goL15Db21wb3NpdGUkL2dpKSAhPT0gbnVsbCkge1xuICAgICAgICBwYXlsb2FkID0gc2VyaWFsaXplQ29tcG9zaXRlVHlwZSh0aGlzLCBtYXBwZXIgYXMgQ29tcG9zaXRlTWFwcGVyLCBvYmplY3QsIG9iamVjdE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF5bG9hZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZSB0aGUgZ2l2ZW4gb2JqZWN0IGJhc2VkIG9uIGl0cyBtZXRhZGF0YSBkZWZpbmVkIGluIHRoZSBtYXBwZXJcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG1hcHBlciBUaGUgbWFwcGVyIHdoaWNoIGRlZmluZXMgdGhlIG1ldGFkYXRhIG9mIHRoZSBzZXJpYWxpemFibGUgb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ3xBcnJheXxudW1iZXJ8Ym9vbGVhbnxEYXRlfHN0cmVhbX0gcmVzcG9uc2VCb2R5IEEgdmFsaWQgSmF2YXNjcmlwdCBlbnRpdHkgdG8gYmUgZGVzZXJpYWxpemVkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3ROYW1lIE5hbWUgb2YgdGhlIGRlc2VyaWFsaXplZCBvYmplY3RcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdHxzdHJpbmd8QXJyYXl8bnVtYmVyfGJvb2xlYW58RGF0ZXxzdHJlYW19IEEgdmFsaWQgZGVzZXJpYWxpemVkIEphdmFzY3JpcHQgb2JqZWN0XG4gICAqL1xuICBkZXNlcmlhbGl6ZShtYXBwZXI6IE1hcHBlciwgcmVzcG9uc2VCb2R5OiBhbnksIG9iamVjdE5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKHJlc3BvbnNlQm9keSA9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLmlzWE1MICYmIG1hcHBlci50eXBlLm5hbWUgPT09IFwiU2VxdWVuY2VcIiAmJiAhbWFwcGVyLnhtbElzV3JhcHBlZCkge1xuICAgICAgICAvLyBFZGdlIGNhc2UgZm9yIGVtcHR5IFhNTCBub24td3JhcHBlZCBsaXN0cy4geG1sMmpzIGNhbid0IGRpc3Rpbmd1aXNoXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIGxpc3QgYmVpbmcgZW1wdHkgdmVyc3VzIGJlaW5nIG1pc3NpbmcsXG4gICAgICAgIC8vIHNvIGxldCdzIGRvIHRoZSBtb3JlIHVzZXItZnJpZW5kbHkgdGhpbmcgYW5kIHJldHVybiBhbiBlbXB0eSBsaXN0LlxuICAgICAgICByZXNwb25zZUJvZHkgPSBbXTtcbiAgICAgIH1cbiAgICAgIC8vIHNwZWNpZmljYWxseSBjaGVjayBmb3IgdW5kZWZpbmVkIGFzIGRlZmF1bHQgdmFsdWUgY2FuIGJlIGEgZmFsc2V5IHZhbHVlIGAwLCBcIlwiLCBmYWxzZSwgbnVsbGBcbiAgICAgIGlmIChtYXBwZXIuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzcG9uc2VCb2R5ID0gbWFwcGVyLmRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwb25zZUJvZHk7XG4gICAgfVxuXG4gICAgbGV0IHBheWxvYWQ6IGFueTtcbiAgICBjb25zdCBtYXBwZXJUeXBlID0gbWFwcGVyLnR5cGUubmFtZTtcbiAgICBpZiAoIW9iamVjdE5hbWUpIHtcbiAgICAgIG9iamVjdE5hbWUgPSBtYXBwZXIuc2VyaWFsaXplZE5hbWUhO1xuICAgIH1cblxuICAgIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eQ29tcG9zaXRlJC9naSkgIT09IG51bGwpIHtcbiAgICAgIHBheWxvYWQgPSBkZXNlcmlhbGl6ZUNvbXBvc2l0ZVR5cGUodGhpcywgbWFwcGVyIGFzIENvbXBvc2l0ZU1hcHBlciwgcmVzcG9uc2VCb2R5LCBvYmplY3ROYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaXNYTUwpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZSBtYXBwZXIgc3BlY2lmaWVzIHRoaXMgYXMgYSBub24tY29tcG9zaXRlIHR5cGUgdmFsdWUgYnV0IHRoZSByZXNwb25zZUJvZHkgY29udGFpbnNcbiAgICAgICAgICogYm90aCBoZWFkZXIgKFwiJFwiKSBhbmQgYm9keSAoXCJfXCIpIHByb3BlcnRpZXMsIHRoZW4ganVzdCByZWR1Y2UgdGhlIHJlc3BvbnNlQm9keSB2YWx1ZSB0b1xuICAgICAgICAgKiB0aGUgYm9keSAoXCJfXCIpIHByb3BlcnR5LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHJlc3BvbnNlQm9keVtcIiRcIl0gIT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlQm9keVtcIl9cIl0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzcG9uc2VCb2R5ID0gcmVzcG9uc2VCb2R5W1wiX1wiXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXk51bWJlciQvZ2kpICE9PSBudWxsKSB7XG4gICAgICAgIHBheWxvYWQgPSBwYXJzZUZsb2F0KHJlc3BvbnNlQm9keSk7XG4gICAgICAgIGlmIChpc05hTihwYXlsb2FkKSkge1xuICAgICAgICAgIHBheWxvYWQgPSByZXNwb25zZUJvZHk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkJvb2xlYW4kL2dpKSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAocmVzcG9uc2VCb2R5ID09PSBcInRydWVcIikge1xuICAgICAgICAgIHBheWxvYWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlQm9keSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgcGF5bG9hZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBheWxvYWQgPSByZXNwb25zZUJvZHk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXihTdHJpbmd8RW51bXxPYmplY3R8U3RyZWFtfFV1aWR8VGltZVNwYW58YW55KSQvZ2kpICE9PSBudWxsKSB7XG4gICAgICAgIHBheWxvYWQgPSByZXNwb25zZUJvZHk7XG4gICAgICB9IGVsc2UgaWYgKG1hcHBlclR5cGUubWF0Y2goL14oRGF0ZXxEYXRlVGltZXxEYXRlVGltZVJmYzExMjMpJC9naSkgIT09IG51bGwpIHtcbiAgICAgICAgcGF5bG9hZCA9IG5ldyBEYXRlKHJlc3BvbnNlQm9keSk7XG4gICAgICB9IGVsc2UgaWYgKG1hcHBlclR5cGUubWF0Y2goL15Vbml4VGltZSQvZ2kpICE9PSBudWxsKSB7XG4gICAgICAgIHBheWxvYWQgPSB1bml4VGltZVRvRGF0ZShyZXNwb25zZUJvZHkpO1xuICAgICAgfSBlbHNlIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eQnl0ZUFycmF5JC9naSkgIT09IG51bGwpIHtcbiAgICAgICAgcGF5bG9hZCA9IGJhc2U2NC5kZWNvZGVTdHJpbmcocmVzcG9uc2VCb2R5KTtcbiAgICAgIH0gZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkJhc2U2NFVybCQvZ2kpICE9PSBudWxsKSB7XG4gICAgICAgIHBheWxvYWQgPSBiYXNlNjRVcmxUb0J5dGVBcnJheShyZXNwb25zZUJvZHkpO1xuICAgICAgfSBlbHNlIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eU2VxdWVuY2UkL2dpKSAhPT0gbnVsbCkge1xuICAgICAgICBwYXlsb2FkID0gZGVzZXJpYWxpemVTZXF1ZW5jZVR5cGUodGhpcywgbWFwcGVyIGFzIFNlcXVlbmNlTWFwcGVyLCByZXNwb25zZUJvZHksIG9iamVjdE5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eRGljdGlvbmFyeSQvZ2kpICE9PSBudWxsKSB7XG4gICAgICAgIHBheWxvYWQgPSBkZXNlcmlhbGl6ZURpY3Rpb25hcnlUeXBlKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgbWFwcGVyIGFzIERpY3Rpb25hcnlNYXBwZXIsXG4gICAgICAgICAgcmVzcG9uc2VCb2R5LFxuICAgICAgICAgIG9iamVjdE5hbWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWFwcGVyLmlzQ29uc3RhbnQpIHtcbiAgICAgIHBheWxvYWQgPSBtYXBwZXIuZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBwYXlsb2FkO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyaW1FbmQoc3RyOiBzdHJpbmcsIGNoOiBzdHJpbmcpIHtcbiAgbGV0IGxlbiA9IHN0ci5sZW5ndGg7XG4gIHdoaWxlIChsZW4gLSAxID49IDAgJiYgc3RyW2xlbiAtIDFdID09PSBjaCkge1xuICAgIC0tbGVuO1xuICB9XG4gIHJldHVybiBzdHIuc3Vic3RyKDAsIGxlbik7XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlclRvQmFzZTY0VXJsKGJ1ZmZlcjogYW55KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFidWZmZXIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmICghKGJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQbGVhc2UgcHJvdmlkZSBhbiBpbnB1dCBvZiB0eXBlIFVpbnQ4QXJyYXkgZm9yIGNvbnZlcnRpbmcgdG8gQmFzZTY0VXJsLmApO1xuICB9XG4gIC8vIFVpbnQ4QXJyYXkgdG8gQmFzZTY0LlxuICBjb25zdCBzdHIgPSBiYXNlNjQuZW5jb2RlQnl0ZUFycmF5KGJ1ZmZlcik7XG4gIC8vIEJhc2U2NCB0byBCYXNlNjRVcmwuXG4gIHJldHVybiB0cmltRW5kKHN0ciwgXCI9XCIpLnJlcGxhY2UoL1xcKy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiX1wiKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VXJsVG9CeXRlQXJyYXkoc3RyOiBzdHJpbmcpOiBVaW50OEFycmF5IHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChzdHIgJiYgdHlwZW9mIHN0ci52YWx1ZU9mKCkgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhbiBpbnB1dCBvZiB0eXBlIHN0cmluZyBmb3IgY29udmVydGluZyB0byBVaW50OEFycmF5XCIpO1xuICB9XG4gIC8vIEJhc2U2NFVybCB0byBCYXNlNjQuXG4gIHN0ciA9IHN0ci5yZXBsYWNlKC9cXC0vZywgXCIrXCIpLnJlcGxhY2UoL1xcXy9nLCBcIi9cIik7XG4gIC8vIEJhc2U2NCB0byBVaW50OEFycmF5LlxuICByZXR1cm4gYmFzZTY0LmRlY29kZVN0cmluZyhzdHIpO1xufVxuXG5mdW5jdGlvbiBzcGxpdFNlcmlhbGl6ZU5hbWUocHJvcDogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nW10ge1xuICBjb25zdCBjbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgcGFydGlhbGNsYXNzID0gXCJcIjtcbiAgaWYgKHByb3ApIHtcbiAgICBjb25zdCBzdWJ3b3JkcyA9IHByb3Auc3BsaXQoXCIuXCIpO1xuXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHN1YndvcmRzKSB7XG4gICAgICBpZiAoaXRlbS5jaGFyQXQoaXRlbS5sZW5ndGggLSAxKSA9PT0gXCJcXFxcXCIpIHtcbiAgICAgICAgcGFydGlhbGNsYXNzICs9IGl0ZW0uc3Vic3RyKDAsIGl0ZW0ubGVuZ3RoIC0gMSkgKyBcIi5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRpYWxjbGFzcyArPSBpdGVtO1xuICAgICAgICBjbGFzc2VzLnB1c2gocGFydGlhbGNsYXNzKTtcbiAgICAgICAgcGFydGlhbGNsYXNzID0gXCJcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuZnVuY3Rpb24gZGF0ZVRvVW5peFRpbWUoZDogc3RyaW5nIHwgRGF0ZSk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gIGlmICghZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGQudmFsdWVPZigpID09PSBcInN0cmluZ1wiKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQgYXMgc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcigoZCBhcyBEYXRlKS5nZXRUaW1lKCkgLyAxMDAwKTtcbn1cblxuZnVuY3Rpb24gdW5peFRpbWVUb0RhdGUobjogbnVtYmVyKTogRGF0ZSB8IHVuZGVmaW5lZCB7XG4gIGlmICghbikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKG4gKiAxMDAwKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplQmFzaWNUeXBlcyh0eXBlTmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBhbnkge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlTmFtZS5tYXRjaCgvXk51bWJlciQvZ2kpICE9PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSB3aXRoIHZhbHVlICR7dmFsdWV9IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlTmFtZS5tYXRjaCgvXlN0cmluZyQvZ2kpICE9PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7b2JqZWN0TmFtZX0gd2l0aCB2YWx1ZSBcIiR7dmFsdWV9XCIgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5gKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVOYW1lLm1hdGNoKC9eVXVpZCQvZ2kpICE9PSBudWxsKSB7XG4gICAgICBpZiAoISh0eXBlb2YgdmFsdWUudmFsdWVPZigpID09PSBcInN0cmluZ1wiICYmIHV0aWxzLmlzVmFsaWRVdWlkKHZhbHVlKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGAke29iamVjdE5hbWV9IHdpdGggdmFsdWUgXCIke3ZhbHVlfVwiIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcgYW5kIGEgdmFsaWQgdXVpZC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlTmFtZS5tYXRjaCgvXkJvb2xlYW4kL2dpKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IHdpdGggdmFsdWUgJHt2YWx1ZX0gbXVzdCBiZSBvZiB0eXBlIGJvb2xlYW4uYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlTmFtZS5tYXRjaCgvXlN0cmVhbSQvZ2kpICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBvYmplY3RUeXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKFxuICAgICAgICBvYmplY3RUeXBlICE9PSBcInN0cmluZ1wiICYmXG4gICAgICAgIG9iamVjdFR5cGUgIT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpICYmXG4gICAgICAgICFBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpICYmXG4gICAgICAgICEodHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJiB2YWx1ZSBpbnN0YW5jZW9mIEJsb2IpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGAke29iamVjdE5hbWV9IG11c3QgYmUgYSBzdHJpbmcsIEJsb2IsIEFycmF5QnVmZmVyLCBBcnJheUJ1ZmZlclZpZXcsIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIE5vZGVKUy5SZWFkYWJsZVN0cmVhbS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplRW51bVR5cGUob2JqZWN0TmFtZTogc3RyaW5nLCBhbGxvd2VkVmFsdWVzOiBBcnJheTxhbnk+LCB2YWx1ZTogYW55KTogYW55IHtcbiAgaWYgKCFhbGxvd2VkVmFsdWVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFBsZWFzZSBwcm92aWRlIGEgc2V0IG9mIGFsbG93ZWRWYWx1ZXMgdG8gdmFsaWRhdGUgJHtvYmplY3ROYW1lfSBhcyBhbiBFbnVtIFR5cGUuYFxuICAgICk7XG4gIH1cbiAgY29uc3QgaXNQcmVzZW50ID0gYWxsb3dlZFZhbHVlcy5zb21lKChpdGVtKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtLnZhbHVlT2YoKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIGl0ZW0udG9Mb3dlckNhc2UoKSA9PT0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW0gPT09IHZhbHVlO1xuICB9KTtcbiAgaWYgKCFpc1ByZXNlbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgJHt2YWx1ZX0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yICR7b2JqZWN0TmFtZX0uIFRoZSB2YWxpZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICBhbGxvd2VkVmFsdWVzXG4gICAgICApfS5gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUJ5dGVBcnJheVR5cGUob2JqZWN0TmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55IHtcbiAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBtdXN0IGJlIG9mIHR5cGUgVWludDhBcnJheS5gKTtcbiAgICB9XG4gICAgdmFsdWUgPSBiYXNlNjQuZW5jb2RlQnl0ZUFycmF5KHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUJhc2U2NFVybFR5cGUob2JqZWN0TmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55IHtcbiAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBtdXN0IGJlIG9mIHR5cGUgVWludDhBcnJheS5gKTtcbiAgICB9XG4gICAgdmFsdWUgPSBidWZmZXJUb0Jhc2U2NFVybCh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVEYXRlVHlwZXModHlwZU5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgb2JqZWN0TmFtZTogc3RyaW5nKSB7XG4gIGlmICh2YWx1ZSAhPSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZU5hbWUubWF0Y2goL15EYXRlJC9naSkgIT09IG51bGwpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIShcbiAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgICAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSA9PT0gXCJzdHJpbmdcIiAmJiAhaXNOYU4oRGF0ZS5wYXJzZSh2YWx1ZSkpKVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IG11c3QgYmUgYW4gaW5zdGFuY2VvZiBEYXRlIG9yIGEgc3RyaW5nIGluIElTTzg2MDEgZm9ybWF0LmApO1xuICAgICAgfVxuICAgICAgdmFsdWUgPVxuICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICAgICA/IHZhbHVlLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKVxuICAgICAgICAgIDogbmV3IERhdGUodmFsdWUpLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVOYW1lLm1hdGNoKC9eRGF0ZVRpbWUkL2dpKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKFxuICAgICAgICAhKFxuICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAgICh0eXBlb2YgdmFsdWUudmFsdWVPZigpID09PSBcInN0cmluZ1wiICYmICFpc05hTihEYXRlLnBhcnNlKHZhbHVlKSkpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7b2JqZWN0TmFtZX0gbXVzdCBiZSBhbiBpbnN0YW5jZW9mIERhdGUgb3IgYSBzdHJpbmcgaW4gSVNPODYwMSBmb3JtYXQuYCk7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IHZhbHVlLnRvSVNPU3RyaW5nKCkgOiBuZXcgRGF0ZSh2YWx1ZSkudG9JU09TdHJpbmcoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVOYW1lLm1hdGNoKC9eRGF0ZVRpbWVSZmMxMTIzJC9naSkgIT09IG51bGwpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIShcbiAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgICAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSA9PT0gXCJzdHJpbmdcIiAmJiAhaXNOYU4oRGF0ZS5wYXJzZSh2YWx1ZSkpKVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IG11c3QgYmUgYW4gaW5zdGFuY2VvZiBEYXRlIG9yIGEgc3RyaW5nIGluIFJGQy0xMTIzIGZvcm1hdC5gKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gdmFsdWUudG9VVENTdHJpbmcoKSA6IG5ldyBEYXRlKHZhbHVlKS50b1VUQ1N0cmluZygpO1xuICAgIH0gZWxzZSBpZiAodHlwZU5hbWUubWF0Y2goL15Vbml4VGltZSQvZ2kpICE9PSBudWxsKSB7XG4gICAgICBpZiAoXG4gICAgICAgICEoXG4gICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICAgICAgKHR5cGVvZiB2YWx1ZS52YWx1ZU9mKCkgPT09IFwic3RyaW5nXCIgJiYgIWlzTmFOKERhdGUucGFyc2UodmFsdWUpKSlcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgJHtvYmplY3ROYW1lfSBtdXN0IGJlIGFuIGluc3RhbmNlb2YgRGF0ZSBvciBhIHN0cmluZyBpbiBSRkMtMTEyMy9JU084NjAxIGZvcm1hdCBgICtcbiAgICAgICAgICAgIGBmb3IgaXQgdG8gYmUgc2VyaWFsaXplZCBpbiBVbml4VGltZS9FcG9jaCBmb3JtYXQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBkYXRlVG9Vbml4VGltZSh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlTmFtZS5tYXRjaCgvXlRpbWVTcGFuJC9naSkgIT09IG51bGwpIHtcbiAgICAgIGlmICghdXRpbHMuaXNEdXJhdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGAke29iamVjdE5hbWV9IG11c3QgYmUgYSBzdHJpbmcgaW4gSVNPIDg2MDEgZm9ybWF0LiBJbnN0ZWFkIHdhcyBcIiR7dmFsdWV9XCIuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVTZXF1ZW5jZVR5cGUoXG4gIHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXIsXG4gIG1hcHBlcjogU2VxdWVuY2VNYXBwZXIsXG4gIG9iamVjdDogYW55LFxuICBvYmplY3ROYW1lOiBzdHJpbmdcbikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBtdXN0IGJlIG9mIHR5cGUgQXJyYXkuYCk7XG4gIH1cbiAgY29uc3QgZWxlbWVudFR5cGUgPSBtYXBwZXIudHlwZS5lbGVtZW50O1xuICBpZiAoIWVsZW1lbnRUeXBlIHx8IHR5cGVvZiBlbGVtZW50VHlwZSAhPT0gXCJvYmplY3RcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBlbGVtZW50XCIgbWV0YWRhdGEgZm9yIGFuIEFycmF5IG11c3QgYmUgZGVmaW5lZCBpbiB0aGUgYCArXG4gICAgICAgIGBtYXBwZXIgYW5kIGl0IG11c3Qgb2YgdHlwZSBcIm9iamVjdFwiIGluICR7b2JqZWN0TmFtZX0uYFxuICAgICk7XG4gIH1cbiAgY29uc3QgdGVtcEFycmF5ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdGVtcEFycmF5W2ldID0gc2VyaWFsaXplci5zZXJpYWxpemUoZWxlbWVudFR5cGUsIG9iamVjdFtpXSwgb2JqZWN0TmFtZSk7XG4gIH1cbiAgcmV0dXJuIHRlbXBBcnJheTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplRGljdGlvbmFyeVR5cGUoXG4gIHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXIsXG4gIG1hcHBlcjogRGljdGlvbmFyeU1hcHBlcixcbiAgb2JqZWN0OiBhbnksXG4gIG9iamVjdE5hbWU6IHN0cmluZ1xuKSB7XG4gIGlmICh0eXBlb2Ygb2JqZWN0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IG11c3QgYmUgb2YgdHlwZSBvYmplY3QuYCk7XG4gIH1cbiAgY29uc3QgdmFsdWVUeXBlID0gbWFwcGVyLnR5cGUudmFsdWU7XG4gIGlmICghdmFsdWVUeXBlIHx8IHR5cGVvZiB2YWx1ZVR5cGUgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgXCJ2YWx1ZVwiIG1ldGFkYXRhIGZvciBhIERpY3Rpb25hcnkgbXVzdCBiZSBkZWZpbmVkIGluIHRoZSBgICtcbiAgICAgICAgYG1hcHBlciBhbmQgaXQgbXVzdCBvZiB0eXBlIFwib2JqZWN0XCIgaW4gJHtvYmplY3ROYW1lfS5gXG4gICAgKTtcbiAgfVxuICBjb25zdCB0ZW1wRGljdGlvbmFyeTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG4gICAgdGVtcERpY3Rpb25hcnlba2V5XSA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKHZhbHVlVHlwZSwgb2JqZWN0W2tleV0sIG9iamVjdE5hbWUgKyBcIi5cIiArIGtleSk7XG4gIH1cbiAgcmV0dXJuIHRlbXBEaWN0aW9uYXJ5O1xufVxuXG4vKipcbiAqIFJlc29sdmVzIGEgY29tcG9zaXRlIG1hcHBlcidzIG1vZGVsUHJvcGVydGllcy5cbiAqIEBwYXJhbSBzZXJpYWxpemVyIHRoZSBzZXJpYWxpemVyIGNvbnRhaW5pbmcgdGhlIGVudGlyZSBzZXQgb2YgbWFwcGVyc1xuICogQHBhcmFtIG1hcHBlciB0aGUgY29tcG9zaXRlIG1hcHBlciB0byByZXNvbHZlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVNb2RlbFByb3BlcnRpZXMoXG4gIHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXIsXG4gIG1hcHBlcjogQ29tcG9zaXRlTWFwcGVyLFxuICBvYmplY3ROYW1lOiBzdHJpbmdcbik6IHsgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogTWFwcGVyIH0ge1xuICBsZXQgbW9kZWxQcm9wcyA9IG1hcHBlci50eXBlLm1vZGVsUHJvcGVydGllcztcbiAgaWYgKCFtb2RlbFByb3BzKSB7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gbWFwcGVyLnR5cGUuY2xhc3NOYW1lO1xuICAgIGlmICghY2xhc3NOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBDbGFzcyBuYW1lIGZvciBtb2RlbCBcIiR7b2JqZWN0TmFtZX1cIiBpcyBub3QgcHJvdmlkZWQgaW4gdGhlIG1hcHBlciBcIiR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgbWFwcGVyLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAyXG4gICAgICAgICl9XCIuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBtb2RlbE1hcHBlciA9IHNlcmlhbGl6ZXIubW9kZWxNYXBwZXJzW2NsYXNzTmFtZV07XG4gICAgaWYgKCFtb2RlbE1hcHBlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBtYXBwZXIoKSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgZm9yIG1vZGVsIFwiJHtjbGFzc05hbWV9XCIuYCk7XG4gICAgfVxuICAgIG1vZGVsUHJvcHMgPSBtb2RlbE1hcHBlci50eXBlLm1vZGVsUHJvcGVydGllcztcbiAgICBpZiAoIW1vZGVsUHJvcHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYG1vZGVsUHJvcGVydGllcyBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgaW4gdGhlIGAgK1xuICAgICAgICAgIGBtYXBwZXIgXCIke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgbW9kZWxNYXBwZXJcbiAgICAgICAgICApfVwiIG9mIHR5cGUgXCIke2NsYXNzTmFtZX1cIiBmb3Igb2JqZWN0IFwiJHtvYmplY3ROYW1lfVwiLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1vZGVsUHJvcHM7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUNvbXBvc2l0ZVR5cGUoXG4gIHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXIsXG4gIG1hcHBlcjogQ29tcG9zaXRlTWFwcGVyLFxuICBvYmplY3Q6IGFueSxcbiAgb2JqZWN0TmFtZTogc3RyaW5nXG4pIHtcbiAgaWYgKGdldFBvbHltb3JwaGljRGlzY3JpbWluYXRvclJlY3Vyc2l2ZWx5KHNlcmlhbGl6ZXIsIG1hcHBlcikpIHtcbiAgICBtYXBwZXIgPSBnZXRQb2x5bW9ycGhpY01hcHBlcihzZXJpYWxpemVyLCBtYXBwZXIsIG9iamVjdCwgXCJjbGllbnROYW1lXCIpO1xuICB9XG5cbiAgaWYgKG9iamVjdCAhPSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBwYXlsb2FkOiBhbnkgPSB7fTtcbiAgICBjb25zdCBtb2RlbFByb3BzID0gcmVzb2x2ZU1vZGVsUHJvcGVydGllcyhzZXJpYWxpemVyLCBtYXBwZXIsIG9iamVjdE5hbWUpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG1vZGVsUHJvcHMpKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0eU1hcHBlciA9IG1vZGVsUHJvcHNba2V5XTtcbiAgICAgIGlmIChwcm9wZXJ0eU1hcHBlci5yZWFkT25seSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IHByb3BOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICBsZXQgcGFyZW50T2JqZWN0OiBhbnkgPSBwYXlsb2FkO1xuICAgICAgaWYgKHNlcmlhbGl6ZXIuaXNYTUwpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5TWFwcGVyLnhtbElzV3JhcHBlZCkge1xuICAgICAgICAgIHByb3BOYW1lID0gcHJvcGVydHlNYXBwZXIueG1sTmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wTmFtZSA9IHByb3BlcnR5TWFwcGVyLnhtbEVsZW1lbnROYW1lIHx8IHByb3BlcnR5TWFwcGVyLnhtbE5hbWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHBhdGhzID0gc3BsaXRTZXJpYWxpemVOYW1lKHByb3BlcnR5TWFwcGVyLnNlcmlhbGl6ZWROYW1lISk7XG4gICAgICAgIHByb3BOYW1lID0gcGF0aHMucG9wKCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBwYXRoTmFtZSBvZiBwYXRocykge1xuICAgICAgICAgIGNvbnN0IGNoaWxkT2JqZWN0ID0gcGFyZW50T2JqZWN0W3BhdGhOYW1lXTtcbiAgICAgICAgICBpZiAoY2hpbGRPYmplY3QgPT0gdW5kZWZpbmVkICYmIG9iamVjdFtrZXldICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyZW50T2JqZWN0W3BhdGhOYW1lXSA9IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJlbnRPYmplY3QgPSBwYXJlbnRPYmplY3RbcGF0aE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnRPYmplY3QgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5T2JqZWN0TmFtZSA9XG4gICAgICAgICAgcHJvcGVydHlNYXBwZXIuc2VyaWFsaXplZE5hbWUgIT09IFwiXCJcbiAgICAgICAgICAgID8gb2JqZWN0TmFtZSArIFwiLlwiICsgcHJvcGVydHlNYXBwZXIuc2VyaWFsaXplZE5hbWVcbiAgICAgICAgICAgIDogb2JqZWN0TmFtZTtcblxuICAgICAgICBsZXQgdG9TZXJpYWxpemUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgY29uc3QgcG9seW1vcnBoaWNEaXNjcmltaW5hdG9yID0gZ2V0UG9seW1vcnBoaWNEaXNjcmltaW5hdG9yUmVjdXJzaXZlbHkoc2VyaWFsaXplciwgbWFwcGVyKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBvbHltb3JwaGljRGlzY3JpbWluYXRvciAmJlxuICAgICAgICAgIHBvbHltb3JwaGljRGlzY3JpbWluYXRvci5jbGllbnROYW1lID09PSBrZXkgJiZcbiAgICAgICAgICB0b1NlcmlhbGl6ZSA9PSB1bmRlZmluZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgdG9TZXJpYWxpemUgPSBtYXBwZXIuc2VyaWFsaXplZE5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZXJpYWxpemVkVmFsdWUgPSBzZXJpYWxpemVyLnNlcmlhbGl6ZShcbiAgICAgICAgICBwcm9wZXJ0eU1hcHBlcixcbiAgICAgICAgICB0b1NlcmlhbGl6ZSxcbiAgICAgICAgICBwcm9wZXJ0eU9iamVjdE5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BOYW1lICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eU1hcHBlci54bWxJc0F0dHJpYnV0ZSkge1xuICAgICAgICAgICAgLy8gJCBpcyB0aGUga2V5IGF0dHJpYnV0ZXMgYXJlIGtlcHQgdW5kZXIgaW4geG1sMmpzLlxuICAgICAgICAgICAgLy8gVGhpcyBrZWVwcyB0aGluZ3Mgc2ltcGxlIHdoaWxlIHByZXZlbnRpbmcgbmFtZSBjb2xsaXNpb25cbiAgICAgICAgICAgIC8vIHdpdGggbmFtZXMgaW4gdXNlciBkb2N1bWVudHMuXG4gICAgICAgICAgICBwYXJlbnRPYmplY3QuJCA9IHBhcmVudE9iamVjdC4kIHx8IHt9O1xuICAgICAgICAgICAgcGFyZW50T2JqZWN0LiRbcHJvcE5hbWVdID0gc2VyaWFsaXplZFZhbHVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlNYXBwZXIueG1sSXNXcmFwcGVkKSB7XG4gICAgICAgICAgICBwYXJlbnRPYmplY3RbcHJvcE5hbWVdID0geyBbcHJvcGVydHlNYXBwZXIueG1sRWxlbWVudE5hbWUhXTogc2VyaWFsaXplZFZhbHVlIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmVudE9iamVjdFtwcm9wTmFtZV0gPSBzZXJpYWxpemVkVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYWRkaXRpb25hbFByb3BlcnRpZXNNYXBwZXIgPSBtYXBwZXIudHlwZS5hZGRpdGlvbmFsUHJvcGVydGllcztcbiAgICBpZiAoYWRkaXRpb25hbFByb3BlcnRpZXNNYXBwZXIpIHtcbiAgICAgIGNvbnN0IHByb3BOYW1lcyA9IE9iamVjdC5rZXlzKG1vZGVsUHJvcHMpO1xuICAgICAgZm9yIChjb25zdCBjbGllbnRQcm9wTmFtZSBpbiBvYmplY3QpIHtcbiAgICAgICAgY29uc3QgaXNBZGRpdGlvbmFsUHJvcGVydHkgPSBwcm9wTmFtZXMuZXZlcnkoKHBuKSA9PiBwbiAhPT0gY2xpZW50UHJvcE5hbWUpO1xuICAgICAgICBpZiAoaXNBZGRpdGlvbmFsUHJvcGVydHkpIHtcbiAgICAgICAgICBwYXlsb2FkW2NsaWVudFByb3BOYW1lXSA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKFxuICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXNNYXBwZXIsXG4gICAgICAgICAgICBvYmplY3RbY2xpZW50UHJvcE5hbWVdLFxuICAgICAgICAgICAgb2JqZWN0TmFtZSArICdbXCInICsgY2xpZW50UHJvcE5hbWUgKyAnXCJdJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGF5bG9hZDtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBpc1NwZWNpYWxYbWxQcm9wZXJ0eShwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gW1wiJFwiLCBcIl9cIl0uaW5jbHVkZXMocHJvcGVydHlOYW1lKTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVDb21wb3NpdGVUeXBlKFxuICBzZXJpYWxpemVyOiBTZXJpYWxpemVyLFxuICBtYXBwZXI6IENvbXBvc2l0ZU1hcHBlcixcbiAgcmVzcG9uc2VCb2R5OiBhbnksXG4gIG9iamVjdE5hbWU6IHN0cmluZ1xuKTogYW55IHtcbiAgaWYgKGdldFBvbHltb3JwaGljRGlzY3JpbWluYXRvclJlY3Vyc2l2ZWx5KHNlcmlhbGl6ZXIsIG1hcHBlcikpIHtcbiAgICBtYXBwZXIgPSBnZXRQb2x5bW9ycGhpY01hcHBlcihzZXJpYWxpemVyLCBtYXBwZXIsIHJlc3BvbnNlQm9keSwgXCJzZXJpYWxpemVkTmFtZVwiKTtcbiAgfVxuXG4gIGNvbnN0IG1vZGVsUHJvcHMgPSByZXNvbHZlTW9kZWxQcm9wZXJ0aWVzKHNlcmlhbGl6ZXIsIG1hcHBlciwgb2JqZWN0TmFtZSk7XG4gIGxldCBpbnN0YW5jZTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICBjb25zdCBoYW5kbGVkUHJvcGVydHlOYW1lczogc3RyaW5nW10gPSBbXTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtb2RlbFByb3BzKSkge1xuICAgIGNvbnN0IHByb3BlcnR5TWFwcGVyID0gbW9kZWxQcm9wc1trZXldO1xuICAgIGNvbnN0IHBhdGhzID0gc3BsaXRTZXJpYWxpemVOYW1lKG1vZGVsUHJvcHNba2V5XS5zZXJpYWxpemVkTmFtZSEpO1xuICAgIGhhbmRsZWRQcm9wZXJ0eU5hbWVzLnB1c2gocGF0aHNbMF0pO1xuICAgIGNvbnN0IHsgc2VyaWFsaXplZE5hbWUsIHhtbE5hbWUsIHhtbEVsZW1lbnROYW1lIH0gPSBwcm9wZXJ0eU1hcHBlcjtcbiAgICBsZXQgcHJvcGVydHlPYmplY3ROYW1lID0gb2JqZWN0TmFtZTtcbiAgICBpZiAoc2VyaWFsaXplZE5hbWUgIT09IFwiXCIgJiYgc2VyaWFsaXplZE5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvcGVydHlPYmplY3ROYW1lID0gb2JqZWN0TmFtZSArIFwiLlwiICsgc2VyaWFsaXplZE5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVyQ29sbGVjdGlvblByZWZpeCA9IChwcm9wZXJ0eU1hcHBlciBhcyBEaWN0aW9uYXJ5TWFwcGVyKS5oZWFkZXJDb2xsZWN0aW9uUHJlZml4O1xuICAgIGlmIChoZWFkZXJDb2xsZWN0aW9uUHJlZml4KSB7XG4gICAgICBjb25zdCBkaWN0aW9uYXJ5OiBhbnkgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgaGVhZGVyS2V5IG9mIE9iamVjdC5rZXlzKHJlc3BvbnNlQm9keSkpIHtcbiAgICAgICAgaWYgKGhlYWRlcktleS5zdGFydHNXaXRoKGhlYWRlckNvbGxlY3Rpb25QcmVmaXgpKSB7XG4gICAgICAgICAgZGljdGlvbmFyeVtoZWFkZXJLZXkuc3Vic3RyaW5nKGhlYWRlckNvbGxlY3Rpb25QcmVmaXgubGVuZ3RoKV0gPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplKFxuICAgICAgICAgICAgKHByb3BlcnR5TWFwcGVyIGFzIERpY3Rpb25hcnlNYXBwZXIpLnR5cGUudmFsdWUsXG4gICAgICAgICAgICByZXNwb25zZUJvZHlbaGVhZGVyS2V5XSxcbiAgICAgICAgICAgIHByb3BlcnR5T2JqZWN0TmFtZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVkUHJvcGVydHlOYW1lcy5wdXNoKGhlYWRlcktleSk7XG4gICAgICB9XG4gICAgICBpbnN0YW5jZVtrZXldID0gZGljdGlvbmFyeTtcbiAgICB9IGVsc2UgaWYgKHNlcmlhbGl6ZXIuaXNYTUwpIHtcbiAgICAgIGlmIChwcm9wZXJ0eU1hcHBlci54bWxJc0F0dHJpYnV0ZSAmJiByZXNwb25zZUJvZHkuJCkge1xuICAgICAgICBpbnN0YW5jZVtrZXldID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShcbiAgICAgICAgICBwcm9wZXJ0eU1hcHBlcixcbiAgICAgICAgICByZXNwb25zZUJvZHkuJFt4bWxOYW1lIV0sXG4gICAgICAgICAgcHJvcGVydHlPYmplY3ROYW1lXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSB4bWxFbGVtZW50TmFtZSB8fCB4bWxOYW1lIHx8IHNlcmlhbGl6ZWROYW1lO1xuICAgICAgICBsZXQgdW53cmFwcGVkUHJvcGVydHkgPSByZXNwb25zZUJvZHlbcHJvcGVydHlOYW1lIV07XG4gICAgICAgIGlmIChwcm9wZXJ0eU1hcHBlci54bWxJc1dyYXBwZWQpIHtcbiAgICAgICAgICB1bndyYXBwZWRQcm9wZXJ0eSA9IHJlc3BvbnNlQm9keVt4bWxOYW1lIV07XG4gICAgICAgICAgdW53cmFwcGVkUHJvcGVydHkgPSB1bndyYXBwZWRQcm9wZXJ0eSAmJiB1bndyYXBwZWRQcm9wZXJ0eVt4bWxFbGVtZW50TmFtZSFdO1xuXG4gICAgICAgICAgY29uc3QgaXNFbXB0eVdyYXBwZWRMaXN0ID0gdW53cmFwcGVkUHJvcGVydHkgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoaXNFbXB0eVdyYXBwZWRMaXN0KSB7XG4gICAgICAgICAgICB1bndyYXBwZWRQcm9wZXJ0eSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZVtrZXldID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShcbiAgICAgICAgICBwcm9wZXJ0eU1hcHBlcixcbiAgICAgICAgICB1bndyYXBwZWRQcm9wZXJ0eSxcbiAgICAgICAgICBwcm9wZXJ0eU9iamVjdE5hbWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZGVzZXJpYWxpemUgdGhlIHByb3BlcnR5IGlmIGl0IGlzIHByZXNlbnQgaW4gdGhlIHByb3ZpZGVkIHJlc3BvbnNlQm9keSBpbnN0YW5jZVxuICAgICAgbGV0IHByb3BlcnR5SW5zdGFuY2U7XG4gICAgICBsZXQgcmVzID0gcmVzcG9uc2VCb2R5O1xuICAgICAgLy8gdHJhdmVyc2luZyB0aGUgb2JqZWN0IHN0ZXAgYnkgc3RlcC5cbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBwYXRocykge1xuICAgICAgICBpZiAoIXJlcykgYnJlYWs7XG4gICAgICAgIHJlcyA9IHJlc1tpdGVtXTtcbiAgICAgIH1cbiAgICAgIHByb3BlcnR5SW5zdGFuY2UgPSByZXM7XG4gICAgICBjb25zdCBwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgPSBtYXBwZXIudHlwZS5wb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3I7XG4gICAgICAvLyBjaGVja2luZyB0aGF0IHRoZSBtb2RlbCBwcm9wZXJ0eSBuYW1lIChrZXkpKGV4OiBcImZpc2h0eXBlXCIpIGFuZCB0aGVcbiAgICAgIC8vIGNsaWVudE5hbWUgb2YgdGhlIHBvbHltb3JwaGljRGlzY3JpbWluYXRvciB7bWV0YWRhdGF9IChleDogXCJmaXNodHlwZVwiKVxuICAgICAgLy8gaW5zdGVhZCBvZiB0aGUgc2VyaWFsaXplZE5hbWUgb2YgdGhlIHBvbHltb3JwaGljRGlzY3JpbWluYXRvciAoZXg6IFwiZmlzaC50eXBlXCIpXG4gICAgICAvLyBpcyBhIGJldHRlciBhcHByb2FjaC4gVGhlIGdlbmVyYXRvciBpcyBub3QgY29uc2lzdGVudCB3aXRoIGVzY2FwaW5nICdcXC4nIGluIHRoZVxuICAgICAgLy8gc2VyaWFsaXplZE5hbWUgb2YgdGhlIHByb3BlcnR5IChleDogXCJmaXNoXFwudHlwZVwiKSB0aGF0IGlzIG1hcmtlZCBhcyBwb2x5bW9ycGhpYyBkaXNjcmltaW5hdG9yXG4gICAgICAvLyBhbmQgdGhlIHNlcmlhbGl6ZWROYW1lIG9mIHRoZSBtZXRhZGF0YSBwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgKGV4OiBcImZpc2gudHlwZVwiKS4gSG93ZXZlcixcbiAgICAgIC8vIHRoZSBjbGllbnROYW1lIHRyYW5zZm9ybWF0aW9uIG9mIHRoZSBwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgKGV4OiBcImZpc2h0eXBlXCIpIGFuZFxuICAgICAgLy8gdGhlIHRyYW5zZm9ybWF0aW9uIG9mIG1vZGVsIHByb3BlcnR5IG5hbWUgKGV4OiBcImZpc2h0eXBlXCIpIGlzIGRvbmUgY29uc2lzdGVudGx5LlxuICAgICAgLy8gSGVuY2UsIGl0IGlzIGEgc2FmZXIgYmV0IHRvIHJlbHkgb24gdGhlIGNsaWVudE5hbWUgb2YgdGhlIHBvbHltb3JwaGljRGlzY3JpbWluYXRvci5cbiAgICAgIGlmIChcbiAgICAgICAgcG9seW1vcnBoaWNEaXNjcmltaW5hdG9yICYmXG4gICAgICAgIGtleSA9PT0gcG9seW1vcnBoaWNEaXNjcmltaW5hdG9yLmNsaWVudE5hbWUgJiZcbiAgICAgICAgcHJvcGVydHlJbnN0YW5jZSA9PSB1bmRlZmluZWRcbiAgICAgICkge1xuICAgICAgICBwcm9wZXJ0eUluc3RhbmNlID0gbWFwcGVyLnNlcmlhbGl6ZWROYW1lO1xuICAgICAgfVxuXG4gICAgICBsZXQgc2VyaWFsaXplZFZhbHVlO1xuICAgICAgLy8gcGFnaW5nXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXNwb25zZUJvZHlba2V5XSkgJiYgbW9kZWxQcm9wc1trZXldLnNlcmlhbGl6ZWROYW1lID09PSBcIlwiKSB7XG4gICAgICAgIHByb3BlcnR5SW5zdGFuY2UgPSByZXNwb25zZUJvZHlba2V5XTtcbiAgICAgICAgY29uc3QgYXJyYXlJbnN0YW5jZSA9IHNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoXG4gICAgICAgICAgcHJvcGVydHlNYXBwZXIsXG4gICAgICAgICAgcHJvcGVydHlJbnN0YW5jZSxcbiAgICAgICAgICBwcm9wZXJ0eU9iamVjdE5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgLy8gQ29weSBvdmVyIGFueSBwcm9wZXJ0aWVzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYWRkZWQgaW50byB0aGUgaW5zdGFuY2UsIHdoZXJlIHRoZXkgZG9cbiAgICAgICAgLy8gbm90IGV4aXN0IG9uIHRoZSBuZXdseSBkZS1zZXJpYWxpemVkIGFycmF5XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGluc3RhbmNlKSkge1xuICAgICAgICAgIGlmICghYXJyYXlJbnN0YW5jZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBhcnJheUluc3RhbmNlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UgPSBhcnJheUluc3RhbmNlO1xuICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluc3RhbmNlICE9PSB1bmRlZmluZWQgfHwgcHJvcGVydHlNYXBwZXIuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2VyaWFsaXplZFZhbHVlID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShcbiAgICAgICAgICBwcm9wZXJ0eU1hcHBlcixcbiAgICAgICAgICBwcm9wZXJ0eUluc3RhbmNlLFxuICAgICAgICAgIHByb3BlcnR5T2JqZWN0TmFtZVxuICAgICAgICApO1xuICAgICAgICBpbnN0YW5jZVtrZXldID0gc2VyaWFsaXplZFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGFkZGl0aW9uYWxQcm9wZXJ0aWVzTWFwcGVyID0gbWFwcGVyLnR5cGUuYWRkaXRpb25hbFByb3BlcnRpZXM7XG4gIGlmIChhZGRpdGlvbmFsUHJvcGVydGllc01hcHBlcikge1xuICAgIGNvbnN0IGlzQWRkaXRpb25hbFByb3BlcnR5ID0gKHJlc3BvbnNlUHJvcE5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgZm9yIChjb25zdCBjbGllbnRQcm9wTmFtZSBpbiBtb2RlbFByb3BzKSB7XG4gICAgICAgIGNvbnN0IHBhdGhzID0gc3BsaXRTZXJpYWxpemVOYW1lKG1vZGVsUHJvcHNbY2xpZW50UHJvcE5hbWVdLnNlcmlhbGl6ZWROYW1lKTtcbiAgICAgICAgaWYgKHBhdGhzWzBdID09PSByZXNwb25zZVByb3BOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgZm9yIChjb25zdCByZXNwb25zZVByb3BOYW1lIGluIHJlc3BvbnNlQm9keSkge1xuICAgICAgaWYgKGlzQWRkaXRpb25hbFByb3BlcnR5KHJlc3BvbnNlUHJvcE5hbWUpKSB7XG4gICAgICAgIGluc3RhbmNlW3Jlc3BvbnNlUHJvcE5hbWVdID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShcbiAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllc01hcHBlcixcbiAgICAgICAgICByZXNwb25zZUJvZHlbcmVzcG9uc2VQcm9wTmFtZV0sXG4gICAgICAgICAgb2JqZWN0TmFtZSArICdbXCInICsgcmVzcG9uc2VQcm9wTmFtZSArICdcIl0nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHJlc3BvbnNlQm9keSkge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlc3BvbnNlQm9keSkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgaW5zdGFuY2Vba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICFoYW5kbGVkUHJvcGVydHlOYW1lcy5pbmNsdWRlcyhrZXkpICYmXG4gICAgICAgICFpc1NwZWNpYWxYbWxQcm9wZXJ0eShrZXkpXG4gICAgICApIHtcbiAgICAgICAgaW5zdGFuY2Vba2V5XSA9IHJlc3BvbnNlQm9keVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVEaWN0aW9uYXJ5VHlwZShcbiAgc2VyaWFsaXplcjogU2VyaWFsaXplcixcbiAgbWFwcGVyOiBEaWN0aW9uYXJ5TWFwcGVyLFxuICByZXNwb25zZUJvZHk6IGFueSxcbiAgb2JqZWN0TmFtZTogc3RyaW5nXG4pOiBhbnkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgY29uc3QgdmFsdWUgPSBtYXBwZXIudHlwZS52YWx1ZTtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgXCJ2YWx1ZVwiIG1ldGFkYXRhIGZvciBhIERpY3Rpb25hcnkgbXVzdCBiZSBkZWZpbmVkIGluIHRoZSBgICtcbiAgICAgICAgYG1hcHBlciBhbmQgaXQgbXVzdCBvZiB0eXBlIFwib2JqZWN0XCIgaW4gJHtvYmplY3ROYW1lfWBcbiAgICApO1xuICB9XG4gIGlmIChyZXNwb25zZUJvZHkpIHtcbiAgICBjb25zdCB0ZW1wRGljdGlvbmFyeTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlc3BvbnNlQm9keSkpIHtcbiAgICAgIHRlbXBEaWN0aW9uYXJ5W2tleV0gPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplKHZhbHVlLCByZXNwb25zZUJvZHlba2V5XSwgb2JqZWN0TmFtZSk7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wRGljdGlvbmFyeTtcbiAgfVxuICByZXR1cm4gcmVzcG9uc2VCb2R5O1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZVNlcXVlbmNlVHlwZShcbiAgc2VyaWFsaXplcjogU2VyaWFsaXplcixcbiAgbWFwcGVyOiBTZXF1ZW5jZU1hcHBlcixcbiAgcmVzcG9uc2VCb2R5OiBhbnksXG4gIG9iamVjdE5hbWU6IHN0cmluZ1xuKTogYW55IHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gIGNvbnN0IGVsZW1lbnQgPSBtYXBwZXIudHlwZS5lbGVtZW50O1xuICBpZiAoIWVsZW1lbnQgfHwgdHlwZW9mIGVsZW1lbnQgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgZWxlbWVudFwiIG1ldGFkYXRhIGZvciBhbiBBcnJheSBtdXN0IGJlIGRlZmluZWQgaW4gdGhlIGAgK1xuICAgICAgICBgbWFwcGVyIGFuZCBpdCBtdXN0IG9mIHR5cGUgXCJvYmplY3RcIiBpbiAke29iamVjdE5hbWV9YFxuICAgICk7XG4gIH1cbiAgaWYgKHJlc3BvbnNlQm9keSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShyZXNwb25zZUJvZHkpKSB7XG4gICAgICAvLyB4bWwyanMgd2lsbCBpbnRlcnByZXQgYSBzaW5nbGUgZWxlbWVudCBhcnJheSBhcyBqdXN0IHRoZSBlbGVtZW50LCBzbyBmb3JjZSBpdCB0byBiZSBhbiBhcnJheVxuICAgICAgcmVzcG9uc2VCb2R5ID0gW3Jlc3BvbnNlQm9keV07XG4gICAgfVxuXG4gICAgY29uc3QgdGVtcEFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXNwb25zZUJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRlbXBBcnJheVtpXSA9IHNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoZWxlbWVudCwgcmVzcG9uc2VCb2R5W2ldLCBgJHtvYmplY3ROYW1lfVske2l9XWApO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcEFycmF5O1xuICB9XG4gIHJldHVybiByZXNwb25zZUJvZHk7XG59XG5cbmZ1bmN0aW9uIGdldFBvbHltb3JwaGljTWFwcGVyKFxuICBzZXJpYWxpemVyOiBTZXJpYWxpemVyLFxuICBtYXBwZXI6IENvbXBvc2l0ZU1hcHBlcixcbiAgb2JqZWN0OiBhbnksXG4gIHBvbHltb3JwaGljUHJvcGVydHlOYW1lOiBcImNsaWVudE5hbWVcIiB8IFwic2VyaWFsaXplZE5hbWVcIlxuKTogQ29tcG9zaXRlTWFwcGVyIHtcbiAgY29uc3QgcG9seW1vcnBoaWNEaXNjcmltaW5hdG9yID0gZ2V0UG9seW1vcnBoaWNEaXNjcmltaW5hdG9yUmVjdXJzaXZlbHkoc2VyaWFsaXplciwgbWFwcGVyKTtcbiAgaWYgKHBvbHltb3JwaGljRGlzY3JpbWluYXRvcikge1xuICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JOYW1lID0gcG9seW1vcnBoaWNEaXNjcmltaW5hdG9yW3BvbHltb3JwaGljUHJvcGVydHlOYW1lXTtcbiAgICBpZiAoZGlzY3JpbWluYXRvck5hbWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWUgPSBvYmplY3RbZGlzY3JpbWluYXRvck5hbWVdO1xuICAgICAgaWYgKGRpc2NyaW1pbmF0b3JWYWx1ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBtYXBwZXIudHlwZS51YmVyUGFyZW50IHx8IG1hcHBlci50eXBlLmNsYXNzTmFtZTtcbiAgICAgICAgY29uc3QgaW5kZXhEaXNjcmltaW5hdG9yID1cbiAgICAgICAgICBkaXNjcmltaW5hdG9yVmFsdWUgPT09IHR5cGVOYW1lXG4gICAgICAgICAgICA/IGRpc2NyaW1pbmF0b3JWYWx1ZVxuICAgICAgICAgICAgOiB0eXBlTmFtZSArIFwiLlwiICsgZGlzY3JpbWluYXRvclZhbHVlO1xuICAgICAgICBjb25zdCBwb2x5bW9ycGhpY01hcHBlciA9IHNlcmlhbGl6ZXIubW9kZWxNYXBwZXJzLmRpc2NyaW1pbmF0b3JzW2luZGV4RGlzY3JpbWluYXRvcl07XG4gICAgICAgIGlmIChwb2x5bW9ycGhpY01hcHBlcikge1xuICAgICAgICAgIG1hcHBlciA9IHBvbHltb3JwaGljTWFwcGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXBwZXI7XG59XG5cbmZ1bmN0aW9uIGdldFBvbHltb3JwaGljRGlzY3JpbWluYXRvclJlY3Vyc2l2ZWx5KFxuICBzZXJpYWxpemVyOiBTZXJpYWxpemVyLFxuICBtYXBwZXI6IENvbXBvc2l0ZU1hcHBlclxuKTogUG9seW1vcnBoaWNEaXNjcmltaW5hdG9yIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIChcbiAgICBtYXBwZXIudHlwZS5wb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgfHxcbiAgICBnZXRQb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3JTYWZlbHkoc2VyaWFsaXplciwgbWFwcGVyLnR5cGUudWJlclBhcmVudCkgfHxcbiAgICBnZXRQb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3JTYWZlbHkoc2VyaWFsaXplciwgbWFwcGVyLnR5cGUuY2xhc3NOYW1lKVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRQb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3JTYWZlbHkoc2VyaWFsaXplcjogU2VyaWFsaXplciwgdHlwZU5hbWU/OiBzdHJpbmcpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlTmFtZSAmJlxuICAgIHNlcmlhbGl6ZXIubW9kZWxNYXBwZXJzW3R5cGVOYW1lXSAmJlxuICAgIHNlcmlhbGl6ZXIubW9kZWxNYXBwZXJzW3R5cGVOYW1lXS50eXBlLnBvbHltb3JwaGljRGlzY3JpbWluYXRvclxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hcHBlckNvbnN0cmFpbnRzIHtcbiAgSW5jbHVzaXZlTWF4aW11bT86IG51bWJlcjtcbiAgRXhjbHVzaXZlTWF4aW11bT86IG51bWJlcjtcbiAgSW5jbHVzaXZlTWluaW11bT86IG51bWJlcjtcbiAgRXhjbHVzaXZlTWluaW11bT86IG51bWJlcjtcbiAgTWF4TGVuZ3RoPzogbnVtYmVyO1xuICBNaW5MZW5ndGg/OiBudW1iZXI7XG4gIFBhdHRlcm4/OiBSZWdFeHA7XG4gIE1heEl0ZW1zPzogbnVtYmVyO1xuICBNaW5JdGVtcz86IG51bWJlcjtcbiAgVW5pcXVlSXRlbXM/OiB0cnVlO1xuICBNdWx0aXBsZU9mPzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBNYXBwZXJUeXBlID1cbiAgfCBTaW1wbGVNYXBwZXJUeXBlXG4gIHwgQ29tcG9zaXRlTWFwcGVyVHlwZVxuICB8IFNlcXVlbmNlTWFwcGVyVHlwZVxuICB8IERpY3Rpb25hcnlNYXBwZXJUeXBlXG4gIHwgRW51bU1hcHBlclR5cGU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2ltcGxlTWFwcGVyVHlwZSB7XG4gIG5hbWU6XG4gICAgfCBcIkJhc2U2NFVybFwiXG4gICAgfCBcIkJvb2xlYW5cIlxuICAgIHwgXCJCeXRlQXJyYXlcIlxuICAgIHwgXCJEYXRlXCJcbiAgICB8IFwiRGF0ZVRpbWVcIlxuICAgIHwgXCJEYXRlVGltZVJmYzExMjNcIlxuICAgIHwgXCJPYmplY3RcIlxuICAgIHwgXCJTdHJlYW1cIlxuICAgIHwgXCJTdHJpbmdcIlxuICAgIHwgXCJUaW1lU3BhblwiXG4gICAgfCBcIlVuaXhUaW1lXCJcbiAgICB8IFwiVXVpZFwiXG4gICAgfCBcIk51bWJlclwiXG4gICAgfCBcImFueVwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvc2l0ZU1hcHBlclR5cGUge1xuICBuYW1lOiBcIkNvbXBvc2l0ZVwiO1xuXG4gIC8vIE9ubHkgb25lIG9mIHRoZSB0d28gYmVsb3cgcHJvcGVydGllcyBzaG91bGQgYmUgcHJlc2VudC5cbiAgLy8gVXNlIGNsYXNzTmFtZSB0byByZWZlcmVuY2UgYW5vdGhlciB0eXBlIGRlZmluaXRpb24sXG4gIC8vIGFuZCB1c2UgbW9kZWxQcm9wZXJ0aWVzL2FkZGl0aW9uYWxQcm9wZXJ0aWVzIHdoZW4gdGhlIHJlZmVyZW5jZSB0byB0aGUgb3RoZXIgdHlwZSBoYXMgYmVlbiByZXNvbHZlZC5cbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuXG4gIG1vZGVsUHJvcGVydGllcz86IHsgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogTWFwcGVyIH07XG4gIGFkZGl0aW9uYWxQcm9wZXJ0aWVzPzogTWFwcGVyO1xuXG4gIHViZXJQYXJlbnQ/OiBzdHJpbmc7XG4gIHBvbHltb3JwaGljRGlzY3JpbWluYXRvcj86IFBvbHltb3JwaGljRGlzY3JpbWluYXRvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW5jZU1hcHBlclR5cGUge1xuICBuYW1lOiBcIlNlcXVlbmNlXCI7XG4gIGVsZW1lbnQ6IE1hcHBlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEaWN0aW9uYXJ5TWFwcGVyVHlwZSB7XG4gIG5hbWU6IFwiRGljdGlvbmFyeVwiO1xuICB2YWx1ZTogTWFwcGVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVudW1NYXBwZXJUeXBlIHtcbiAgbmFtZTogXCJFbnVtXCI7XG4gIGFsbG93ZWRWYWx1ZXM6IGFueVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VNYXBwZXIge1xuICB4bWxOYW1lPzogc3RyaW5nO1xuICB4bWxJc0F0dHJpYnV0ZT86IGJvb2xlYW47XG4gIHhtbEVsZW1lbnROYW1lPzogc3RyaW5nO1xuICB4bWxJc1dyYXBwZWQ/OiBib29sZWFuO1xuICByZWFkT25seT86IGJvb2xlYW47XG4gIGlzQ29uc3RhbnQ/OiBib29sZWFuO1xuICByZXF1aXJlZD86IGJvb2xlYW47XG4gIG51bGxhYmxlPzogYm9vbGVhbjtcbiAgc2VyaWFsaXplZE5hbWU/OiBzdHJpbmc7XG4gIHR5cGU6IE1hcHBlclR5cGU7XG4gIGRlZmF1bHRWYWx1ZT86IGFueTtcbiAgY29uc3RyYWludHM/OiBNYXBwZXJDb25zdHJhaW50cztcbn1cblxuZXhwb3J0IHR5cGUgTWFwcGVyID0gQmFzZU1hcHBlciB8IENvbXBvc2l0ZU1hcHBlciB8IFNlcXVlbmNlTWFwcGVyIHwgRGljdGlvbmFyeU1hcHBlciB8IEVudW1NYXBwZXI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9seW1vcnBoaWNEaXNjcmltaW5hdG9yIHtcbiAgc2VyaWFsaXplZE5hbWU6IHN0cmluZztcbiAgY2xpZW50TmFtZTogc3RyaW5nO1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9zaXRlTWFwcGVyIGV4dGVuZHMgQmFzZU1hcHBlciB7XG4gIHR5cGU6IENvbXBvc2l0ZU1hcHBlclR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VxdWVuY2VNYXBwZXIgZXh0ZW5kcyBCYXNlTWFwcGVyIHtcbiAgdHlwZTogU2VxdWVuY2VNYXBwZXJUeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Rpb25hcnlNYXBwZXIgZXh0ZW5kcyBCYXNlTWFwcGVyIHtcbiAgdHlwZTogRGljdGlvbmFyeU1hcHBlclR5cGU7XG4gIGhlYWRlckNvbGxlY3Rpb25QcmVmaXg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW51bU1hcHBlciBleHRlbmRzIEJhc2VNYXBwZXIge1xuICB0eXBlOiBFbnVtTWFwcGVyVHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcmxQYXJhbWV0ZXJWYWx1ZSB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIHNraXBVcmxFbmNvZGluZzogYm9vbGVhbjtcbn1cblxuLy8gVE9ETzogd2h5IGlzIHRoaXMgaGVyZT9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVPYmplY3QodG9TZXJpYWxpemU6IGFueSk6IGFueSB7XG4gIGlmICh0b1NlcmlhbGl6ZSA9PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmICh0b1NlcmlhbGl6ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICB0b1NlcmlhbGl6ZSA9IGJhc2U2NC5lbmNvZGVCeXRlQXJyYXkodG9TZXJpYWxpemUpO1xuICAgIHJldHVybiB0b1NlcmlhbGl6ZTtcbiAgfSBlbHNlIGlmICh0b1NlcmlhbGl6ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gdG9TZXJpYWxpemUudG9JU09TdHJpbmcoKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRvU2VyaWFsaXplKSkge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b1NlcmlhbGl6ZS5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyYXkucHVzaChzZXJpYWxpemVPYmplY3QodG9TZXJpYWxpemVbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB0b1NlcmlhbGl6ZSA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IGRpY3Rpb25hcnk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHRvU2VyaWFsaXplKSB7XG4gICAgICBkaWN0aW9uYXJ5W3Byb3BlcnR5XSA9IHNlcmlhbGl6ZU9iamVjdCh0b1NlcmlhbGl6ZVtwcm9wZXJ0eV0pO1xuICAgIH1cbiAgICByZXR1cm4gZGljdGlvbmFyeTtcbiAgfVxuICByZXR1cm4gdG9TZXJpYWxpemU7XG59XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBjcmVhdGUgYSBLOlYgZnJvbSBhIGxpc3Qgb2Ygc3RyaW5nc1xuICovXG5mdW5jdGlvbiBzdHJFbnVtPFQgZXh0ZW5kcyBzdHJpbmc+KG86IEFycmF5PFQ+KTogeyBbSyBpbiBUXTogSyB9IHtcbiAgY29uc3QgcmVzdWx0OiBhbnkgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgb2Ygbykge1xuICAgIHJlc3VsdFtrZXldID0ga2V5O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBjb25zdCBNYXBwZXJUeXBlID0gc3RyRW51bShbXG4gIFwiQmFzZTY0VXJsXCIsXG4gIFwiQm9vbGVhblwiLFxuICBcIkJ5dGVBcnJheVwiLFxuICBcIkNvbXBvc2l0ZVwiLFxuICBcIkRhdGVcIixcbiAgXCJEYXRlVGltZVwiLFxuICBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICBcIkRpY3Rpb25hcnlcIixcbiAgXCJFbnVtXCIsXG4gIFwiTnVtYmVyXCIsXG4gIFwiT2JqZWN0XCIsXG4gIFwiU2VxdWVuY2VcIixcbiAgXCJTdHJpbmdcIixcbiAgXCJTdHJlYW1cIixcbiAgXCJUaW1lU3BhblwiLFxuICBcIlVuaXhUaW1lXCIsXG5dKTtcbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/util/base64.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/util/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3V0aWwvYmFzZTY0LnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvdXRpbC9iYXNlNjQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRjs7O0dBR0c7QUFDSCxTQUFnQixZQUFZLENBQUMsS0FBYTtJQUN4QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFGRCxvQ0FFQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxLQUFpQjtJQUMvQyxrR0FBa0c7SUFDbEcsbUdBQW1HO0lBQ25HLElBQU0sV0FBVyxHQUFHLEtBQUssWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBcUIsQ0FBQyxDQUFDO0lBQy9GLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBTEQsMENBS0M7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixZQUFZLENBQUMsS0FBYTtJQUN4QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCxvQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuLyoqXG4gKiBFbmNvZGVzIGEgc3RyaW5nIGluIGJhc2U2NCBmb3JtYXQuXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHN0cmluZyB0byBlbmNvZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVN0cmluZyh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgYnl0ZSBhcnJheSBpbiBiYXNlNjQgZm9ybWF0LlxuICogQHBhcmFtIHZhbHVlIHRoZSBVaW50OEFyYXkgdG8gZW5jb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCeXRlQXJyYXkodmFsdWU6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICAvLyBCdWZmZXIuZnJvbSBhY2NlcHRzIDxBcnJheUJ1ZmZlcj4gfCA8U2hhcmVkQXJyYXlCdWZmZXI+LS0gdGhlIFR5cGVTY3JpcHQgZGVmaW5pdGlvbiBpcyBvZmYgaGVyZVxuICAvLyBodHRwczovL25vZGVqcy5vcmcvYXBpL2J1ZmZlci5odG1sI2J1ZmZlcl9jbGFzc19tZXRob2RfYnVmZmVyX2Zyb21fYXJyYXlidWZmZXJfYnl0ZW9mZnNldF9sZW5ndGhcbiAgY29uc3QgYnVmZmVyVmFsdWUgPSB2YWx1ZSBpbnN0YW5jZW9mIEJ1ZmZlciA/IHZhbHVlIDogQnVmZmVyLmZyb20odmFsdWUuYnVmZmVyIGFzIEFycmF5QnVmZmVyKTtcbiAgcmV0dXJuIGJ1ZmZlclZhbHVlLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBiYXNlNjQgc3RyaW5nIGludG8gYSBieXRlIGFycmF5LlxuICogQHBhcmFtIHZhbHVlIHRoZSBiYXNlNjQgc3RyaW5nIHRvIGRlY29kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHZhbHVlOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbn1cbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/util/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3V0aWwvYmFzZTY0LnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvdXRpbC9iYXNlNjQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRjs7O0dBR0c7QUFDSCxTQUFnQixZQUFZLENBQUMsS0FBYTtJQUN4QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFGRCxvQ0FFQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxLQUFpQjtJQUMvQyxrR0FBa0c7SUFDbEcsbUdBQW1HO0lBQ25HLElBQU0sV0FBVyxHQUFHLEtBQUssWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBcUIsQ0FBQyxDQUFDO0lBQy9GLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBTEQsMENBS0M7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixZQUFZLENBQUMsS0FBYTtJQUN4QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCxvQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuLyoqXG4gKiBFbmNvZGVzIGEgc3RyaW5nIGluIGJhc2U2NCBmb3JtYXQuXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHN0cmluZyB0byBlbmNvZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVN0cmluZyh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgYnl0ZSBhcnJheSBpbiBiYXNlNjQgZm9ybWF0LlxuICogQHBhcmFtIHZhbHVlIHRoZSBVaW50OEFyYXkgdG8gZW5jb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCeXRlQXJyYXkodmFsdWU6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICAvLyBCdWZmZXIuZnJvbSBhY2NlcHRzIDxBcnJheUJ1ZmZlcj4gfCA8U2hhcmVkQXJyYXlCdWZmZXI+LS0gdGhlIFR5cGVTY3JpcHQgZGVmaW5pdGlvbiBpcyBvZmYgaGVyZVxuICAvLyBodHRwczovL25vZGVqcy5vcmcvYXBpL2J1ZmZlci5odG1sI2J1ZmZlcl9jbGFzc19tZXRob2RfYnVmZmVyX2Zyb21fYXJyYXlidWZmZXJfYnl0ZW9mZnNldF9sZW5ndGhcbiAgY29uc3QgYnVmZmVyVmFsdWUgPSB2YWx1ZSBpbnN0YW5jZW9mIEJ1ZmZlciA/IHZhbHVlIDogQnVmZmVyLmZyb20odmFsdWUuYnVmZmVyIGFzIEFycmF5QnVmZmVyKTtcbiAgcmV0dXJuIGJ1ZmZlclZhbHVlLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBiYXNlNjQgc3RyaW5nIGludG8gYSBieXRlIGFycmF5LlxuICogQHBhcmFtIHZhbHVlIHRoZSBiYXNlNjQgc3RyaW5nIHRvIGRlY29kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHZhbHVlOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/util/utils.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/util/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/util/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/util/constants.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/util/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3V0aWwvY29uc3RhbnRzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvdXRpbC9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUVsRixRQUFBLFNBQVMsR0FBRztJQUN2Qjs7OztPQUlHO0lBQ0gsYUFBYSxFQUFFLE9BQU87SUFFdEI7Ozs7O09BS0c7SUFDSCxJQUFJLEVBQUUsT0FBTztJQUViOzs7OztPQUtHO0lBQ0gsS0FBSyxFQUFFLFFBQVE7SUFFZjs7Ozs7T0FLRztJQUNILFVBQVUsRUFBRSxZQUFZO0lBRXhCOzs7OztPQUtHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7SUFFMUI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUVwQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBRXRCLGFBQWEsRUFBRTtRQUNiOzs7OztXQUtHO1FBQ0gsU0FBUyxFQUFFO1lBQ1QsR0FBRyxFQUFFLEtBQUs7WUFDVixHQUFHLEVBQUUsS0FBSztZQUNWLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLE9BQU87WUFDZCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxPQUFPO1NBQ2Y7UUFFRCxXQUFXLEVBQUU7WUFDWCxlQUFlLEVBQUUsR0FBRztTQUNyQjtLQUNGO0lBRUQ7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZjs7Ozs7V0FLRztRQUNILGFBQWEsRUFBRSxlQUFlO1FBRTlCLG9CQUFvQixFQUFFLFFBQVE7UUFFOUI7Ozs7Ozs7V0FPRztRQUNILFdBQVcsRUFBRSxhQUFhO1FBRTFCOzs7OztXQUtHO1FBQ0gsVUFBVSxFQUFFLFlBQVk7S0FDekI7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5leHBvcnQgY29uc3QgQ29uc3RhbnRzID0ge1xuICAvKipcbiAgICogVGhlIG1zLXJlc3QgdmVyc2lvblxuICAgKiBAY29uc3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIG1zUmVzdFZlcnNpb246IFwiMi42LjRcIixcblxuICAvKipcbiAgICogU3BlY2lmaWVzIEhUVFAuXG4gICAqXG4gICAqIEBjb25zdFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgSFRUUDogXCJodHRwOlwiLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgSFRUUFMuXG4gICAqXG4gICAqIEBjb25zdFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgSFRUUFM6IFwiaHR0cHM6XCIsXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBIVFRQIFByb3h5LlxuICAgKlxuICAgKiBAY29uc3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIEhUVFBfUFJPWFk6IFwiSFRUUF9QUk9YWVwiLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgSFRUUFMgUHJveHkuXG4gICAqXG4gICAqIEBjb25zdFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgSFRUUFNfUFJPWFk6IFwiSFRUUFNfUFJPWFlcIixcblxuICAvKipcbiAgICogU3BlY2lmaWVzIE5PIFByb3h5LlxuICAgKi9cbiAgTk9fUFJPWFk6IFwiTk9fUFJPWFlcIixcblxuICAvKipcbiAgICogU3BlY2lmaWVzIEFMTCBQcm94eS5cbiAgICovXG4gIEFMTF9QUk9YWTogXCJBTExfUFJPWFlcIixcblxuICBIdHRwQ29uc3RhbnRzOiB7XG4gICAgLyoqXG4gICAgICogSHR0cCBWZXJic1xuICAgICAqXG4gICAgICogQGNvbnN0XG4gICAgICogQGVudW0ge3N0cmluZ31cbiAgICAgKi9cbiAgICBIdHRwVmVyYnM6IHtcbiAgICAgIFBVVDogXCJQVVRcIixcbiAgICAgIEdFVDogXCJHRVRcIixcbiAgICAgIERFTEVURTogXCJERUxFVEVcIixcbiAgICAgIFBPU1Q6IFwiUE9TVFwiLFxuICAgICAgTUVSR0U6IFwiTUVSR0VcIixcbiAgICAgIEhFQUQ6IFwiSEVBRFwiLFxuICAgICAgUEFUQ0g6IFwiUEFUQ0hcIixcbiAgICB9LFxuXG4gICAgU3RhdHVzQ29kZXM6IHtcbiAgICAgIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIERlZmluZXMgY29uc3RhbnRzIGZvciB1c2Ugd2l0aCBIVFRQIGhlYWRlcnMuXG4gICAqL1xuICBIZWFkZXJDb25zdGFudHM6IHtcbiAgICAvKipcbiAgICAgKiBUaGUgQXV0aG9yaXphdGlvbiBoZWFkZXIuXG4gICAgICpcbiAgICAgKiBAY29uc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIEFVVEhPUklaQVRJT046IFwiYXV0aG9yaXphdGlvblwiLFxuXG4gICAgQVVUSE9SSVpBVElPTl9TQ0hFTUU6IFwiQmVhcmVyXCIsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgUmV0cnktQWZ0ZXIgcmVzcG9uc2UtaGVhZGVyIGZpZWxkIGNhbiBiZSB1c2VkIHdpdGggYSA1MDMgKFNlcnZpY2VcbiAgICAgKiBVbmF2YWlsYWJsZSkgb3IgMzQ5IChUb28gTWFueSBSZXF1ZXN0cykgcmVzcG9uc2VzIHRvIGluZGljYXRlIGhvdyBsb25nXG4gICAgICogdGhlIHNlcnZpY2UgaXMgZXhwZWN0ZWQgdG8gYmUgdW5hdmFpbGFibGUgdG8gdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqXG4gICAgICogQGNvbnN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBSRVRSWV9BRlRFUjogXCJSZXRyeS1BZnRlclwiLFxuXG4gICAgLyoqXG4gICAgICogVGhlIFVzZXJBZ2VudCBoZWFkZXIuXG4gICAgICpcbiAgICAgKiBAY29uc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIFVTRVJfQUdFTlQ6IFwiVXNlci1BZ2VudFwiLFxuICB9LFxufTtcbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/util/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3V0aWwvY29uc3RhbnRzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvdXRpbC9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUVsRixRQUFBLFNBQVMsR0FBRztJQUN2Qjs7OztPQUlHO0lBQ0gsYUFBYSxFQUFFLE9BQU87SUFFdEI7Ozs7O09BS0c7SUFDSCxJQUFJLEVBQUUsT0FBTztJQUViOzs7OztPQUtHO0lBQ0gsS0FBSyxFQUFFLFFBQVE7SUFFZjs7Ozs7T0FLRztJQUNILFVBQVUsRUFBRSxZQUFZO0lBRXhCOzs7OztPQUtHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7SUFFMUI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUVwQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBRXRCLGFBQWEsRUFBRTtRQUNiOzs7OztXQUtHO1FBQ0gsU0FBUyxFQUFFO1lBQ1QsR0FBRyxFQUFFLEtBQUs7WUFDVixHQUFHLEVBQUUsS0FBSztZQUNWLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLE9BQU87WUFDZCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxPQUFPO1NBQ2Y7UUFFRCxXQUFXLEVBQUU7WUFDWCxlQUFlLEVBQUUsR0FBRztTQUNyQjtLQUNGO0lBRUQ7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZjs7Ozs7V0FLRztRQUNILGFBQWEsRUFBRSxlQUFlO1FBRTlCLG9CQUFvQixFQUFFLFFBQVE7UUFFOUI7Ozs7Ozs7V0FPRztRQUNILFdBQVcsRUFBRSxhQUFhO1FBRTFCOzs7OztXQUtHO1FBQ0gsVUFBVSxFQUFFLFlBQVk7S0FDekI7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5leHBvcnQgY29uc3QgQ29uc3RhbnRzID0ge1xuICAvKipcbiAgICogVGhlIG1zLXJlc3QgdmVyc2lvblxuICAgKiBAY29uc3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIG1zUmVzdFZlcnNpb246IFwiMi42LjRcIixcblxuICAvKipcbiAgICogU3BlY2lmaWVzIEhUVFAuXG4gICAqXG4gICAqIEBjb25zdFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgSFRUUDogXCJodHRwOlwiLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgSFRUUFMuXG4gICAqXG4gICAqIEBjb25zdFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgSFRUUFM6IFwiaHR0cHM6XCIsXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBIVFRQIFByb3h5LlxuICAgKlxuICAgKiBAY29uc3RcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIEhUVFBfUFJPWFk6IFwiSFRUUF9QUk9YWVwiLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgSFRUUFMgUHJveHkuXG4gICAqXG4gICAqIEBjb25zdFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgSFRUUFNfUFJPWFk6IFwiSFRUUFNfUFJPWFlcIixcblxuICAvKipcbiAgICogU3BlY2lmaWVzIE5PIFByb3h5LlxuICAgKi9cbiAgTk9fUFJPWFk6IFwiTk9fUFJPWFlcIixcblxuICAvKipcbiAgICogU3BlY2lmaWVzIEFMTCBQcm94eS5cbiAgICovXG4gIEFMTF9QUk9YWTogXCJBTExfUFJPWFlcIixcblxuICBIdHRwQ29uc3RhbnRzOiB7XG4gICAgLyoqXG4gICAgICogSHR0cCBWZXJic1xuICAgICAqXG4gICAgICogQGNvbnN0XG4gICAgICogQGVudW0ge3N0cmluZ31cbiAgICAgKi9cbiAgICBIdHRwVmVyYnM6IHtcbiAgICAgIFBVVDogXCJQVVRcIixcbiAgICAgIEdFVDogXCJHRVRcIixcbiAgICAgIERFTEVURTogXCJERUxFVEVcIixcbiAgICAgIFBPU1Q6IFwiUE9TVFwiLFxuICAgICAgTUVSR0U6IFwiTUVSR0VcIixcbiAgICAgIEhFQUQ6IFwiSEVBRFwiLFxuICAgICAgUEFUQ0g6IFwiUEFUQ0hcIixcbiAgICB9LFxuXG4gICAgU3RhdHVzQ29kZXM6IHtcbiAgICAgIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICAgIH0sXG4gIH0sXG5cbiAgLyoqXG4gICAqIERlZmluZXMgY29uc3RhbnRzIGZvciB1c2Ugd2l0aCBIVFRQIGhlYWRlcnMuXG4gICAqL1xuICBIZWFkZXJDb25zdGFudHM6IHtcbiAgICAvKipcbiAgICAgKiBUaGUgQXV0aG9yaXphdGlvbiBoZWFkZXIuXG4gICAgICpcbiAgICAgKiBAY29uc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIEFVVEhPUklaQVRJT046IFwiYXV0aG9yaXphdGlvblwiLFxuXG4gICAgQVVUSE9SSVpBVElPTl9TQ0hFTUU6IFwiQmVhcmVyXCIsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgUmV0cnktQWZ0ZXIgcmVzcG9uc2UtaGVhZGVyIGZpZWxkIGNhbiBiZSB1c2VkIHdpdGggYSA1MDMgKFNlcnZpY2VcbiAgICAgKiBVbmF2YWlsYWJsZSkgb3IgMzQ5IChUb28gTWFueSBSZXF1ZXN0cykgcmVzcG9uc2VzIHRvIGluZGljYXRlIGhvdyBsb25nXG4gICAgICogdGhlIHNlcnZpY2UgaXMgZXhwZWN0ZWQgdG8gYmUgdW5hdmFpbGFibGUgdG8gdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqXG4gICAgICogQGNvbnN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBSRVRSWV9BRlRFUjogXCJSZXRyeS1BZnRlclwiLFxuXG4gICAgLyoqXG4gICAgICogVGhlIFVzZXJBZ2VudCBoZWFkZXIuXG4gICAgICpcbiAgICAgKiBAY29uc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIFVTRVJfQUdFTlQ6IFwiVXNlci1BZ2VudFwiLFxuICB9LFxufTtcbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/defaultHttpClient.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2RlZmF1bHRIdHRwQ2xpZW50LnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvZGVmYXVsdEh0dHBDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7O0FBRS9GLDZEQUFpRjtBQUF4RSx3SEFBQSxtQkFBbUIsT0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmV4cG9ydCB7IE5vZGVGZXRjaEh0dHBDbGllbnQgYXMgRGVmYXVsdEh0dHBDbGllbnQgfSBmcm9tIFwiLi9ub2RlRmV0Y2hIdHRwQ2xpZW50XCI7XG4iXX0=
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2RlZmF1bHRIdHRwQ2xpZW50LnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvZGVmYXVsdEh0dHBDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7O0FBRS9GLDZEQUFpRjtBQUF4RSx3SEFBQSxtQkFBbUIsT0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmV4cG9ydCB7IE5vZGVGZXRjaEh0dHBDbGllbnQgYXMgRGVmYXVsdEh0dHBDbGllbnQgfSBmcm9tIFwiLi9ub2RlRmV0Y2hIdHRwQ2xpZW50XCI7XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/nodeFetchHttpClient.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL25vZGVGZXRjaEh0dHBDbGllbnQudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9ub2RlRmV0Y2hIdHRwQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRS9GLDBEQUFzQztBQUN0QyxpREFBNkI7QUFDN0IsbURBQStCO0FBQy9CLGtFQUFvQztBQUVwQyxxREFLMkI7QUFHM0IsMkNBQTREO0FBRTVEO0lBQXlDLCtDQUFlO0lBQXhEO1FBQUEscUVBNEVDO1FBM0VrQixlQUFTLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDOztJQTJFbkYsQ0FBQztJQXpFTyxtQ0FBSyxHQUFYLFVBQVksS0FBd0IsRUFBRSxJQUF3Qjs7O2dCQUM1RCxzQkFBUSxvQkFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQXdDLEVBQUM7OztLQUN4RTtJQUVLLDRDQUFjLEdBQXBCLFVBQXFCLFdBQTRCOzs7Ozs7O3dCQUN6QyxXQUFXLEdBQTJDLEVBQUUsQ0FBQzs2QkFFM0QsQ0FBQSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUEsRUFBcEQsd0JBQW9EO3dCQUNqQyxxQkFBTSxJQUFJLE9BQU8sQ0FBUyxVQUFDLE9BQU8sRUFBRSxNQUFNO2dDQUM3RCxLQUFJLENBQUMsU0FBVSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFVBQUMsR0FBRyxFQUFFLE1BQU07b0NBQzNELElBQUksR0FBRyxFQUFFO3dDQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztxQ0FDYjt5Q0FBTTt3Q0FDTCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7cUNBQ2pCO2dDQUNILENBQUMsQ0FBQyxDQUFDOzRCQUNMLENBQUMsQ0FBQyxFQUFBOzt3QkFSSSxZQUFZLEdBQUcsU0FRbkI7d0JBRUYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDOzs7d0JBR2xELElBQUksV0FBVyxDQUFDLGFBQWEsRUFBRTs0QkFDdkIsS0FBeUMsV0FBVyxDQUFDLGFBQWEsRUFBMUQsU0FBUyxVQUFBLEVBQVMsVUFBVSxXQUFBLENBQStCOzRCQUN6RSxJQUFJLFVBQVUsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQ0FDckQsV0FBVyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7NkJBQ2hDO2lDQUFNLElBQUksU0FBUyxFQUFFO2dDQUNwQixXQUFXLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQzs2QkFDL0I7eUJBQ0Y7NkJBQU0sSUFBSSxXQUFXLENBQUMsYUFBYSxFQUFFOzRCQUM5QixNQUFNLEdBQWUsNkJBQWdCLENBQ3pDLFdBQVcsQ0FBQyxHQUFHLEVBQ2YsV0FBVyxDQUFDLGFBQWEsRUFDekIsV0FBVyxDQUFDLE9BQU8sQ0FDcEIsQ0FBQzs0QkFDRixXQUFXLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7eUJBQ2xDO3dCQUVELElBQUksV0FBVyxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7NEJBQ2xDLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRTtnQ0FDckIsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDOzZCQUNwQztpQ0FBTTtnQ0FDQyxPQUFPLEdBQTJDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDO2dDQUN0RSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO29DQUMvQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztvQ0FDMUIsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztnQ0FDNUIsV0FBVyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7NkJBQzNCO3lCQUNGO3dCQUVELHNCQUFPLFdBQVcsRUFBQzs7OztLQUNwQjtJQUVLLDRDQUFjLEdBQXBCLFVBQXFCLGlCQUF3Qzs7Ozs7Ozs2QkFDdkQsSUFBSSxDQUFDLFNBQVMsRUFBZCx3QkFBYzt3QkFDVixvQkFBa0IsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQzs2QkFDaEUsQ0FBQSxpQkFBZSxJQUFJLFNBQVMsQ0FBQSxFQUE1Qix3QkFBNEI7d0JBQzlCLHFCQUFNLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07Z0NBQ2hDLEtBQUksQ0FBQyxTQUFVLENBQUMsU0FBUyxDQUN2QixpQkFBZSxFQUNmLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQzdCLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxFQUNyQixVQUFDLEdBQUc7b0NBQ0YsSUFBSSxHQUFHLEVBQUU7d0NBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FDQUNiO3lDQUFNO3dDQUNMLE9BQU8sRUFBRSxDQUFDO3FDQUNYO2dDQUNILENBQUMsQ0FDRixDQUFDOzRCQUNKLENBQUMsQ0FBQyxFQUFBOzt3QkFiRixTQWFFLENBQUM7Ozs7OztLQUdSO0lBQ0gsMEJBQUM7QUFBRCxDQUFDLEFBNUVELENBQXlDLGlDQUFlLEdBNEV2RDtBQTVFWSxrREFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCAqIGFzIHRvdWdoIGZyb20gXCJ0b3VnaC1jb29raWVcIjtcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSBcImh0dHBcIjtcbmltcG9ydCAqIGFzIGh0dHBzIGZyb20gXCJodHRwc1wiO1xuaW1wb3J0IG5vZGVfZmV0Y2ggZnJvbSBcIm5vZGUtZmV0Y2hcIjtcblxuaW1wb3J0IHtcbiAgQ29tbW9uUmVxdWVzdEluZm8sXG4gIENvbW1vblJlcXVlc3RJbml0LFxuICBDb21tb25SZXNwb25zZSxcbiAgRmV0Y2hIdHRwQ2xpZW50LFxufSBmcm9tIFwiLi9mZXRjaEh0dHBDbGllbnRcIjtcbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuL2h0dHBPcGVyYXRpb25SZXNwb25zZVwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4vd2ViUmVzb3VyY2VcIjtcbmltcG9ydCB7IGNyZWF0ZVByb3h5QWdlbnQsIFByb3h5QWdlbnQgfSBmcm9tIFwiLi9wcm94eUFnZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBOb2RlRmV0Y2hIdHRwQ2xpZW50IGV4dGVuZHMgRmV0Y2hIdHRwQ2xpZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjb29raWVKYXIgPSBuZXcgdG91Z2guQ29va2llSmFyKHVuZGVmaW5lZCwgeyBsb29zZU1vZGU6IHRydWUgfSk7XG5cbiAgYXN5bmMgZmV0Y2goaW5wdXQ6IENvbW1vblJlcXVlc3RJbmZvLCBpbml0PzogQ29tbW9uUmVxdWVzdEluaXQpOiBQcm9taXNlPENvbW1vblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIChub2RlX2ZldGNoKGlucHV0LCBpbml0KSBhcyB1bmtub3duKSBhcyBQcm9taXNlPENvbW1vblJlc3BvbnNlPjtcbiAgfVxuXG4gIGFzeW5jIHByZXBhcmVSZXF1ZXN0KGh0dHBSZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UpOiBQcm9taXNlPFBhcnRpYWw8UmVxdWVzdEluaXQ+PiB7XG4gICAgY29uc3QgcmVxdWVzdEluaXQ6IFBhcnRpYWw8UmVxdWVzdEluaXQgJiB7IGFnZW50PzogYW55IH0+ID0ge307XG5cbiAgICBpZiAodGhpcy5jb29raWVKYXIgJiYgIWh0dHBSZXF1ZXN0LmhlYWRlcnMuZ2V0KFwiQ29va2llXCIpKSB7XG4gICAgICBjb25zdCBjb29raWVTdHJpbmcgPSBhd2FpdCBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5jb29raWVKYXIhLmdldENvb2tpZVN0cmluZyhodHRwUmVxdWVzdC51cmwsIChlcnIsIGNvb2tpZSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGNvb2tpZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBodHRwUmVxdWVzdC5oZWFkZXJzLnNldChcIkNvb2tpZVwiLCBjb29raWVTdHJpbmcpO1xuICAgIH1cblxuICAgIGlmIChodHRwUmVxdWVzdC5hZ2VudFNldHRpbmdzKSB7XG4gICAgICBjb25zdCB7IGh0dHA6IGh0dHBBZ2VudCwgaHR0cHM6IGh0dHBzQWdlbnQgfSA9IGh0dHBSZXF1ZXN0LmFnZW50U2V0dGluZ3M7XG4gICAgICBpZiAoaHR0cHNBZ2VudCAmJiBodHRwUmVxdWVzdC51cmwuc3RhcnRzV2l0aChcImh0dHBzXCIpKSB7XG4gICAgICAgIHJlcXVlc3RJbml0LmFnZW50ID0gaHR0cHNBZ2VudDtcbiAgICAgIH0gZWxzZSBpZiAoaHR0cEFnZW50KSB7XG4gICAgICAgIHJlcXVlc3RJbml0LmFnZW50ID0gaHR0cEFnZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaHR0cFJlcXVlc3QucHJveHlTZXR0aW5ncykge1xuICAgICAgY29uc3QgdHVubmVsOiBQcm94eUFnZW50ID0gY3JlYXRlUHJveHlBZ2VudChcbiAgICAgICAgaHR0cFJlcXVlc3QudXJsLFxuICAgICAgICBodHRwUmVxdWVzdC5wcm94eVNldHRpbmdzLFxuICAgICAgICBodHRwUmVxdWVzdC5oZWFkZXJzXG4gICAgICApO1xuICAgICAgcmVxdWVzdEluaXQuYWdlbnQgPSB0dW5uZWwuYWdlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGh0dHBSZXF1ZXN0LmtlZXBBbGl2ZSA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKHJlcXVlc3RJbml0LmFnZW50KSB7XG4gICAgICAgIHJlcXVlc3RJbml0LmFnZW50LmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBvcHRpb25zOiBodHRwLkFnZW50T3B0aW9ucyB8IGh0dHBzLkFnZW50T3B0aW9ucyA9IHsga2VlcEFsaXZlOiB0cnVlIH07XG4gICAgICAgIGNvbnN0IGFnZW50ID0gaHR0cFJlcXVlc3QudXJsLnN0YXJ0c1dpdGgoXCJodHRwc1wiKVxuICAgICAgICAgID8gbmV3IGh0dHBzLkFnZW50KG9wdGlvbnMpXG4gICAgICAgICAgOiBuZXcgaHR0cC5BZ2VudChvcHRpb25zKTtcbiAgICAgICAgcmVxdWVzdEluaXQuYWdlbnQgPSBhZ2VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWVzdEluaXQ7XG4gIH1cblxuICBhc3luYyBwcm9jZXNzUmVxdWVzdChvcGVyYXRpb25SZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuY29va2llSmFyKSB7XG4gICAgICBjb25zdCBzZXRDb29raWVIZWFkZXIgPSBvcGVyYXRpb25SZXNwb25zZS5oZWFkZXJzLmdldChcIlNldC1Db29raWVcIik7XG4gICAgICBpZiAoc2V0Q29va2llSGVhZGVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgdGhpcy5jb29raWVKYXIhLnNldENvb2tpZShcbiAgICAgICAgICAgIHNldENvb2tpZUhlYWRlcixcbiAgICAgICAgICAgIG9wZXJhdGlvblJlc3BvbnNlLnJlcXVlc3QudXJsLFxuICAgICAgICAgICAgeyBpZ25vcmVFcnJvcjogdHJ1ZSB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL25vZGVGZXRjaEh0dHBDbGllbnQudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9ub2RlRmV0Y2hIdHRwQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRS9GLDBEQUFzQztBQUN0QyxpREFBNkI7QUFDN0IsbURBQStCO0FBQy9CLGtFQUFvQztBQUVwQyxxREFLMkI7QUFHM0IsMkNBQTREO0FBRTVEO0lBQXlDLCtDQUFlO0lBQXhEO1FBQUEscUVBNEVDO1FBM0VrQixlQUFTLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDOztJQTJFbkYsQ0FBQztJQXpFTyxtQ0FBSyxHQUFYLFVBQVksS0FBd0IsRUFBRSxJQUF3Qjs7O2dCQUM1RCxzQkFBUSxvQkFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQXdDLEVBQUM7OztLQUN4RTtJQUVLLDRDQUFjLEdBQXBCLFVBQXFCLFdBQTRCOzs7Ozs7O3dCQUN6QyxXQUFXLEdBQTJDLEVBQUUsQ0FBQzs2QkFFM0QsQ0FBQSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUEsRUFBcEQsd0JBQW9EO3dCQUNqQyxxQkFBTSxJQUFJLE9BQU8sQ0FBUyxVQUFDLE9BQU8sRUFBRSxNQUFNO2dDQUM3RCxLQUFJLENBQUMsU0FBVSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFVBQUMsR0FBRyxFQUFFLE1BQU07b0NBQzNELElBQUksR0FBRyxFQUFFO3dDQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztxQ0FDYjt5Q0FBTTt3Q0FDTCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7cUNBQ2pCO2dDQUNILENBQUMsQ0FBQyxDQUFDOzRCQUNMLENBQUMsQ0FBQyxFQUFBOzt3QkFSSSxZQUFZLEdBQUcsU0FRbkI7d0JBRUYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDOzs7d0JBR2xELElBQUksV0FBVyxDQUFDLGFBQWEsRUFBRTs0QkFDdkIsS0FBeUMsV0FBVyxDQUFDLGFBQWEsRUFBMUQsU0FBUyxVQUFBLEVBQVMsVUFBVSxXQUFBLENBQStCOzRCQUN6RSxJQUFJLFVBQVUsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQ0FDckQsV0FBVyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7NkJBQ2hDO2lDQUFNLElBQUksU0FBUyxFQUFFO2dDQUNwQixXQUFXLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQzs2QkFDL0I7eUJBQ0Y7NkJBQU0sSUFBSSxXQUFXLENBQUMsYUFBYSxFQUFFOzRCQUM5QixNQUFNLEdBQWUsNkJBQWdCLENBQ3pDLFdBQVcsQ0FBQyxHQUFHLEVBQ2YsV0FBVyxDQUFDLGFBQWEsRUFDekIsV0FBVyxDQUFDLE9BQU8sQ0FDcEIsQ0FBQzs0QkFDRixXQUFXLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7eUJBQ2xDO3dCQUVELElBQUksV0FBVyxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7NEJBQ2xDLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRTtnQ0FDckIsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDOzZCQUNwQztpQ0FBTTtnQ0FDQyxPQUFPLEdBQTJDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDO2dDQUN0RSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO29DQUMvQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztvQ0FDMUIsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztnQ0FDNUIsV0FBVyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7NkJBQzNCO3lCQUNGO3dCQUVELHNCQUFPLFdBQVcsRUFBQzs7OztLQUNwQjtJQUVLLDRDQUFjLEdBQXBCLFVBQXFCLGlCQUF3Qzs7Ozs7Ozs2QkFDdkQsSUFBSSxDQUFDLFNBQVMsRUFBZCx3QkFBYzt3QkFDVixvQkFBa0IsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQzs2QkFDaEUsQ0FBQSxpQkFBZSxJQUFJLFNBQVMsQ0FBQSxFQUE1Qix3QkFBNEI7d0JBQzlCLHFCQUFNLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07Z0NBQ2hDLEtBQUksQ0FBQyxTQUFVLENBQUMsU0FBUyxDQUN2QixpQkFBZSxFQUNmLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQzdCLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxFQUNyQixVQUFDLEdBQUc7b0NBQ0YsSUFBSSxHQUFHLEVBQUU7d0NBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FDQUNiO3lDQUFNO3dDQUNMLE9BQU8sRUFBRSxDQUFDO3FDQUNYO2dDQUNILENBQUMsQ0FDRixDQUFDOzRCQUNKLENBQUMsQ0FBQyxFQUFBOzt3QkFiRixTQWFFLENBQUM7Ozs7OztLQUdSO0lBQ0gsMEJBQUM7QUFBRCxDQUFDLEFBNUVELENBQXlDLGlDQUFlLEdBNEV2RDtBQTVFWSxrREFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCAqIGFzIHRvdWdoIGZyb20gXCJ0b3VnaC1jb29raWVcIjtcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSBcImh0dHBcIjtcbmltcG9ydCAqIGFzIGh0dHBzIGZyb20gXCJodHRwc1wiO1xuaW1wb3J0IG5vZGVfZmV0Y2ggZnJvbSBcIm5vZGUtZmV0Y2hcIjtcblxuaW1wb3J0IHtcbiAgQ29tbW9uUmVxdWVzdEluZm8sXG4gIENvbW1vblJlcXVlc3RJbml0LFxuICBDb21tb25SZXNwb25zZSxcbiAgRmV0Y2hIdHRwQ2xpZW50LFxufSBmcm9tIFwiLi9mZXRjaEh0dHBDbGllbnRcIjtcbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuL2h0dHBPcGVyYXRpb25SZXNwb25zZVwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4vd2ViUmVzb3VyY2VcIjtcbmltcG9ydCB7IGNyZWF0ZVByb3h5QWdlbnQsIFByb3h5QWdlbnQgfSBmcm9tIFwiLi9wcm94eUFnZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBOb2RlRmV0Y2hIdHRwQ2xpZW50IGV4dGVuZHMgRmV0Y2hIdHRwQ2xpZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjb29raWVKYXIgPSBuZXcgdG91Z2guQ29va2llSmFyKHVuZGVmaW5lZCwgeyBsb29zZU1vZGU6IHRydWUgfSk7XG5cbiAgYXN5bmMgZmV0Y2goaW5wdXQ6IENvbW1vblJlcXVlc3RJbmZvLCBpbml0PzogQ29tbW9uUmVxdWVzdEluaXQpOiBQcm9taXNlPENvbW1vblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIChub2RlX2ZldGNoKGlucHV0LCBpbml0KSBhcyB1bmtub3duKSBhcyBQcm9taXNlPENvbW1vblJlc3BvbnNlPjtcbiAgfVxuXG4gIGFzeW5jIHByZXBhcmVSZXF1ZXN0KGh0dHBSZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UpOiBQcm9taXNlPFBhcnRpYWw8UmVxdWVzdEluaXQ+PiB7XG4gICAgY29uc3QgcmVxdWVzdEluaXQ6IFBhcnRpYWw8UmVxdWVzdEluaXQgJiB7IGFnZW50PzogYW55IH0+ID0ge307XG5cbiAgICBpZiAodGhpcy5jb29raWVKYXIgJiYgIWh0dHBSZXF1ZXN0LmhlYWRlcnMuZ2V0KFwiQ29va2llXCIpKSB7XG4gICAgICBjb25zdCBjb29raWVTdHJpbmcgPSBhd2FpdCBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5jb29raWVKYXIhLmdldENvb2tpZVN0cmluZyhodHRwUmVxdWVzdC51cmwsIChlcnIsIGNvb2tpZSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGNvb2tpZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBodHRwUmVxdWVzdC5oZWFkZXJzLnNldChcIkNvb2tpZVwiLCBjb29raWVTdHJpbmcpO1xuICAgIH1cblxuICAgIGlmIChodHRwUmVxdWVzdC5hZ2VudFNldHRpbmdzKSB7XG4gICAgICBjb25zdCB7IGh0dHA6IGh0dHBBZ2VudCwgaHR0cHM6IGh0dHBzQWdlbnQgfSA9IGh0dHBSZXF1ZXN0LmFnZW50U2V0dGluZ3M7XG4gICAgICBpZiAoaHR0cHNBZ2VudCAmJiBodHRwUmVxdWVzdC51cmwuc3RhcnRzV2l0aChcImh0dHBzXCIpKSB7XG4gICAgICAgIHJlcXVlc3RJbml0LmFnZW50ID0gaHR0cHNBZ2VudDtcbiAgICAgIH0gZWxzZSBpZiAoaHR0cEFnZW50KSB7XG4gICAgICAgIHJlcXVlc3RJbml0LmFnZW50ID0gaHR0cEFnZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaHR0cFJlcXVlc3QucHJveHlTZXR0aW5ncykge1xuICAgICAgY29uc3QgdHVubmVsOiBQcm94eUFnZW50ID0gY3JlYXRlUHJveHlBZ2VudChcbiAgICAgICAgaHR0cFJlcXVlc3QudXJsLFxuICAgICAgICBodHRwUmVxdWVzdC5wcm94eVNldHRpbmdzLFxuICAgICAgICBodHRwUmVxdWVzdC5oZWFkZXJzXG4gICAgICApO1xuICAgICAgcmVxdWVzdEluaXQuYWdlbnQgPSB0dW5uZWwuYWdlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGh0dHBSZXF1ZXN0LmtlZXBBbGl2ZSA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKHJlcXVlc3RJbml0LmFnZW50KSB7XG4gICAgICAgIHJlcXVlc3RJbml0LmFnZW50LmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBvcHRpb25zOiBodHRwLkFnZW50T3B0aW9ucyB8IGh0dHBzLkFnZW50T3B0aW9ucyA9IHsga2VlcEFsaXZlOiB0cnVlIH07XG4gICAgICAgIGNvbnN0IGFnZW50ID0gaHR0cFJlcXVlc3QudXJsLnN0YXJ0c1dpdGgoXCJodHRwc1wiKVxuICAgICAgICAgID8gbmV3IGh0dHBzLkFnZW50KG9wdGlvbnMpXG4gICAgICAgICAgOiBuZXcgaHR0cC5BZ2VudChvcHRpb25zKTtcbiAgICAgICAgcmVxdWVzdEluaXQuYWdlbnQgPSBhZ2VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWVzdEluaXQ7XG4gIH1cblxuICBhc3luYyBwcm9jZXNzUmVxdWVzdChvcGVyYXRpb25SZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuY29va2llSmFyKSB7XG4gICAgICBjb25zdCBzZXRDb29raWVIZWFkZXIgPSBvcGVyYXRpb25SZXNwb25zZS5oZWFkZXJzLmdldChcIlNldC1Db29raWVcIik7XG4gICAgICBpZiAoc2V0Q29va2llSGVhZGVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgdGhpcy5jb29raWVKYXIhLnNldENvb2tpZShcbiAgICAgICAgICAgIHNldENvb2tpZUhlYWRlcixcbiAgICAgICAgICAgIG9wZXJhdGlvblJlc3BvbnNlLnJlcXVlc3QudXJsLFxuICAgICAgICAgICAgeyBpZ25vcmVFcnJvcjogdHJ1ZSB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/fetchHttpClient.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/restError.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3Jlc3RFcnJvci50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3Jlc3RFcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUsvRjtJQUErQixxQ0FBSztJQVVsQyxtQkFDRSxPQUFlLEVBQ2YsSUFBYSxFQUNiLFVBQW1CLEVBQ25CLE9BQXlCLEVBQ3pCLFFBQWdDLEVBQ2hDLElBQVU7UUFOWixZQVFFLGtCQUFNLE9BQU8sQ0FBQyxTQVFmO1FBUEMsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsS0FBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFJLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztJQUNuRCxDQUFDO0lBekJlLDRCQUFrQixHQUFXLG9CQUFvQixDQUFDO0lBQ2xELCtCQUFxQixHQUFXLHVCQUF1QixDQUFDO0lBQ3hELHFCQUFXLEdBQVcsYUFBYSxDQUFDO0lBd0J0RCxnQkFBQztDQUFBLEFBM0JELENBQStCLEtBQUssR0EyQm5DO0FBM0JZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgfSBmcm9tIFwiLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuL3dlYlJlc291cmNlXCI7XG5cbmV4cG9ydCBjbGFzcyBSZXN0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIHN0YXRpYyByZWFkb25seSBSRVFVRVNUX1NFTkRfRVJST1I6IHN0cmluZyA9IFwiUkVRVUVTVF9TRU5EX0VSUk9SXCI7XG4gIHN0YXRpYyByZWFkb25seSBSRVFVRVNUX0FCT1JURURfRVJST1I6IHN0cmluZyA9IFwiUkVRVUVTVF9BQk9SVEVEX0VSUk9SXCI7XG4gIHN0YXRpYyByZWFkb25seSBQQVJTRV9FUlJPUjogc3RyaW5nID0gXCJQQVJTRV9FUlJPUlwiO1xuXG4gIGNvZGU/OiBzdHJpbmc7XG4gIHN0YXR1c0NvZGU/OiBudW1iZXI7XG4gIHJlcXVlc3Q/OiBXZWJSZXNvdXJjZUxpa2U7XG4gIHJlc3BvbnNlPzogSHR0cE9wZXJhdGlvblJlc3BvbnNlO1xuICBib2R5PzogYW55O1xuICBjb25zdHJ1Y3RvcihcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgY29kZT86IHN0cmluZyxcbiAgICBzdGF0dXNDb2RlPzogbnVtYmVyLFxuICAgIHJlcXVlc3Q/OiBXZWJSZXNvdXJjZUxpa2UsXG4gICAgcmVzcG9uc2U/OiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UsXG4gICAgYm9keT86IGFueVxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcblxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXN0RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuIl19
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3Jlc3RFcnJvci50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3Jlc3RFcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUsvRjtJQUErQixxQ0FBSztJQVVsQyxtQkFDRSxPQUFlLEVBQ2YsSUFBYSxFQUNiLFVBQW1CLEVBQ25CLE9BQXlCLEVBQ3pCLFFBQWdDLEVBQ2hDLElBQVU7UUFOWixZQVFFLGtCQUFNLE9BQU8sQ0FBQyxTQVFmO1FBUEMsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsS0FBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFJLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztJQUNuRCxDQUFDO0lBekJlLDRCQUFrQixHQUFXLG9CQUFvQixDQUFDO0lBQ2xELCtCQUFxQixHQUFXLHVCQUF1QixDQUFDO0lBQ3hELHFCQUFXLEdBQVcsYUFBYSxDQUFDO0lBd0J0RCxnQkFBQztDQUFBLEFBM0JELENBQStCLEtBQUssR0EyQm5DO0FBM0JZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgfSBmcm9tIFwiLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuL3dlYlJlc291cmNlXCI7XG5cbmV4cG9ydCBjbGFzcyBSZXN0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIHN0YXRpYyByZWFkb25seSBSRVFVRVNUX1NFTkRfRVJST1I6IHN0cmluZyA9IFwiUkVRVUVTVF9TRU5EX0VSUk9SXCI7XG4gIHN0YXRpYyByZWFkb25seSBSRVFVRVNUX0FCT1JURURfRVJST1I6IHN0cmluZyA9IFwiUkVRVUVTVF9BQk9SVEVEX0VSUk9SXCI7XG4gIHN0YXRpYyByZWFkb25seSBQQVJTRV9FUlJPUjogc3RyaW5nID0gXCJQQVJTRV9FUlJPUlwiO1xuXG4gIGNvZGU/OiBzdHJpbmc7XG4gIHN0YXR1c0NvZGU/OiBudW1iZXI7XG4gIHJlcXVlc3Q/OiBXZWJSZXNvdXJjZUxpa2U7XG4gIHJlc3BvbnNlPzogSHR0cE9wZXJhdGlvblJlc3BvbnNlO1xuICBib2R5PzogYW55O1xuICBjb25zdHJ1Y3RvcihcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgY29kZT86IHN0cmluZyxcbiAgICBzdGF0dXNDb2RlPzogbnVtYmVyLFxuICAgIHJlcXVlc3Q/OiBXZWJSZXNvdXJjZUxpa2UsXG4gICAgcmVzcG9uc2U/OiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UsXG4gICAgYm9keT86IGFueVxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcblxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXN0RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/proxyAgent.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3Byb3h5QWdlbnQudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9wcm94eUFnZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBSS9GLHFEQUFpQztBQUdqQyw2QkFBbUM7QUFJbkMsU0FBZ0IsZ0JBQWdCLENBQzlCLFVBQWtCLEVBQ2xCLGFBQTRCLEVBQzVCLE9BQXlCO0lBRXpCLElBQU0sYUFBYSxHQUFpQztRQUNsRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsZ0JBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBWTtZQUM5RCxJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUk7WUFDeEIsT0FBTyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUU7U0FDakQ7S0FDRixDQUFDO0lBRUYsSUFBSSxhQUFhLENBQUMsUUFBUSxJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUU7UUFDcEQsYUFBYSxDQUFDLEtBQU0sQ0FBQyxTQUFTLEdBQU0sYUFBYSxDQUFDLFFBQVEsU0FBSSxhQUFhLENBQUMsUUFBVSxDQUFDO0tBQ3hGO1NBQU0sSUFBSSxhQUFhLENBQUMsUUFBUSxFQUFFO1FBQ2pDLGFBQWEsQ0FBQyxLQUFNLENBQUMsU0FBUyxHQUFHLEtBQUcsYUFBYSxDQUFDLFFBQVUsQ0FBQztLQUM5RDtJQUVELElBQU0sYUFBYSxHQUFHLGdCQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNyRSxJQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxDQUFDO0lBQy9ELElBQU0sV0FBVyxHQUFHLGdCQUFVLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDM0UsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFLLE9BQU8sQ0FBQztJQUUzRCxJQUFNLFVBQVUsR0FBRztRQUNqQixPQUFPLEVBQUUsY0FBYztRQUN2QixLQUFLLEVBQUUsWUFBWSxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDO0tBQ2pFLENBQUM7SUFFRixPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBOUJELDRDQThCQztBQXdCRCxTQUFnQixZQUFZLENBQzFCLGNBQXVCLEVBQ3ZCLFlBQXFCLEVBQ3JCLGFBQW9DO0lBRXBDLElBQUksY0FBYyxJQUFJLFlBQVksRUFBRTtRQUNsQyxPQUFPLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDN0M7U0FBTSxJQUFJLGNBQWMsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUMxQyxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDNUM7U0FBTSxJQUFJLENBQUMsY0FBYyxJQUFJLFlBQVksRUFBRTtRQUMxQyxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDNUM7U0FBTTtRQUNMLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUMzQztBQUNILENBQUM7QUFkRCxvQ0FjQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0ICogYXMgaHR0cCBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0ICogYXMgaHR0cHMgZnJvbSBcImh0dHBzXCI7XG5pbXBvcnQgKiBhcyB0dW5uZWwgZnJvbSBcInR1bm5lbFwiO1xuXG5pbXBvcnQgeyBQcm94eVNldHRpbmdzIH0gZnJvbSBcIi4vc2VydmljZUNsaWVudFwiO1xuaW1wb3J0IHsgVVJMQnVpbGRlciB9IGZyb20gXCIuL3VybFwiO1xuaW1wb3J0IHsgSHR0cEhlYWRlcnNMaWtlIH0gZnJvbSBcIi4vaHR0cEhlYWRlcnNcIjtcblxuZXhwb3J0IHR5cGUgUHJveHlBZ2VudCA9IHsgaXNIdHRwczogYm9vbGVhbjsgYWdlbnQ6IGh0dHAuQWdlbnQgfCBodHRwcy5BZ2VudCB9O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3h5QWdlbnQoXG4gIHJlcXVlc3RVcmw6IHN0cmluZyxcbiAgcHJveHlTZXR0aW5nczogUHJveHlTZXR0aW5ncyxcbiAgaGVhZGVycz86IEh0dHBIZWFkZXJzTGlrZVxuKTogUHJveHlBZ2VudCB7XG4gIGNvbnN0IHR1bm5lbE9wdGlvbnM6IHR1bm5lbC5IdHRwc092ZXJIdHRwc09wdGlvbnMgPSB7XG4gICAgcHJveHk6IHtcbiAgICAgIGhvc3Q6IFVSTEJ1aWxkZXIucGFyc2UocHJveHlTZXR0aW5ncy5ob3N0KS5nZXRIb3N0KCkgYXMgc3RyaW5nLFxuICAgICAgcG9ydDogcHJveHlTZXR0aW5ncy5wb3J0LFxuICAgICAgaGVhZGVyczogKGhlYWRlcnMgJiYgaGVhZGVycy5yYXdIZWFkZXJzKCkpIHx8IHt9LFxuICAgIH0sXG4gIH07XG5cbiAgaWYgKHByb3h5U2V0dGluZ3MudXNlcm5hbWUgJiYgcHJveHlTZXR0aW5ncy5wYXNzd29yZCkge1xuICAgIHR1bm5lbE9wdGlvbnMucHJveHkhLnByb3h5QXV0aCA9IGAke3Byb3h5U2V0dGluZ3MudXNlcm5hbWV9OiR7cHJveHlTZXR0aW5ncy5wYXNzd29yZH1gO1xuICB9IGVsc2UgaWYgKHByb3h5U2V0dGluZ3MudXNlcm5hbWUpIHtcbiAgICB0dW5uZWxPcHRpb25zLnByb3h5IS5wcm94eUF1dGggPSBgJHtwcm94eVNldHRpbmdzLnVzZXJuYW1lfWA7XG4gIH1cblxuICBjb25zdCByZXF1ZXN0U2NoZW1lID0gVVJMQnVpbGRlci5wYXJzZShyZXF1ZXN0VXJsKS5nZXRTY2hlbWUoKSB8fCBcIlwiO1xuICBjb25zdCBpc1JlcXVlc3RIdHRwcyA9IHJlcXVlc3RTY2hlbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJodHRwc1wiO1xuICBjb25zdCBwcm94eVNjaGVtZSA9IFVSTEJ1aWxkZXIucGFyc2UocHJveHlTZXR0aW5ncy5ob3N0KS5nZXRTY2hlbWUoKSB8fCBcIlwiO1xuICBjb25zdCBpc1Byb3h5SHR0cHMgPSBwcm94eVNjaGVtZS50b0xvd2VyQ2FzZSgpID09PSBcImh0dHBzXCI7XG5cbiAgY29uc3QgcHJveHlBZ2VudCA9IHtcbiAgICBpc0h0dHBzOiBpc1JlcXVlc3RIdHRwcyxcbiAgICBhZ2VudDogY3JlYXRlVHVubmVsKGlzUmVxdWVzdEh0dHBzLCBpc1Byb3h5SHR0cHMsIHR1bm5lbE9wdGlvbnMpLFxuICB9O1xuXG4gIHJldHVybiBwcm94eUFnZW50O1xufVxuXG4vLyBEdXBsaWNhdGUgdHVubmVsLkh0dHBzT3Zlckh0dHBzT3B0aW9ucyB0byBhdm9pZCBleHBvcnRpbmcgY3JlYXRlVHVubmVsKCkgd2l0aCBkZXBlbmRlbmN5IG9uIEB0eXBlcy90dW5uZWxcbi8vIGNyZWF0ZUl1bm5lbCgpIGlzIG9ubHkgaW1wb3J0ZWQgYnkgdGVzdHMuXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBzUHJveHlPcHRpb25zIHtcbiAgaG9zdDogc3RyaW5nO1xuICBwb3J0OiBudW1iZXI7XG4gIGxvY2FsQWRkcmVzcz86IHN0cmluZztcbiAgcHJveHlBdXRoPzogc3RyaW5nO1xuICBoZWFkZXJzPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbiAgY2E/OiBCdWZmZXJbXTtcbiAgc2VydmVybmFtZT86IHN0cmluZztcbiAga2V5PzogQnVmZmVyO1xuICBjZXJ0PzogQnVmZmVyO1xufVxuXG5pbnRlcmZhY2UgSHR0cHNPdmVySHR0cHNPcHRpb25zIHtcbiAgbWF4U29ja2V0cz86IG51bWJlcjtcbiAgY2E/OiBCdWZmZXJbXTtcbiAga2V5PzogQnVmZmVyO1xuICBjZXJ0PzogQnVmZmVyO1xuICBwcm94eT86IEh0dHBzUHJveHlPcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHVubmVsKFxuICBpc1JlcXVlc3RIdHRwczogYm9vbGVhbixcbiAgaXNQcm94eUh0dHBzOiBib29sZWFuLFxuICB0dW5uZWxPcHRpb25zOiBIdHRwc092ZXJIdHRwc09wdGlvbnNcbik6IGh0dHAuQWdlbnQgfCBodHRwcy5BZ2VudCB7XG4gIGlmIChpc1JlcXVlc3RIdHRwcyAmJiBpc1Byb3h5SHR0cHMpIHtcbiAgICByZXR1cm4gdHVubmVsLmh0dHBzT3Zlckh0dHBzKHR1bm5lbE9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKGlzUmVxdWVzdEh0dHBzICYmICFpc1Byb3h5SHR0cHMpIHtcbiAgICByZXR1cm4gdHVubmVsLmh0dHBzT3Zlckh0dHAodHVubmVsT3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAoIWlzUmVxdWVzdEh0dHBzICYmIGlzUHJveHlIdHRwcykge1xuICAgIHJldHVybiB0dW5uZWwuaHR0cE92ZXJIdHRwcyh0dW5uZWxPcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHVubmVsLmh0dHBPdmVySHR0cCh0dW5uZWxPcHRpb25zKTtcbiAgfVxufVxuIl19
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3Byb3h5QWdlbnQudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9wcm94eUFnZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBSS9GLHFEQUFpQztBQUdqQyw2QkFBbUM7QUFJbkMsU0FBZ0IsZ0JBQWdCLENBQzlCLFVBQWtCLEVBQ2xCLGFBQTRCLEVBQzVCLE9BQXlCO0lBRXpCLElBQU0sYUFBYSxHQUFpQztRQUNsRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsZ0JBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBWTtZQUM5RCxJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUk7WUFDeEIsT0FBTyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUU7U0FDakQ7S0FDRixDQUFDO0lBRUYsSUFBSSxhQUFhLENBQUMsUUFBUSxJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUU7UUFDcEQsYUFBYSxDQUFDLEtBQU0sQ0FBQyxTQUFTLEdBQU0sYUFBYSxDQUFDLFFBQVEsU0FBSSxhQUFhLENBQUMsUUFBVSxDQUFDO0tBQ3hGO1NBQU0sSUFBSSxhQUFhLENBQUMsUUFBUSxFQUFFO1FBQ2pDLGFBQWEsQ0FBQyxLQUFNLENBQUMsU0FBUyxHQUFHLEtBQUcsYUFBYSxDQUFDLFFBQVUsQ0FBQztLQUM5RDtJQUVELElBQU0sYUFBYSxHQUFHLGdCQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNyRSxJQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxDQUFDO0lBQy9ELElBQU0sV0FBVyxHQUFHLGdCQUFVLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDM0UsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFLLE9BQU8sQ0FBQztJQUUzRCxJQUFNLFVBQVUsR0FBRztRQUNqQixPQUFPLEVBQUUsY0FBYztRQUN2QixLQUFLLEVBQUUsWUFBWSxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDO0tBQ2pFLENBQUM7SUFFRixPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBOUJELDRDQThCQztBQXdCRCxTQUFnQixZQUFZLENBQzFCLGNBQXVCLEVBQ3ZCLFlBQXFCLEVBQ3JCLGFBQW9DO0lBRXBDLElBQUksY0FBYyxJQUFJLFlBQVksRUFBRTtRQUNsQyxPQUFPLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDN0M7U0FBTSxJQUFJLGNBQWMsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUMxQyxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDNUM7U0FBTSxJQUFJLENBQUMsY0FBYyxJQUFJLFlBQVksRUFBRTtRQUMxQyxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDNUM7U0FBTTtRQUNMLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUMzQztBQUNILENBQUM7QUFkRCxvQ0FjQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0ICogYXMgaHR0cCBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0ICogYXMgaHR0cHMgZnJvbSBcImh0dHBzXCI7XG5pbXBvcnQgKiBhcyB0dW5uZWwgZnJvbSBcInR1bm5lbFwiO1xuXG5pbXBvcnQgeyBQcm94eVNldHRpbmdzIH0gZnJvbSBcIi4vc2VydmljZUNsaWVudFwiO1xuaW1wb3J0IHsgVVJMQnVpbGRlciB9IGZyb20gXCIuL3VybFwiO1xuaW1wb3J0IHsgSHR0cEhlYWRlcnNMaWtlIH0gZnJvbSBcIi4vaHR0cEhlYWRlcnNcIjtcblxuZXhwb3J0IHR5cGUgUHJveHlBZ2VudCA9IHsgaXNIdHRwczogYm9vbGVhbjsgYWdlbnQ6IGh0dHAuQWdlbnQgfCBodHRwcy5BZ2VudCB9O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3h5QWdlbnQoXG4gIHJlcXVlc3RVcmw6IHN0cmluZyxcbiAgcHJveHlTZXR0aW5nczogUHJveHlTZXR0aW5ncyxcbiAgaGVhZGVycz86IEh0dHBIZWFkZXJzTGlrZVxuKTogUHJveHlBZ2VudCB7XG4gIGNvbnN0IHR1bm5lbE9wdGlvbnM6IHR1bm5lbC5IdHRwc092ZXJIdHRwc09wdGlvbnMgPSB7XG4gICAgcHJveHk6IHtcbiAgICAgIGhvc3Q6IFVSTEJ1aWxkZXIucGFyc2UocHJveHlTZXR0aW5ncy5ob3N0KS5nZXRIb3N0KCkgYXMgc3RyaW5nLFxuICAgICAgcG9ydDogcHJveHlTZXR0aW5ncy5wb3J0LFxuICAgICAgaGVhZGVyczogKGhlYWRlcnMgJiYgaGVhZGVycy5yYXdIZWFkZXJzKCkpIHx8IHt9LFxuICAgIH0sXG4gIH07XG5cbiAgaWYgKHByb3h5U2V0dGluZ3MudXNlcm5hbWUgJiYgcHJveHlTZXR0aW5ncy5wYXNzd29yZCkge1xuICAgIHR1bm5lbE9wdGlvbnMucHJveHkhLnByb3h5QXV0aCA9IGAke3Byb3h5U2V0dGluZ3MudXNlcm5hbWV9OiR7cHJveHlTZXR0aW5ncy5wYXNzd29yZH1gO1xuICB9IGVsc2UgaWYgKHByb3h5U2V0dGluZ3MudXNlcm5hbWUpIHtcbiAgICB0dW5uZWxPcHRpb25zLnByb3h5IS5wcm94eUF1dGggPSBgJHtwcm94eVNldHRpbmdzLnVzZXJuYW1lfWA7XG4gIH1cblxuICBjb25zdCByZXF1ZXN0U2NoZW1lID0gVVJMQnVpbGRlci5wYXJzZShyZXF1ZXN0VXJsKS5nZXRTY2hlbWUoKSB8fCBcIlwiO1xuICBjb25zdCBpc1JlcXVlc3RIdHRwcyA9IHJlcXVlc3RTY2hlbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJodHRwc1wiO1xuICBjb25zdCBwcm94eVNjaGVtZSA9IFVSTEJ1aWxkZXIucGFyc2UocHJveHlTZXR0aW5ncy5ob3N0KS5nZXRTY2hlbWUoKSB8fCBcIlwiO1xuICBjb25zdCBpc1Byb3h5SHR0cHMgPSBwcm94eVNjaGVtZS50b0xvd2VyQ2FzZSgpID09PSBcImh0dHBzXCI7XG5cbiAgY29uc3QgcHJveHlBZ2VudCA9IHtcbiAgICBpc0h0dHBzOiBpc1JlcXVlc3RIdHRwcyxcbiAgICBhZ2VudDogY3JlYXRlVHVubmVsKGlzUmVxdWVzdEh0dHBzLCBpc1Byb3h5SHR0cHMsIHR1bm5lbE9wdGlvbnMpLFxuICB9O1xuXG4gIHJldHVybiBwcm94eUFnZW50O1xufVxuXG4vLyBEdXBsaWNhdGUgdHVubmVsLkh0dHBzT3Zlckh0dHBzT3B0aW9ucyB0byBhdm9pZCBleHBvcnRpbmcgY3JlYXRlVHVubmVsKCkgd2l0aCBkZXBlbmRlbmN5IG9uIEB0eXBlcy90dW5uZWxcbi8vIGNyZWF0ZUl1bm5lbCgpIGlzIG9ubHkgaW1wb3J0ZWQgYnkgdGVzdHMuXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBzUHJveHlPcHRpb25zIHtcbiAgaG9zdDogc3RyaW5nO1xuICBwb3J0OiBudW1iZXI7XG4gIGxvY2FsQWRkcmVzcz86IHN0cmluZztcbiAgcHJveHlBdXRoPzogc3RyaW5nO1xuICBoZWFkZXJzPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbiAgY2E/OiBCdWZmZXJbXTtcbiAgc2VydmVybmFtZT86IHN0cmluZztcbiAga2V5PzogQnVmZmVyO1xuICBjZXJ0PzogQnVmZmVyO1xufVxuXG5pbnRlcmZhY2UgSHR0cHNPdmVySHR0cHNPcHRpb25zIHtcbiAgbWF4U29ja2V0cz86IG51bWJlcjtcbiAgY2E/OiBCdWZmZXJbXTtcbiAga2V5PzogQnVmZmVyO1xuICBjZXJ0PzogQnVmZmVyO1xuICBwcm94eT86IEh0dHBzUHJveHlPcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHVubmVsKFxuICBpc1JlcXVlc3RIdHRwczogYm9vbGVhbixcbiAgaXNQcm94eUh0dHBzOiBib29sZWFuLFxuICB0dW5uZWxPcHRpb25zOiBIdHRwc092ZXJIdHRwc09wdGlvbnNcbik6IGh0dHAuQWdlbnQgfCBodHRwcy5BZ2VudCB7XG4gIGlmIChpc1JlcXVlc3RIdHRwcyAmJiBpc1Byb3h5SHR0cHMpIHtcbiAgICByZXR1cm4gdHVubmVsLmh0dHBzT3Zlckh0dHBzKHR1bm5lbE9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKGlzUmVxdWVzdEh0dHBzICYmICFpc1Byb3h5SHR0cHMpIHtcbiAgICByZXR1cm4gdHVubmVsLmh0dHBzT3Zlckh0dHAodHVubmVsT3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAoIWlzUmVxdWVzdEh0dHBzICYmIGlzUHJveHlIdHRwcykge1xuICAgIHJldHVybiB0dW5uZWwuaHR0cE92ZXJIdHRwcyh0dW5uZWxPcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHVubmVsLmh0dHBPdmVySHR0cCh0dW5uZWxPcHRpb25zKTtcbiAgfVxufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/url.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/httpPipelineLogLevel.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2h0dHBQaXBlbGluZUxvZ0xldmVsLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvaHR0cFBpcGVsaW5lTG9nTGV2ZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRjs7R0FFRztBQUNILElBQVksb0JBb0JYO0FBcEJELFdBQVksb0JBQW9CO0lBQzlCOztPQUVHO0lBQ0gsNkRBQUcsQ0FBQTtJQUVIOztPQUVHO0lBQ0gsaUVBQUssQ0FBQTtJQUVMOztPQUVHO0lBQ0gscUVBQU8sQ0FBQTtJQUVQOztPQUVHO0lBQ0gsK0RBQUksQ0FBQTtBQUNOLENBQUMsRUFwQlcsb0JBQW9CLEdBQXBCLDRCQUFvQixLQUFwQiw0QkFBb0IsUUFvQi9CIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG4vKipcbiAqIFRoZSBkaWZmZXJlbnQgbGV2ZWxzIG9mIGxvZ3MgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIHRoZSBIdHRwUGlwZWxpbmVMb2dnZXIuXG4gKi9cbmV4cG9ydCBlbnVtIEh0dHBQaXBlbGluZUxvZ0xldmVsIHtcbiAgLyoqXG4gICAqIEEgbG9nIGxldmVsIHRoYXQgaW5kaWNhdGVzIHRoYXQgbm8gbG9ncyB3aWxsIGJlIGxvZ2dlZC5cbiAgICovXG4gIE9GRixcblxuICAvKipcbiAgICogQW4gZXJyb3IgbG9nLlxuICAgKi9cbiAgRVJST1IsXG5cbiAgLyoqXG4gICAqIEEgd2FybmluZyBsb2cuXG4gICAqL1xuICBXQVJOSU5HLFxuXG4gIC8qKlxuICAgKiBBbiBpbmZvcm1hdGlvbiBsb2cuXG4gICAqL1xuICBJTkZPLFxufVxuIl19
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2h0dHBQaXBlbGluZUxvZ0xldmVsLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvaHR0cFBpcGVsaW5lTG9nTGV2ZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRjs7R0FFRztBQUNILElBQVksb0JBb0JYO0FBcEJELFdBQVksb0JBQW9CO0lBQzlCOztPQUVHO0lBQ0gsNkRBQUcsQ0FBQTtJQUVIOztPQUVHO0lBQ0gsaUVBQUssQ0FBQTtJQUVMOztPQUVHO0lBQ0gscUVBQU8sQ0FBQTtJQUVQOztPQUVHO0lBQ0gsK0RBQUksQ0FBQTtBQUNOLENBQUMsRUFwQlcsb0JBQW9CLEdBQXBCLDRCQUFvQixLQUFwQiw0QkFBb0IsUUFvQi9CIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG4vKipcbiAqIFRoZSBkaWZmZXJlbnQgbGV2ZWxzIG9mIGxvZ3MgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIHRoZSBIdHRwUGlwZWxpbmVMb2dnZXIuXG4gKi9cbmV4cG9ydCBlbnVtIEh0dHBQaXBlbGluZUxvZ0xldmVsIHtcbiAgLyoqXG4gICAqIEEgbG9nIGxldmVsIHRoYXQgaW5kaWNhdGVzIHRoYXQgbm8gbG9ncyB3aWxsIGJlIGxvZ2dlZC5cbiAgICovXG4gIE9GRixcblxuICAvKipcbiAgICogQW4gZXJyb3IgbG9nLlxuICAgKi9cbiAgRVJST1IsXG5cbiAgLyoqXG4gICAqIEEgd2FybmluZyBsb2cuXG4gICAqL1xuICBXQVJOSU5HLFxuXG4gIC8qKlxuICAgKiBBbiBpbmZvcm1hdGlvbiBsb2cuXG4gICAqL1xuICBJTkZPLFxufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/serviceClient.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3NlcnZpY2VDbGllbnQudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9zZXJ2aWNlQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRS9GLDhDQUFzRTtBQUV0RSx5REFBd0Q7QUFLeEQsMkRBSzhCO0FBQzlCLGlEQUFtRTtBQUNuRSwwRUFHMEM7QUFDMUMsNEVBQTJFO0FBQzNFLDBGQUF5RjtBQUN6Riw4REFJb0M7QUFDcEMsNERBQW9HO0FBQ3BHLDBEQUtrQztBQUNsQyx3RUFBdUU7QUFDdkUsMERBQXlEO0FBQ3pELDRFQUEyRTtBQUMzRSxpRUFBZ0U7QUFDaEUsMkNBQWlHO0FBQ2pHLDZCQUFtQztBQUNuQywwREFBc0M7QUFDdEMsa0NBQTBDO0FBQzFDLDZDQU11QjtBQUd2QixzREFBcUQ7QUFDckQsc0RBQThFO0FBQzlFLDBFQUF5RTtBQUV6RSx5R0FHMkQ7QUFxRzNEOzs7R0FHRztBQUNIO0lBMEJFOzs7OztPQUtHO0lBQ0gsdUJBQ0UsV0FBd0QsRUFDeEQsT0FBOEI7UUFFOUIsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU8sR0FBRyxFQUFFLENBQUM7U0FDZDtRQUVELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7U0FDaEM7UUFFRCxJQUFJLHdCQUE4RCxDQUFDO1FBQ25FLElBQUksNkJBQWlCLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDbEMsSUFBSSxLQUFLLEdBQXVCLFNBQVMsQ0FBQztZQUMxQyxJQUFJLENBQUEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLE9BQU8sS0FBSSxtRUFBNkIsQ0FBQyxRQUFRLENBQUMsT0FBTyxhQUFQ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SyxNQUFNO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUMzQztRQUNBLHlDQUF5QztRQUN6QyxPQUFPLG9CQUFvQix1Q0FDdEIsYUFBYSxLQUNoQixJQUFJLEVBQUUsU0FBUyxDQUFDLFVBQVUsSUFDMUIsQ0FBQztLQUNKO0lBRUQsT0FBTyxvQkFBb0IsdUNBQ3RCLGFBQWEsR0FDYixTQUFTLENBQUMsVUFBVSxFQUN2QixDQUFDO0FBQ0wsQ0FBQztBQXhFRCwwQ0F3RUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IFRva2VuQ3JlZGVudGlhbCwgaXNUb2tlbkNyZWRlbnRpYWwgfSBmcm9tIFwiQGF6dXJlL2NvcmUtYXV0aFwiO1xuaW1wb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvc2VydmljZUNsaWVudENyZWRlbnRpYWxzXCI7XG5pbXBvcnQgeyBEZWZhdWx0SHR0cENsaWVudCB9IGZyb20gXCIuL2RlZmF1bHRIdHRwQ2xpZW50XCI7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIi4vaHR0cENsaWVudFwiO1xuaW1wb3J0IHsgSHR0cE9wZXJhdGlvblJlc3BvbnNlLCBSZXN0UmVzcG9uc2UgfSBmcm9tIFwiLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IEh0dHBQaXBlbGluZUxvZ2dlciB9IGZyb20gXCIuL2h0dHBQaXBlbGluZUxvZ2dlclwiO1xuaW1wb3J0IHsgT3BlcmF0aW9uQXJndW1lbnRzIH0gZnJvbSBcIi4vb3BlcmF0aW9uQXJndW1lbnRzXCI7XG5pbXBvcnQge1xuICBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcixcbiAgZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXJQYXRoLFxuICBPcGVyYXRpb25QYXJhbWV0ZXIsXG4gIFBhcmFtZXRlclBhdGgsXG59IGZyb20gXCIuL29wZXJhdGlvblBhcmFtZXRlclwiO1xuaW1wb3J0IHsgaXNTdHJlYW1PcGVyYXRpb24sIE9wZXJhdGlvblNwZWMgfSBmcm9tIFwiLi9vcGVyYXRpb25TcGVjXCI7XG5pbXBvcnQge1xuICBkZXNlcmlhbGl6YXRpb25Qb2xpY3ksXG4gIERlc2VyaWFsaXphdGlvbkNvbnRlbnRUeXBlcyxcbn0gZnJvbSBcIi4vcG9saWNpZXMvZGVzZXJpYWxpemF0aW9uUG9saWN5XCI7XG5pbXBvcnQgeyBleHBvbmVudGlhbFJldHJ5UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvZXhwb25lbnRpYWxSZXRyeVBvbGljeVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVDbGllbnRSZXF1ZXN0SWRQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9nZW5lcmF0ZUNsaWVudFJlcXVlc3RJZFBvbGljeVwiO1xuaW1wb3J0IHtcbiAgdXNlckFnZW50UG9saWN5LFxuICBnZXREZWZhdWx0VXNlckFnZW50SGVhZGVyTmFtZSxcbiAgZ2V0RGVmYXVsdFVzZXJBZ2VudFZhbHVlLFxufSBmcm9tIFwiLi9wb2xpY2llcy91c2VyQWdlbnRQb2xpY3lcIjtcbmltcG9ydCB7IERlZmF1bHRSZWRpcmVjdE9wdGlvbnMsIFJlZGlyZWN0T3B0aW9ucywgcmVkaXJlY3RQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9yZWRpcmVjdFBvbGljeVwiO1xuaW1wb3J0IHtcbiAgUmVxdWVzdFBvbGljeSxcbiAgUmVxdWVzdFBvbGljeUZhY3RvcnksXG4gIFJlcXVlc3RQb2xpY3lPcHRpb25zLFxuICBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG59IGZyb20gXCIuL3BvbGljaWVzL3JlcXVlc3RQb2xpY3lcIjtcbmltcG9ydCB7IHJwUmVnaXN0cmF0aW9uUG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvcnBSZWdpc3RyYXRpb25Qb2xpY3lcIjtcbmltcG9ydCB7IHNpZ25pbmdQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9zaWduaW5nUG9saWN5XCI7XG5pbXBvcnQgeyBzeXN0ZW1FcnJvclJldHJ5UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvc3lzdGVtRXJyb3JSZXRyeVBvbGljeVwiO1xuaW1wb3J0IHsgUXVlcnlDb2xsZWN0aW9uRm9ybWF0IH0gZnJvbSBcIi4vcXVlcnlDb2xsZWN0aW9uRm9ybWF0XCI7XG5pbXBvcnQgeyBDb21wb3NpdGVNYXBwZXIsIERpY3Rpb25hcnlNYXBwZXIsIE1hcHBlciwgTWFwcGVyVHlwZSwgU2VyaWFsaXplciB9IGZyb20gXCIuL3NlcmlhbGl6ZXJcIjtcbmltcG9ydCB7IFVSTEJ1aWxkZXIgfSBmcm9tIFwiLi91cmxcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWwvdXRpbHNcIjtcbmltcG9ydCB7IHN0cmluZ2lmeVhNTCB9IGZyb20gXCIuL3V0aWwveG1sXCI7XG5pbXBvcnQge1xuICBSZXF1ZXN0T3B0aW9uc0Jhc2UsXG4gIFJlcXVlc3RQcmVwYXJlT3B0aW9ucyxcbiAgV2ViUmVzb3VyY2VMaWtlLFxuICBpc1dlYlJlc291cmNlTGlrZSxcbiAgV2ViUmVzb3VyY2UsXG59IGZyb20gXCIuL3dlYlJlc291cmNlXCI7XG5pbXBvcnQgeyBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuL29wZXJhdGlvblJlc3BvbnNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlQ2FsbGJhY2sgfSBmcm9tIFwiLi91dGlsL3V0aWxzXCI7XG5pbXBvcnQgeyBhZ2VudFBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL2FnZW50UG9saWN5XCI7XG5pbXBvcnQgeyBwcm94eVBvbGljeSwgZ2V0RGVmYXVsdFByb3h5U2V0dGluZ3MgfSBmcm9tIFwiLi9wb2xpY2llcy9wcm94eVBvbGljeVwiO1xuaW1wb3J0IHsgdGhyb3R0bGluZ1JldHJ5UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvdGhyb3R0bGluZ1JldHJ5UG9saWN5XCI7XG5pbXBvcnQgeyBBZ2VudCB9IGZyb20gXCJodHRwXCI7XG5pbXBvcnQge1xuICBBenVyZUlkZW50aXR5Q3JlZGVudGlhbEFkYXB0ZXIsXG4gIGF6dXJlUmVzb3VyY2VNYW5hZ2VyRW5kcG9pbnRzLFxufSBmcm9tIFwiLi9jcmVkZW50aWFscy9henVyZUlkZW50aXR5VG9rZW5DcmVkZW50aWFsQWRhcHRlclwiO1xuXG4vKipcbiAqIEhUVFAgcHJveHkgc2V0dGluZ3MgKE5vZGUuanMgb25seSlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm94eVNldHRpbmdzIHtcbiAgaG9zdDogc3RyaW5nO1xuICBwb3J0OiBudW1iZXI7XG4gIHVzZXJuYW1lPzogc3RyaW5nO1xuICBwYXNzd29yZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBIVFRQIGFuZCBIVFRQUyBhZ2VudHMgKE5vZGUuanMgb25seSlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZ2VudFNldHRpbmdzIHtcbiAgaHR0cDogQWdlbnQ7XG4gIGh0dHBzOiBBZ2VudDtcbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIGJlIHByb3ZpZGVkIHdoaWxlIGNyZWF0aW5nIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZUNsaWVudE9wdGlvbnMge1xuICAvKipcbiAgICogQW4gYXJyYXkgb2YgZmFjdG9yaWVzIHdoaWNoIGdldCBjYWxsZWQgdG8gY3JlYXRlIHRoZSBSZXF1ZXN0UG9saWN5IHBpcGVsaW5lIHVzZWQgdG8gc2VuZCBhIEhUVFBcbiAgICogcmVxdWVzdCBvbiB0aGUgd2lyZSwgb3IgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGluIHRoZSBkZWZhdWx0UmVxdWVzdFBvbGljeUZhY3RvcmllcyBhbmQgcmV0dXJuc1xuICAgKiB0aGUgcmVxdWVzdFBvbGljeUZhY3RvcmllcyB0aGF0IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIHJlcXVlc3RQb2xpY3lGYWN0b3JpZXM/OlxuICAgIHwgUmVxdWVzdFBvbGljeUZhY3RvcnlbXVxuICAgIHwgKChkZWZhdWx0UmVxdWVzdFBvbGljeUZhY3RvcmllczogUmVxdWVzdFBvbGljeUZhY3RvcnlbXSkgPT4gdm9pZCB8IFJlcXVlc3RQb2xpY3lGYWN0b3J5W10pO1xuICAvKipcbiAgICogVGhlIEh0dHBDbGllbnQgdGhhdCB3aWxsIGJlIHVzZWQgdG8gc2VuZCBIVFRQIHJlcXVlc3RzLlxuICAgKi9cbiAgaHR0cENsaWVudD86IEh0dHBDbGllbnQ7XG4gIC8qKlxuICAgKiBUaGUgSHR0cFBpcGVsaW5lTG9nZ2VyIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGVidWcgUmVxdWVzdFBvbGljaWVzIHdpdGhpbiB0aGUgSFRUUCBwaXBlbGluZS5cbiAgICovXG4gIGh0dHBQaXBlbGluZUxvZ2dlcj86IEh0dHBQaXBlbGluZUxvZ2dlcjtcbiAgLyoqXG4gICAqIElmIHNldCB0byB0cnVlLCB0dXJuIG9mZiB0aGUgZGVmYXVsdCByZXRyeSBwb2xpY3kuXG4gICAqL1xuICBub1JldHJ5UG9saWN5PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgcmV0cnkgdGltZW91dCBpbiBzZWNvbmRzIGZvciBBdXRvbWF0aWNSUFJlZ2lzdHJhdGlvbi4gRGVmYXVsdCB2YWx1ZSBpcyAzMC5cbiAgICovXG4gIHJwUmVnaXN0cmF0aW9uUmV0cnlUaW1lb3V0PzogbnVtYmVyO1xuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gZ2VuZXJhdGUgYSBjbGllbnQgcmVxdWVzdCBJRCBoZWFkZXIgZm9yIGVhY2ggSFRUUCByZXF1ZXN0LlxuICAgKi9cbiAgZ2VuZXJhdGVDbGllbnRSZXF1ZXN0SWRIZWFkZXI/OiBib29sZWFuO1xuICAvKipcbiAgICogV2hldGhlciB0byBpbmNsdWRlIGNyZWRlbnRpYWxzIGluIENPUlMgcmVxdWVzdHMgaW4gdGhlIGJyb3dzZXIuXG4gICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3Qvd2l0aENyZWRlbnRpYWxzIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgd2l0aENyZWRlbnRpYWxzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIElmIHNwZWNpZmllZCwgYSBHZW5lcmF0ZVJlcXVlc3RJZFBvbGljeSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBIVFRQIHBpcGVsaW5lIHRoYXQgd2lsbCBhZGQgYVxuICAgKiBoZWFkZXIgdG8gYWxsIG91dGdvaW5nIHJlcXVlc3RzIHdpdGggdGhpcyBoZWFkZXIgbmFtZSBhbmQgYSByYW5kb20gVVVJRCBhcyB0aGUgcmVxdWVzdCBJRC5cbiAgICovXG4gIGNsaWVudFJlcXVlc3RJZEhlYWRlck5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudC10eXBlcyB0aGF0IHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoIEpTT04gb3IgWE1MIHNlcmlhbGl6YXRpb24uXG4gICAqL1xuICBkZXNlcmlhbGl6YXRpb25Db250ZW50VHlwZXM/OiBEZXNlcmlhbGl6YXRpb25Db250ZW50VHlwZXM7XG4gIC8qKlxuICAgKiBUaGUgaGVhZGVyIG5hbWUgdG8gdXNlIGZvciB0aGUgdGVsZW1ldHJ5IGhlYWRlciB3aGlsZSBzZW5kaW5nIHRoZSByZXF1ZXN0LiBJZiB0aGlzIGlzIG5vdFxuICAgKiBzcGVjaWZpZWQsIHRoZW4gXCJVc2VyLUFnZW50XCIgd2lsbCBiZSB1c2VkIHdoZW4gcnVubmluZyBvbiBOb2RlLmpzIGFuZCBcIngtbXMtY29tbWFuZC1uYW1lXCIgd2lsbFxuICAgKiBiZSB1c2VkIHdoZW4gcnVubmluZyBpbiBhIGJyb3dzZXIuXG4gICAqL1xuICB1c2VyQWdlbnRIZWFkZXJOYW1lPzogc3RyaW5nIHwgKChkZWZhdWx0VXNlckFnZW50SGVhZGVyTmFtZTogc3RyaW5nKSA9PiBzdHJpbmcpO1xuICAvKipcbiAgICogVGhlIHN0cmluZyB0byBiZSBzZXQgdG8gdGhlIHRlbGVtZXRyeSBoZWFkZXIgd2hpbGUgc2VuZGluZyB0aGUgcmVxdWVzdCwgb3IgYSBmdW5jdGlvbiB0aGF0XG4gICAqIHRha2VzIGluIHRoZSBkZWZhdWx0IHVzZXItYWdlbnQgc3RyaW5nIGFuZCByZXR1cm5zIHRoZSB1c2VyLWFnZW50IHN0cmluZyB0aGF0IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIHVzZXJBZ2VudD86IHN0cmluZyB8ICgoZGVmYXVsdFVzZXJBZ2VudDogc3RyaW5nKSA9PiBzdHJpbmcpO1xuICAvKipcbiAgICogUHJveHkgc2V0dGluZ3Mgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciBldmVyeSBIVFRQIHJlcXVlc3QgKE5vZGUuanMgb25seSkuXG4gICAqL1xuICBwcm94eVNldHRpbmdzPzogUHJveHlTZXR0aW5ncztcbiAgLyoqXG4gICAqIE9wdGlvbnMgZm9yIGhvdyByZWRpcmVjdCByZXNwb25zZXMgYXJlIGhhbmRsZWQuXG4gICAqL1xuICByZWRpcmVjdE9wdGlvbnM/OiBSZWRpcmVjdE9wdGlvbnM7XG4gIC8qKlxuICAgKiBIVFRQIGFuZCBIVFRQUyBhZ2VudHMgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciBldmVyeSBIVFRQIHJlcXVlc3QgKE5vZGUuanMgb25seSkuXG4gICAqL1xuICBhZ2VudFNldHRpbmdzPzogQWdlbnRTZXR0aW5ncztcbiAgLyoqXG4gICAqIElmIHNwZWNpZmllZDpcbiAgICogLSBUaGlzIGBiYXNlVXJpYCBiZWNvbWVzIHRoZSBiYXNlIFVSSSB0aGF0IHJlcXVlc3RzIHdpbGwgYmUgbWFkZSBhZ2FpbnN0IGZvciB0aGlzIFNlcnZpY2VDbGllbnQuXG4gICAqIC0gSWYgdGhlIGBiYXNlVXJpYCBtYXRjaGVzIGEga25vd24gcmVzb3VyY2UgbWFuYWdlciBlbmRwb2ludCBhbmQgaWYgYSBgVG9rZW5DcmVkZW50aWFsYCB3YXMgcGFzc2VkIHRocm91Z2ggdGhlIGNvbnN0cnVjdG9yLCB0aGlzIGBiYXNlVXJpYCBkZWZpbmVzIHRoZSBgZ2V0VG9rZW5gIHNjb3BlIHRvIGJlIGAke29wdGlvbnMuYmFzZVVyaX0vLmRlZmF1bHRgLiBPdGhlcndpc2UsIHRoZSBzY29wZSB3b3VsZCBkZWZhdWx0IHRvIFwiaHR0cHM6Ly9tYW5hZ2VtZW50LmF6dXJlLmNvbS8uZGVmYXVsdFwiLlxuICAgKlxuICAgKiBJZiBpdCBpcyBub3Qgc3BlY2lmaWVkOlxuICAgKiAtIEFsbCBPcGVyYXRpb25TcGVjcyBtdXN0IGNvbnRhaW4gYSBiYXNlVXJsIHByb3BlcnR5LlxuICAgKiAtIElmIGEgYFRva2VuQ3JlZGVudGlhbGAgd2FzIHBhc3NlZCB0aHJvdWdoIHRoZSBjb25zdHJ1Y3RvciwgdGhlIGBnZXRUb2tlbmAgc2NvcGUgaXMgc2V0IHRvIGJlIFwiaHR0cHM6Ly9tYW5hZ2VtZW50LmF6dXJlLmNvbS8uZGVmYXVsdFwiLlxuICAgKi9cbiAgYmFzZVVyaT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAY2xhc3NcbiAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBTZXJ2aWNlQ2xpZW50LlxuICovXG5leHBvcnQgY2xhc3MgU2VydmljZUNsaWVudCB7XG4gIC8qKlxuICAgKiBUaGUgYmFzZSBVUkkgYWdhaW5zdCB3aGljaCByZXF1ZXN0cyB3aWxsIGJlIG1hZGUgd2hlbiB1c2luZyB0aGlzIFNlcnZpY2VDbGllbnQgaW5zdGFuY2UuXG4gICAqXG4gICAqIFRoaXMgY2FuIGJlIHNldCBlaXRoZXIgYnkgc2V0dGluZyB0aGUgYGJhc2VVcmlgIGluIHRoZSBgb3B0aW9uc2AgcGFyYW1ldGVyIHRvIHRoZSBTZXJ2aWNlQ2xpZW50IGNvbnN0cnVjdG9yIG9yIGRpcmVjdGx5IGFmdGVyIGNvbnN0cnVjdGluZyB0aGUgU2VydmljZUNsaWVudC5cbiAgICogSWYgc2V0IHZpYSB0aGUgU2VydmljZUNsaWVudCBjb25zdHJ1Y3RvciB3aGVuIHVzaW5nIHRoZSBvdmVybG9hZCB0aGF0IHRha2VzIHRoZSBgVG9rZW5DcmVkZW50aWFsYCwgYW5kIGlmIGl0IG1hdGNoZXMgYSBrbm93biByZXNvdXJjZSBtYW5hZ2VyIGVuZHBvaW50LCB0aGlzIGJhc2UgVVJJIHNldHMgdGhlIHNjb3BlIHVzZWQgdG8gZ2V0IHRoZSBBQUQgdG9rZW4gdG8gYCR7YmFzZVVyaX0vLmRlZmF1bHRgIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgXCJodHRwczovL21hbmFnZW1lbnQuYXp1cmUuY29tLy5kZWZhdWx0XCJcbiAgICpcbiAgICogSWYgaXQgaXMgbm90IHNwZWNpZmllZCwgYWxsIE9wZXJhdGlvblNwZWNzIG11c3QgY29udGFpbiBhIGJhc2VVcmwgcHJvcGVydHkuXG4gICAqL1xuICBwcm90ZWN0ZWQgYmFzZVVyaT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgcmVxdWVzdCBjb250ZW50IHR5cGUgZm9yIHRoZSBzZXJ2aWNlLlxuICAgKiBVc2VkIGlmIG5vIHJlcXVlc3RDb250ZW50VHlwZSBpcyBwcmVzZW50IG9uIGFuIE9wZXJhdGlvblNwZWMuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVxdWVzdENvbnRlbnRUeXBlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSFRUUCBjbGllbnQgdGhhdCB3aWxsIGJlIHVzZWQgdG8gc2VuZCByZXF1ZXN0cy5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2h0dHBDbGllbnQ6IEh0dHBDbGllbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3JlcXVlc3RQb2xpY3lPcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2U7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfcmVxdWVzdFBvbGljeUZhY3RvcmllczogUmVxdWVzdFBvbGljeUZhY3RvcnlbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBfd2l0aENyZWRlbnRpYWxzOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgU2VydmljZUNsaWVudCBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHN9IFtjcmVkZW50aWFsc10gVGhlIGNyZWRlbnRpYWxzIG9iamVjdCB1c2VkIGZvciBhdXRoZW50aWNhdGlvbi5cbiAgICogQHBhcmFtIHtTZXJ2aWNlQ2xpZW50T3B0aW9uc30gW29wdGlvbnNdIFRoZSBzZXJ2aWNlIGNsaWVudCBvcHRpb25zIHRoYXQgZ292ZXJuIHRoZSBiZWhhdmlvciBvZiB0aGUgY2xpZW50LlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY3JlZGVudGlhbHM/OiBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMgfCBUb2tlbkNyZWRlbnRpYWwsXG4gICAgb3B0aW9ucz86IFNlcnZpY2VDbGllbnRPcHRpb25zXG4gICkge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmJhc2VVcmkpIHtcbiAgICAgIHRoaXMuYmFzZVVyaSA9IG9wdGlvbnMuYmFzZVVyaTtcbiAgICB9XG5cbiAgICBsZXQgc2VydmljZUNsaWVudENyZWRlbnRpYWxzOiBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMgfCB1bmRlZmluZWQ7XG4gICAgaWYgKGlzVG9rZW5DcmVkZW50aWFsKGNyZWRlbnRpYWxzKSkge1xuICAgICAgbGV0IHNjb3BlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAob3B0aW9ucz8uYmFzZVVyaSAmJiBhenVyZVJlc291cmNlTWFuYWdlckVuZHBvaW50cy5pbmNsdWRlcyhvcHRpb25zPy5iYXNlVXJpKSkge1xuICAgICAgICBzY29wZSA9IGAke29wdGlvbnMuYmFzZVVyaX0vLmRlZmF1bHRgO1xuICAgICAgfVxuICAgICAgc2VydmljZUNsaWVudENyZWRlbnRpYWxzID0gbmV3IEF6dXJlSWRlbnRpdHlDcmVkZW50aWFsQWRhcHRlcihjcmVkZW50aWFscywgc2NvcGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICB9XG5cbiAgICBpZiAoc2VydmljZUNsaWVudENyZWRlbnRpYWxzICYmICFzZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMuc2lnblJlcXVlc3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNyZWRlbnRpYWxzIGFyZ3VtZW50IG5lZWRzIHRvIGltcGxlbWVudCBzaWduUmVxdWVzdCBtZXRob2RcIik7XG4gICAgfVxuXG4gICAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgfHwgZmFsc2U7XG4gICAgdGhpcy5faHR0cENsaWVudCA9IG9wdGlvbnMuaHR0cENsaWVudCB8fCBuZXcgRGVmYXVsdEh0dHBDbGllbnQoKTtcbiAgICB0aGlzLl9yZXF1ZXN0UG9saWN5T3B0aW9ucyA9IG5ldyBSZXF1ZXN0UG9saWN5T3B0aW9ucyhvcHRpb25zLmh0dHBQaXBlbGluZUxvZ2dlcik7XG5cbiAgICBsZXQgcmVxdWVzdFBvbGljeUZhY3RvcmllczogUmVxdWVzdFBvbGljeUZhY3RvcnlbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLnJlcXVlc3RQb2xpY3lGYWN0b3JpZXMpKSB7XG4gICAgICByZXF1ZXN0UG9saWN5RmFjdG9yaWVzID0gb3B0aW9ucy5yZXF1ZXN0UG9saWN5RmFjdG9yaWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0UG9saWN5RmFjdG9yaWVzID0gY3JlYXRlRGVmYXVsdFJlcXVlc3RQb2xpY3lGYWN0b3JpZXMoXG4gICAgICAgIHNlcnZpY2VDbGllbnRDcmVkZW50aWFscyxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICAgIGlmIChvcHRpb25zLnJlcXVlc3RQb2xpY3lGYWN0b3JpZXMpIHtcbiAgICAgICAgY29uc3QgbmV3UmVxdWVzdFBvbGljeUZhY3RvcmllczpcbiAgICAgICAgICB8IHZvaWRcbiAgICAgICAgICB8IFJlcXVlc3RQb2xpY3lGYWN0b3J5W10gPSBvcHRpb25zLnJlcXVlc3RQb2xpY3lGYWN0b3JpZXMocmVxdWVzdFBvbGljeUZhY3Rvcmllcyk7XG4gICAgICAgIGlmIChuZXdSZXF1ZXN0UG9saWN5RmFjdG9yaWVzKSB7XG4gICAgICAgICAgcmVxdWVzdFBvbGljeUZhY3RvcmllcyA9IG5ld1JlcXVlc3RQb2xpY3lGYWN0b3JpZXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fcmVxdWVzdFBvbGljeUZhY3RvcmllcyA9IHJlcXVlc3RQb2xpY3lGYWN0b3JpZXM7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCB0aGUgcHJvdmlkZWQgaHR0cFJlcXVlc3QuXG4gICAqL1xuICBzZW5kUmVxdWVzdChvcHRpb25zOiBSZXF1ZXN0UHJlcGFyZU9wdGlvbnMgfCBXZWJSZXNvdXJjZUxpa2UpOiBQcm9taXNlPEh0dHBPcGVyYXRpb25SZXNwb25zZT4ge1xuICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwib3B0aW9ucyBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIGl0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QuXCIpO1xuICAgIH1cblxuICAgIGxldCBodHRwUmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNXZWJSZXNvdXJjZUxpa2Uob3B0aW9ucykpIHtcbiAgICAgICAgb3B0aW9ucy52YWxpZGF0ZVJlcXVlc3RQcm9wZXJ0aWVzKCk7XG4gICAgICAgIGh0dHBSZXF1ZXN0ID0gb3B0aW9ucztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGh0dHBSZXF1ZXN0ID0gbmV3IFdlYlJlc291cmNlKCk7XG4gICAgICAgIGh0dHBSZXF1ZXN0ID0gaHR0cFJlcXVlc3QucHJlcGFyZShvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBsZXQgaHR0cFBpcGVsaW5lOiBSZXF1ZXN0UG9saWN5ID0gdGhpcy5faHR0cENsaWVudDtcbiAgICBpZiAodGhpcy5fcmVxdWVzdFBvbGljeUZhY3RvcmllcyAmJiB0aGlzLl9yZXF1ZXN0UG9saWN5RmFjdG9yaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9yZXF1ZXN0UG9saWN5RmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGh0dHBQaXBlbGluZSA9IHRoaXMuX3JlcXVlc3RQb2xpY3lGYWN0b3JpZXNbaV0uY3JlYXRlKFxuICAgICAgICAgIGh0dHBQaXBlbGluZSxcbiAgICAgICAgICB0aGlzLl9yZXF1ZXN0UG9saWN5T3B0aW9uc1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaHR0cFBpcGVsaW5lLnNlbmRSZXF1ZXN0KGh0dHBSZXF1ZXN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGFuIEhUVFAgcmVxdWVzdCB0aGF0IGlzIHBvcHVsYXRlZCB1c2luZyB0aGUgcHJvdmlkZWQgT3BlcmF0aW9uU3BlYy5cbiAgICogQHBhcmFtIHtPcGVyYXRpb25Bcmd1bWVudHN9IG9wZXJhdGlvbkFyZ3VtZW50cyBUaGUgYXJndW1lbnRzIHRoYXQgdGhlIEhUVFAgcmVxdWVzdCdzIHRlbXBsYXRlZCB2YWx1ZXMgd2lsbCBiZSBwb3B1bGF0ZWQgZnJvbS5cbiAgICogQHBhcmFtIHtPcGVyYXRpb25TcGVjfSBvcGVyYXRpb25TcGVjIFRoZSBPcGVyYXRpb25TcGVjIHRvIHVzZSB0byBwb3B1bGF0ZSB0aGUgaHR0cFJlcXVlc3QuXG4gICAqIEBwYXJhbSB7U2VydmljZUNhbGxiYWNrfSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gY2FsbCB3aGVuIHRoZSByZXNwb25zZSBpcyByZWNlaXZlZC5cbiAgICovXG4gIHNlbmRPcGVyYXRpb25SZXF1ZXN0KFxuICAgIG9wZXJhdGlvbkFyZ3VtZW50czogT3BlcmF0aW9uQXJndW1lbnRzLFxuICAgIG9wZXJhdGlvblNwZWM6IE9wZXJhdGlvblNwZWMsXG4gICAgY2FsbGJhY2s/OiBTZXJ2aWNlQ2FsbGJhY2s8YW55PlxuICApOiBQcm9taXNlPFJlc3RSZXNwb25zZT4ge1xuICAgIGlmICh0eXBlb2Ygb3BlcmF0aW9uQXJndW1lbnRzLm9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2FsbGJhY2sgPSBvcGVyYXRpb25Bcmd1bWVudHMub3B0aW9ucztcbiAgICAgIG9wZXJhdGlvbkFyZ3VtZW50cy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGh0dHBSZXF1ZXN0ID0gbmV3IFdlYlJlc291cmNlKCk7XG5cbiAgICBsZXQgcmVzdWx0OiBQcm9taXNlPFJlc3RSZXNwb25zZT47XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJhc2VVcmk6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wZXJhdGlvblNwZWMuYmFzZVVybCB8fCB0aGlzLmJhc2VVcmk7XG4gICAgICBpZiAoIWJhc2VVcmkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiSWYgb3BlcmF0aW9uU3BlYy5iYXNlVXJsIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gdGhlIFNlcnZpY2VDbGllbnQgbXVzdCBoYXZlIGEgYmFzZVVyaSBzdHJpbmcgcHJvcGVydHkgdGhhdCBjb250YWlucyB0aGUgYmFzZSBVUkwgdG8gdXNlLlwiXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGh0dHBSZXF1ZXN0Lm1ldGhvZCA9IG9wZXJhdGlvblNwZWMuaHR0cE1ldGhvZDtcbiAgICAgIGh0dHBSZXF1ZXN0Lm9wZXJhdGlvblNwZWMgPSBvcGVyYXRpb25TcGVjO1xuXG4gICAgICBjb25zdCByZXF1ZXN0VXJsOiBVUkxCdWlsZGVyID0gVVJMQnVpbGRlci5wYXJzZShiYXNlVXJpKTtcbiAgICAgIGlmIChvcGVyYXRpb25TcGVjLnBhdGgpIHtcbiAgICAgICAgcmVxdWVzdFVybC5hcHBlbmRQYXRoKG9wZXJhdGlvblNwZWMucGF0aCk7XG4gICAgICB9XG4gICAgICBpZiAob3BlcmF0aW9uU3BlYy51cmxQYXJhbWV0ZXJzICYmIG9wZXJhdGlvblNwZWMudXJsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgdXJsUGFyYW1ldGVyIG9mIG9wZXJhdGlvblNwZWMudXJsUGFyYW1ldGVycykge1xuICAgICAgICAgIGxldCB1cmxQYXJhbWV0ZXJWYWx1ZTogc3RyaW5nID0gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgb3BlcmF0aW9uQXJndW1lbnRzLFxuICAgICAgICAgICAgdXJsUGFyYW1ldGVyLFxuICAgICAgICAgICAgb3BlcmF0aW9uU3BlYy5zZXJpYWxpemVyXG4gICAgICAgICAgKTtcbiAgICAgICAgICB1cmxQYXJhbWV0ZXJWYWx1ZSA9IG9wZXJhdGlvblNwZWMuc2VyaWFsaXplci5zZXJpYWxpemUoXG4gICAgICAgICAgICB1cmxQYXJhbWV0ZXIubWFwcGVyLFxuICAgICAgICAgICAgdXJsUGFyYW1ldGVyVmFsdWUsXG4gICAgICAgICAgICBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcih1cmxQYXJhbWV0ZXIpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIXVybFBhcmFtZXRlci5za2lwRW5jb2RpbmcpIHtcbiAgICAgICAgICAgIHVybFBhcmFtZXRlclZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHVybFBhcmFtZXRlclZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVxdWVzdFVybC5yZXBsYWNlQWxsKFxuICAgICAgICAgICAgYHske3VybFBhcmFtZXRlci5tYXBwZXIuc2VyaWFsaXplZE5hbWUgfHwgZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXIodXJsUGFyYW1ldGVyKX19YCxcbiAgICAgICAgICAgIHVybFBhcmFtZXRlclZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdGlvblNwZWMucXVlcnlQYXJhbWV0ZXJzICYmIG9wZXJhdGlvblNwZWMucXVlcnlQYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBxdWVyeVBhcmFtZXRlciBvZiBvcGVyYXRpb25TcGVjLnF1ZXJ5UGFyYW1ldGVycykge1xuICAgICAgICAgIGxldCBxdWVyeVBhcmFtZXRlclZhbHVlOiBhbnkgPSBnZXRPcGVyYXRpb25Bcmd1bWVudFZhbHVlRnJvbVBhcmFtZXRlcihcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBvcGVyYXRpb25Bcmd1bWVudHMsXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcixcbiAgICAgICAgICAgIG9wZXJhdGlvblNwZWMuc2VyaWFsaXplclxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHF1ZXJ5UGFyYW1ldGVyVmFsdWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlclZhbHVlID0gb3BlcmF0aW9uU3BlYy5zZXJpYWxpemVyLnNlcmlhbGl6ZShcbiAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXIubWFwcGVyLFxuICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlclZhbHVlLFxuICAgICAgICAgICAgICBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihxdWVyeVBhcmFtZXRlcilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAocXVlcnlQYXJhbWV0ZXIuY29sbGVjdGlvbkZvcm1hdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgaWYgKHF1ZXJ5UGFyYW1ldGVyLmNvbGxlY3Rpb25Gb3JtYXQgPT09IFF1ZXJ5Q29sbGVjdGlvbkZvcm1hdC5NdWx0aSkge1xuICAgICAgICAgICAgICAgIGlmIChxdWVyeVBhcmFtZXRlclZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJWYWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW5kZXggaW4gcXVlcnlQYXJhbWV0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gcXVlcnlQYXJhbWV0ZXJWYWx1ZVtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVyVmFsdWVbaW5kZXhdID0gaXRlbSA9PSB1bmRlZmluZWQgPyBcIlwiIDogaXRlbS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlci5jb2xsZWN0aW9uRm9ybWF0ID09PSBRdWVyeUNvbGxlY3Rpb25Gb3JtYXQuU3N2IHx8XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXIuY29sbGVjdGlvbkZvcm1hdCA9PT0gUXVlcnlDb2xsZWN0aW9uRm9ybWF0LlRzdlxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlclZhbHVlID0gcXVlcnlQYXJhbWV0ZXJWYWx1ZS5qb2luKHF1ZXJ5UGFyYW1ldGVyLmNvbGxlY3Rpb25Gb3JtYXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXF1ZXJ5UGFyYW1ldGVyLnNraXBFbmNvZGluZykge1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVBhcmFtZXRlclZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW5kZXggaW4gcXVlcnlQYXJhbWV0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlclZhbHVlW2luZGV4XSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVyVmFsdWVbaW5kZXhdICE9PSBudWxsXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJWYWx1ZVtpbmRleF0gPSBlbmNvZGVVUklDb21wb25lbnQocXVlcnlQYXJhbWV0ZXJWYWx1ZVtpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlclZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5UGFyYW1ldGVyVmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVyLmNvbGxlY3Rpb25Gb3JtYXQgIT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVyLmNvbGxlY3Rpb25Gb3JtYXQgIT09IFF1ZXJ5Q29sbGVjdGlvbkZvcm1hdC5NdWx0aSAmJlxuICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlci5jb2xsZWN0aW9uRm9ybWF0ICE9PSBRdWVyeUNvbGxlY3Rpb25Gb3JtYXQuU3N2ICYmXG4gICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVyLmNvbGxlY3Rpb25Gb3JtYXQgIT09IFF1ZXJ5Q29sbGVjdGlvbkZvcm1hdC5Uc3ZcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlclZhbHVlID0gcXVlcnlQYXJhbWV0ZXJWYWx1ZS5qb2luKHF1ZXJ5UGFyYW1ldGVyLmNvbGxlY3Rpb25Gb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdFVybC5zZXRRdWVyeVBhcmFtZXRlcihcbiAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXIubWFwcGVyLnNlcmlhbGl6ZWROYW1lIHx8IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKHF1ZXJ5UGFyYW1ldGVyKSxcbiAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJWYWx1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGh0dHBSZXF1ZXN0LnVybCA9IHJlcXVlc3RVcmwudG9TdHJpbmcoKTtcblxuICAgICAgY29uc3QgY29udGVudFR5cGUgPSBvcGVyYXRpb25TcGVjLmNvbnRlbnRUeXBlIHx8IHRoaXMucmVxdWVzdENvbnRlbnRUeXBlO1xuICAgICAgaWYgKGNvbnRlbnRUeXBlKSB7XG4gICAgICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIGNvbnRlbnRUeXBlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wZXJhdGlvblNwZWMuaGVhZGVyUGFyYW1ldGVycykge1xuICAgICAgICBmb3IgKGNvbnN0IGhlYWRlclBhcmFtZXRlciBvZiBvcGVyYXRpb25TcGVjLmhlYWRlclBhcmFtZXRlcnMpIHtcbiAgICAgICAgICBsZXQgaGVhZGVyVmFsdWU6IGFueSA9IGdldE9wZXJhdGlvbkFyZ3VtZW50VmFsdWVGcm9tUGFyYW1ldGVyKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG9wZXJhdGlvbkFyZ3VtZW50cyxcbiAgICAgICAgICAgIGhlYWRlclBhcmFtZXRlcixcbiAgICAgICAgICAgIG9wZXJhdGlvblNwZWMuc2VyaWFsaXplclxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGhlYWRlclZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVyVmFsdWUgPSBvcGVyYXRpb25TcGVjLnNlcmlhbGl6ZXIuc2VyaWFsaXplKFxuICAgICAgICAgICAgICBoZWFkZXJQYXJhbWV0ZXIubWFwcGVyLFxuICAgICAgICAgICAgICBoZWFkZXJWYWx1ZSxcbiAgICAgICAgICAgICAgZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXIoaGVhZGVyUGFyYW1ldGVyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckNvbGxlY3Rpb25QcmVmaXggPSAoaGVhZGVyUGFyYW1ldGVyLm1hcHBlciBhcyBEaWN0aW9uYXJ5TWFwcGVyKVxuICAgICAgICAgICAgICAuaGVhZGVyQ29sbGVjdGlvblByZWZpeDtcbiAgICAgICAgICAgIGlmIChoZWFkZXJDb2xsZWN0aW9uUHJlZml4KSB7XG4gICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGhlYWRlclZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnMuc2V0KGhlYWRlckNvbGxlY3Rpb25QcmVmaXggKyBrZXksIGhlYWRlclZhbHVlW2tleV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBodHRwUmVxdWVzdC5oZWFkZXJzLnNldChcbiAgICAgICAgICAgICAgICBoZWFkZXJQYXJhbWV0ZXIubWFwcGVyLnNlcmlhbGl6ZWROYW1lIHx8XG4gICAgICAgICAgICAgICAgICBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihoZWFkZXJQYXJhbWV0ZXIpLFxuICAgICAgICAgICAgICAgIGhlYWRlclZhbHVlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9wdGlvbnM6IFJlcXVlc3RPcHRpb25zQmFzZSB8IHVuZGVmaW5lZCA9IG9wZXJhdGlvbkFyZ3VtZW50cy5vcHRpb25zO1xuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY3VzdG9tSGVhZGVycykge1xuICAgICAgICAgIGZvciAoY29uc3QgY3VzdG9tSGVhZGVyTmFtZSBpbiBvcHRpb25zLmN1c3RvbUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnMuc2V0KGN1c3RvbUhlYWRlck5hbWUsIG9wdGlvbnMuY3VzdG9tSGVhZGVyc1tjdXN0b21IZWFkZXJOYW1lXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYWJvcnRTaWduYWwpIHtcbiAgICAgICAgICBodHRwUmVxdWVzdC5hYm9ydFNpZ25hbCA9IG9wdGlvbnMuYWJvcnRTaWduYWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgICAgaHR0cFJlcXVlc3QudGltZW91dCA9IG9wdGlvbnMudGltZW91dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm9uVXBsb2FkUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBodHRwUmVxdWVzdC5vblVwbG9hZFByb2dyZXNzID0gb3B0aW9ucy5vblVwbG9hZFByb2dyZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMub25Eb3dubG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgaHR0cFJlcXVlc3Qub25Eb3dubG9hZFByb2dyZXNzID0gb3B0aW9ucy5vbkRvd25sb2FkUHJvZ3Jlc3M7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaHR0cFJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdGhpcy5fd2l0aENyZWRlbnRpYWxzO1xuXG4gICAgICBzZXJpYWxpemVSZXF1ZXN0Qm9keSh0aGlzLCBodHRwUmVxdWVzdCwgb3BlcmF0aW9uQXJndW1lbnRzLCBvcGVyYXRpb25TcGVjKTtcblxuICAgICAgaWYgKGh0dHBSZXF1ZXN0LnN0cmVhbVJlc3BvbnNlQm9keSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaHR0cFJlcXVlc3Quc3RyZWFtUmVzcG9uc2VCb2R5ID0gaXNTdHJlYW1PcGVyYXRpb24ob3BlcmF0aW9uU3BlYyk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IHRoaXMuc2VuZFJlcXVlc3QoaHR0cFJlcXVlc3QpLnRoZW4oKHJlcykgPT5cbiAgICAgICAgZmxhdHRlblJlc3BvbnNlKHJlcywgb3BlcmF0aW9uU3BlYy5yZXNwb25zZXNbcmVzLnN0YXR1c10pXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXN1bHQgPSBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgY29uc3QgY2IgPSBjYWxsYmFjaztcbiAgICBpZiAoY2IpIHtcbiAgICAgIHJlc3VsdFxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgICAgIC50aGVuKChyZXMpID0+IGNiKG51bGwsIHJlcy5fcmVzcG9uc2UucGFyc2VkQm9keSwgcmVzLl9yZXNwb25zZS5yZXF1ZXN0LCByZXMuX3Jlc3BvbnNlKSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IGNiKGVycikpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVJlcXVlc3RCb2R5KFxuICBzZXJ2aWNlQ2xpZW50OiBTZXJ2aWNlQ2xpZW50LFxuICBodHRwUmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlLFxuICBvcGVyYXRpb25Bcmd1bWVudHM6IE9wZXJhdGlvbkFyZ3VtZW50cyxcbiAgb3BlcmF0aW9uU3BlYzogT3BlcmF0aW9uU3BlY1xuKTogdm9pZCB7XG4gIGlmIChvcGVyYXRpb25TcGVjLnJlcXVlc3RCb2R5ICYmIG9wZXJhdGlvblNwZWMucmVxdWVzdEJvZHkubWFwcGVyKSB7XG4gICAgaHR0cFJlcXVlc3QuYm9keSA9IGdldE9wZXJhdGlvbkFyZ3VtZW50VmFsdWVGcm9tUGFyYW1ldGVyKFxuICAgICAgc2VydmljZUNsaWVudCxcbiAgICAgIG9wZXJhdGlvbkFyZ3VtZW50cyxcbiAgICAgIG9wZXJhdGlvblNwZWMucmVxdWVzdEJvZHksXG4gICAgICBvcGVyYXRpb25TcGVjLnNlcmlhbGl6ZXJcbiAgICApO1xuXG4gICAgY29uc3QgYm9keU1hcHBlciA9IG9wZXJhdGlvblNwZWMucmVxdWVzdEJvZHkubWFwcGVyO1xuICAgIGNvbnN0IHsgcmVxdWlyZWQsIHhtbE5hbWUsIHhtbEVsZW1lbnROYW1lLCBzZXJpYWxpemVkTmFtZSB9ID0gYm9keU1hcHBlcjtcbiAgICBjb25zdCB0eXBlTmFtZSA9IGJvZHlNYXBwZXIudHlwZS5uYW1lO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaHR0cFJlcXVlc3QuYm9keSAhPSB1bmRlZmluZWQgfHwgcmVxdWlyZWQpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdEJvZHlQYXJhbWV0ZXJQYXRoU3RyaW5nOiBzdHJpbmcgPSBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihcbiAgICAgICAgICBvcGVyYXRpb25TcGVjLnJlcXVlc3RCb2R5XG4gICAgICAgICk7XG4gICAgICAgIGh0dHBSZXF1ZXN0LmJvZHkgPSBvcGVyYXRpb25TcGVjLnNlcmlhbGl6ZXIuc2VyaWFsaXplKFxuICAgICAgICAgIGJvZHlNYXBwZXIsXG4gICAgICAgICAgaHR0cFJlcXVlc3QuYm9keSxcbiAgICAgICAgICByZXF1ZXN0Qm9keVBhcmFtZXRlclBhdGhTdHJpbmdcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaXNTdHJlYW0gPSB0eXBlTmFtZSA9PT0gTWFwcGVyVHlwZS5TdHJlYW07XG4gICAgICAgIGlmIChvcGVyYXRpb25TcGVjLmlzWE1MKSB7XG4gICAgICAgICAgaWYgKHR5cGVOYW1lID09PSBNYXBwZXJUeXBlLlNlcXVlbmNlKSB7XG4gICAgICAgICAgICBodHRwUmVxdWVzdC5ib2R5ID0gc3RyaW5naWZ5WE1MKFxuICAgICAgICAgICAgICB1dGlscy5wcmVwYXJlWE1MUm9vdExpc3QoXG4gICAgICAgICAgICAgICAgaHR0cFJlcXVlc3QuYm9keSxcbiAgICAgICAgICAgICAgICB4bWxFbGVtZW50TmFtZSB8fCB4bWxOYW1lIHx8IHNlcmlhbGl6ZWROYW1lIVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB7IHJvb3ROYW1lOiB4bWxOYW1lIHx8IHNlcmlhbGl6ZWROYW1lIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmICghaXNTdHJlYW0pIHtcbiAgICAgICAgICAgIGh0dHBSZXF1ZXN0LmJvZHkgPSBzdHJpbmdpZnlYTUwoaHR0cFJlcXVlc3QuYm9keSwge1xuICAgICAgICAgICAgICByb290TmFtZTogeG1sTmFtZSB8fCBzZXJpYWxpemVkTmFtZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJlYW0pIHtcbiAgICAgICAgICBodHRwUmVxdWVzdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoaHR0cFJlcXVlc3QuYm9keSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRXJyb3IgXCIke2Vycm9yLm1lc3NhZ2V9XCIgb2NjdXJyZWQgaW4gc2VyaWFsaXppbmcgdGhlIHBheWxvYWQgLSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHNlcmlhbGl6ZWROYW1lLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBcIiAgXCJcbiAgICAgICAgKX0uYFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3BlcmF0aW9uU3BlYy5mb3JtRGF0YVBhcmFtZXRlcnMgJiYgb3BlcmF0aW9uU3BlYy5mb3JtRGF0YVBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgIGh0dHBSZXF1ZXN0LmZvcm1EYXRhID0ge307XG4gICAgZm9yIChjb25zdCBmb3JtRGF0YVBhcmFtZXRlciBvZiBvcGVyYXRpb25TcGVjLmZvcm1EYXRhUGFyYW1ldGVycykge1xuICAgICAgY29uc3QgZm9ybURhdGFQYXJhbWV0ZXJWYWx1ZTogYW55ID0gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIoXG4gICAgICAgIHNlcnZpY2VDbGllbnQsXG4gICAgICAgIG9wZXJhdGlvbkFyZ3VtZW50cyxcbiAgICAgICAgZm9ybURhdGFQYXJhbWV0ZXIsXG4gICAgICAgIG9wZXJhdGlvblNwZWMuc2VyaWFsaXplclxuICAgICAgKTtcbiAgICAgIGlmIChmb3JtRGF0YVBhcmFtZXRlclZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBmb3JtRGF0YVBhcmFtZXRlclByb3BlcnR5TmFtZTogc3RyaW5nID1cbiAgICAgICAgICBmb3JtRGF0YVBhcmFtZXRlci5tYXBwZXIuc2VyaWFsaXplZE5hbWUgfHwgZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXIoZm9ybURhdGFQYXJhbWV0ZXIpO1xuICAgICAgICBodHRwUmVxdWVzdC5mb3JtRGF0YVtmb3JtRGF0YVBhcmFtZXRlclByb3BlcnR5TmFtZV0gPSBvcGVyYXRpb25TcGVjLnNlcmlhbGl6ZXIuc2VyaWFsaXplKFxuICAgICAgICAgIGZvcm1EYXRhUGFyYW1ldGVyLm1hcHBlcixcbiAgICAgICAgICBmb3JtRGF0YVBhcmFtZXRlclZhbHVlLFxuICAgICAgICAgIGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKGZvcm1EYXRhUGFyYW1ldGVyKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1JlcXVlc3RQb2xpY3lGYWN0b3J5KGluc3RhbmNlOiBhbnkpOiBpbnN0YW5jZSBpcyBSZXF1ZXN0UG9saWN5RmFjdG9yeSB7XG4gIHJldHVybiB0eXBlb2YgaW5zdGFuY2UuY3JlYXRlID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlT3JGdW5jdGlvblJlc3VsdChcbiAgdmFsdWU6IHVuZGVmaW5lZCB8IHN0cmluZyB8ICgoZGVmYXVsdFZhbHVlOiBzdHJpbmcpID0+IHN0cmluZyksXG4gIGRlZmF1bHRWYWx1ZUNyZWF0b3I6ICgpID0+IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgbGV0IHJlc3VsdDogc3RyaW5nO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmVzdWx0ID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZGVmYXVsdFZhbHVlQ3JlYXRvcigpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmVzdWx0ID0gdmFsdWUocmVzdWx0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdFJlcXVlc3RQb2xpY3lGYWN0b3JpZXMoXG4gIGNyZWRlbnRpYWxzOiBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMgfCBSZXF1ZXN0UG9saWN5RmFjdG9yeSB8IHVuZGVmaW5lZCxcbiAgb3B0aW9uczogU2VydmljZUNsaWVudE9wdGlvbnNcbik6IFJlcXVlc3RQb2xpY3lGYWN0b3J5W10ge1xuICBjb25zdCBmYWN0b3JpZXM6IFJlcXVlc3RQb2xpY3lGYWN0b3J5W10gPSBbXTtcblxuICBpZiAob3B0aW9ucy5nZW5lcmF0ZUNsaWVudFJlcXVlc3RJZEhlYWRlcikge1xuICAgIGZhY3Rvcmllcy5wdXNoKGdlbmVyYXRlQ2xpZW50UmVxdWVzdElkUG9saWN5KG9wdGlvbnMuY2xpZW50UmVxdWVzdElkSGVhZGVyTmFtZSkpO1xuICB9XG5cbiAgaWYgKGNyZWRlbnRpYWxzKSB7XG4gICAgaWYgKGlzUmVxdWVzdFBvbGljeUZhY3RvcnkoY3JlZGVudGlhbHMpKSB7XG4gICAgICBmYWN0b3JpZXMucHVzaChjcmVkZW50aWFscyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhY3Rvcmllcy5wdXNoKHNpZ25pbmdQb2xpY3koY3JlZGVudGlhbHMpKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCB1c2VyQWdlbnRIZWFkZXJOYW1lOiBzdHJpbmcgPSBnZXRWYWx1ZU9yRnVuY3Rpb25SZXN1bHQoXG4gICAgb3B0aW9ucy51c2VyQWdlbnRIZWFkZXJOYW1lLFxuICAgIGdldERlZmF1bHRVc2VyQWdlbnRIZWFkZXJOYW1lXG4gICk7XG4gIGNvbnN0IHVzZXJBZ2VudEhlYWRlclZhbHVlOiBzdHJpbmcgPSBnZXRWYWx1ZU9yRnVuY3Rpb25SZXN1bHQoXG4gICAgb3B0aW9ucy51c2VyQWdlbnQsXG4gICAgZ2V0RGVmYXVsdFVzZXJBZ2VudFZhbHVlXG4gICk7XG4gIGlmICh1c2VyQWdlbnRIZWFkZXJOYW1lICYmIHVzZXJBZ2VudEhlYWRlclZhbHVlKSB7XG4gICAgZmFjdG9yaWVzLnB1c2godXNlckFnZW50UG9saWN5KHsga2V5OiB1c2VyQWdlbnRIZWFkZXJOYW1lLCB2YWx1ZTogdXNlckFnZW50SGVhZGVyVmFsdWUgfSkpO1xuICB9XG5cbiAgY29uc3QgcmVkaXJlY3RPcHRpb25zID0ge1xuICAgIC4uLkRlZmF1bHRSZWRpcmVjdE9wdGlvbnMsXG4gICAgLi4ub3B0aW9ucy5yZWRpcmVjdE9wdGlvbnMsXG4gIH07XG4gIGlmIChyZWRpcmVjdE9wdGlvbnMuaGFuZGxlUmVkaXJlY3RzKSB7XG4gICAgZmFjdG9yaWVzLnB1c2gocmVkaXJlY3RQb2xpY3kocmVkaXJlY3RPcHRpb25zLm1heFJldHJpZXMpKTtcbiAgfVxuXG4gIGZhY3Rvcmllcy5wdXNoKHJwUmVnaXN0cmF0aW9uUG9saWN5KG9wdGlvbnMucnBSZWdpc3RyYXRpb25SZXRyeVRpbWVvdXQpKTtcblxuICBpZiAoIW9wdGlvbnMubm9SZXRyeVBvbGljeSkge1xuICAgIGZhY3Rvcmllcy5wdXNoKGV4cG9uZW50aWFsUmV0cnlQb2xpY3koKSk7XG4gICAgZmFjdG9yaWVzLnB1c2goc3lzdGVtRXJyb3JSZXRyeVBvbGljeSgpKTtcbiAgICBmYWN0b3JpZXMucHVzaCh0aHJvdHRsaW5nUmV0cnlQb2xpY3koKSk7XG4gIH1cblxuICBmYWN0b3JpZXMucHVzaChkZXNlcmlhbGl6YXRpb25Qb2xpY3kob3B0aW9ucy5kZXNlcmlhbGl6YXRpb25Db250ZW50VHlwZXMpKTtcblxuICBjb25zdCBwcm94eVNldHRpbmdzID0gb3B0aW9ucy5wcm94eVNldHRpbmdzIHx8IGdldERlZmF1bHRQcm94eVNldHRpbmdzKCk7XG4gIGlmIChwcm94eVNldHRpbmdzKSB7XG4gICAgZmFjdG9yaWVzLnB1c2gocHJveHlQb2xpY3kocHJveHlTZXR0aW5ncykpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWdlbnRTZXR0aW5ncykge1xuICAgIGZhY3Rvcmllcy5wdXNoKGFnZW50UG9saWN5KG9wdGlvbnMuYWdlbnRTZXR0aW5ncykpO1xuICB9XG5cbiAgcmV0dXJuIGZhY3Rvcmllcztcbn1cblxuZXhwb3J0IHR5cGUgUHJvcGVydHlQYXJlbnQgPSB7IFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IGFueSB9O1xuXG4vKipcbiAqIEdldCB0aGUgcHJvcGVydHkgcGFyZW50IGZvciB0aGUgcHJvcGVydHkgYXQgdGhlIHByb3ZpZGVkIHBhdGggd2hlbiBzdGFydGluZyB3aXRoIHRoZSBwcm92aWRlZFxuICogcGFyZW50IG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BlcnR5UGFyZW50KHBhcmVudDogUHJvcGVydHlQYXJlbnQsIHByb3BlcnR5UGF0aDogc3RyaW5nW10pOiBQcm9wZXJ0eVBhcmVudCB7XG4gIGlmIChwYXJlbnQgJiYgcHJvcGVydHlQYXRoKSB7XG4gICAgY29uc3QgcHJvcGVydHlQYXRoTGVuZ3RoOiBudW1iZXIgPSBwcm9wZXJ0eVBhdGgubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcGVydHlQYXRoTGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0eU5hbWU6IHN0cmluZyA9IHByb3BlcnR5UGF0aFtpXTtcbiAgICAgIGlmICghcGFyZW50W3Byb3BlcnR5TmFtZV0pIHtcbiAgICAgICAgcGFyZW50W3Byb3BlcnR5TmFtZV0gPSB7fTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuXG5mdW5jdGlvbiBnZXRPcGVyYXRpb25Bcmd1bWVudFZhbHVlRnJvbVBhcmFtZXRlcihcbiAgc2VydmljZUNsaWVudDogU2VydmljZUNsaWVudCxcbiAgb3BlcmF0aW9uQXJndW1lbnRzOiBPcGVyYXRpb25Bcmd1bWVudHMsXG4gIHBhcmFtZXRlcjogT3BlcmF0aW9uUGFyYW1ldGVyLFxuICBzZXJpYWxpemVyOiBTZXJpYWxpemVyXG4pOiBhbnkge1xuICByZXR1cm4gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXJQYXRoKFxuICAgIHNlcnZpY2VDbGllbnQsXG4gICAgb3BlcmF0aW9uQXJndW1lbnRzLFxuICAgIHBhcmFtZXRlci5wYXJhbWV0ZXJQYXRoLFxuICAgIHBhcmFtZXRlci5tYXBwZXIsXG4gICAgc2VyaWFsaXplclxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXJQYXRoKFxuICBzZXJ2aWNlQ2xpZW50OiBTZXJ2aWNlQ2xpZW50LFxuICBvcGVyYXRpb25Bcmd1bWVudHM6IE9wZXJhdGlvbkFyZ3VtZW50cyxcbiAgcGFyYW1ldGVyUGF0aDogUGFyYW1ldGVyUGF0aCxcbiAgcGFyYW1ldGVyTWFwcGVyOiBNYXBwZXIsXG4gIHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXJcbik6IGFueSB7XG4gIGxldCB2YWx1ZTogYW55O1xuICBpZiAodHlwZW9mIHBhcmFtZXRlclBhdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXJhbWV0ZXJQYXRoID0gW3BhcmFtZXRlclBhdGhdO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHBhcmFtZXRlclBhdGgpKSB7XG4gICAgaWYgKHBhcmFtZXRlclBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHBhcmFtZXRlck1hcHBlci5pc0NvbnN0YW50KSB7XG4gICAgICAgIHZhbHVlID0gcGFyYW1ldGVyTWFwcGVyLmRlZmF1bHRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcm9wZXJ0eVNlYXJjaFJlc3VsdDogUHJvcGVydHlTZWFyY2hSZXN1bHQgPSBnZXRQcm9wZXJ0eUZyb21QYXJhbWV0ZXJQYXRoKFxuICAgICAgICAgIG9wZXJhdGlvbkFyZ3VtZW50cyxcbiAgICAgICAgICBwYXJhbWV0ZXJQYXRoXG4gICAgICAgICk7XG4gICAgICAgIGlmICghcHJvcGVydHlTZWFyY2hSZXN1bHQucHJvcGVydHlGb3VuZCkge1xuICAgICAgICAgIHByb3BlcnR5U2VhcmNoUmVzdWx0ID0gZ2V0UHJvcGVydHlGcm9tUGFyYW1ldGVyUGF0aChzZXJ2aWNlQ2xpZW50LCBwYXJhbWV0ZXJQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1c2VEZWZhdWx0VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFwcm9wZXJ0eVNlYXJjaFJlc3VsdC5wcm9wZXJ0eUZvdW5kKSB7XG4gICAgICAgICAgdXNlRGVmYXVsdFZhbHVlID1cbiAgICAgICAgICAgIHBhcmFtZXRlck1hcHBlci5yZXF1aXJlZCB8fFxuICAgICAgICAgICAgKHBhcmFtZXRlclBhdGhbMF0gPT09IFwib3B0aW9uc1wiICYmIHBhcmFtZXRlclBhdGgubGVuZ3RoID09PSAyKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHVzZURlZmF1bHRWYWx1ZSA/IHBhcmFtZXRlck1hcHBlci5kZWZhdWx0VmFsdWUgOiBwcm9wZXJ0eVNlYXJjaFJlc3VsdC5wcm9wZXJ0eVZhbHVlO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXJpYWxpemUganVzdCBmb3IgdmFsaWRhdGlvbiBwdXJwb3Nlcy5cbiAgICAgIGNvbnN0IHBhcmFtZXRlclBhdGhTdHJpbmc6IHN0cmluZyA9IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyUGF0aChcbiAgICAgICAgcGFyYW1ldGVyUGF0aCxcbiAgICAgICAgcGFyYW1ldGVyTWFwcGVyXG4gICAgICApO1xuICAgICAgc2VyaWFsaXplci5zZXJpYWxpemUocGFyYW1ldGVyTWFwcGVyLCB2YWx1ZSwgcGFyYW1ldGVyUGF0aFN0cmluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChwYXJhbWV0ZXJNYXBwZXIucmVxdWlyZWQpIHtcbiAgICAgIHZhbHVlID0ge307XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgaW4gcGFyYW1ldGVyUGF0aCkge1xuICAgICAgY29uc3QgcHJvcGVydHlNYXBwZXI6IE1hcHBlciA9IChwYXJhbWV0ZXJNYXBwZXIgYXMgQ29tcG9zaXRlTWFwcGVyKS50eXBlLm1vZGVsUHJvcGVydGllcyFbXG4gICAgICAgIHByb3BlcnR5TmFtZVxuICAgICAgXTtcbiAgICAgIGNvbnN0IHByb3BlcnR5UGF0aDogUGFyYW1ldGVyUGF0aCA9IHBhcmFtZXRlclBhdGhbcHJvcGVydHlOYW1lXTtcbiAgICAgIGNvbnN0IHByb3BlcnR5VmFsdWU6IGFueSA9IGdldE9wZXJhdGlvbkFyZ3VtZW50VmFsdWVGcm9tUGFyYW1ldGVyUGF0aChcbiAgICAgICAgc2VydmljZUNsaWVudCxcbiAgICAgICAgb3BlcmF0aW9uQXJndW1lbnRzLFxuICAgICAgICBwcm9wZXJ0eVBhdGgsXG4gICAgICAgIHByb3BlcnR5TWFwcGVyLFxuICAgICAgICBzZXJpYWxpemVyXG4gICAgICApO1xuICAgICAgLy8gU2VyaWFsaXplIGp1c3QgZm9yIHZhbGlkYXRpb24gcHVycG9zZXMuXG4gICAgICBjb25zdCBwcm9wZXJ0eVBhdGhTdHJpbmc6IHN0cmluZyA9IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyUGF0aChcbiAgICAgICAgcHJvcGVydHlQYXRoLFxuICAgICAgICBwcm9wZXJ0eU1hcHBlclxuICAgICAgKTtcbiAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplKHByb3BlcnR5TWFwcGVyLCBwcm9wZXJ0eVZhbHVlLCBwcm9wZXJ0eVBhdGhTdHJpbmcpO1xuICAgICAgaWYgKHByb3BlcnR5VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZVtwcm9wZXJ0eU5hbWVdID0gcHJvcGVydHlWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5pbnRlcmZhY2UgUHJvcGVydHlTZWFyY2hSZXN1bHQge1xuICBwcm9wZXJ0eVZhbHVlPzogYW55O1xuICBwcm9wZXJ0eUZvdW5kOiBib29sZWFuO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eUZyb21QYXJhbWV0ZXJQYXRoKFxuICBwYXJlbnQ6IHsgW3BhcmFtZXRlck5hbWU6IHN0cmluZ106IGFueSB9LFxuICBwYXJhbWV0ZXJQYXRoOiBzdHJpbmdbXVxuKTogUHJvcGVydHlTZWFyY2hSZXN1bHQge1xuICBjb25zdCByZXN1bHQ6IFByb3BlcnR5U2VhcmNoUmVzdWx0ID0geyBwcm9wZXJ0eUZvdW5kOiBmYWxzZSB9O1xuICBsZXQgaSA9IDA7XG4gIGZvciAoOyBpIDwgcGFyYW1ldGVyUGF0aC5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IHBhcmFtZXRlclBhdGhQYXJ0OiBzdHJpbmcgPSBwYXJhbWV0ZXJQYXRoW2ldO1xuICAgIC8vIE1ha2Ugc3VyZSB0byBjaGVjayBpbmhlcml0ZWQgcHJvcGVydGllcyB0b28sIHNvIGRvbid0IHVzZSBoYXNPd25Qcm9wZXJ0eSgpLlxuICAgIGlmIChwYXJlbnQgIT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlclBhdGhQYXJ0IGluIHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50W3BhcmFtZXRlclBhdGhQYXJ0XTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChpID09PSBwYXJhbWV0ZXJQYXRoLmxlbmd0aCkge1xuICAgIHJlc3VsdC5wcm9wZXJ0eVZhbHVlID0gcGFyZW50O1xuICAgIHJlc3VsdC5wcm9wZXJ0eUZvdW5kID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlblJlc3BvbnNlKFxuICBfcmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSxcbiAgcmVzcG9uc2VTcGVjOiBPcGVyYXRpb25SZXNwb25zZSB8IHVuZGVmaW5lZFxuKTogUmVzdFJlc3BvbnNlIHtcbiAgY29uc3QgcGFyc2VkSGVhZGVycyA9IF9yZXNwb25zZS5wYXJzZWRIZWFkZXJzO1xuICBjb25zdCBib2R5TWFwcGVyID0gcmVzcG9uc2VTcGVjICYmIHJlc3BvbnNlU3BlYy5ib2R5TWFwcGVyO1xuXG4gIGNvbnN0IGFkZE9wZXJhdGlvblJlc3BvbnNlID0gKG9iajoge30pID0+XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgXCJfcmVzcG9uc2VcIiwge1xuICAgICAgdmFsdWU6IF9yZXNwb25zZSxcbiAgICB9KTtcblxuICBpZiAoYm9keU1hcHBlcikge1xuICAgIGNvbnN0IHR5cGVOYW1lID0gYm9keU1hcHBlci50eXBlLm5hbWU7XG4gICAgaWYgKHR5cGVOYW1lID09PSBcIlN0cmVhbVwiKSB7XG4gICAgICByZXR1cm4gYWRkT3BlcmF0aW9uUmVzcG9uc2Uoe1xuICAgICAgICAuLi5wYXJzZWRIZWFkZXJzLFxuICAgICAgICBibG9iQm9keTogX3Jlc3BvbnNlLmJsb2JCb2R5LFxuICAgICAgICByZWFkYWJsZVN0cmVhbUJvZHk6IF9yZXNwb25zZS5yZWFkYWJsZVN0cmVhbUJvZHksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBtb2RlbFByb3BlcnRpZXMgPVxuICAgICAgKHR5cGVOYW1lID09PSBcIkNvbXBvc2l0ZVwiICYmIChib2R5TWFwcGVyIGFzIENvbXBvc2l0ZU1hcHBlcikudHlwZS5tb2RlbFByb3BlcnRpZXMpIHx8IHt9O1xuICAgIGNvbnN0IGlzUGFnZWFibGVSZXNwb25zZSA9IE9iamVjdC5rZXlzKG1vZGVsUHJvcGVydGllcykuc29tZShcbiAgICAgIChrKSA9PiBtb2RlbFByb3BlcnRpZXNba10uc2VyaWFsaXplZE5hbWUgPT09IFwiXCJcbiAgICApO1xuICAgIGlmICh0eXBlTmFtZSA9PT0gXCJTZXF1ZW5jZVwiIHx8IGlzUGFnZWFibGVSZXNwb25zZSkge1xuICAgICAgLy8gV2UncmUgZXhwZWN0aW5nIGEgc2VxdWVjZShhcnJheSkgbWFrZSBzdXJlIHRoYXQgdGhlIHJlc3BvbnNlIGJvZHkgaXMgaW4gdGhlXG4gICAgICAvLyBjb3JyZWN0IGZvcm1hdCwgaWYgbm90IG1ha2UgaXQgYW4gZW1wdHkgYXJyYXkgW11cbiAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBBcnJheS5pc0FycmF5KF9yZXNwb25zZS5wYXJzZWRCb2R5KSA/IF9yZXNwb25zZS5wYXJzZWRCb2R5IDogW107XG4gICAgICBjb25zdCBhcnJheVJlc3BvbnNlID0gWy4uLnBhcnNlZEJvZHldIGFzIFJlc3RSZXNwb25zZSAmIGFueVtdO1xuXG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtb2RlbFByb3BlcnRpZXMpKSB7XG4gICAgICAgIGlmIChtb2RlbFByb3BlcnRpZXNba2V5XS5zZXJpYWxpemVkTmFtZSkge1xuICAgICAgICAgIGFycmF5UmVzcG9uc2Vba2V5XSA9IF9yZXNwb25zZS5wYXJzZWRCb2R5W2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcnNlZEhlYWRlcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocGFyc2VkSGVhZGVycykpIHtcbiAgICAgICAgICBhcnJheVJlc3BvbnNlW2tleV0gPSBwYXJzZWRIZWFkZXJzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFkZE9wZXJhdGlvblJlc3BvbnNlKGFycmF5UmVzcG9uc2UpO1xuICAgICAgcmV0dXJuIGFycmF5UmVzcG9uc2U7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVOYW1lID09PSBcIkNvbXBvc2l0ZVwiIHx8IHR5cGVOYW1lID09PSBcIkRpY3Rpb25hcnlcIikge1xuICAgICAgcmV0dXJuIGFkZE9wZXJhdGlvblJlc3BvbnNlKHtcbiAgICAgICAgLi4ucGFyc2VkSGVhZGVycyxcbiAgICAgICAgLi4uX3Jlc3BvbnNlLnBhcnNlZEJvZHksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAoXG4gICAgYm9keU1hcHBlciB8fFxuICAgIF9yZXNwb25zZS5yZXF1ZXN0Lm1ldGhvZCA9PT0gXCJIRUFEXCIgfHxcbiAgICB1dGlscy5pc1ByaW1pdGl2ZVR5cGUoX3Jlc3BvbnNlLnBhcnNlZEJvZHkpXG4gICkge1xuICAgIC8vIHByaW1pdGl2ZSBib2R5IHR5cGVzIGFuZCBIRUFEIGJvb2xlYW5zXG4gICAgcmV0dXJuIGFkZE9wZXJhdGlvblJlc3BvbnNlKHtcbiAgICAgIC4uLnBhcnNlZEhlYWRlcnMsXG4gICAgICBib2R5OiBfcmVzcG9uc2UucGFyc2VkQm9keSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBhZGRPcGVyYXRpb25SZXNwb25zZSh7XG4gICAgLi4ucGFyc2VkSGVhZGVycyxcbiAgICAuLi5fcmVzcG9uc2UucGFyc2VkQm9keSxcbiAgfSk7XG59XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/operationParameter.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL29wZXJhdGlvblBhcmFtZXRlci50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL29wZXJhdGlvblBhcmFtZXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7O0FBa0QvRjs7OztHQUlHO0FBQ0gsU0FBZ0IsMEJBQTBCLENBQUMsU0FBNkI7SUFDdEUsT0FBTyw4QkFBOEIsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuRixDQUFDO0FBRkQsZ0VBRUM7QUFFRCxTQUFnQiw4QkFBOEIsQ0FDNUMsYUFBNEIsRUFDNUIsTUFBYztJQUVkLElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFO1FBQ3JDLE1BQU0sR0FBRyxhQUFhLENBQUM7S0FDeEI7U0FBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDdkMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbEM7U0FBTTtRQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsY0FBZSxDQUFDO0tBQ2pDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQWJELHdFQWFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBRdWVyeUNvbGxlY3Rpb25Gb3JtYXQgfSBmcm9tIFwiLi9xdWVyeUNvbGxlY3Rpb25Gb3JtYXRcIjtcbmltcG9ydCB7IE1hcHBlciB9IGZyb20gXCIuL3NlcmlhbGl6ZXJcIjtcblxuZXhwb3J0IHR5cGUgUGFyYW1ldGVyUGF0aCA9IHN0cmluZyB8IHN0cmluZ1tdIHwgeyBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBQYXJhbWV0ZXJQYXRoIH07XG5cbi8qKlxuICogQSBjb21tb24gaW50ZXJmYWNlIHRoYXQgYWxsIE9wZXJhdGlvbiBwYXJhbWV0ZXIncyBleHRlbmQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3BlcmF0aW9uUGFyYW1ldGVyIHtcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoaXMgcGFyYW1ldGVyJ3MgdmFsdWUgaW4gT3BlcmF0aW9uQXJndW1lbnRzIG9yIHRoZSBvYmplY3QgdGhhdCBjb250YWlucyBwYXRocyBmb3JcbiAgICogZWFjaCBwcm9wZXJ0eSdzIHZhbHVlIGluIE9wZXJhdGlvbkFyZ3VtZW50cy5cbiAgICovXG4gIHBhcmFtZXRlclBhdGg6IFBhcmFtZXRlclBhdGg7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXBwZXIgdGhhdCBkZWZpbmVzIGhvdyB0byB2YWxpZGF0ZSBhbmQgc2VyaWFsaXplIHRoaXMgcGFyYW1ldGVyJ3MgdmFsdWUuXG4gICAqL1xuICBtYXBwZXI6IE1hcHBlcjtcbn1cblxuLyoqXG4gKiBBIHBhcmFtZXRlciBmb3IgYW4gb3BlcmF0aW9uIHRoYXQgd2lsbCBiZSBzdWJzdGl0dXRlZCBpbnRvIHRoZSBvcGVyYXRpb24ncyByZXF1ZXN0IFVSTC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPcGVyYXRpb25VUkxQYXJhbWV0ZXIgZXh0ZW5kcyBPcGVyYXRpb25QYXJhbWV0ZXIge1xuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gc2tpcCBlbmNvZGluZyB0aGUgVVJMIHBhcmFtZXRlcidzIHZhbHVlIGJlZm9yZSBhZGRpbmcgaXQgdG8gdGhlIFVSTC5cbiAgICovXG4gIHNraXBFbmNvZGluZz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBwYXJhbWV0ZXIgZm9yIGFuIG9wZXJhdGlvbiB0aGF0IHdpbGwgYmUgYWRkZWQgYXMgYSBxdWVyeSBwYXJhbWV0ZXIgdG8gdGhlIG9wZXJhdGlvbidzIEhUVFBcbiAqIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3BlcmF0aW9uUXVlcnlQYXJhbWV0ZXIgZXh0ZW5kcyBPcGVyYXRpb25QYXJhbWV0ZXIge1xuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gc2tpcCBlbmNvZGluZyB0aGUgcXVlcnkgcGFyYW1ldGVyJ3MgdmFsdWUgYmVmb3JlIGFkZGluZyBpdCB0byB0aGUgVVJMLlxuICAgKi9cbiAgc2tpcEVuY29kaW5nPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSWYgdGhpcyBxdWVyeSBwYXJhbWV0ZXIncyB2YWx1ZSBpcyBhIGNvbGxlY3Rpb24sIHdoYXQgdHlwZSBvZiBmb3JtYXQgc2hvdWxkIHRoZSB2YWx1ZSBiZVxuICAgKiBjb252ZXJ0ZWQgdG8uXG4gICAqL1xuICBjb2xsZWN0aW9uRm9ybWF0PzogUXVlcnlDb2xsZWN0aW9uRm9ybWF0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgcGF0aCB0byB0aGlzIHBhcmFtZXRlcidzIHZhbHVlIGFzIGEgZG90dGVkIHN0cmluZyAoYS5iLmMpLlxuICogQHBhcmFtIHBhcmFtZXRlciBUaGUgcGFyYW1ldGVyIHRvIGdldCB0aGUgcGF0aCBzdHJpbmcgZm9yLlxuICogQHJldHVybnMgVGhlIHBhdGggdG8gdGhpcyBwYXJhbWV0ZXIncyB2YWx1ZSBhcyBhIGRvdHRlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihwYXJhbWV0ZXI6IE9wZXJhdGlvblBhcmFtZXRlcik6IHN0cmluZyB7XG4gIHJldHVybiBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlclBhdGgocGFyYW1ldGVyLnBhcmFtZXRlclBhdGgsIHBhcmFtZXRlci5tYXBwZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXJQYXRoKFxuICBwYXJhbWV0ZXJQYXRoOiBQYXJhbWV0ZXJQYXRoLFxuICBtYXBwZXI6IE1hcHBlclxuKTogc3RyaW5nIHtcbiAgbGV0IHJlc3VsdDogc3RyaW5nO1xuICBpZiAodHlwZW9mIHBhcmFtZXRlclBhdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXN1bHQgPSBwYXJhbWV0ZXJQYXRoO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1ldGVyUGF0aCkpIHtcbiAgICByZXN1bHQgPSBwYXJhbWV0ZXJQYXRoLmpvaW4oXCIuXCIpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IG1hcHBlci5zZXJpYWxpemVkTmFtZSE7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL29wZXJhdGlvblBhcmFtZXRlci50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL29wZXJhdGlvblBhcmFtZXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7O0FBa0QvRjs7OztHQUlHO0FBQ0gsU0FBZ0IsMEJBQTBCLENBQUMsU0FBNkI7SUFDdEUsT0FBTyw4QkFBOEIsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuRixDQUFDO0FBRkQsZ0VBRUM7QUFFRCxTQUFnQiw4QkFBOEIsQ0FDNUMsYUFBNEIsRUFDNUIsTUFBYztJQUVkLElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFO1FBQ3JDLE1BQU0sR0FBRyxhQUFhLENBQUM7S0FDeEI7U0FBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDdkMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbEM7U0FBTTtRQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsY0FBZSxDQUFDO0tBQ2pDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQWJELHdFQWFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBRdWVyeUNvbGxlY3Rpb25Gb3JtYXQgfSBmcm9tIFwiLi9xdWVyeUNvbGxlY3Rpb25Gb3JtYXRcIjtcbmltcG9ydCB7IE1hcHBlciB9IGZyb20gXCIuL3NlcmlhbGl6ZXJcIjtcblxuZXhwb3J0IHR5cGUgUGFyYW1ldGVyUGF0aCA9IHN0cmluZyB8IHN0cmluZ1tdIHwgeyBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBQYXJhbWV0ZXJQYXRoIH07XG5cbi8qKlxuICogQSBjb21tb24gaW50ZXJmYWNlIHRoYXQgYWxsIE9wZXJhdGlvbiBwYXJhbWV0ZXIncyBleHRlbmQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3BlcmF0aW9uUGFyYW1ldGVyIHtcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoaXMgcGFyYW1ldGVyJ3MgdmFsdWUgaW4gT3BlcmF0aW9uQXJndW1lbnRzIG9yIHRoZSBvYmplY3QgdGhhdCBjb250YWlucyBwYXRocyBmb3JcbiAgICogZWFjaCBwcm9wZXJ0eSdzIHZhbHVlIGluIE9wZXJhdGlvbkFyZ3VtZW50cy5cbiAgICovXG4gIHBhcmFtZXRlclBhdGg6IFBhcmFtZXRlclBhdGg7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXBwZXIgdGhhdCBkZWZpbmVzIGhvdyB0byB2YWxpZGF0ZSBhbmQgc2VyaWFsaXplIHRoaXMgcGFyYW1ldGVyJ3MgdmFsdWUuXG4gICAqL1xuICBtYXBwZXI6IE1hcHBlcjtcbn1cblxuLyoqXG4gKiBBIHBhcmFtZXRlciBmb3IgYW4gb3BlcmF0aW9uIHRoYXQgd2lsbCBiZSBzdWJzdGl0dXRlZCBpbnRvIHRoZSBvcGVyYXRpb24ncyByZXF1ZXN0IFVSTC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPcGVyYXRpb25VUkxQYXJhbWV0ZXIgZXh0ZW5kcyBPcGVyYXRpb25QYXJhbWV0ZXIge1xuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gc2tpcCBlbmNvZGluZyB0aGUgVVJMIHBhcmFtZXRlcidzIHZhbHVlIGJlZm9yZSBhZGRpbmcgaXQgdG8gdGhlIFVSTC5cbiAgICovXG4gIHNraXBFbmNvZGluZz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBwYXJhbWV0ZXIgZm9yIGFuIG9wZXJhdGlvbiB0aGF0IHdpbGwgYmUgYWRkZWQgYXMgYSBxdWVyeSBwYXJhbWV0ZXIgdG8gdGhlIG9wZXJhdGlvbidzIEhUVFBcbiAqIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3BlcmF0aW9uUXVlcnlQYXJhbWV0ZXIgZXh0ZW5kcyBPcGVyYXRpb25QYXJhbWV0ZXIge1xuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gc2tpcCBlbmNvZGluZyB0aGUgcXVlcnkgcGFyYW1ldGVyJ3MgdmFsdWUgYmVmb3JlIGFkZGluZyBpdCB0byB0aGUgVVJMLlxuICAgKi9cbiAgc2tpcEVuY29kaW5nPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSWYgdGhpcyBxdWVyeSBwYXJhbWV0ZXIncyB2YWx1ZSBpcyBhIGNvbGxlY3Rpb24sIHdoYXQgdHlwZSBvZiBmb3JtYXQgc2hvdWxkIHRoZSB2YWx1ZSBiZVxuICAgKiBjb252ZXJ0ZWQgdG8uXG4gICAqL1xuICBjb2xsZWN0aW9uRm9ybWF0PzogUXVlcnlDb2xsZWN0aW9uRm9ybWF0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgcGF0aCB0byB0aGlzIHBhcmFtZXRlcidzIHZhbHVlIGFzIGEgZG90dGVkIHN0cmluZyAoYS5iLmMpLlxuICogQHBhcmFtIHBhcmFtZXRlciBUaGUgcGFyYW1ldGVyIHRvIGdldCB0aGUgcGF0aCBzdHJpbmcgZm9yLlxuICogQHJldHVybnMgVGhlIHBhdGggdG8gdGhpcyBwYXJhbWV0ZXIncyB2YWx1ZSBhcyBhIGRvdHRlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihwYXJhbWV0ZXI6IE9wZXJhdGlvblBhcmFtZXRlcik6IHN0cmluZyB7XG4gIHJldHVybiBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlclBhdGgocGFyYW1ldGVyLnBhcmFtZXRlclBhdGgsIHBhcmFtZXRlci5tYXBwZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXJQYXRoKFxuICBwYXJhbWV0ZXJQYXRoOiBQYXJhbWV0ZXJQYXRoLFxuICBtYXBwZXI6IE1hcHBlclxuKTogc3RyaW5nIHtcbiAgbGV0IHJlc3VsdDogc3RyaW5nO1xuICBpZiAodHlwZW9mIHBhcmFtZXRlclBhdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXN1bHQgPSBwYXJhbWV0ZXJQYXRoO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1ldGVyUGF0aCkpIHtcbiAgICByZXN1bHQgPSBwYXJhbWV0ZXJQYXRoLmpvaW4oXCIuXCIpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IG1hcHBlci5zZXJpYWxpemVkTmFtZSE7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/operationSpec.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL29wZXJhdGlvblNwZWMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9vcGVyYXRpb25TcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFRL0YsMkNBQXNEO0FBMkV0RCxTQUFnQixpQkFBaUIsQ0FBQyxhQUE0QjtJQUM1RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDbkIsS0FBSyxJQUFNLFVBQVUsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFO1FBQ2hELElBQU0saUJBQWlCLEdBQXNCLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakYsSUFDRSxpQkFBaUIsQ0FBQyxVQUFVO1lBQzVCLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLHVCQUFVLENBQUMsTUFBTSxFQUM1RDtZQUNBLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDZCxNQUFNO1NBQ1A7S0FDRjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFiRCw4Q0FhQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHtcbiAgT3BlcmF0aW9uUGFyYW1ldGVyLFxuICBPcGVyYXRpb25RdWVyeVBhcmFtZXRlcixcbiAgT3BlcmF0aW9uVVJMUGFyYW1ldGVyLFxufSBmcm9tIFwiLi9vcGVyYXRpb25QYXJhbWV0ZXJcIjtcbmltcG9ydCB7IE9wZXJhdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4vb3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IE1hcHBlclR5cGUsIFNlcmlhbGl6ZXIgfSBmcm9tIFwiLi9zZXJpYWxpemVyXCI7XG5pbXBvcnQgeyBIdHRwTWV0aG9kcyB9IGZyb20gXCIuL3dlYlJlc291cmNlXCI7XG5cbi8qKlxuICogQSBzcGVjaWZpY2F0aW9uIHRoYXQgZGVmaW5lcyBhbiBvcGVyYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3BlcmF0aW9uU3BlYyB7XG4gIC8qKlxuICAgKiBUaGUgc2VyaWFsaXplciB0byB1c2UgaW4gdGhpcyBvcGVyYXRpb24uXG4gICAqL1xuICByZWFkb25seSBzZXJpYWxpemVyOiBTZXJpYWxpemVyO1xuXG4gIC8qKlxuICAgKiBUaGUgSFRUUCBtZXRob2QgdGhhdCBzaG91bGQgYmUgdXNlZCBieSByZXF1ZXN0cyBmb3IgdGhpcyBvcGVyYXRpb24uXG4gICAqL1xuICByZWFkb25seSBodHRwTWV0aG9kOiBIdHRwTWV0aG9kcztcblxuICAvKipcbiAgICogVGhlIFVSTCB0aGF0IHdhcyBwcm92aWRlZCBpbiB0aGUgc2VydmljZSdzIHNwZWNpZmljYXRpb24uIFRoaXMgd2lsbCBzdGlsbCBoYXZlIGFsbCBvZiB0aGUgVVJMXG4gICAqIHRlbXBsYXRlIHZhcmlhYmxlcyBpbiBpdC4gSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQgd2hlbiB0aGUgT3BlcmF0aW9uU3BlYyBpcyBjcmVhdGVkLCB0aGVuIGl0XG4gICAqIHdpbGwgYmUgcG9wdWxhdGVkIGJ5IGEgXCJiYXNlVXJpXCIgcHJvcGVydHkgb24gdGhlIFNlcnZpY2VDbGllbnQuXG4gICAqL1xuICByZWFkb25seSBiYXNlVXJsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZml4ZWQgcGF0aCBmb3IgdGhpcyBvcGVyYXRpb24ncyBVUkwuIFRoaXMgd2lsbCBzdGlsbCBoYXZlIGFsbCBvZiB0aGUgVVJMIHRlbXBsYXRlIHZhcmlhYmxlc1xuICAgKiBpbiBpdC5cbiAgICovXG4gIHJlYWRvbmx5IHBhdGg/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHR5cGUgb2YgdGhlIHJlcXVlc3QgYm9keS4gVGhpcyB2YWx1ZSB3aWxsIGJlIHVzZWQgYXMgdGhlIFwiQ29udGVudC1UeXBlXCIgaGVhZGVyIGlmXG4gICAqIGl0IGlzIHByb3ZpZGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgY29udGVudFR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJhbWV0ZXIgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY29uc3RydWN0IHRoZSBIVFRQIHJlcXVlc3QncyBib2R5LlxuICAgKi9cbiAgcmVhZG9ubHkgcmVxdWVzdEJvZHk/OiBPcGVyYXRpb25QYXJhbWV0ZXI7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgb3BlcmF0aW9uIHVzZXMgWE1MIHJlcXVlc3QgYW5kIHJlc3BvbnNlIGJvZGllcy5cbiAgICovXG4gIHJlYWRvbmx5IGlzWE1MPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHBhcmFtZXRlcnMgdG8gdGhlIG9wZXJhdGlvbiBtZXRob2QgdGhhdCB3aWxsIGJlIHN1YnN0aXR1dGVkIGludG8gdGhlIGNvbnN0cnVjdGVkIFVSTC5cbiAgICovXG4gIHJlYWRvbmx5IHVybFBhcmFtZXRlcnM/OiBSZWFkb25seUFycmF5PE9wZXJhdGlvblVSTFBhcmFtZXRlcj47XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJhbWV0ZXJzIHRvIHRoZSBvcGVyYXRpb24gbWV0aG9kIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgY29uc3RydWN0ZWQgVVJMJ3MgcXVlcnkuXG4gICAqL1xuICByZWFkb25seSBxdWVyeVBhcmFtZXRlcnM/OiBSZWFkb25seUFycmF5PE9wZXJhdGlvblF1ZXJ5UGFyYW1ldGVyPjtcblxuICAvKipcbiAgICogVGhlIHBhcmFtZXRlcnMgdG8gdGhlIG9wZXJhdGlvbiBtZXRob2QgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBoZWFkZXJzIG9uIHRoZSBvcGVyYXRpb24nc1xuICAgKiBIVFRQIHJlcXVlc3QuXG4gICAqL1xuICByZWFkb25seSBoZWFkZXJQYXJhbWV0ZXJzPzogUmVhZG9ubHlBcnJheTxPcGVyYXRpb25QYXJhbWV0ZXI+O1xuXG4gIC8qKlxuICAgKiBUaGUgcGFyYW1ldGVycyB0byB0aGUgb3BlcmF0aW9uIG1ldGhvZCB0aGF0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBmb3JtZGF0YSBib2R5IGZvciB0aGVcbiAgICogb3BlcmF0aW9uJ3MgSFRUUCByZXF1ZXN0LlxuICAgKi9cbiAgcmVhZG9ubHkgZm9ybURhdGFQYXJhbWV0ZXJzPzogUmVhZG9ubHlBcnJheTxPcGVyYXRpb25QYXJhbWV0ZXI+O1xuXG4gIC8qKlxuICAgKiBUaGUgZGlmZmVyZW50IHR5cGVzIG9mIHJlc3BvbnNlcyB0aGF0IHRoaXMgb3BlcmF0aW9uIGNhbiByZXR1cm4gYmFzZWQgb24gd2hhdCBzdGF0dXMgY29kZSBpc1xuICAgKiByZXR1cm5lZC5cbiAgICovXG4gIHJlYWRvbmx5IHJlc3BvbnNlczogeyBbcmVzcG9uc2VDb2RlOiBzdHJpbmddOiBPcGVyYXRpb25SZXNwb25zZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJlYW1PcGVyYXRpb24ob3BlcmF0aW9uU3BlYzogT3BlcmF0aW9uU3BlYyk6IGJvb2xlYW4ge1xuICBsZXQgcmVzdWx0ID0gZmFsc2U7XG4gIGZvciAoY29uc3Qgc3RhdHVzQ29kZSBpbiBvcGVyYXRpb25TcGVjLnJlc3BvbnNlcykge1xuICAgIGNvbnN0IG9wZXJhdGlvblJlc3BvbnNlOiBPcGVyYXRpb25SZXNwb25zZSA9IG9wZXJhdGlvblNwZWMucmVzcG9uc2VzW3N0YXR1c0NvZGVdO1xuICAgIGlmIChcbiAgICAgIG9wZXJhdGlvblJlc3BvbnNlLmJvZHlNYXBwZXIgJiZcbiAgICAgIG9wZXJhdGlvblJlc3BvbnNlLmJvZHlNYXBwZXIudHlwZS5uYW1lID09PSBNYXBwZXJUeXBlLlN0cmVhbVxuICAgICkge1xuICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL29wZXJhdGlvblNwZWMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9vcGVyYXRpb25TcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFRL0YsMkNBQXNEO0FBMkV0RCxTQUFnQixpQkFBaUIsQ0FBQyxhQUE0QjtJQUM1RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDbkIsS0FBSyxJQUFNLFVBQVUsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFO1FBQ2hELElBQU0saUJBQWlCLEdBQXNCLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakYsSUFDRSxpQkFBaUIsQ0FBQyxVQUFVO1lBQzVCLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLHVCQUFVLENBQUMsTUFBTSxFQUM1RDtZQUNBLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDZCxNQUFNO1NBQ1A7S0FDRjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFiRCw4Q0FhQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHtcbiAgT3BlcmF0aW9uUGFyYW1ldGVyLFxuICBPcGVyYXRpb25RdWVyeVBhcmFtZXRlcixcbiAgT3BlcmF0aW9uVVJMUGFyYW1ldGVyLFxufSBmcm9tIFwiLi9vcGVyYXRpb25QYXJhbWV0ZXJcIjtcbmltcG9ydCB7IE9wZXJhdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4vb3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IE1hcHBlclR5cGUsIFNlcmlhbGl6ZXIgfSBmcm9tIFwiLi9zZXJpYWxpemVyXCI7XG5pbXBvcnQgeyBIdHRwTWV0aG9kcyB9IGZyb20gXCIuL3dlYlJlc291cmNlXCI7XG5cbi8qKlxuICogQSBzcGVjaWZpY2F0aW9uIHRoYXQgZGVmaW5lcyBhbiBvcGVyYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3BlcmF0aW9uU3BlYyB7XG4gIC8qKlxuICAgKiBUaGUgc2VyaWFsaXplciB0byB1c2UgaW4gdGhpcyBvcGVyYXRpb24uXG4gICAqL1xuICByZWFkb25seSBzZXJpYWxpemVyOiBTZXJpYWxpemVyO1xuXG4gIC8qKlxuICAgKiBUaGUgSFRUUCBtZXRob2QgdGhhdCBzaG91bGQgYmUgdXNlZCBieSByZXF1ZXN0cyBmb3IgdGhpcyBvcGVyYXRpb24uXG4gICAqL1xuICByZWFkb25seSBodHRwTWV0aG9kOiBIdHRwTWV0aG9kcztcblxuICAvKipcbiAgICogVGhlIFVSTCB0aGF0IHdhcyBwcm92aWRlZCBpbiB0aGUgc2VydmljZSdzIHNwZWNpZmljYXRpb24uIFRoaXMgd2lsbCBzdGlsbCBoYXZlIGFsbCBvZiB0aGUgVVJMXG4gICAqIHRlbXBsYXRlIHZhcmlhYmxlcyBpbiBpdC4gSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQgd2hlbiB0aGUgT3BlcmF0aW9uU3BlYyBpcyBjcmVhdGVkLCB0aGVuIGl0XG4gICAqIHdpbGwgYmUgcG9wdWxhdGVkIGJ5IGEgXCJiYXNlVXJpXCIgcHJvcGVydHkgb24gdGhlIFNlcnZpY2VDbGllbnQuXG4gICAqL1xuICByZWFkb25seSBiYXNlVXJsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZml4ZWQgcGF0aCBmb3IgdGhpcyBvcGVyYXRpb24ncyBVUkwuIFRoaXMgd2lsbCBzdGlsbCBoYXZlIGFsbCBvZiB0aGUgVVJMIHRlbXBsYXRlIHZhcmlhYmxlc1xuICAgKiBpbiBpdC5cbiAgICovXG4gIHJlYWRvbmx5IHBhdGg/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHR5cGUgb2YgdGhlIHJlcXVlc3QgYm9keS4gVGhpcyB2YWx1ZSB3aWxsIGJlIHVzZWQgYXMgdGhlIFwiQ29udGVudC1UeXBlXCIgaGVhZGVyIGlmXG4gICAqIGl0IGlzIHByb3ZpZGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgY29udGVudFR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJhbWV0ZXIgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY29uc3RydWN0IHRoZSBIVFRQIHJlcXVlc3QncyBib2R5LlxuICAgKi9cbiAgcmVhZG9ubHkgcmVxdWVzdEJvZHk/OiBPcGVyYXRpb25QYXJhbWV0ZXI7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgb3BlcmF0aW9uIHVzZXMgWE1MIHJlcXVlc3QgYW5kIHJlc3BvbnNlIGJvZGllcy5cbiAgICovXG4gIHJlYWRvbmx5IGlzWE1MPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHBhcmFtZXRlcnMgdG8gdGhlIG9wZXJhdGlvbiBtZXRob2QgdGhhdCB3aWxsIGJlIHN1YnN0aXR1dGVkIGludG8gdGhlIGNvbnN0cnVjdGVkIFVSTC5cbiAgICovXG4gIHJlYWRvbmx5IHVybFBhcmFtZXRlcnM/OiBSZWFkb25seUFycmF5PE9wZXJhdGlvblVSTFBhcmFtZXRlcj47XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJhbWV0ZXJzIHRvIHRoZSBvcGVyYXRpb24gbWV0aG9kIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgY29uc3RydWN0ZWQgVVJMJ3MgcXVlcnkuXG4gICAqL1xuICByZWFkb25seSBxdWVyeVBhcmFtZXRlcnM/OiBSZWFkb25seUFycmF5PE9wZXJhdGlvblF1ZXJ5UGFyYW1ldGVyPjtcblxuICAvKipcbiAgICogVGhlIHBhcmFtZXRlcnMgdG8gdGhlIG9wZXJhdGlvbiBtZXRob2QgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBoZWFkZXJzIG9uIHRoZSBvcGVyYXRpb24nc1xuICAgKiBIVFRQIHJlcXVlc3QuXG4gICAqL1xuICByZWFkb25seSBoZWFkZXJQYXJhbWV0ZXJzPzogUmVhZG9ubHlBcnJheTxPcGVyYXRpb25QYXJhbWV0ZXI+O1xuXG4gIC8qKlxuICAgKiBUaGUgcGFyYW1ldGVycyB0byB0aGUgb3BlcmF0aW9uIG1ldGhvZCB0aGF0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBmb3JtZGF0YSBib2R5IGZvciB0aGVcbiAgICogb3BlcmF0aW9uJ3MgSFRUUCByZXF1ZXN0LlxuICAgKi9cbiAgcmVhZG9ubHkgZm9ybURhdGFQYXJhbWV0ZXJzPzogUmVhZG9ubHlBcnJheTxPcGVyYXRpb25QYXJhbWV0ZXI+O1xuXG4gIC8qKlxuICAgKiBUaGUgZGlmZmVyZW50IHR5cGVzIG9mIHJlc3BvbnNlcyB0aGF0IHRoaXMgb3BlcmF0aW9uIGNhbiByZXR1cm4gYmFzZWQgb24gd2hhdCBzdGF0dXMgY29kZSBpc1xuICAgKiByZXR1cm5lZC5cbiAgICovXG4gIHJlYWRvbmx5IHJlc3BvbnNlczogeyBbcmVzcG9uc2VDb2RlOiBzdHJpbmddOiBPcGVyYXRpb25SZXNwb25zZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJlYW1PcGVyYXRpb24ob3BlcmF0aW9uU3BlYzogT3BlcmF0aW9uU3BlYyk6IGJvb2xlYW4ge1xuICBsZXQgcmVzdWx0ID0gZmFsc2U7XG4gIGZvciAoY29uc3Qgc3RhdHVzQ29kZSBpbiBvcGVyYXRpb25TcGVjLnJlc3BvbnNlcykge1xuICAgIGNvbnN0IG9wZXJhdGlvblJlc3BvbnNlOiBPcGVyYXRpb25SZXNwb25zZSA9IG9wZXJhdGlvblNwZWMucmVzcG9uc2VzW3N0YXR1c0NvZGVdO1xuICAgIGlmIChcbiAgICAgIG9wZXJhdGlvblJlc3BvbnNlLmJvZHlNYXBwZXIgJiZcbiAgICAgIG9wZXJhdGlvblJlc3BvbnNlLmJvZHlNYXBwZXIudHlwZS5uYW1lID09PSBNYXBwZXJUeXBlLlN0cmVhbVxuICAgICkge1xuICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/deserializationPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/util/xml.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/util/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3V0aWwveG1sLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvdXRpbC94bWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFFL0YscURBQWlDO0FBRWpDLFNBQWdCLFlBQVksQ0FBQyxHQUFRLEVBQUUsSUFBNEI7SUFDakUsSUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ2pDLFFBQVEsRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRO1FBQy9CLFVBQVUsRUFBRTtZQUNWLE1BQU0sRUFBRSxLQUFLO1NBQ2Q7S0FDRixDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQVJELG9DQVFDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLEdBQVc7SUFDbEMsSUFBTSxTQUFTLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2xDLGFBQWEsRUFBRSxLQUFLO1FBQ3BCLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLFlBQVksRUFBRSxLQUFLO0tBQ3BCLENBQUMsQ0FBQztJQUNILE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztTQUN4QzthQUFNO1lBQ0wsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsVUFBQyxHQUFRLEVBQUUsR0FBUTtnQkFDNUMsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNiO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDZDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFuQkQsNEJBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgKiBhcyB4bWwyanMgZnJvbSBcInhtbDJqc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5WE1MKG9iajogYW55LCBvcHRzPzogeyByb290TmFtZT86IHN0cmluZyB9KSB7XG4gIGNvbnN0IGJ1aWxkZXIgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoe1xuICAgIHJvb3ROYW1lOiAob3B0cyB8fCB7fSkucm9vdE5hbWUsXG4gICAgcmVuZGVyT3B0czoge1xuICAgICAgcHJldHR5OiBmYWxzZSxcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIGJ1aWxkZXIuYnVpbGRPYmplY3Qob2JqKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWE1MKHN0cjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgY29uc3QgeG1sUGFyc2VyID0gbmV3IHhtbDJqcy5QYXJzZXIoe1xuICAgIGV4cGxpY2l0QXJyYXk6IGZhbHNlLFxuICAgIGV4cGxpY2l0Q2hhcmtleTogZmFsc2UsXG4gICAgZXhwbGljaXRSb290OiBmYWxzZSxcbiAgfSk7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKCFzdHIpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJEb2N1bWVudCBpcyBlbXB0eVwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHhtbFBhcnNlci5wYXJzZVN0cmluZyhzdHIsIChlcnI6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/util/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3V0aWwveG1sLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvdXRpbC94bWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFFL0YscURBQWlDO0FBRWpDLFNBQWdCLFlBQVksQ0FBQyxHQUFRLEVBQUUsSUFBNEI7SUFDakUsSUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ2pDLFFBQVEsRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRO1FBQy9CLFVBQVUsRUFBRTtZQUNWLE1BQU0sRUFBRSxLQUFLO1NBQ2Q7S0FDRixDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQVJELG9DQVFDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLEdBQVc7SUFDbEMsSUFBTSxTQUFTLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2xDLGFBQWEsRUFBRSxLQUFLO1FBQ3BCLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLFlBQVksRUFBRSxLQUFLO0tBQ3BCLENBQUMsQ0FBQztJQUNILE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztTQUN4QzthQUFNO1lBQ0wsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsVUFBQyxHQUFRLEVBQUUsR0FBUTtnQkFDNUMsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNiO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDZDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFuQkQsNEJBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgKiBhcyB4bWwyanMgZnJvbSBcInhtbDJqc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5WE1MKG9iajogYW55LCBvcHRzPzogeyByb290TmFtZT86IHN0cmluZyB9KSB7XG4gIGNvbnN0IGJ1aWxkZXIgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoe1xuICAgIHJvb3ROYW1lOiAob3B0cyB8fCB7fSkucm9vdE5hbWUsXG4gICAgcmVuZGVyT3B0czoge1xuICAgICAgcHJldHR5OiBmYWxzZSxcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIGJ1aWxkZXIuYnVpbGRPYmplY3Qob2JqKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWE1MKHN0cjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgY29uc3QgeG1sUGFyc2VyID0gbmV3IHhtbDJqcy5QYXJzZXIoe1xuICAgIGV4cGxpY2l0QXJyYXk6IGZhbHNlLFxuICAgIGV4cGxpY2l0Q2hhcmtleTogZmFsc2UsXG4gICAgZXhwbGljaXRSb290OiBmYWxzZSxcbiAgfSk7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKCFzdHIpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJEb2N1bWVudCBpcyBlbXB0eVwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHhtbFBhcnNlci5wYXJzZVN0cmluZyhzdHIsIChlcnI6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/requestPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3JlcXVlc3RQb2xpY3kudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9wb2xpY2llcy9yZXF1ZXN0UG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFJL0YsZ0VBQStEO0FBYy9EO0lBQ0UsMkJBQ1csV0FBMEIsRUFDMUIsUUFBa0M7UUFEbEMsZ0JBQVcsR0FBWCxXQUFXLENBQWU7UUFDMUIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7SUFDMUMsQ0FBQztJQUlKOzs7O09BSUc7SUFDSSxxQ0FBUyxHQUFoQixVQUFpQixRQUE4QjtRQUM3QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLCtCQUFHLEdBQVYsVUFBVyxRQUE4QixFQUFFLE9BQWU7UUFDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUExQkQsSUEwQkM7QUExQnFCLDhDQUFpQjtBQWdEdkM7O0dBRUc7QUFDSDtJQUNFLDhCQUFvQixPQUE0QjtRQUE1QixZQUFPLEdBQVAsT0FBTyxDQUFxQjtJQUFHLENBQUM7SUFFcEQ7Ozs7T0FJRztJQUNJLHdDQUFTLEdBQWhCLFVBQWlCLFFBQThCO1FBQzdDLE9BQU8sQ0FDTCxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDZCxRQUFRLEtBQUssMkNBQW9CLENBQUMsR0FBRztZQUNyQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQ3pDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxrQ0FBRyxHQUFWLFVBQVcsUUFBOEIsRUFBRSxPQUFlO1FBQ3hELElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUEzQkQsSUEyQkM7QUEzQlksb0RBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgfSBmcm9tIFwiLi4vaHR0cE9wZXJhdGlvblJlc3BvbnNlXCI7XG5pbXBvcnQgeyBIdHRwUGlwZWxpbmVMb2dnZXIgfSBmcm9tIFwiLi4vaHR0cFBpcGVsaW5lTG9nZ2VyXCI7XG5pbXBvcnQgeyBIdHRwUGlwZWxpbmVMb2dMZXZlbCB9IGZyb20gXCIuLi9odHRwUGlwZWxpbmVMb2dMZXZlbFwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBSZXF1ZXN0UG9saWN5IHBlci1yZXF1ZXN0IHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgbmV4dFBvbGljeS5cbiAqL1xuZXhwb3J0IHR5cGUgUmVxdWVzdFBvbGljeUZhY3RvcnkgPSB7XG4gIGNyZWF0ZShuZXh0UG9saWN5OiBSZXF1ZXN0UG9saWN5LCBvcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UpOiBSZXF1ZXN0UG9saWN5O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0UG9saWN5IHtcbiAgc2VuZFJlcXVlc3QoaHR0cFJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPjtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VSZXF1ZXN0UG9saWN5IGltcGxlbWVudHMgUmVxdWVzdFBvbGljeSB7XG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBfbmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSxcbiAgICByZWFkb25seSBfb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlXG4gICkge31cblxuICBwdWJsaWMgYWJzdHJhY3Qgc2VuZFJlcXVlc3Qod2ViUmVzb3VyY2U6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPjtcblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwgVGhlIGxvZyBsZXZlbCBvZiB0aGUgbG9nIHRoYXQgd2lsbCBiZSBsb2dnZWQuXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKi9cbiAgcHVibGljIHNob3VsZExvZyhsb2dMZXZlbDogSHR0cFBpcGVsaW5lTG9nTGV2ZWwpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5zaG91bGRMb2cobG9nTGV2ZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gbG9nIHRoZSBwcm92aWRlZCBtZXNzYWdlIHRvIHRoZSBwcm92aWRlZCBsb2dnZXIuIElmIG5vIGxvZ2dlciB3YXMgcHJvdmlkZWQgb3IgaWZcbiAgICogdGhlIGxvZyBsZXZlbCBkb2VzIG5vdCBtZWF0IHRoZSBsb2dnZXIncyB0aHJlc2hvbGQsIHRoZW4gbm90aGluZyB3aWxsIGJlIGxvZ2dlZC5cbiAgICogQHBhcmFtIGxvZ0xldmVsIFRoZSBsb2cgbGV2ZWwgb2YgdGhpcyBsb2cuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoaXMgbG9nLlxuICAgKi9cbiAgcHVibGljIGxvZyhsb2dMZXZlbDogSHR0cFBpcGVsaW5lTG9nTGV2ZWwsIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuX29wdGlvbnMubG9nKGxvZ0xldmVsLCBtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbmFsIHByb3BlcnRpZXMgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGEgUmVxdWVzdFBvbGljeS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2Uge1xuICAvKipcbiAgICogR2V0IHdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwgVGhlIGxvZyBsZXZlbCBvZiB0aGUgbG9nIHRoYXQgd2lsbCBiZSBsb2dnZWQuXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKi9cbiAgc2hvdWxkTG9nKGxvZ0xldmVsOiBIdHRwUGlwZWxpbmVMb2dMZXZlbCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gbG9nIHRoZSBwcm92aWRlZCBtZXNzYWdlIHRvIHRoZSBwcm92aWRlZCBsb2dnZXIuIElmIG5vIGxvZ2dlciB3YXMgcHJvdmlkZWQgb3IgaWZcbiAgICogdGhlIGxvZyBsZXZlbCBkb2VzIG5vdCBtZWV0IHRoZSBsb2dnZXIncyB0aHJlc2hvbGQsIHRoZW4gbm90aGluZyB3aWxsIGJlIGxvZ2dlZC5cbiAgICogQHBhcmFtIGxvZ0xldmVsIFRoZSBsb2cgbGV2ZWwgb2YgdGhpcyBsb2cuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoaXMgbG9nLlxuICAgKi9cbiAgbG9nKGxvZ0xldmVsOiBIdHRwUGlwZWxpbmVMb2dMZXZlbCwgbWVzc2FnZTogc3RyaW5nKTogdm9pZDtcbn1cblxuLyoqXG4gKiBPcHRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiBjcmVhdGluZyBhIFJlcXVlc3RQb2xpY3kuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0UG9saWN5T3B0aW9ucyBpbXBsZW1lbnRzIFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2xvZ2dlcj86IEh0dHBQaXBlbGluZUxvZ2dlcikge31cblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwgVGhlIGxvZyBsZXZlbCBvZiB0aGUgbG9nIHRoYXQgd2lsbCBiZSBsb2dnZWQuXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKi9cbiAgcHVibGljIHNob3VsZExvZyhsb2dMZXZlbDogSHR0cFBpcGVsaW5lTG9nTGV2ZWwpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgISF0aGlzLl9sb2dnZXIgJiZcbiAgICAgIGxvZ0xldmVsICE9PSBIdHRwUGlwZWxpbmVMb2dMZXZlbC5PRkYgJiZcbiAgICAgIGxvZ0xldmVsIDw9IHRoaXMuX2xvZ2dlci5taW5pbXVtTG9nTGV2ZWxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gbG9nIHRoZSBwcm92aWRlZCBtZXNzYWdlIHRvIHRoZSBwcm92aWRlZCBsb2dnZXIuIElmIG5vIGxvZ2dlciB3YXMgcHJvdmlkZWQgb3IgaWZcbiAgICogdGhlIGxvZyBsZXZlbCBkb2VzIG5vdCBtZWF0IHRoZSBsb2dnZXIncyB0aHJlc2hvbGQsIHRoZW4gbm90aGluZyB3aWxsIGJlIGxvZ2dlZC5cbiAgICogQHBhcmFtIGxvZ0xldmVsIFRoZSBsb2cgbGV2ZWwgb2YgdGhpcyBsb2cuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoaXMgbG9nLlxuICAgKi9cbiAgcHVibGljIGxvZyhsb2dMZXZlbDogSHR0cFBpcGVsaW5lTG9nTGV2ZWwsIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9sb2dnZXIgJiYgdGhpcy5zaG91bGRMb2cobG9nTGV2ZWwpKSB7XG4gICAgICB0aGlzLl9sb2dnZXIubG9nKGxvZ0xldmVsLCBtZXNzYWdlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3JlcXVlc3RQb2xpY3kudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9wb2xpY2llcy9yZXF1ZXN0UG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFJL0YsZ0VBQStEO0FBYy9EO0lBQ0UsMkJBQ1csV0FBMEIsRUFDMUIsUUFBa0M7UUFEbEMsZ0JBQVcsR0FBWCxXQUFXLENBQWU7UUFDMUIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7SUFDMUMsQ0FBQztJQUlKOzs7O09BSUc7SUFDSSxxQ0FBUyxHQUFoQixVQUFpQixRQUE4QjtRQUM3QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLCtCQUFHLEdBQVYsVUFBVyxRQUE4QixFQUFFLE9BQWU7UUFDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUExQkQsSUEwQkM7QUExQnFCLDhDQUFpQjtBQWdEdkM7O0dBRUc7QUFDSDtJQUNFLDhCQUFvQixPQUE0QjtRQUE1QixZQUFPLEdBQVAsT0FBTyxDQUFxQjtJQUFHLENBQUM7SUFFcEQ7Ozs7T0FJRztJQUNJLHdDQUFTLEdBQWhCLFVBQWlCLFFBQThCO1FBQzdDLE9BQU8sQ0FDTCxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDZCxRQUFRLEtBQUssMkNBQW9CLENBQUMsR0FBRztZQUNyQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQ3pDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxrQ0FBRyxHQUFWLFVBQVcsUUFBOEIsRUFBRSxPQUFlO1FBQ3hELElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUEzQkQsSUEyQkM7QUEzQlksb0RBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgfSBmcm9tIFwiLi4vaHR0cE9wZXJhdGlvblJlc3BvbnNlXCI7XG5pbXBvcnQgeyBIdHRwUGlwZWxpbmVMb2dnZXIgfSBmcm9tIFwiLi4vaHR0cFBpcGVsaW5lTG9nZ2VyXCI7XG5pbXBvcnQgeyBIdHRwUGlwZWxpbmVMb2dMZXZlbCB9IGZyb20gXCIuLi9odHRwUGlwZWxpbmVMb2dMZXZlbFwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBSZXF1ZXN0UG9saWN5IHBlci1yZXF1ZXN0IHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgbmV4dFBvbGljeS5cbiAqL1xuZXhwb3J0IHR5cGUgUmVxdWVzdFBvbGljeUZhY3RvcnkgPSB7XG4gIGNyZWF0ZShuZXh0UG9saWN5OiBSZXF1ZXN0UG9saWN5LCBvcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UpOiBSZXF1ZXN0UG9saWN5O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0UG9saWN5IHtcbiAgc2VuZFJlcXVlc3QoaHR0cFJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPjtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VSZXF1ZXN0UG9saWN5IGltcGxlbWVudHMgUmVxdWVzdFBvbGljeSB7XG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBfbmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSxcbiAgICByZWFkb25seSBfb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlXG4gICkge31cblxuICBwdWJsaWMgYWJzdHJhY3Qgc2VuZFJlcXVlc3Qod2ViUmVzb3VyY2U6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPjtcblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwgVGhlIGxvZyBsZXZlbCBvZiB0aGUgbG9nIHRoYXQgd2lsbCBiZSBsb2dnZWQuXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKi9cbiAgcHVibGljIHNob3VsZExvZyhsb2dMZXZlbDogSHR0cFBpcGVsaW5lTG9nTGV2ZWwpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5zaG91bGRMb2cobG9nTGV2ZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gbG9nIHRoZSBwcm92aWRlZCBtZXNzYWdlIHRvIHRoZSBwcm92aWRlZCBsb2dnZXIuIElmIG5vIGxvZ2dlciB3YXMgcHJvdmlkZWQgb3IgaWZcbiAgICogdGhlIGxvZyBsZXZlbCBkb2VzIG5vdCBtZWF0IHRoZSBsb2dnZXIncyB0aHJlc2hvbGQsIHRoZW4gbm90aGluZyB3aWxsIGJlIGxvZ2dlZC5cbiAgICogQHBhcmFtIGxvZ0xldmVsIFRoZSBsb2cgbGV2ZWwgb2YgdGhpcyBsb2cuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoaXMgbG9nLlxuICAgKi9cbiAgcHVibGljIGxvZyhsb2dMZXZlbDogSHR0cFBpcGVsaW5lTG9nTGV2ZWwsIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuX29wdGlvbnMubG9nKGxvZ0xldmVsLCBtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbmFsIHByb3BlcnRpZXMgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGEgUmVxdWVzdFBvbGljeS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2Uge1xuICAvKipcbiAgICogR2V0IHdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwgVGhlIGxvZyBsZXZlbCBvZiB0aGUgbG9nIHRoYXQgd2lsbCBiZSBsb2dnZWQuXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKi9cbiAgc2hvdWxkTG9nKGxvZ0xldmVsOiBIdHRwUGlwZWxpbmVMb2dMZXZlbCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gbG9nIHRoZSBwcm92aWRlZCBtZXNzYWdlIHRvIHRoZSBwcm92aWRlZCBsb2dnZXIuIElmIG5vIGxvZ2dlciB3YXMgcHJvdmlkZWQgb3IgaWZcbiAgICogdGhlIGxvZyBsZXZlbCBkb2VzIG5vdCBtZWV0IHRoZSBsb2dnZXIncyB0aHJlc2hvbGQsIHRoZW4gbm90aGluZyB3aWxsIGJlIGxvZ2dlZC5cbiAgICogQHBhcmFtIGxvZ0xldmVsIFRoZSBsb2cgbGV2ZWwgb2YgdGhpcyBsb2cuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoaXMgbG9nLlxuICAgKi9cbiAgbG9nKGxvZ0xldmVsOiBIdHRwUGlwZWxpbmVMb2dMZXZlbCwgbWVzc2FnZTogc3RyaW5nKTogdm9pZDtcbn1cblxuLyoqXG4gKiBPcHRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiBjcmVhdGluZyBhIFJlcXVlc3RQb2xpY3kuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0UG9saWN5T3B0aW9ucyBpbXBsZW1lbnRzIFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2xvZ2dlcj86IEh0dHBQaXBlbGluZUxvZ2dlcikge31cblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwgVGhlIGxvZyBsZXZlbCBvZiB0aGUgbG9nIHRoYXQgd2lsbCBiZSBsb2dnZWQuXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgKi9cbiAgcHVibGljIHNob3VsZExvZyhsb2dMZXZlbDogSHR0cFBpcGVsaW5lTG9nTGV2ZWwpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgISF0aGlzLl9sb2dnZXIgJiZcbiAgICAgIGxvZ0xldmVsICE9PSBIdHRwUGlwZWxpbmVMb2dMZXZlbC5PRkYgJiZcbiAgICAgIGxvZ0xldmVsIDw9IHRoaXMuX2xvZ2dlci5taW5pbXVtTG9nTGV2ZWxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gbG9nIHRoZSBwcm92aWRlZCBtZXNzYWdlIHRvIHRoZSBwcm92aWRlZCBsb2dnZXIuIElmIG5vIGxvZ2dlciB3YXMgcHJvdmlkZWQgb3IgaWZcbiAgICogdGhlIGxvZyBsZXZlbCBkb2VzIG5vdCBtZWF0IHRoZSBsb2dnZXIncyB0aHJlc2hvbGQsIHRoZW4gbm90aGluZyB3aWxsIGJlIGxvZ2dlZC5cbiAgICogQHBhcmFtIGxvZ0xldmVsIFRoZSBsb2cgbGV2ZWwgb2YgdGhpcyBsb2cuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoaXMgbG9nLlxuICAgKi9cbiAgcHVibGljIGxvZyhsb2dMZXZlbDogSHR0cFBpcGVsaW5lTG9nTGV2ZWwsIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9sb2dnZXIgJiYgdGhpcy5zaG91bGRMb2cobG9nTGV2ZWwpKSB7XG4gICAgICB0aGlzLl9sb2dnZXIubG9nKGxvZ0xldmVsLCBtZXNzYWdlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/exponentialRetryPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2V4cG9uZW50aWFsUmV0cnlQb2xpY3kudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9wb2xpY2llcy9leHBvbmVudGlhbFJldHJ5UG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRy9GLDJEQUF1QztBQUV2QyxpREFLeUI7QUFDekIsMENBQXlDO0FBY3pDLFNBQWdCLHNCQUFzQixDQUNwQyxVQUFtQixFQUNuQixhQUFzQixFQUN0QixnQkFBeUIsRUFDekIsZ0JBQXlCO0lBRXpCLE9BQU87UUFDTCxNQUFNLEVBQUUsVUFBQyxVQUF5QixFQUFFLE9BQWlDO1lBQ25FLE9BQU8sSUFBSSxzQkFBc0IsQ0FDL0IsVUFBVSxFQUNWLE9BQU8sRUFDUCxVQUFVLEVBQ1YsYUFBYSxFQUNiLGdCQUFnQixFQUNoQixnQkFBZ0IsQ0FDakIsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQWxCRCx3REFrQkM7QUFFRCxJQUFNLDZCQUE2QixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDaEQsSUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUM7QUFDckMsSUFBTSxpQ0FBaUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ3BELElBQU0saUNBQWlDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUVuRDs7O0dBR0c7QUFDSDtJQUE0QyxrREFBaUI7SUFrQjNEOzs7Ozs7OztPQVFHO0lBQ0gsZ0NBQ0UsVUFBeUIsRUFDekIsT0FBaUMsRUFDakMsVUFBbUIsRUFDbkIsYUFBc0IsRUFDdEIsZ0JBQXlCLEVBQ3pCLGdCQUF5QjtRQU4zQixZQVFFLGtCQUFNLFVBQVUsRUFBRSxPQUFPLENBQUMsU0FZM0I7UUFYQyxTQUFTLFFBQVEsQ0FBQyxDQUFNO1lBQ3RCLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDO1FBQy9CLENBQUM7UUFDRCxLQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQztRQUNqRixLQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQztRQUM3RixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDO1lBQ2hELENBQUMsQ0FBQyxnQkFBZ0I7WUFDbEIsQ0FBQyxDQUFDLGlDQUFpQyxDQUFDO1FBQ3RDLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7WUFDaEQsQ0FBQyxDQUFDLGdCQUFnQjtZQUNsQixDQUFDLENBQUMsaUNBQWlDLENBQUM7O0lBQ3hDLENBQUM7SUFFTSw0Q0FBVyxHQUFsQixVQUFtQixPQUF3QjtRQUEzQyxpQkFLQztRQUpDLE9BQU8sSUFBSSxDQUFDLFdBQVc7YUFDcEIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUM1QixJQUFJLENBQUMsVUFBQyxRQUFRLElBQUssT0FBQSxLQUFLLENBQUMsS0FBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQzthQUNsRCxLQUFLLENBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsS0FBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsRUFBdEQsQ0FBc0QsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMsQUF2REQsQ0FBNEMsaUNBQWlCLEdBdUQ1RDtBQXZEWSx3REFBc0I7QUF5RG5DOzs7Ozs7O0dBT0c7QUFDSCxTQUFTLFdBQVcsQ0FDbEIsTUFBOEIsRUFDOUIsVUFBOEIsRUFDOUIsU0FBb0I7SUFFcEIsSUFDRSxVQUFVLElBQUksU0FBUztRQUN2QixDQUFDLFVBQVUsR0FBRyxHQUFHLElBQUksVUFBVSxLQUFLLEdBQUcsQ0FBQztRQUN4QyxVQUFVLEtBQUssR0FBRztRQUNsQixVQUFVLEtBQUssR0FBRyxFQUNsQjtRQUNBLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLFlBQW9CLENBQUM7SUFDekIsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztLQUNuRjtTQUFNO1FBQ0wsWUFBWSxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsVUFBVSxDQUFDO0tBQ2xEO0lBRUQsT0FBTyxZQUFZLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUMxQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBUyxlQUFlLENBQ3RCLE1BQThCLEVBQzlCLFNBQXFCLEVBQ3JCLEdBQWdCO0lBRWhCLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxTQUFTLEdBQUc7WUFDVixVQUFVLEVBQUUsQ0FBQztZQUNiLGFBQWEsRUFBRSxDQUFDO1NBQ2pCLENBQUM7S0FDSDtJQUVELElBQUksR0FBRyxFQUFFO1FBQ1AsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO1lBQ25CLEdBQUcsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztTQUNsQztRQUVELFNBQVMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO0tBQ3ZCO0lBRUQscUJBQXFCO0lBQ3JCLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUV2Qix3QkFBd0I7SUFDeEIsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzRCxJQUFNLGdCQUFnQixHQUNwQixNQUFNLENBQUMsYUFBYSxHQUFHLEdBQUc7UUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEYsY0FBYyxJQUFJLGdCQUFnQixDQUFDO0lBRW5DLFNBQVMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDaEMsTUFBTSxDQUFDLGdCQUFnQixHQUFHLGNBQWMsRUFDeEMsTUFBTSxDQUFDLGdCQUFnQixDQUN4QixDQUFDO0lBRUYsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUNaLE1BQThCLEVBQzlCLE9BQXdCLEVBQ3hCLFFBQWdDLEVBQ2hDLFNBQXFCLEVBQ3JCLFlBQXlCO0lBRXpCLFNBQVMsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM3RCxJQUFNLFNBQVMsR0FBd0IsT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUMxRixJQUFJLENBQUMsU0FBUyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUU7UUFDN0UsT0FBTyxLQUFLO2FBQ1QsS0FBSyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7YUFDOUIsSUFBSSxDQUFDLGNBQU0sT0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBL0MsQ0FBK0MsQ0FBQzthQUMzRCxJQUFJLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFqRCxDQUFpRCxDQUFDO2FBQ2hFLEtBQUssQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLEVBQWhELENBQWdELENBQUMsQ0FBQztLQUNyRTtTQUFNLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNqRCxxRkFBcUY7UUFDckYsSUFBTSxHQUFHLEdBQ1AsU0FBUyxDQUFDLEtBQUs7WUFDZixJQUFJLHFCQUFTLENBQ1gsNkJBQTZCLEVBQzdCLHFCQUFTLENBQUMsa0JBQWtCLEVBQzVCLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUMzQixRQUFRLElBQUksUUFBUSxDQUFDLE9BQU8sRUFDNUIsUUFBUSxDQUNULENBQUM7UUFDSixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7U0FBTTtRQUNMLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNsQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuLi91dGlsL3V0aWxzXCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZUxpa2UgfSBmcm9tIFwiLi4vd2ViUmVzb3VyY2VcIjtcbmltcG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5RmFjdG9yeSxcbiAgUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxufSBmcm9tIFwiLi9yZXF1ZXN0UG9saWN5XCI7XG5pbXBvcnQgeyBSZXN0RXJyb3IgfSBmcm9tIFwiLi4vcmVzdEVycm9yXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmV0cnlEYXRhIHtcbiAgcmV0cnlDb3VudDogbnVtYmVyO1xuICByZXRyeUludGVydmFsOiBudW1iZXI7XG4gIGVycm9yPzogUmV0cnlFcnJvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXRyeUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvZGU/OiBzdHJpbmc7XG4gIGlubmVyRXJyb3I/OiBSZXRyeUVycm9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwb25lbnRpYWxSZXRyeVBvbGljeShcbiAgcmV0cnlDb3VudD86IG51bWJlcixcbiAgcmV0cnlJbnRlcnZhbD86IG51bWJlcixcbiAgbWluUmV0cnlJbnRlcnZhbD86IG51bWJlcixcbiAgbWF4UmV0cnlJbnRlcnZhbD86IG51bWJlclxuKTogUmVxdWVzdFBvbGljeUZhY3Rvcnkge1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZTogKG5leHRQb2xpY3k6IFJlcXVlc3RQb2xpY3ksIG9wdGlvbnM6IFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBFeHBvbmVudGlhbFJldHJ5UG9saWN5KFxuICAgICAgICBuZXh0UG9saWN5LFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICByZXRyeUNvdW50LFxuICAgICAgICByZXRyeUludGVydmFsLFxuICAgICAgICBtaW5SZXRyeUludGVydmFsLFxuICAgICAgICBtYXhSZXRyeUludGVydmFsXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59XG5cbmNvbnN0IERFRkFVTFRfQ0xJRU5UX1JFVFJZX0lOVEVSVkFMID0gMTAwMCAqIDMwO1xuY29uc3QgREVGQVVMVF9DTElFTlRfUkVUUllfQ09VTlQgPSAzO1xuY29uc3QgREVGQVVMVF9DTElFTlRfTUFYX1JFVFJZX0lOVEVSVkFMID0gMTAwMCAqIDkwO1xuY29uc3QgREVGQVVMVF9DTElFTlRfTUlOX1JFVFJZX0lOVEVSVkFMID0gMTAwMCAqIDM7XG5cbi8qKlxuICogQGNsYXNzXG4gKiBJbnN0YW50aWF0ZXMgYSBuZXcgXCJFeHBvbmVudGlhbFJldHJ5UG9saWN5RmlsdGVyXCIgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBvbmVudGlhbFJldHJ5UG9saWN5IGV4dGVuZHMgQmFzZVJlcXVlc3RQb2xpY3kge1xuICAvKipcbiAgICogVGhlIGNsaWVudCByZXRyeSBjb3VudC5cbiAgICovXG4gIHJldHJ5Q291bnQ6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSBjbGllbnQgcmV0cnkgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKi9cbiAgcmV0cnlJbnRlcnZhbDogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG1pbmltdW0gcmV0cnkgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKi9cbiAgbWluUmV0cnlJbnRlcnZhbDogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG1heGltdW0gcmV0cnkgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKi9cbiAgbWF4UmV0cnlJbnRlcnZhbDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtSZXF1ZXN0UG9saWN5fSBuZXh0UG9saWN5IFRoZSBuZXh0IFJlcXVlc3RQb2xpY3kgaW4gdGhlIHBpcGVsaW5lIGNoYWluLlxuICAgKiBAcGFyYW0ge1JlcXVlc3RQb2xpY3lPcHRpb25zTGlrZX0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhpcyBSZXF1ZXN0UG9saWN5LlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3JldHJ5Q291bnRdICAgICAgICBUaGUgY2xpZW50IHJldHJ5IGNvdW50LlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3JldHJ5SW50ZXJ2YWxdICAgICBUaGUgY2xpZW50IHJldHJ5IGludGVydmFsLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWluUmV0cnlJbnRlcnZhbF0gIFRoZSBtaW5pbXVtIHJldHJ5IGludGVydmFsLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UmV0cnlJbnRlcnZhbF0gIFRoZSBtYXhpbXVtIHJldHJ5IGludGVydmFsLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBuZXh0UG9saWN5OiBSZXF1ZXN0UG9saWN5LFxuICAgIG9wdGlvbnM6IFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbiAgICByZXRyeUNvdW50PzogbnVtYmVyLFxuICAgIHJldHJ5SW50ZXJ2YWw/OiBudW1iZXIsXG4gICAgbWluUmV0cnlJbnRlcnZhbD86IG51bWJlcixcbiAgICBtYXhSZXRyeUludGVydmFsPzogbnVtYmVyXG4gICkge1xuICAgIHN1cGVyKG5leHRQb2xpY3ksIG9wdGlvbnMpO1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKG46IGFueSk6IG4gaXMgbnVtYmVyIHtcbiAgICAgIHJldHVybiB0eXBlb2YgbiA9PT0gXCJudW1iZXJcIjtcbiAgICB9XG4gICAgdGhpcy5yZXRyeUNvdW50ID0gaXNOdW1iZXIocmV0cnlDb3VudCkgPyByZXRyeUNvdW50IDogREVGQVVMVF9DTElFTlRfUkVUUllfQ09VTlQ7XG4gICAgdGhpcy5yZXRyeUludGVydmFsID0gaXNOdW1iZXIocmV0cnlJbnRlcnZhbCkgPyByZXRyeUludGVydmFsIDogREVGQVVMVF9DTElFTlRfUkVUUllfSU5URVJWQUw7XG4gICAgdGhpcy5taW5SZXRyeUludGVydmFsID0gaXNOdW1iZXIobWluUmV0cnlJbnRlcnZhbClcbiAgICAgID8gbWluUmV0cnlJbnRlcnZhbFxuICAgICAgOiBERUZBVUxUX0NMSUVOVF9NSU5fUkVUUllfSU5URVJWQUw7XG4gICAgdGhpcy5tYXhSZXRyeUludGVydmFsID0gaXNOdW1iZXIobWF4UmV0cnlJbnRlcnZhbClcbiAgICAgID8gbWF4UmV0cnlJbnRlcnZhbFxuICAgICAgOiBERUZBVUxUX0NMSUVOVF9NQVhfUkVUUllfSU5URVJWQUw7XG4gIH1cblxuICBwdWJsaWMgc2VuZFJlcXVlc3QocmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeVxuICAgICAgLnNlbmRSZXF1ZXN0KHJlcXVlc3QuY2xvbmUoKSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmV0cnkodGhpcywgcmVxdWVzdCwgcmVzcG9uc2UpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4gcmV0cnkodGhpcywgcmVxdWVzdCwgZXJyb3IucmVzcG9uc2UsIHVuZGVmaW5lZCwgZXJyb3IpKTtcbiAgfVxufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIG9wZXJhdGlvbiBzaG91bGQgYmUgcmV0cmllZCBhbmQgaG93IGxvbmcgdG8gd2FpdCB1bnRpbCB0aGUgbmV4dCByZXRyeS5cbiAqXG4gKiBAcGFyYW0ge0V4cG9uZW50aWFsUmV0cnlQb2xpY3l9IHBvbGljeSBUaGUgRXhwb25lbnRpYWxSZXRyeVBvbGljeSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgYmVpbmcgY2FsbGVkIGFnYWluc3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzQ29kZSBUaGUgSFRUUCBzdGF0dXMgY29kZS5cbiAqIEBwYXJhbSB7UmV0cnlEYXRhfSByZXRyeURhdGEgIFRoZSByZXRyeSBkYXRhLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgb3BlcmF0aW9uIHF1YWxpZmllcyBmb3IgYSByZXRyeTsgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBzaG91bGRSZXRyeShcbiAgcG9saWN5OiBFeHBvbmVudGlhbFJldHJ5UG9saWN5LFxuICBzdGF0dXNDb2RlOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIHJldHJ5RGF0YTogUmV0cnlEYXRhXG4pOiBib29sZWFuIHtcbiAgaWYgKFxuICAgIHN0YXR1c0NvZGUgPT0gdW5kZWZpbmVkIHx8XG4gICAgKHN0YXR1c0NvZGUgPCA1MDAgJiYgc3RhdHVzQ29kZSAhPT0gNDA4KSB8fFxuICAgIHN0YXR1c0NvZGUgPT09IDUwMSB8fFxuICAgIHN0YXR1c0NvZGUgPT09IDUwNVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgY3VycmVudENvdW50OiBudW1iZXI7XG4gIGlmICghcmV0cnlEYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicmV0cnlEYXRhIGZvciB0aGUgRXhwb25lbnRpYWxSZXRyeVBvbGljeUZpbHRlciBjYW5ub3QgYmUgbnVsbC5cIik7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudENvdW50ID0gcmV0cnlEYXRhICYmIHJldHJ5RGF0YS5yZXRyeUNvdW50O1xuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnRDb3VudCA8IHBvbGljeS5yZXRyeUNvdW50O1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHJldHJ5IGRhdGEgZm9yIHRoZSBuZXh0IGF0dGVtcHQuXG4gKlxuICogQHBhcmFtIHtFeHBvbmVudGlhbFJldHJ5UG9saWN5fSBwb2xpY3kgVGhlIEV4cG9uZW50aWFsUmV0cnlQb2xpY3kgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZCBhZ2FpbnN0LlxuICogQHBhcmFtIHtSZXRyeURhdGF9IHJldHJ5RGF0YSAgVGhlIHJldHJ5IGRhdGEuXG4gKiBAcGFyYW0ge1JldHJ5RXJyb3J9IFtlcnJdIFRoZSBvcGVyYXRpb25cInMgZXJyb3IsIGlmIGFueS5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlUmV0cnlEYXRhKFxuICBwb2xpY3k6IEV4cG9uZW50aWFsUmV0cnlQb2xpY3ksXG4gIHJldHJ5RGF0YT86IFJldHJ5RGF0YSxcbiAgZXJyPzogUmV0cnlFcnJvclxuKTogUmV0cnlEYXRhIHtcbiAgaWYgKCFyZXRyeURhdGEpIHtcbiAgICByZXRyeURhdGEgPSB7XG4gICAgICByZXRyeUNvdW50OiAwLFxuICAgICAgcmV0cnlJbnRlcnZhbDogMCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVycikge1xuICAgIGlmIChyZXRyeURhdGEuZXJyb3IpIHtcbiAgICAgIGVyci5pbm5lckVycm9yID0gcmV0cnlEYXRhLmVycm9yO1xuICAgIH1cblxuICAgIHJldHJ5RGF0YS5lcnJvciA9IGVycjtcbiAgfVxuXG4gIC8vIEFkanVzdCByZXRyeSBjb3VudFxuICByZXRyeURhdGEucmV0cnlDb3VudCsrO1xuXG4gIC8vIEFkanVzdCByZXRyeSBpbnRlcnZhbFxuICBsZXQgaW5jcmVtZW50RGVsdGEgPSBNYXRoLnBvdygyLCByZXRyeURhdGEucmV0cnlDb3VudCkgLSAxO1xuICBjb25zdCBib3VuZGVkUmFuZERlbHRhID1cbiAgICBwb2xpY3kucmV0cnlJbnRlcnZhbCAqIDAuOCArXG4gICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHBvbGljeS5yZXRyeUludGVydmFsICogMS4yIC0gcG9saWN5LnJldHJ5SW50ZXJ2YWwgKiAwLjgpKTtcbiAgaW5jcmVtZW50RGVsdGEgKj0gYm91bmRlZFJhbmREZWx0YTtcblxuICByZXRyeURhdGEucmV0cnlJbnRlcnZhbCA9IE1hdGgubWluKFxuICAgIHBvbGljeS5taW5SZXRyeUludGVydmFsICsgaW5jcmVtZW50RGVsdGEsXG4gICAgcG9saWN5Lm1heFJldHJ5SW50ZXJ2YWxcbiAgKTtcblxuICByZXR1cm4gcmV0cnlEYXRhO1xufVxuXG5mdW5jdGlvbiByZXRyeShcbiAgcG9saWN5OiBFeHBvbmVudGlhbFJldHJ5UG9saWN5LFxuICByZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UsXG4gIHJlc3BvbnNlPzogSHR0cE9wZXJhdGlvblJlc3BvbnNlLFxuICByZXRyeURhdGE/OiBSZXRyeURhdGEsXG4gIHJlcXVlc3RFcnJvcj86IFJldHJ5RXJyb3Jcbik6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPiB7XG4gIHJldHJ5RGF0YSA9IHVwZGF0ZVJldHJ5RGF0YShwb2xpY3ksIHJldHJ5RGF0YSwgcmVxdWVzdEVycm9yKTtcbiAgY29uc3QgaXNBYm9ydGVkOiBib29sZWFuIHwgdW5kZWZpbmVkID0gcmVxdWVzdC5hYm9ydFNpZ25hbCAmJiByZXF1ZXN0LmFib3J0U2lnbmFsLmFib3J0ZWQ7XG4gIGlmICghaXNBYm9ydGVkICYmIHNob3VsZFJldHJ5KHBvbGljeSwgcmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzLCByZXRyeURhdGEpKSB7XG4gICAgcmV0dXJuIHV0aWxzXG4gICAgICAuZGVsYXkocmV0cnlEYXRhLnJldHJ5SW50ZXJ2YWwpXG4gICAgICAudGhlbigoKSA9PiBwb2xpY3kuX25leHRQb2xpY3kuc2VuZFJlcXVlc3QocmVxdWVzdC5jbG9uZSgpKSlcbiAgICAgIC50aGVuKChyZXMpID0+IHJldHJ5KHBvbGljeSwgcmVxdWVzdCwgcmVzLCByZXRyeURhdGEsIHVuZGVmaW5lZCkpXG4gICAgICAuY2F0Y2goKGVycikgPT4gcmV0cnkocG9saWN5LCByZXF1ZXN0LCByZXNwb25zZSwgcmV0cnlEYXRhLCBlcnIpKTtcbiAgfSBlbHNlIGlmIChpc0Fib3J0ZWQgfHwgcmVxdWVzdEVycm9yIHx8ICFyZXNwb25zZSkge1xuICAgIC8vIElmIHRoZSBvcGVyYXRpb24gZmFpbGVkIGluIHRoZSBlbmQsIHJldHVybiBhbGwgZXJyb3JzIGluc3RlYWQgb2YganVzdCB0aGUgbGFzdCBvbmVcbiAgICBjb25zdCBlcnIgPVxuICAgICAgcmV0cnlEYXRhLmVycm9yIHx8XG4gICAgICBuZXcgUmVzdEVycm9yKFxuICAgICAgICBcIkZhaWxlZCB0byBzZW5kIHRoZSByZXF1ZXN0LlwiLFxuICAgICAgICBSZXN0RXJyb3IuUkVRVUVTVF9TRU5EX0VSUk9SLFxuICAgICAgICByZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIHJlc3BvbnNlICYmIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICAgIHJlc3BvbnNlXG4gICAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICB9XG59XG4iXX0=
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/generateClientRequestIdPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2dlbmVyYXRlQ2xpZW50UmVxdWVzdElkUG9saWN5LnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvcG9saWNpZXMvZ2VuZXJhdGVDbGllbnRSZXF1ZXN0SWRQb2xpY3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFHL0YsMkRBQXVDO0FBRXZDLGlEQUt5QjtBQUV6QixTQUFnQiw2QkFBNkIsQ0FDM0MsbUJBQThDO0lBQTlDLG9DQUFBLEVBQUEsOENBQThDO0lBRTlDLE9BQU87UUFDTCxNQUFNLEVBQUUsVUFBQyxVQUF5QixFQUFFLE9BQWlDO1lBQ25FLE9BQU8sSUFBSSw2QkFBNkIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDckYsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBUkQsc0VBUUM7QUFFRDtJQUFtRCx5REFBaUI7SUFDbEUsdUNBQ0UsVUFBeUIsRUFDekIsT0FBaUMsRUFDekIsb0JBQTRCO1FBSHRDLFlBS0Usa0JBQU0sVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUMzQjtRQUhTLDBCQUFvQixHQUFwQixvQkFBb0IsQ0FBUTs7SUFHdEMsQ0FBQztJQUVNLG1EQUFXLEdBQWxCLFVBQW1CLE9BQXdCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRTtZQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDdEU7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUFmRCxDQUFtRCxpQ0FBaUIsR0FlbkU7QUFmWSxzRUFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuLi91dGlsL3V0aWxzXCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZUxpa2UgfSBmcm9tIFwiLi4vd2ViUmVzb3VyY2VcIjtcbmltcG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5RmFjdG9yeSxcbiAgUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxufSBmcm9tIFwiLi9yZXF1ZXN0UG9saWN5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUNsaWVudFJlcXVlc3RJZFBvbGljeShcbiAgcmVxdWVzdElkSGVhZGVyTmFtZSA9IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiXG4pOiBSZXF1ZXN0UG9saWN5RmFjdG9yeSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiAobmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSwgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IEdlbmVyYXRlQ2xpZW50UmVxdWVzdElkUG9saWN5KG5leHRQb2xpY3ksIG9wdGlvbnMsIHJlcXVlc3RJZEhlYWRlck5hbWUpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZUNsaWVudFJlcXVlc3RJZFBvbGljeSBleHRlbmRzIEJhc2VSZXF1ZXN0UG9saWN5IHtcbiAgY29uc3RydWN0b3IoXG4gICAgbmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSxcbiAgICBvcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG4gICAgcHJpdmF0ZSBfcmVxdWVzdElkSGVhZGVyTmFtZTogc3RyaW5nXG4gICkge1xuICAgIHN1cGVyKG5leHRQb2xpY3ksIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIHNlbmRSZXF1ZXN0KHJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPiB7XG4gICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMuY29udGFpbnModGhpcy5fcmVxdWVzdElkSGVhZGVyTmFtZSkpIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQodGhpcy5fcmVxdWVzdElkSGVhZGVyTmFtZSwgdXRpbHMuZ2VuZXJhdGVVdWlkKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgfVxufVxuIl19
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2dlbmVyYXRlQ2xpZW50UmVxdWVzdElkUG9saWN5LnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvcG9saWNpZXMvZ2VuZXJhdGVDbGllbnRSZXF1ZXN0SWRQb2xpY3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFHL0YsMkRBQXVDO0FBRXZDLGlEQUt5QjtBQUV6QixTQUFnQiw2QkFBNkIsQ0FDM0MsbUJBQThDO0lBQTlDLG9DQUFBLEVBQUEsOENBQThDO0lBRTlDLE9BQU87UUFDTCxNQUFNLEVBQUUsVUFBQyxVQUF5QixFQUFFLE9BQWlDO1lBQ25FLE9BQU8sSUFBSSw2QkFBNkIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDckYsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBUkQsc0VBUUM7QUFFRDtJQUFtRCx5REFBaUI7SUFDbEUsdUNBQ0UsVUFBeUIsRUFDekIsT0FBaUMsRUFDekIsb0JBQTRCO1FBSHRDLFlBS0Usa0JBQU0sVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUMzQjtRQUhTLDBCQUFvQixHQUFwQixvQkFBb0IsQ0FBUTs7SUFHdEMsQ0FBQztJQUVNLG1EQUFXLEdBQWxCLFVBQW1CLE9BQXdCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRTtZQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDdEU7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUFmRCxDQUFtRCxpQ0FBaUIsR0FlbkU7QUFmWSxzRUFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuLi91dGlsL3V0aWxzXCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZUxpa2UgfSBmcm9tIFwiLi4vd2ViUmVzb3VyY2VcIjtcbmltcG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5RmFjdG9yeSxcbiAgUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxufSBmcm9tIFwiLi9yZXF1ZXN0UG9saWN5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUNsaWVudFJlcXVlc3RJZFBvbGljeShcbiAgcmVxdWVzdElkSGVhZGVyTmFtZSA9IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiXG4pOiBSZXF1ZXN0UG9saWN5RmFjdG9yeSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiAobmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSwgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IEdlbmVyYXRlQ2xpZW50UmVxdWVzdElkUG9saWN5KG5leHRQb2xpY3ksIG9wdGlvbnMsIHJlcXVlc3RJZEhlYWRlck5hbWUpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZUNsaWVudFJlcXVlc3RJZFBvbGljeSBleHRlbmRzIEJhc2VSZXF1ZXN0UG9saWN5IHtcbiAgY29uc3RydWN0b3IoXG4gICAgbmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSxcbiAgICBvcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG4gICAgcHJpdmF0ZSBfcmVxdWVzdElkSGVhZGVyTmFtZTogc3RyaW5nXG4gICkge1xuICAgIHN1cGVyKG5leHRQb2xpY3ksIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIHNlbmRSZXF1ZXN0KHJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPiB7XG4gICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMuY29udGFpbnModGhpcy5fcmVxdWVzdElkSGVhZGVyTmFtZSkpIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQodGhpcy5fcmVxdWVzdElkSGVhZGVyTmFtZSwgdXRpbHMuZ2VuZXJhdGVVdWlkKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgfVxufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/userAgentPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiw4Q0FBNkM7QUFFN0MsK0NBQThDO0FBRTlDLGlFQUEwRjtBQUMxRixpREFLeUI7QUFJekIsU0FBUyxjQUFjO0lBQ3JCLElBQU0sYUFBYSxHQUFHO1FBQ3BCLEdBQUcsRUFBRSxZQUFZO1FBQ2pCLEtBQUssRUFBRSxxQkFBUyxDQUFDLGFBQWE7S0FDL0IsQ0FBQztJQUVGLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FDekIsYUFBOEIsRUFDOUIsWUFBa0IsRUFDbEIsY0FBb0I7SUFEcEIsNkJBQUEsRUFBQSxrQkFBa0I7SUFDbEIsK0JBQUEsRUFBQSxvQkFBb0I7SUFFcEIsT0FBTyxhQUFhO1NBQ2pCLEdBQUcsQ0FBQyxVQUFDLElBQUk7UUFDUixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFHLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakUsT0FBTyxLQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBTyxDQUFDO0lBQy9CLENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBRVksUUFBQSw2QkFBNkIsR0FBRyw4Q0FBc0IsQ0FBQztBQUVwRSxTQUFnQix3QkFBd0I7SUFDdEMsSUFBTSxXQUFXLEdBQUcsY0FBYyxFQUFFLENBQUM7SUFDckMsSUFBTSxvQkFBb0IsR0FBRywrQ0FBdUIsRUFBRSxDQUFDO0lBQ3ZELElBQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0lBQy9FLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFMRCw0REFLQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxhQUE2QjtJQUMzRCxJQUFNLEdBQUcsR0FDUCxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsOENBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQztJQUNsRyxJQUFNLEtBQUssR0FDVCxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsS0FBSyxJQUFJLFNBQVM7UUFDaEQsQ0FBQyxDQUFDLHdCQUF3QixFQUFFO1FBQzVCLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBRTFCLE9BQU87UUFDTCxNQUFNLEVBQUUsVUFBQyxVQUF5QixFQUFFLE9BQWlDO1lBQ25FLE9BQU8sSUFBSSxlQUFlLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUQsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBYkQsMENBYUM7QUFFRDtJQUFxQywyQ0FBaUI7SUFDcEQseUJBQ1csV0FBMEIsRUFDMUIsUUFBa0MsRUFDakMsU0FBaUIsRUFDakIsV0FBbUI7UUFKL0IsWUFNRSxrQkFBTSxXQUFXLEVBQUUsUUFBUSxDQUFDLFNBQzdCO1FBTlUsaUJBQVcsR0FBWCxXQUFXLENBQWU7UUFDMUIsY0FBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDakMsZUFBUyxHQUFULFNBQVMsQ0FBUTtRQUNqQixpQkFBVyxHQUFYLFdBQVcsQ0FBUTs7SUFHL0IsQ0FBQztJQUVELHFDQUFXLEdBQVgsVUFBWSxPQUF3QjtRQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsNENBQWtCLEdBQWxCLFVBQW1CLE9BQXdCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7U0FDckM7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDNUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBeEJELENBQXFDLGlDQUFpQixHQXdCckQ7QUF4QlksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSBcIi4uL2h0dHBIZWFkZXJzXCI7XG5pbXBvcnQgeyBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgfSBmcm9tIFwiLi4vaHR0cE9wZXJhdGlvblJlc3BvbnNlXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vdXRpbC9jb25zdGFudHNcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuLi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFVzZXJBZ2VudEtleSwgZ2V0UGxhdGZvcm1TcGVjaWZpY0RhdGEgfSBmcm9tIFwiLi9tc1Jlc3RVc2VyQWdlbnRQb2xpY3lcIjtcbmltcG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5RmFjdG9yeSxcbiAgUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxufSBmcm9tIFwiLi9yZXF1ZXN0UG9saWN5XCI7XG5cbmV4cG9ydCB0eXBlIFRlbGVtZXRyeUluZm8gPSB7IGtleT86IHN0cmluZzsgdmFsdWU/OiBzdHJpbmcgfTtcblxuZnVuY3Rpb24gZ2V0UnVudGltZUluZm8oKTogVGVsZW1ldHJ5SW5mb1tdIHtcbiAgY29uc3QgbXNSZXN0UnVudGltZSA9IHtcbiAgICBrZXk6IFwibXMtcmVzdC1qc1wiLFxuICAgIHZhbHVlOiBDb25zdGFudHMubXNSZXN0VmVyc2lvbixcbiAgfTtcblxuICByZXR1cm4gW21zUmVzdFJ1bnRpbWVdO1xufVxuXG5mdW5jdGlvbiBnZXRVc2VyQWdlbnRTdHJpbmcoXG4gIHRlbGVtZXRyeUluZm86IFRlbGVtZXRyeUluZm9bXSxcbiAga2V5U2VwYXJhdG9yID0gXCIgXCIsXG4gIHZhbHVlU2VwYXJhdG9yID0gXCIvXCJcbik6IHN0cmluZyB7XG4gIHJldHVybiB0ZWxlbWV0cnlJbmZvXG4gICAgLm1hcCgoaW5mbykgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBpbmZvLnZhbHVlID8gYCR7dmFsdWVTZXBhcmF0b3J9JHtpbmZvLnZhbHVlfWAgOiBcIlwiO1xuICAgICAgcmV0dXJuIGAke2luZm8ua2V5fSR7dmFsdWV9YDtcbiAgICB9KVxuICAgIC5qb2luKGtleVNlcGFyYXRvcik7XG59XG5cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0VXNlckFnZW50SGVhZGVyTmFtZSA9IGdldERlZmF1bHRVc2VyQWdlbnRLZXk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VXNlckFnZW50VmFsdWUoKTogc3RyaW5nIHtcbiAgY29uc3QgcnVudGltZUluZm8gPSBnZXRSdW50aW1lSW5mbygpO1xuICBjb25zdCBwbGF0Zm9ybVNwZWNpZmljRGF0YSA9IGdldFBsYXRmb3JtU3BlY2lmaWNEYXRhKCk7XG4gIGNvbnN0IHVzZXJBZ2VudCA9IGdldFVzZXJBZ2VudFN0cmluZyhydW50aW1lSW5mby5jb25jYXQocGxhdGZvcm1TcGVjaWZpY0RhdGEpKTtcbiAgcmV0dXJuIHVzZXJBZ2VudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJBZ2VudFBvbGljeSh1c2VyQWdlbnREYXRhPzogVGVsZW1ldHJ5SW5mbyk6IFJlcXVlc3RQb2xpY3lGYWN0b3J5IHtcbiAgY29uc3Qga2V5OiBzdHJpbmcgPVxuICAgICF1c2VyQWdlbnREYXRhIHx8IHVzZXJBZ2VudERhdGEua2V5ID09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRVc2VyQWdlbnRLZXkoKSA6IHVzZXJBZ2VudERhdGEua2V5O1xuICBjb25zdCB2YWx1ZTogc3RyaW5nID1cbiAgICAhdXNlckFnZW50RGF0YSB8fCB1c2VyQWdlbnREYXRhLnZhbHVlID09IHVuZGVmaW5lZFxuICAgICAgPyBnZXREZWZhdWx0VXNlckFnZW50VmFsdWUoKVxuICAgICAgOiB1c2VyQWdlbnREYXRhLnZhbHVlO1xuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiAobmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSwgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFVzZXJBZ2VudFBvbGljeShuZXh0UG9saWN5LCBvcHRpb25zLCBrZXksIHZhbHVlKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgVXNlckFnZW50UG9saWN5IGV4dGVuZHMgQmFzZVJlcXVlc3RQb2xpY3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBfbmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSxcbiAgICByZWFkb25seSBfb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxuICAgIHByb3RlY3RlZCBoZWFkZXJLZXk6IHN0cmluZyxcbiAgICBwcm90ZWN0ZWQgaGVhZGVyVmFsdWU6IHN0cmluZ1xuICApIHtcbiAgICBzdXBlcihfbmV4dFBvbGljeSwgX29wdGlvbnMpO1xuICB9XG5cbiAgc2VuZFJlcXVlc3QocmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICB0aGlzLmFkZFVzZXJBZ2VudEhlYWRlcihyZXF1ZXN0KTtcbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgfVxuXG4gIGFkZFVzZXJBZ2VudEhlYWRlcihyZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UpOiB2b2lkIHtcbiAgICBpZiAoIXJlcXVlc3QuaGVhZGVycykge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMuZ2V0KHRoaXMuaGVhZGVyS2V5KSAmJiB0aGlzLmhlYWRlclZhbHVlKSB7XG4gICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KHRoaXMuaGVhZGVyS2V5LCB0aGlzLmhlYWRlclZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiw4Q0FBNkM7QUFFN0MsK0NBQThDO0FBRTlDLGlFQUEwRjtBQUMxRixpREFLeUI7QUFJekIsU0FBUyxjQUFjO0lBQ3JCLElBQU0sYUFBYSxHQUFHO1FBQ3BCLEdBQUcsRUFBRSxZQUFZO1FBQ2pCLEtBQUssRUFBRSxxQkFBUyxDQUFDLGFBQWE7S0FDL0IsQ0FBQztJQUVGLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FDekIsYUFBOEIsRUFDOUIsWUFBa0IsRUFDbEIsY0FBb0I7SUFEcEIsNkJBQUEsRUFBQSxrQkFBa0I7SUFDbEIsK0JBQUEsRUFBQSxvQkFBb0I7SUFFcEIsT0FBTyxhQUFhO1NBQ2pCLEdBQUcsQ0FBQyxVQUFDLElBQUk7UUFDUixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFHLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakUsT0FBTyxLQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBTyxDQUFDO0lBQy9CLENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBRVksUUFBQSw2QkFBNkIsR0FBRyw4Q0FBc0IsQ0FBQztBQUVwRSxTQUFnQix3QkFBd0I7SUFDdEMsSUFBTSxXQUFXLEdBQUcsY0FBYyxFQUFFLENBQUM7SUFDckMsSUFBTSxvQkFBb0IsR0FBRywrQ0FBdUIsRUFBRSxDQUFDO0lBQ3ZELElBQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0lBQy9FLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFMRCw0REFLQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxhQUE2QjtJQUMzRCxJQUFNLEdBQUcsR0FDUCxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsOENBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQztJQUNsRyxJQUFNLEtBQUssR0FDVCxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsS0FBSyxJQUFJLFNBQVM7UUFDaEQsQ0FBQyxDQUFDLHdCQUF3QixFQUFFO1FBQzVCLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBRTFCLE9BQU87UUFDTCxNQUFNLEVBQUUsVUFBQyxVQUF5QixFQUFFLE9BQWlDO1lBQ25FLE9BQU8sSUFBSSxlQUFlLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUQsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBYkQsMENBYUM7QUFFRDtJQUFxQywyQ0FBaUI7SUFDcEQseUJBQ1csV0FBMEIsRUFDMUIsUUFBa0MsRUFDakMsU0FBaUIsRUFDakIsV0FBbUI7UUFKL0IsWUFNRSxrQkFBTSxXQUFXLEVBQUUsUUFBUSxDQUFDLFNBQzdCO1FBTlUsaUJBQVcsR0FBWCxXQUFXLENBQWU7UUFDMUIsY0FBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDakMsZUFBUyxHQUFULFNBQVMsQ0FBUTtRQUNqQixpQkFBVyxHQUFYLFdBQVcsQ0FBUTs7SUFHL0IsQ0FBQztJQUVELHFDQUFXLEdBQVgsVUFBWSxPQUF3QjtRQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsNENBQWtCLEdBQWxCLFVBQW1CLE9BQXdCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7U0FDckM7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDNUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBeEJELENBQXFDLGlDQUFpQixHQXdCckQ7QUF4QlksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSBcIi4uL2h0dHBIZWFkZXJzXCI7XG5pbXBvcnQgeyBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgfSBmcm9tIFwiLi4vaHR0cE9wZXJhdGlvblJlc3BvbnNlXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vdXRpbC9jb25zdGFudHNcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuLi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFVzZXJBZ2VudEtleSwgZ2V0UGxhdGZvcm1TcGVjaWZpY0RhdGEgfSBmcm9tIFwiLi9tc1Jlc3RVc2VyQWdlbnRQb2xpY3lcIjtcbmltcG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5RmFjdG9yeSxcbiAgUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxufSBmcm9tIFwiLi9yZXF1ZXN0UG9saWN5XCI7XG5cbmV4cG9ydCB0eXBlIFRlbGVtZXRyeUluZm8gPSB7IGtleT86IHN0cmluZzsgdmFsdWU/OiBzdHJpbmcgfTtcblxuZnVuY3Rpb24gZ2V0UnVudGltZUluZm8oKTogVGVsZW1ldHJ5SW5mb1tdIHtcbiAgY29uc3QgbXNSZXN0UnVudGltZSA9IHtcbiAgICBrZXk6IFwibXMtcmVzdC1qc1wiLFxuICAgIHZhbHVlOiBDb25zdGFudHMubXNSZXN0VmVyc2lvbixcbiAgfTtcblxuICByZXR1cm4gW21zUmVzdFJ1bnRpbWVdO1xufVxuXG5mdW5jdGlvbiBnZXRVc2VyQWdlbnRTdHJpbmcoXG4gIHRlbGVtZXRyeUluZm86IFRlbGVtZXRyeUluZm9bXSxcbiAga2V5U2VwYXJhdG9yID0gXCIgXCIsXG4gIHZhbHVlU2VwYXJhdG9yID0gXCIvXCJcbik6IHN0cmluZyB7XG4gIHJldHVybiB0ZWxlbWV0cnlJbmZvXG4gICAgLm1hcCgoaW5mbykgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBpbmZvLnZhbHVlID8gYCR7dmFsdWVTZXBhcmF0b3J9JHtpbmZvLnZhbHVlfWAgOiBcIlwiO1xuICAgICAgcmV0dXJuIGAke2luZm8ua2V5fSR7dmFsdWV9YDtcbiAgICB9KVxuICAgIC5qb2luKGtleVNlcGFyYXRvcik7XG59XG5cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0VXNlckFnZW50SGVhZGVyTmFtZSA9IGdldERlZmF1bHRVc2VyQWdlbnRLZXk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VXNlckFnZW50VmFsdWUoKTogc3RyaW5nIHtcbiAgY29uc3QgcnVudGltZUluZm8gPSBnZXRSdW50aW1lSW5mbygpO1xuICBjb25zdCBwbGF0Zm9ybVNwZWNpZmljRGF0YSA9IGdldFBsYXRmb3JtU3BlY2lmaWNEYXRhKCk7XG4gIGNvbnN0IHVzZXJBZ2VudCA9IGdldFVzZXJBZ2VudFN0cmluZyhydW50aW1lSW5mby5jb25jYXQocGxhdGZvcm1TcGVjaWZpY0RhdGEpKTtcbiAgcmV0dXJuIHVzZXJBZ2VudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJBZ2VudFBvbGljeSh1c2VyQWdlbnREYXRhPzogVGVsZW1ldHJ5SW5mbyk6IFJlcXVlc3RQb2xpY3lGYWN0b3J5IHtcbiAgY29uc3Qga2V5OiBzdHJpbmcgPVxuICAgICF1c2VyQWdlbnREYXRhIHx8IHVzZXJBZ2VudERhdGEua2V5ID09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRVc2VyQWdlbnRLZXkoKSA6IHVzZXJBZ2VudERhdGEua2V5O1xuICBjb25zdCB2YWx1ZTogc3RyaW5nID1cbiAgICAhdXNlckFnZW50RGF0YSB8fCB1c2VyQWdlbnREYXRhLnZhbHVlID09IHVuZGVmaW5lZFxuICAgICAgPyBnZXREZWZhdWx0VXNlckFnZW50VmFsdWUoKVxuICAgICAgOiB1c2VyQWdlbnREYXRhLnZhbHVlO1xuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiAobmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSwgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFVzZXJBZ2VudFBvbGljeShuZXh0UG9saWN5LCBvcHRpb25zLCBrZXksIHZhbHVlKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgVXNlckFnZW50UG9saWN5IGV4dGVuZHMgQmFzZVJlcXVlc3RQb2xpY3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBfbmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSxcbiAgICByZWFkb25seSBfb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxuICAgIHByb3RlY3RlZCBoZWFkZXJLZXk6IHN0cmluZyxcbiAgICBwcm90ZWN0ZWQgaGVhZGVyVmFsdWU6IHN0cmluZ1xuICApIHtcbiAgICBzdXBlcihfbmV4dFBvbGljeSwgX29wdGlvbnMpO1xuICB9XG5cbiAgc2VuZFJlcXVlc3QocmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICB0aGlzLmFkZFVzZXJBZ2VudEhlYWRlcihyZXF1ZXN0KTtcbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgfVxuXG4gIGFkZFVzZXJBZ2VudEhlYWRlcihyZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UpOiB2b2lkIHtcbiAgICBpZiAoIXJlcXVlc3QuaGVhZGVycykge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMuZ2V0KHRoaXMuaGVhZGVyS2V5KSAmJiB0aGlzLmhlYWRlclZhbHVlKSB7XG4gICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KHRoaXMuaGVhZGVyS2V5LCB0aGlzLmhlYWRlclZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/msRestUserAgentPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL21zUmVzdFVzZXJBZ2VudFBvbGljeS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL21zUmVzdFVzZXJBZ2VudFBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiw2Q0FBeUI7QUFFekIsK0NBQThDO0FBRTlDLFNBQWdCLHNCQUFzQjtJQUNwQyxPQUFPLHFCQUFTLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQztBQUM5QyxDQUFDO0FBRkQsd0RBRUM7QUFFRCxTQUFnQix1QkFBdUI7SUFDckMsSUFBTSxXQUFXLEdBQUc7UUFDbEIsR0FBRyxFQUFFLE1BQU07UUFDWCxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU87S0FDdkIsQ0FBQztJQUVGLElBQU0sTUFBTSxHQUFHO1FBQ2IsR0FBRyxFQUFFLElBQUk7UUFDVCxLQUFLLEVBQUUsTUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQUksRUFBRSxDQUFDLElBQUksRUFBRSxTQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBRztLQUNyRCxDQUFDO0lBRUYsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBWkQsMERBWUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCAqIGFzIG9zIGZyb20gXCJvc1wiO1xuaW1wb3J0IHsgVGVsZW1ldHJ5SW5mbyB9IGZyb20gXCIuL3VzZXJBZ2VudFBvbGljeVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWwvY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VXNlckFnZW50S2V5KCk6IHN0cmluZyB7XG4gIHJldHVybiBDb25zdGFudHMuSGVhZGVyQ29uc3RhbnRzLlVTRVJfQUdFTlQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGF0Zm9ybVNwZWNpZmljRGF0YSgpOiBUZWxlbWV0cnlJbmZvW10ge1xuICBjb25zdCBydW50aW1lSW5mbyA9IHtcbiAgICBrZXk6IFwiTm9kZVwiLFxuICAgIHZhbHVlOiBwcm9jZXNzLnZlcnNpb24sXG4gIH07XG5cbiAgY29uc3Qgb3NJbmZvID0ge1xuICAgIGtleTogXCJPU1wiLFxuICAgIHZhbHVlOiBgKCR7b3MuYXJjaCgpfS0ke29zLnR5cGUoKX0tJHtvcy5yZWxlYXNlKCl9KWAsXG4gIH07XG5cbiAgcmV0dXJuIFtydW50aW1lSW5mbywgb3NJbmZvXTtcbn1cbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL21zUmVzdFVzZXJBZ2VudFBvbGljeS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL21zUmVzdFVzZXJBZ2VudFBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiw2Q0FBeUI7QUFFekIsK0NBQThDO0FBRTlDLFNBQWdCLHNCQUFzQjtJQUNwQyxPQUFPLHFCQUFTLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQztBQUM5QyxDQUFDO0FBRkQsd0RBRUM7QUFFRCxTQUFnQix1QkFBdUI7SUFDckMsSUFBTSxXQUFXLEdBQUc7UUFDbEIsR0FBRyxFQUFFLE1BQU07UUFDWCxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU87S0FDdkIsQ0FBQztJQUVGLElBQU0sTUFBTSxHQUFHO1FBQ2IsR0FBRyxFQUFFLElBQUk7UUFDVCxLQUFLLEVBQUUsTUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQUksRUFBRSxDQUFDLElBQUksRUFBRSxTQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBRztLQUNyRCxDQUFDO0lBRUYsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBWkQsMERBWUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCAqIGFzIG9zIGZyb20gXCJvc1wiO1xuaW1wb3J0IHsgVGVsZW1ldHJ5SW5mbyB9IGZyb20gXCIuL3VzZXJBZ2VudFBvbGljeVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWwvY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VXNlckFnZW50S2V5KCk6IHN0cmluZyB7XG4gIHJldHVybiBDb25zdGFudHMuSGVhZGVyQ29uc3RhbnRzLlVTRVJfQUdFTlQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGF0Zm9ybVNwZWNpZmljRGF0YSgpOiBUZWxlbWV0cnlJbmZvW10ge1xuICBjb25zdCBydW50aW1lSW5mbyA9IHtcbiAgICBrZXk6IFwiTm9kZVwiLFxuICAgIHZhbHVlOiBwcm9jZXNzLnZlcnNpb24sXG4gIH07XG5cbiAgY29uc3Qgb3NJbmZvID0ge1xuICAgIGtleTogXCJPU1wiLFxuICAgIHZhbHVlOiBgKCR7b3MuYXJjaCgpfS0ke29zLnR5cGUoKX0tJHtvcy5yZWxlYXNlKCl9KWAsXG4gIH07XG5cbiAgcmV0dXJuIFtydW50aW1lSW5mbywgb3NJbmZvXTtcbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/redirectPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/rpRegistrationPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/signingPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3NpZ25pbmdQb2xpY3kudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9wb2xpY2llcy9zaWduaW5nUG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBSy9GLGlEQUt5QjtBQUV6QixTQUFnQixhQUFhLENBQzNCLHNCQUFnRDtJQUVoRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQUMsVUFBeUIsRUFBRSxPQUFpQztZQUNuRSxPQUFPLElBQUksYUFBYSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUN4RSxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFSRCxzQ0FRQztBQUVEO0lBQW1DLHlDQUFpQjtJQUNsRCx1QkFDRSxVQUF5QixFQUN6QixPQUFpQyxFQUMxQixzQkFBZ0Q7UUFIekQsWUFLRSxrQkFBTSxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBQzNCO1FBSFEsNEJBQXNCLEdBQXRCLHNCQUFzQixDQUEwQjs7SUFHekQsQ0FBQztJQUVELG1DQUFXLEdBQVgsVUFBWSxPQUF3QjtRQUNsQyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVNLG1DQUFXLEdBQWxCLFVBQW1CLE9BQXdCO1FBQTNDLGlCQUlDO1FBSEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFdBQVc7WUFDaEQsT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7UUFBekMsQ0FBeUMsQ0FDMUMsQ0FBQztJQUNKLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUFsQkQsQ0FBbUMsaUNBQWlCLEdBa0JuRDtBQWxCWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4uL2NyZWRlbnRpYWxzL3NlcnZpY2VDbGllbnRDcmVkZW50aWFsc1wiO1xuaW1wb3J0IHsgSHR0cE9wZXJhdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4uL2h0dHBPcGVyYXRpb25SZXNwb25zZVwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5pbXBvcnQge1xuICBCYXNlUmVxdWVzdFBvbGljeSxcbiAgUmVxdWVzdFBvbGljeUZhY3RvcnksXG4gIFJlcXVlc3RQb2xpY3ksXG4gIFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbn0gZnJvbSBcIi4vcmVxdWVzdFBvbGljeVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2lnbmluZ1BvbGljeShcbiAgYXV0aGVudGljYXRpb25Qcm92aWRlcjogU2VydmljZUNsaWVudENyZWRlbnRpYWxzXG4pOiBSZXF1ZXN0UG9saWN5RmFjdG9yeSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiAobmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSwgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFNpZ25pbmdQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucywgYXV0aGVudGljYXRpb25Qcm92aWRlcik7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFNpZ25pbmdQb2xpY3kgZXh0ZW5kcyBCYXNlUmVxdWVzdFBvbGljeSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIG5leHRQb2xpY3k6IFJlcXVlc3RQb2xpY3ksXG4gICAgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxuICAgIHB1YmxpYyBhdXRoZW50aWNhdGlvblByb3ZpZGVyOiBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHNcbiAgKSB7XG4gICAgc3VwZXIobmV4dFBvbGljeSwgb3B0aW9ucyk7XG4gIH1cblxuICBzaWduUmVxdWVzdChyZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UpOiBQcm9taXNlPFdlYlJlc291cmNlTGlrZT4ge1xuICAgIHJldHVybiB0aGlzLmF1dGhlbnRpY2F0aW9uUHJvdmlkZXIuc2lnblJlcXVlc3QocmVxdWVzdCk7XG4gIH1cblxuICBwdWJsaWMgc2VuZFJlcXVlc3QocmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5zaWduUmVxdWVzdChyZXF1ZXN0KS50aGVuKChuZXh0UmVxdWVzdCkgPT5cbiAgICAgIHRoaXMuX25leHRQb2xpY3kuc2VuZFJlcXVlc3QobmV4dFJlcXVlc3QpXG4gICAgKTtcbiAgfVxufVxuIl19
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3NpZ25pbmdQb2xpY3kudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9wb2xpY2llcy9zaWduaW5nUG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBSy9GLGlEQUt5QjtBQUV6QixTQUFnQixhQUFhLENBQzNCLHNCQUFnRDtJQUVoRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQUMsVUFBeUIsRUFBRSxPQUFpQztZQUNuRSxPQUFPLElBQUksYUFBYSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUN4RSxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFSRCxzQ0FRQztBQUVEO0lBQW1DLHlDQUFpQjtJQUNsRCx1QkFDRSxVQUF5QixFQUN6QixPQUFpQyxFQUMxQixzQkFBZ0Q7UUFIekQsWUFLRSxrQkFBTSxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBQzNCO1FBSFEsNEJBQXNCLEdBQXRCLHNCQUFzQixDQUEwQjs7SUFHekQsQ0FBQztJQUVELG1DQUFXLEdBQVgsVUFBWSxPQUF3QjtRQUNsQyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVNLG1DQUFXLEdBQWxCLFVBQW1CLE9BQXdCO1FBQTNDLGlCQUlDO1FBSEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFdBQVc7WUFDaEQsT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7UUFBekMsQ0FBeUMsQ0FDMUMsQ0FBQztJQUNKLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUFsQkQsQ0FBbUMsaUNBQWlCLEdBa0JuRDtBQWxCWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4uL2NyZWRlbnRpYWxzL3NlcnZpY2VDbGllbnRDcmVkZW50aWFsc1wiO1xuaW1wb3J0IHsgSHR0cE9wZXJhdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4uL2h0dHBPcGVyYXRpb25SZXNwb25zZVwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5pbXBvcnQge1xuICBCYXNlUmVxdWVzdFBvbGljeSxcbiAgUmVxdWVzdFBvbGljeUZhY3RvcnksXG4gIFJlcXVlc3RQb2xpY3ksXG4gIFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbn0gZnJvbSBcIi4vcmVxdWVzdFBvbGljeVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2lnbmluZ1BvbGljeShcbiAgYXV0aGVudGljYXRpb25Qcm92aWRlcjogU2VydmljZUNsaWVudENyZWRlbnRpYWxzXG4pOiBSZXF1ZXN0UG9saWN5RmFjdG9yeSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiAobmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSwgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFNpZ25pbmdQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucywgYXV0aGVudGljYXRpb25Qcm92aWRlcik7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFNpZ25pbmdQb2xpY3kgZXh0ZW5kcyBCYXNlUmVxdWVzdFBvbGljeSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIG5leHRQb2xpY3k6IFJlcXVlc3RQb2xpY3ksXG4gICAgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlLFxuICAgIHB1YmxpYyBhdXRoZW50aWNhdGlvblByb3ZpZGVyOiBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHNcbiAgKSB7XG4gICAgc3VwZXIobmV4dFBvbGljeSwgb3B0aW9ucyk7XG4gIH1cblxuICBzaWduUmVxdWVzdChyZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UpOiBQcm9taXNlPFdlYlJlc291cmNlTGlrZT4ge1xuICAgIHJldHVybiB0aGlzLmF1dGhlbnRpY2F0aW9uUHJvdmlkZXIuc2lnblJlcXVlc3QocmVxdWVzdCk7XG4gIH1cblxuICBwdWJsaWMgc2VuZFJlcXVlc3QocmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5zaWduUmVxdWVzdChyZXF1ZXN0KS50aGVuKChuZXh0UmVxdWVzdCkgPT5cbiAgICAgIHRoaXMuX25leHRQb2xpY3kuc2VuZFJlcXVlc3QobmV4dFJlcXVlc3QpXG4gICAgKTtcbiAgfVxufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/systemErrorRetryPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/queryCollectionFormat.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3F1ZXJ5Q29sbGVjdGlvbkZvcm1hdC50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3F1ZXJ5Q29sbGVjdGlvbkZvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7O0FBRS9GOztHQUVHO0FBQ0gsSUFBWSxxQkFNWDtBQU5ELFdBQVkscUJBQXFCO0lBQy9CLGtDQUFTLENBQUE7SUFDVCxrQ0FBUyxDQUFBO0lBQ1QsbUNBQVUsQ0FBQTtJQUNWLG9DQUFXLENBQUE7SUFDWCx3Q0FBZSxDQUFBO0FBQ2pCLENBQUMsRUFOVyxxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQU1oQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuLyoqXG4gKiBUaGUgZm9ybWF0IHRoYXQgd2lsbCBiZSB1c2VkIHRvIGpvaW4gYW4gYXJyYXkgb2YgdmFsdWVzIHRvZ2V0aGVyIGZvciBhIHF1ZXJ5IHBhcmFtZXRlciB2YWx1ZS5cbiAqL1xuZXhwb3J0IGVudW0gUXVlcnlDb2xsZWN0aW9uRm9ybWF0IHtcbiAgQ3N2ID0gXCIsXCIsXG4gIFNzdiA9IFwiIFwiLFxuICBUc3YgPSBcIlxcdFwiLFxuICBQaXBlcyA9IFwifFwiLFxuICBNdWx0aSA9IFwiTXVsdGlcIixcbn1cbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3F1ZXJ5Q29sbGVjdGlvbkZvcm1hdC50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3F1ZXJ5Q29sbGVjdGlvbkZvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7O0FBRS9GOztHQUVHO0FBQ0gsSUFBWSxxQkFNWDtBQU5ELFdBQVkscUJBQXFCO0lBQy9CLGtDQUFTLENBQUE7SUFDVCxrQ0FBUyxDQUFBO0lBQ1QsbUNBQVUsQ0FBQTtJQUNWLG9DQUFXLENBQUE7SUFDWCx3Q0FBZSxDQUFBO0FBQ2pCLENBQUMsRUFOVyxxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQU1oQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuLyoqXG4gKiBUaGUgZm9ybWF0IHRoYXQgd2lsbCBiZSB1c2VkIHRvIGpvaW4gYW4gYXJyYXkgb2YgdmFsdWVzIHRvZ2V0aGVyIGZvciBhIHF1ZXJ5IHBhcmFtZXRlciB2YWx1ZS5cbiAqL1xuZXhwb3J0IGVudW0gUXVlcnlDb2xsZWN0aW9uRm9ybWF0IHtcbiAgQ3N2ID0gXCIsXCIsXG4gIFNzdiA9IFwiIFwiLFxuICBUc3YgPSBcIlxcdFwiLFxuICBQaXBlcyA9IFwifFwiLFxuICBNdWx0aSA9IFwiTXVsdGlcIixcbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/agentPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2FnZW50UG9saWN5LnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvcG9saWNpZXMvYWdlbnRQb2xpY3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFHL0YsaURBS3lCO0FBSXpCLFNBQWdCLFdBQVcsQ0FBQyxhQUE2QjtJQUN2RCxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQUMsVUFBeUIsRUFBRSxPQUFpQztZQUNuRSxPQUFPLElBQUksV0FBVyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsYUFBYyxDQUFDLENBQUM7UUFDOUQsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBTkQsa0NBTUM7QUFFRDtJQUFpQyx1Q0FBaUI7SUFHaEQscUJBQ0UsVUFBeUIsRUFDekIsT0FBaUMsRUFDakMsYUFBNEI7UUFIOUIsWUFLRSxrQkFBTSxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBRTNCO1FBREMsS0FBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7O0lBQ3JDLENBQUM7SUFFTSxpQ0FBVyxHQUFsQixVQUFtQixPQUF3QjtRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUMxQixPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDNUM7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUFsQkQsQ0FBaUMsaUNBQWlCLEdBa0JqRDtBQWxCWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgQWdlbnRTZXR0aW5ncyB9IGZyb20gXCIuLi9zZXJ2aWNlQ2xpZW50XCI7XG5pbXBvcnQge1xuICBCYXNlUmVxdWVzdFBvbGljeSxcbiAgUmVxdWVzdFBvbGljeSxcbiAgUmVxdWVzdFBvbGljeUZhY3RvcnksXG4gIFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbn0gZnJvbSBcIi4vcmVxdWVzdFBvbGljeVwiO1xuaW1wb3J0IHsgSHR0cE9wZXJhdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4uL2h0dHBPcGVyYXRpb25SZXNwb25zZVwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZ2VudFBvbGljeShhZ2VudFNldHRpbmdzPzogQWdlbnRTZXR0aW5ncyk6IFJlcXVlc3RQb2xpY3lGYWN0b3J5IHtcbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IChuZXh0UG9saWN5OiBSZXF1ZXN0UG9saWN5LCBvcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UpID0+IHtcbiAgICAgIHJldHVybiBuZXcgQWdlbnRQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucywgYWdlbnRTZXR0aW5ncyEpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBBZ2VudFBvbGljeSBleHRlbmRzIEJhc2VSZXF1ZXN0UG9saWN5IHtcbiAgYWdlbnRTZXR0aW5nczogQWdlbnRTZXR0aW5ncztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBuZXh0UG9saWN5OiBSZXF1ZXN0UG9saWN5LFxuICAgIG9wdGlvbnM6IFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbiAgICBhZ2VudFNldHRpbmdzOiBBZ2VudFNldHRpbmdzXG4gICkge1xuICAgIHN1cGVyKG5leHRQb2xpY3ksIG9wdGlvbnMpO1xuICAgIHRoaXMuYWdlbnRTZXR0aW5ncyA9IGFnZW50U2V0dGluZ3M7XG4gIH1cblxuICBwdWJsaWMgc2VuZFJlcXVlc3QocmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICBpZiAoIXJlcXVlc3QuYWdlbnRTZXR0aW5ncykge1xuICAgICAgcmVxdWVzdC5hZ2VudFNldHRpbmdzID0gdGhpcy5hZ2VudFNldHRpbmdzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgfVxufVxuIl19
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2FnZW50UG9saWN5LnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvcG9saWNpZXMvYWdlbnRQb2xpY3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFHL0YsaURBS3lCO0FBSXpCLFNBQWdCLFdBQVcsQ0FBQyxhQUE2QjtJQUN2RCxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQUMsVUFBeUIsRUFBRSxPQUFpQztZQUNuRSxPQUFPLElBQUksV0FBVyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsYUFBYyxDQUFDLENBQUM7UUFDOUQsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBTkQsa0NBTUM7QUFFRDtJQUFpQyx1Q0FBaUI7SUFHaEQscUJBQ0UsVUFBeUIsRUFDekIsT0FBaUMsRUFDakMsYUFBNEI7UUFIOUIsWUFLRSxrQkFBTSxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBRTNCO1FBREMsS0FBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7O0lBQ3JDLENBQUM7SUFFTSxpQ0FBVyxHQUFsQixVQUFtQixPQUF3QjtRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUMxQixPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDNUM7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUFsQkQsQ0FBaUMsaUNBQWlCLEdBa0JqRDtBQWxCWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgQWdlbnRTZXR0aW5ncyB9IGZyb20gXCIuLi9zZXJ2aWNlQ2xpZW50XCI7XG5pbXBvcnQge1xuICBCYXNlUmVxdWVzdFBvbGljeSxcbiAgUmVxdWVzdFBvbGljeSxcbiAgUmVxdWVzdFBvbGljeUZhY3RvcnksXG4gIFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbn0gZnJvbSBcIi4vcmVxdWVzdFBvbGljeVwiO1xuaW1wb3J0IHsgSHR0cE9wZXJhdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4uL2h0dHBPcGVyYXRpb25SZXNwb25zZVwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZ2VudFBvbGljeShhZ2VudFNldHRpbmdzPzogQWdlbnRTZXR0aW5ncyk6IFJlcXVlc3RQb2xpY3lGYWN0b3J5IHtcbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IChuZXh0UG9saWN5OiBSZXF1ZXN0UG9saWN5LCBvcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UpID0+IHtcbiAgICAgIHJldHVybiBuZXcgQWdlbnRQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucywgYWdlbnRTZXR0aW5ncyEpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBBZ2VudFBvbGljeSBleHRlbmRzIEJhc2VSZXF1ZXN0UG9saWN5IHtcbiAgYWdlbnRTZXR0aW5nczogQWdlbnRTZXR0aW5ncztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBuZXh0UG9saWN5OiBSZXF1ZXN0UG9saWN5LFxuICAgIG9wdGlvbnM6IFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSxcbiAgICBhZ2VudFNldHRpbmdzOiBBZ2VudFNldHRpbmdzXG4gICkge1xuICAgIHN1cGVyKG5leHRQb2xpY3ksIG9wdGlvbnMpO1xuICAgIHRoaXMuYWdlbnRTZXR0aW5ncyA9IGFnZW50U2V0dGluZ3M7XG4gIH1cblxuICBwdWJsaWMgc2VuZFJlcXVlc3QocmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICBpZiAoIXJlcXVlc3QuYWdlbnRTZXR0aW5ncykge1xuICAgICAgcmVxdWVzdC5hZ2VudFNldHRpbmdzID0gdGhpcy5hZ2VudFNldHRpbmdzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgfVxufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/proxyPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/throttlingRetryPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3Rocm90dGxpbmdSZXRyeVBvbGljeS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3Rocm90dGxpbmdSZXRyeVBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRixpREFLeUI7QUFHekIsK0NBQThDO0FBQzlDLHVDQUFzQztBQUV0QyxJQUFNLFdBQVcsR0FBRyxxQkFBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7QUFDeEQsSUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7QUFZOUIsU0FBZ0IscUJBQXFCLENBQ25DLFVBQXdDO0lBQXhDLDJCQUFBLEVBQUEsZ0NBQXdDO0lBRXhDLE9BQU87UUFDTCxNQUFNLEVBQUUsVUFBQyxVQUF5QixFQUFFLE9BQWlDO1lBQ25FLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQVJELHNEQVFDO0FBRUQ7Ozs7O0dBS0c7QUFDSDtJQUEyQyxpREFBaUI7SUFHMUQsK0JBQVksVUFBeUIsRUFBRSxPQUFpQyxFQUFFLFVBQWtCO1FBQTVGLFlBQ0Usa0JBQU0sVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUUzQjtRQURDLEtBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDOztJQUMvQixDQUFDO0lBRVksMkNBQVcsR0FBeEIsVUFBeUIsV0FBNEI7Ozs7Z0JBQ25ELHNCQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQVE7d0JBQ3JFLE9BQU8sS0FBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM5QyxDQUFDLENBQUMsRUFBQzs7O0tBQ0o7SUFFYSxxQ0FBSyxHQUFuQixVQUNFLFdBQTRCLEVBQzVCLFlBQW1DLEVBQ25DLFVBQWtCOzs7Ozs7d0JBRWxCLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUMsZUFBZSxFQUFFOzRCQUN2RCxzQkFBTyxZQUFZLEVBQUM7eUJBQ3JCO3dCQUVLLGdCQUFnQixHQUF1QixZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDbkUscUJBQVMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUN0QyxDQUFDOzZCQUVFLENBQUEsZ0JBQWdCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUEsRUFBaEQsd0JBQWdEO3dCQUM1QyxTQUFTLEdBQXVCLHFCQUFxQixDQUFDLHFCQUFxQixDQUMvRSxnQkFBZ0IsQ0FDakIsQ0FBQzs2QkFDRSxTQUFTLEVBQVQsd0JBQVM7d0JBQ1gscUJBQU0sYUFBSyxDQUFDLFNBQVMsQ0FBQyxFQUFBOzt3QkFBdEIsU0FBc0IsQ0FBQzt3QkFDWCxxQkFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBQTs7d0JBQXJELEdBQUcsR0FBRyxTQUErQzt3QkFDM0Qsc0JBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBQzs0QkFJeEQsc0JBQU8sWUFBWSxFQUFDOzs7O0tBQ3JCO0lBRWEsMkNBQXFCLEdBQW5DLFVBQW9DLFdBQW1CO1FBQ3JELElBQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2hELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8scUJBQXFCLENBQUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDckU7YUFBTTtZQUNMLE9BQU8sbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVhLCtDQUF5QixHQUF2QyxVQUF3QyxXQUFtQjtRQUN6RCxJQUFJO1lBQ0YsSUFBTSxHQUFHLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQy9CLElBQU0sSUFBSSxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDN0MsSUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUV4QixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQzlDO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUE3REQsQ0FBMkMsaUNBQWlCLEdBNkQzRDtBQTdEWSxzREFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG4gIFJlcXVlc3RQb2xpY3lGYWN0b3J5LFxufSBmcm9tIFwiLi9yZXF1ZXN0UG9saWN5XCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZUxpa2UgfSBmcm9tIFwiLi4vd2ViUmVzb3VyY2VcIjtcbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgZGVsYXkgfSBmcm9tIFwiLi4vdXRpbC91dGlsc1wiO1xuXG5jb25zdCBTdGF0dXNDb2RlcyA9IENvbnN0YW50cy5IdHRwQ29uc3RhbnRzLlN0YXR1c0NvZGVzO1xuY29uc3QgREVGQVVMVF9SRVRSWV9DT1VOVCA9IDM7XG5cbi8qKlxuICogT3B0aW9ucyB0aGF0IGNvbnRyb2wgaG93IHRvIHJldHJ5IG9uIHJlc3BvbnNlIHN0YXR1cyBjb2RlIDQyOS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUaHJvdHRsaW5nUmV0cnlPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZXRyeSBhdHRlbXB0cy4gIERlZmF1bHRzIHRvIDMuXG4gICAqL1xuICBtYXhSZXRyaWVzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGluZ1JldHJ5UG9saWN5KFxuICBtYXhSZXRyaWVzOiBudW1iZXIgPSBERUZBVUxUX1JFVFJZX0NPVU5UXG4pOiBSZXF1ZXN0UG9saWN5RmFjdG9yeSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiAobmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSwgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFRocm90dGxpbmdSZXRyeVBvbGljeShuZXh0UG9saWN5LCBvcHRpb25zLCBtYXhSZXRyaWVzKTtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIFRvIGxlYXJuIG1vcmUsIHBsZWFzZSByZWZlciB0b1xuICogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtcmVzb3VyY2UtbWFuYWdlci9yZXNvdXJjZS1tYW5hZ2VyLXJlcXVlc3QtbGltaXRzLFxuICogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtc3Vic2NyaXB0aW9uLXNlcnZpY2UtbGltaXRzIGFuZFxuICogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvdmlydHVhbC1tYWNoaW5lcy90cm91Ymxlc2hvb3RpbmcvdHJvdWJsZXNob290aW5nLXRocm90dGxpbmctZXJyb3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBUaHJvdHRsaW5nUmV0cnlQb2xpY3kgZXh0ZW5kcyBCYXNlUmVxdWVzdFBvbGljeSB7XG4gIHByaXZhdGUgcmV0cnlMaW1pdDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKG5leHRQb2xpY3k6IFJlcXVlc3RQb2xpY3ksIG9wdGlvbnM6IFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSwgcmV0cnlMaW1pdDogbnVtYmVyKSB7XG4gICAgc3VwZXIobmV4dFBvbGljeSwgb3B0aW9ucyk7XG4gICAgdGhpcy5yZXRyeUxpbWl0ID0gcmV0cnlMaW1pdDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZW5kUmVxdWVzdChodHRwUmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChodHRwUmVxdWVzdC5jbG9uZSgpKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucmV0cnkoaHR0cFJlcXVlc3QsIHJlc3BvbnNlLCAwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmV0cnkoXG4gICAgaHR0cFJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSxcbiAgICBodHRwUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSxcbiAgICByZXRyeUNvdW50OiBudW1iZXJcbiAgKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICBpZiAoaHR0cFJlc3BvbnNlLnN0YXR1cyAhPT0gU3RhdHVzQ29kZXMuVG9vTWFueVJlcXVlc3RzKSB7XG4gICAgICByZXR1cm4gaHR0cFJlc3BvbnNlO1xuICAgIH1cblxuICAgIGNvbnN0IHJldHJ5QWZ0ZXJIZWFkZXI6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGh0dHBSZXNwb25zZS5oZWFkZXJzLmdldChcbiAgICAgIENvbnN0YW50cy5IZWFkZXJDb25zdGFudHMuUkVUUllfQUZURVJcbiAgICApO1xuXG4gICAgaWYgKHJldHJ5QWZ0ZXJIZWFkZXIgJiYgcmV0cnlDb3VudCA8IHRoaXMucmV0cnlMaW1pdCkge1xuICAgICAgY29uc3QgZGVsYXlJbk1zOiBudW1iZXIgfCB1bmRlZmluZWQgPSBUaHJvdHRsaW5nUmV0cnlQb2xpY3kucGFyc2VSZXRyeUFmdGVySGVhZGVyKFxuICAgICAgICByZXRyeUFmdGVySGVhZGVyXG4gICAgICApO1xuICAgICAgaWYgKGRlbGF5SW5Ncykge1xuICAgICAgICBhd2FpdCBkZWxheShkZWxheUluTXMpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9uZXh0UG9saWN5LnNlbmRSZXF1ZXN0KGh0dHBSZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV0cnkoaHR0cFJlcXVlc3QsIHJlcywgcmV0cnlDb3VudCArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBodHRwUmVzcG9uc2U7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHBhcnNlUmV0cnlBZnRlckhlYWRlcihoZWFkZXJWYWx1ZTogc3RyaW5nKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCByZXRyeUFmdGVySW5TZWNvbmRzID0gTnVtYmVyKGhlYWRlclZhbHVlKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHJldHJ5QWZ0ZXJJblNlY29uZHMpKSB7XG4gICAgICByZXR1cm4gVGhyb3R0bGluZ1JldHJ5UG9saWN5LnBhcnNlRGF0ZVJldHJ5QWZ0ZXJIZWFkZXIoaGVhZGVyVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmV0cnlBZnRlckluU2Vjb25kcyAqIDEwMDA7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwYXJzZURhdGVSZXRyeUFmdGVySGVhZGVyKGhlYWRlclZhbHVlOiBzdHJpbmcpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBub3c6IG51bWJlciA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBkYXRlOiBudW1iZXIgPSBEYXRlLnBhcnNlKGhlYWRlclZhbHVlKTtcbiAgICAgIGNvbnN0IGRpZmYgPSBkYXRlIC0gbm93O1xuXG4gICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKGRpZmYpID8gdW5kZWZpbmVkIDogZGlmZjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3Rocm90dGxpbmdSZXRyeVBvbGljeS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL3Rocm90dGxpbmdSZXRyeVBvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRixpREFLeUI7QUFHekIsK0NBQThDO0FBQzlDLHVDQUFzQztBQUV0QyxJQUFNLFdBQVcsR0FBRyxxQkFBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7QUFDeEQsSUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7QUFZOUIsU0FBZ0IscUJBQXFCLENBQ25DLFVBQXdDO0lBQXhDLDJCQUFBLEVBQUEsZ0NBQXdDO0lBRXhDLE9BQU87UUFDTCxNQUFNLEVBQUUsVUFBQyxVQUF5QixFQUFFLE9BQWlDO1lBQ25FLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQVJELHNEQVFDO0FBRUQ7Ozs7O0dBS0c7QUFDSDtJQUEyQyxpREFBaUI7SUFHMUQsK0JBQVksVUFBeUIsRUFBRSxPQUFpQyxFQUFFLFVBQWtCO1FBQTVGLFlBQ0Usa0JBQU0sVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUUzQjtRQURDLEtBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDOztJQUMvQixDQUFDO0lBRVksMkNBQVcsR0FBeEIsVUFBeUIsV0FBNEI7Ozs7Z0JBQ25ELHNCQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQVE7d0JBQ3JFLE9BQU8sS0FBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM5QyxDQUFDLENBQUMsRUFBQzs7O0tBQ0o7SUFFYSxxQ0FBSyxHQUFuQixVQUNFLFdBQTRCLEVBQzVCLFlBQW1DLEVBQ25DLFVBQWtCOzs7Ozs7d0JBRWxCLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUMsZUFBZSxFQUFFOzRCQUN2RCxzQkFBTyxZQUFZLEVBQUM7eUJBQ3JCO3dCQUVLLGdCQUFnQixHQUF1QixZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDbkUscUJBQVMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUN0QyxDQUFDOzZCQUVFLENBQUEsZ0JBQWdCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUEsRUFBaEQsd0JBQWdEO3dCQUM1QyxTQUFTLEdBQXVCLHFCQUFxQixDQUFDLHFCQUFxQixDQUMvRSxnQkFBZ0IsQ0FDakIsQ0FBQzs2QkFDRSxTQUFTLEVBQVQsd0JBQVM7d0JBQ1gscUJBQU0sYUFBSyxDQUFDLFNBQVMsQ0FBQyxFQUFBOzt3QkFBdEIsU0FBc0IsQ0FBQzt3QkFDWCxxQkFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBQTs7d0JBQXJELEdBQUcsR0FBRyxTQUErQzt3QkFDM0Qsc0JBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBQzs0QkFJeEQsc0JBQU8sWUFBWSxFQUFDOzs7O0tBQ3JCO0lBRWEsMkNBQXFCLEdBQW5DLFVBQW9DLFdBQW1CO1FBQ3JELElBQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2hELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8scUJBQXFCLENBQUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDckU7YUFBTTtZQUNMLE9BQU8sbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVhLCtDQUF5QixHQUF2QyxVQUF3QyxXQUFtQjtRQUN6RCxJQUFJO1lBQ0YsSUFBTSxHQUFHLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQy9CLElBQU0sSUFBSSxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDN0MsSUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUV4QixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQzlDO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUE3REQsQ0FBMkMsaUNBQWlCLEdBNkQzRDtBQTdEWSxzREFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7XG4gIEJhc2VSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5LFxuICBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG4gIFJlcXVlc3RQb2xpY3lGYWN0b3J5LFxufSBmcm9tIFwiLi9yZXF1ZXN0UG9saWN5XCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZUxpa2UgfSBmcm9tIFwiLi4vd2ViUmVzb3VyY2VcIjtcbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgZGVsYXkgfSBmcm9tIFwiLi4vdXRpbC91dGlsc1wiO1xuXG5jb25zdCBTdGF0dXNDb2RlcyA9IENvbnN0YW50cy5IdHRwQ29uc3RhbnRzLlN0YXR1c0NvZGVzO1xuY29uc3QgREVGQVVMVF9SRVRSWV9DT1VOVCA9IDM7XG5cbi8qKlxuICogT3B0aW9ucyB0aGF0IGNvbnRyb2wgaG93IHRvIHJldHJ5IG9uIHJlc3BvbnNlIHN0YXR1cyBjb2RlIDQyOS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUaHJvdHRsaW5nUmV0cnlPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZXRyeSBhdHRlbXB0cy4gIERlZmF1bHRzIHRvIDMuXG4gICAqL1xuICBtYXhSZXRyaWVzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGluZ1JldHJ5UG9saWN5KFxuICBtYXhSZXRyaWVzOiBudW1iZXIgPSBERUZBVUxUX1JFVFJZX0NPVU5UXG4pOiBSZXF1ZXN0UG9saWN5RmFjdG9yeSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiAobmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSwgb3B0aW9uczogUmVxdWVzdFBvbGljeU9wdGlvbnNMaWtlKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFRocm90dGxpbmdSZXRyeVBvbGljeShuZXh0UG9saWN5LCBvcHRpb25zLCBtYXhSZXRyaWVzKTtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIFRvIGxlYXJuIG1vcmUsIHBsZWFzZSByZWZlciB0b1xuICogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtcmVzb3VyY2UtbWFuYWdlci9yZXNvdXJjZS1tYW5hZ2VyLXJlcXVlc3QtbGltaXRzLFxuICogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtc3Vic2NyaXB0aW9uLXNlcnZpY2UtbGltaXRzIGFuZFxuICogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvdmlydHVhbC1tYWNoaW5lcy90cm91Ymxlc2hvb3RpbmcvdHJvdWJsZXNob290aW5nLXRocm90dGxpbmctZXJyb3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBUaHJvdHRsaW5nUmV0cnlQb2xpY3kgZXh0ZW5kcyBCYXNlUmVxdWVzdFBvbGljeSB7XG4gIHByaXZhdGUgcmV0cnlMaW1pdDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKG5leHRQb2xpY3k6IFJlcXVlc3RQb2xpY3ksIG9wdGlvbnM6IFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSwgcmV0cnlMaW1pdDogbnVtYmVyKSB7XG4gICAgc3VwZXIobmV4dFBvbGljeSwgb3B0aW9ucyk7XG4gICAgdGhpcy5yZXRyeUxpbWl0ID0gcmV0cnlMaW1pdDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZW5kUmVxdWVzdChodHRwUmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChodHRwUmVxdWVzdC5jbG9uZSgpKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucmV0cnkoaHR0cFJlcXVlc3QsIHJlc3BvbnNlLCAwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmV0cnkoXG4gICAgaHR0cFJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSxcbiAgICBodHRwUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSxcbiAgICByZXRyeUNvdW50OiBudW1iZXJcbiAgKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICBpZiAoaHR0cFJlc3BvbnNlLnN0YXR1cyAhPT0gU3RhdHVzQ29kZXMuVG9vTWFueVJlcXVlc3RzKSB7XG4gICAgICByZXR1cm4gaHR0cFJlc3BvbnNlO1xuICAgIH1cblxuICAgIGNvbnN0IHJldHJ5QWZ0ZXJIZWFkZXI6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGh0dHBSZXNwb25zZS5oZWFkZXJzLmdldChcbiAgICAgIENvbnN0YW50cy5IZWFkZXJDb25zdGFudHMuUkVUUllfQUZURVJcbiAgICApO1xuXG4gICAgaWYgKHJldHJ5QWZ0ZXJIZWFkZXIgJiYgcmV0cnlDb3VudCA8IHRoaXMucmV0cnlMaW1pdCkge1xuICAgICAgY29uc3QgZGVsYXlJbk1zOiBudW1iZXIgfCB1bmRlZmluZWQgPSBUaHJvdHRsaW5nUmV0cnlQb2xpY3kucGFyc2VSZXRyeUFmdGVySGVhZGVyKFxuICAgICAgICByZXRyeUFmdGVySGVhZGVyXG4gICAgICApO1xuICAgICAgaWYgKGRlbGF5SW5Ncykge1xuICAgICAgICBhd2FpdCBkZWxheShkZWxheUluTXMpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9uZXh0UG9saWN5LnNlbmRSZXF1ZXN0KGh0dHBSZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV0cnkoaHR0cFJlcXVlc3QsIHJlcywgcmV0cnlDb3VudCArIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBodHRwUmVzcG9uc2U7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHBhcnNlUmV0cnlBZnRlckhlYWRlcihoZWFkZXJWYWx1ZTogc3RyaW5nKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCByZXRyeUFmdGVySW5TZWNvbmRzID0gTnVtYmVyKGhlYWRlclZhbHVlKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHJldHJ5QWZ0ZXJJblNlY29uZHMpKSB7XG4gICAgICByZXR1cm4gVGhyb3R0bGluZ1JldHJ5UG9saWN5LnBhcnNlRGF0ZVJldHJ5QWZ0ZXJIZWFkZXIoaGVhZGVyVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmV0cnlBZnRlckluU2Vjb25kcyAqIDEwMDA7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwYXJzZURhdGVSZXRyeUFmdGVySGVhZGVyKGhlYWRlclZhbHVlOiBzdHJpbmcpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBub3c6IG51bWJlciA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBkYXRlOiBudW1iZXIgPSBEYXRlLnBhcnNlKGhlYWRlclZhbHVlKTtcbiAgICAgIGNvbnN0IGRpZmYgPSBkYXRlIC0gbm93O1xuXG4gICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKGRpZmYpID8gdW5kZWZpbmVkIDogZGlmZjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/credentials/azureIdentityTokenCredentialAdapter.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2F6dXJlSWRlbnRpdHlUb2tlbkNyZWRlbnRpYWxBZGFwdGVyLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvY3JlZGVudGlhbHMvYXp1cmVJZGVudGl0eVRva2VuQ3JlZGVudGlhbEFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFHL0YsK0NBQWlFO0FBTWpFLElBQU0sNEJBQTRCLEdBQUcsUUFBUSxDQUFDO0FBRTlDOztHQUVHO0FBQ1UsUUFBQSw2QkFBNkIsR0FBRztJQUMzQyxnQ0FBZ0M7SUFDaEMscUNBQXFDO0lBQ3JDLHNDQUFzQztJQUN0QyxnQ0FBZ0M7Q0FDakMsQ0FBQztBQUVGOzs7R0FHRztBQUNIO0lBR0Usd0NBQ0Usb0JBQXFDLEVBQ3JDLE1BQW1FO1FBQW5FLHVCQUFBLEVBQUEsZ0RBQW1FO1FBRW5FLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztRQUNqRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRVksaURBQVEsR0FBckI7Ozs7OzRCQUNzQixxQkFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQTs7d0JBQW5FLFdBQVcsR0FBRyxTQUFxRDt3QkFDekUsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFOzRCQUNsQixNQUFNLEdBQWtCO2dDQUM1QixXQUFXLEVBQUUsV0FBVyxDQUFDLEtBQUs7Z0NBQzlCLFNBQVMsRUFBRSw0QkFBNEI7Z0NBQ3ZDLFNBQVMsRUFBRSxXQUFXLENBQUMsa0JBQWtCOzZCQUMxQyxDQUFDOzRCQUNGLHNCQUFPLE1BQU0sRUFBQzt5QkFDZjs2QkFBTTs0QkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7eUJBQy9DOzs7OztLQUNGO0lBRVksb0RBQVcsR0FBeEIsVUFBeUIsV0FBd0I7Ozs7OzRCQUN6QixxQkFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUE7O3dCQUFyQyxhQUFhLEdBQUcsU0FBcUI7d0JBQzNDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNyQixxQkFBZSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQzFDLGFBQWEsQ0FBQyxTQUFTLFNBQUksYUFBYSxDQUFDLFdBQWEsQ0FDMUQsQ0FBQzt3QkFDRixzQkFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFDOzs7O0tBQ3JDO0lBQ0gscUNBQUM7QUFBRCxDQUFDLEFBakNELElBaUNDO0FBakNZLHdFQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vc2VydmljZUNsaWVudENyZWRlbnRpYWxzXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgYXMgTVNSZXN0Q29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWwvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZSB9IGZyb20gXCIuLi93ZWJSZXNvdXJjZVwiO1xuXG5pbXBvcnQgeyBUb2tlbkNyZWRlbnRpYWwgfSBmcm9tIFwiQGF6dXJlL2NvcmUtYXV0aFwiO1xuaW1wb3J0IHsgVG9rZW5SZXNwb25zZSB9IGZyb20gXCIuL3Rva2VuUmVzcG9uc2VcIjtcblxuY29uc3QgREVGQVVMVF9BVVRIT1JJWkFUSU9OX1NDSEVNRSA9IFwiQmVhcmVyXCI7XG5cbi8qKlxuICogUmVzb3VyY2UgbWFuYWdlciBlbmRwb2ludHMgdG8gbWF0Y2ggaW4gb3JkZXIgdG8gc3BlY2lmeSBhIHZhbGlkIHNjb3BlIHRvIHRoZSBBenVyZUlkZW50aXR5Q3JlZGVudGlhbEFkYXB0ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBhenVyZVJlc291cmNlTWFuYWdlckVuZHBvaW50cyA9IFtcbiAgXCJodHRwczovL21hbmFnZW1lbnQud2luZG93cy5uZXRcIixcbiAgXCJodHRwczovL21hbmFnZW1lbnQuY2hpbmFjbG91ZGFwaS5jblwiLFxuICBcImh0dHBzOi8vbWFuYWdlbWVudC51c2dvdmNsb3VkYXBpLm5ldFwiLFxuICBcImh0dHBzOi8vbWFuYWdlbWVudC5jbG91ZGFwaS5kZVwiLFxuXTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGEgc2ltcGxlIGV4dGVuc2lvbiB0byB1c2Uge0BsaW5rIFRva2VuQ3JlZGVudGlhbH0gZnJvbSBgQGF6dXJlL2lkZW50aXR5YCBsaWJyYXJ5IHRvXG4gKiB1c2Ugd2l0aCBsZWdhY3kgQXp1cmUgU0RLcyB0aGF0IGFjY2VwdCB7QGxpbmsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzfSBmYW1pbHkgb2YgY3JlZGVudGlhbHMgZm9yIGF1dGhlbnRpY2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgQXp1cmVJZGVudGl0eUNyZWRlbnRpYWxBZGFwdGVyIGltcGxlbWVudHMgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIHtcbiAgcHJpdmF0ZSBhenVyZVRva2VuQ3JlZGVudGlhbDogVG9rZW5DcmVkZW50aWFsO1xuICBwcml2YXRlIHNjb3Blczogc3RyaW5nIHwgc3RyaW5nW107XG4gIGNvbnN0cnVjdG9yKFxuICAgIGF6dXJlVG9rZW5DcmVkZW50aWFsOiBUb2tlbkNyZWRlbnRpYWwsXG4gICAgc2NvcGVzOiBzdHJpbmcgfCBzdHJpbmdbXSA9IFwiaHR0cHM6Ly9tYW5hZ2VtZW50LmF6dXJlLmNvbS8uZGVmYXVsdFwiXG4gICkge1xuICAgIHRoaXMuYXp1cmVUb2tlbkNyZWRlbnRpYWwgPSBhenVyZVRva2VuQ3JlZGVudGlhbDtcbiAgICB0aGlzLnNjb3BlcyA9IHNjb3BlcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRUb2tlbigpOiBQcm9taXNlPFRva2VuUmVzcG9uc2U+IHtcbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMuYXp1cmVUb2tlbkNyZWRlbnRpYWwuZ2V0VG9rZW4odGhpcy5zY29wZXMpO1xuICAgIGlmIChhY2Nlc3NUb2tlbiAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgcmVzdWx0OiBUb2tlblJlc3BvbnNlID0ge1xuICAgICAgICBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4udG9rZW4sXG4gICAgICAgIHRva2VuVHlwZTogREVGQVVMVF9BVVRIT1JJWkFUSU9OX1NDSEVNRSxcbiAgICAgICAgZXhwaXJlc09uOiBhY2Nlc3NUb2tlbi5leHBpcmVzT25UaW1lc3RhbXAsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgZmluZCB0b2tlbiBmb3Igc2NvcGVcIik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNpZ25SZXF1ZXN0KHdlYlJlc291cmNlOiBXZWJSZXNvdXJjZSkge1xuICAgIGNvbnN0IHRva2VuUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldFRva2VuKCk7XG4gICAgd2ViUmVzb3VyY2UuaGVhZGVycy5zZXQoXG4gICAgICBNU1Jlc3RDb25zdGFudHMuSGVhZGVyQ29uc3RhbnRzLkFVVEhPUklaQVRJT04sXG4gICAgICBgJHt0b2tlblJlc3BvbnNlLnRva2VuVHlwZX0gJHt0b2tlblJlc3BvbnNlLmFjY2Vzc1Rva2VufWBcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2ViUmVzb3VyY2UpO1xuICB9XG59XG4iXX0=
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2F6dXJlSWRlbnRpdHlUb2tlbkNyZWRlbnRpYWxBZGFwdGVyLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvY3JlZGVudGlhbHMvYXp1cmVJZGVudGl0eVRva2VuQ3JlZGVudGlhbEFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFHL0YsK0NBQWlFO0FBTWpFLElBQU0sNEJBQTRCLEdBQUcsUUFBUSxDQUFDO0FBRTlDOztHQUVHO0FBQ1UsUUFBQSw2QkFBNkIsR0FBRztJQUMzQyxnQ0FBZ0M7SUFDaEMscUNBQXFDO0lBQ3JDLHNDQUFzQztJQUN0QyxnQ0FBZ0M7Q0FDakMsQ0FBQztBQUVGOzs7R0FHRztBQUNIO0lBR0Usd0NBQ0Usb0JBQXFDLEVBQ3JDLE1BQW1FO1FBQW5FLHVCQUFBLEVBQUEsZ0RBQW1FO1FBRW5FLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztRQUNqRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRVksaURBQVEsR0FBckI7Ozs7OzRCQUNzQixxQkFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQTs7d0JBQW5FLFdBQVcsR0FBRyxTQUFxRDt3QkFDekUsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFOzRCQUNsQixNQUFNLEdBQWtCO2dDQUM1QixXQUFXLEVBQUUsV0FBVyxDQUFDLEtBQUs7Z0NBQzlCLFNBQVMsRUFBRSw0QkFBNEI7Z0NBQ3ZDLFNBQVMsRUFBRSxXQUFXLENBQUMsa0JBQWtCOzZCQUMxQyxDQUFDOzRCQUNGLHNCQUFPLE1BQU0sRUFBQzt5QkFDZjs2QkFBTTs0QkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7eUJBQy9DOzs7OztLQUNGO0lBRVksb0RBQVcsR0FBeEIsVUFBeUIsV0FBd0I7Ozs7OzRCQUN6QixxQkFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUE7O3dCQUFyQyxhQUFhLEdBQUcsU0FBcUI7d0JBQzNDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNyQixxQkFBZSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQzFDLGFBQWEsQ0FBQyxTQUFTLFNBQUksYUFBYSxDQUFDLFdBQWEsQ0FDMUQsQ0FBQzt3QkFDRixzQkFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFDOzs7O0tBQ3JDO0lBQ0gscUNBQUM7QUFBRCxDQUFDLEFBakNELElBaUNDO0FBakNZLHdFQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vc2VydmljZUNsaWVudENyZWRlbnRpYWxzXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgYXMgTVNSZXN0Q29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWwvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZSB9IGZyb20gXCIuLi93ZWJSZXNvdXJjZVwiO1xuXG5pbXBvcnQgeyBUb2tlbkNyZWRlbnRpYWwgfSBmcm9tIFwiQGF6dXJlL2NvcmUtYXV0aFwiO1xuaW1wb3J0IHsgVG9rZW5SZXNwb25zZSB9IGZyb20gXCIuL3Rva2VuUmVzcG9uc2VcIjtcblxuY29uc3QgREVGQVVMVF9BVVRIT1JJWkFUSU9OX1NDSEVNRSA9IFwiQmVhcmVyXCI7XG5cbi8qKlxuICogUmVzb3VyY2UgbWFuYWdlciBlbmRwb2ludHMgdG8gbWF0Y2ggaW4gb3JkZXIgdG8gc3BlY2lmeSBhIHZhbGlkIHNjb3BlIHRvIHRoZSBBenVyZUlkZW50aXR5Q3JlZGVudGlhbEFkYXB0ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBhenVyZVJlc291cmNlTWFuYWdlckVuZHBvaW50cyA9IFtcbiAgXCJodHRwczovL21hbmFnZW1lbnQud2luZG93cy5uZXRcIixcbiAgXCJodHRwczovL21hbmFnZW1lbnQuY2hpbmFjbG91ZGFwaS5jblwiLFxuICBcImh0dHBzOi8vbWFuYWdlbWVudC51c2dvdmNsb3VkYXBpLm5ldFwiLFxuICBcImh0dHBzOi8vbWFuYWdlbWVudC5jbG91ZGFwaS5kZVwiLFxuXTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGEgc2ltcGxlIGV4dGVuc2lvbiB0byB1c2Uge0BsaW5rIFRva2VuQ3JlZGVudGlhbH0gZnJvbSBgQGF6dXJlL2lkZW50aXR5YCBsaWJyYXJ5IHRvXG4gKiB1c2Ugd2l0aCBsZWdhY3kgQXp1cmUgU0RLcyB0aGF0IGFjY2VwdCB7QGxpbmsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzfSBmYW1pbHkgb2YgY3JlZGVudGlhbHMgZm9yIGF1dGhlbnRpY2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgQXp1cmVJZGVudGl0eUNyZWRlbnRpYWxBZGFwdGVyIGltcGxlbWVudHMgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIHtcbiAgcHJpdmF0ZSBhenVyZVRva2VuQ3JlZGVudGlhbDogVG9rZW5DcmVkZW50aWFsO1xuICBwcml2YXRlIHNjb3Blczogc3RyaW5nIHwgc3RyaW5nW107XG4gIGNvbnN0cnVjdG9yKFxuICAgIGF6dXJlVG9rZW5DcmVkZW50aWFsOiBUb2tlbkNyZWRlbnRpYWwsXG4gICAgc2NvcGVzOiBzdHJpbmcgfCBzdHJpbmdbXSA9IFwiaHR0cHM6Ly9tYW5hZ2VtZW50LmF6dXJlLmNvbS8uZGVmYXVsdFwiXG4gICkge1xuICAgIHRoaXMuYXp1cmVUb2tlbkNyZWRlbnRpYWwgPSBhenVyZVRva2VuQ3JlZGVudGlhbDtcbiAgICB0aGlzLnNjb3BlcyA9IHNjb3BlcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRUb2tlbigpOiBQcm9taXNlPFRva2VuUmVzcG9uc2U+IHtcbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMuYXp1cmVUb2tlbkNyZWRlbnRpYWwuZ2V0VG9rZW4odGhpcy5zY29wZXMpO1xuICAgIGlmIChhY2Nlc3NUb2tlbiAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgcmVzdWx0OiBUb2tlblJlc3BvbnNlID0ge1xuICAgICAgICBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4udG9rZW4sXG4gICAgICAgIHRva2VuVHlwZTogREVGQVVMVF9BVVRIT1JJWkFUSU9OX1NDSEVNRSxcbiAgICAgICAgZXhwaXJlc09uOiBhY2Nlc3NUb2tlbi5leHBpcmVzT25UaW1lc3RhbXAsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgZmluZCB0b2tlbiBmb3Igc2NvcGVcIik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNpZ25SZXF1ZXN0KHdlYlJlc291cmNlOiBXZWJSZXNvdXJjZSkge1xuICAgIGNvbnN0IHRva2VuUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldFRva2VuKCk7XG4gICAgd2ViUmVzb3VyY2UuaGVhZGVycy5zZXQoXG4gICAgICBNU1Jlc3RDb25zdGFudHMuSGVhZGVyQ29uc3RhbnRzLkFVVEhPUklaQVRJT04sXG4gICAgICBgJHt0b2tlblJlc3BvbnNlLnRva2VuVHlwZX0gJHt0b2tlblJlc3BvbnNlLmFjY2Vzc1Rva2VufWBcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2ViUmVzb3VyY2UpO1xuICB9XG59XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/policies/logPolicy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2xvZ1BvbGljeS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2xvZ1BvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUkvRixpREFLeUI7QUFFekIsU0FBZ0IsU0FBUyxDQUFDLE1BQXlCO0lBQXpCLHVCQUFBLEVBQUEsU0FBYyxPQUFPLENBQUMsR0FBRztJQUNqRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQUMsVUFBeUIsRUFBRSxPQUFpQztZQUNuRSxPQUFPLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEQsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBTkQsOEJBTUM7QUFFRDtJQUErQixxQ0FBaUI7SUFHOUMsbUJBQ0UsVUFBeUIsRUFDekIsT0FBaUMsRUFDakMsTUFBeUI7UUFBekIsdUJBQUEsRUFBQSxTQUFjLE9BQU8sQ0FBQyxHQUFHO1FBSDNCLFlBS0Usa0JBQU0sVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUUzQjtRQURDLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztJQUN2QixDQUFDO0lBRU0sK0JBQVcsR0FBbEIsVUFBbUIsT0FBd0I7UUFBM0MsaUJBRUM7UUFEQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQVEsSUFBSyxPQUFBLFdBQVcsQ0FBQyxLQUFJLEVBQUUsUUFBUSxDQUFDLEVBQTNCLENBQTJCLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBZkQsQ0FBK0IsaUNBQWlCLEdBZS9DO0FBZlksOEJBQVM7QUFpQnRCLFNBQVMsV0FBVyxDQUNsQixNQUFpQixFQUNqQixRQUErQjtJQUUvQixNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFlLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFHLENBQUMsQ0FBQztJQUMvRSxNQUFNLENBQUMsTUFBTSxDQUFDLDhCQUE0QixRQUFRLENBQUMsTUFBUSxDQUFDLENBQUM7SUFDN0QsSUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQVksWUFBYyxDQUFDLENBQUM7SUFDMUMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuLi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHtcbiAgQmFzZVJlcXVlc3RQb2xpY3ksXG4gIFJlcXVlc3RQb2xpY3ksXG4gIFJlcXVlc3RQb2xpY3lGYWN0b3J5LFxuICBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG59IGZyb20gXCIuL3JlcXVlc3RQb2xpY3lcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ1BvbGljeShsb2dnZXI6IGFueSA9IGNvbnNvbGUubG9nKTogUmVxdWVzdFBvbGljeUZhY3Rvcnkge1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZTogKG5leHRQb2xpY3k6IFJlcXVlc3RQb2xpY3ksIG9wdGlvbnM6IFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBMb2dQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucywgbG9nZ2VyKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgTG9nUG9saWN5IGV4dGVuZHMgQmFzZVJlcXVlc3RQb2xpY3kge1xuICBsb2dnZXI/OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSxcbiAgICBvcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG4gICAgbG9nZ2VyOiBhbnkgPSBjb25zb2xlLmxvZ1xuICApIHtcbiAgICBzdXBlcihuZXh0UG9saWN5LCBvcHRpb25zKTtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgfVxuXG4gIHB1YmxpYyBzZW5kUmVxdWVzdChyZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UpOiBQcm9taXNlPEh0dHBPcGVyYXRpb25SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9uZXh0UG9saWN5LnNlbmRSZXF1ZXN0KHJlcXVlc3QpLnRoZW4oKHJlc3BvbnNlKSA9PiBsb2dSZXNwb25zZSh0aGlzLCByZXNwb25zZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvZ1Jlc3BvbnNlKFxuICBwb2xpY3k6IExvZ1BvbGljeSxcbiAgcmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZVxuKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgcG9saWN5LmxvZ2dlcihgPj4gUmVxdWVzdDogJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZS5yZXF1ZXN0LCB1bmRlZmluZWQsIDIpfWApO1xuICBwb2xpY3kubG9nZ2VyKGA+PiBSZXNwb25zZSBzdGF0dXMgY29kZTogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gIGNvbnN0IHJlc3BvbnNlQm9keSA9IHJlc3BvbnNlLmJvZHlBc1RleHQ7XG4gIHBvbGljeS5sb2dnZXIoYD4+IEJvZHk6ICR7cmVzcG9uc2VCb2R5fWApO1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbn1cbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2xvZ1BvbGljeS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL3BvbGljaWVzL2xvZ1BvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUkvRixpREFLeUI7QUFFekIsU0FBZ0IsU0FBUyxDQUFDLE1BQXlCO0lBQXpCLHVCQUFBLEVBQUEsU0FBYyxPQUFPLENBQUMsR0FBRztJQUNqRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLFVBQUMsVUFBeUIsRUFBRSxPQUFpQztZQUNuRSxPQUFPLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEQsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBTkQsOEJBTUM7QUFFRDtJQUErQixxQ0FBaUI7SUFHOUMsbUJBQ0UsVUFBeUIsRUFDekIsT0FBaUMsRUFDakMsTUFBeUI7UUFBekIsdUJBQUEsRUFBQSxTQUFjLE9BQU8sQ0FBQyxHQUFHO1FBSDNCLFlBS0Usa0JBQU0sVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUUzQjtRQURDLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztJQUN2QixDQUFDO0lBRU0sK0JBQVcsR0FBbEIsVUFBbUIsT0FBd0I7UUFBM0MsaUJBRUM7UUFEQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQVEsSUFBSyxPQUFBLFdBQVcsQ0FBQyxLQUFJLEVBQUUsUUFBUSxDQUFDLEVBQTNCLENBQTJCLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBZkQsQ0FBK0IsaUNBQWlCLEdBZS9DO0FBZlksOEJBQVM7QUFpQnRCLFNBQVMsV0FBVyxDQUNsQixNQUFpQixFQUNqQixRQUErQjtJQUUvQixNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFlLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFHLENBQUMsQ0FBQztJQUMvRSxNQUFNLENBQUMsTUFBTSxDQUFDLDhCQUE0QixRQUFRLENBQUMsTUFBUSxDQUFDLENBQUM7SUFDN0QsSUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQVksWUFBYyxDQUFDLENBQUM7SUFDMUMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9odHRwT3BlcmF0aW9uUmVzcG9uc2VcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuLi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHtcbiAgQmFzZVJlcXVlc3RQb2xpY3ksXG4gIFJlcXVlc3RQb2xpY3ksXG4gIFJlcXVlc3RQb2xpY3lGYWN0b3J5LFxuICBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG59IGZyb20gXCIuL3JlcXVlc3RQb2xpY3lcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ1BvbGljeShsb2dnZXI6IGFueSA9IGNvbnNvbGUubG9nKTogUmVxdWVzdFBvbGljeUZhY3Rvcnkge1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZTogKG5leHRQb2xpY3k6IFJlcXVlc3RQb2xpY3ksIG9wdGlvbnM6IFJlcXVlc3RQb2xpY3lPcHRpb25zTGlrZSkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBMb2dQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucywgbG9nZ2VyKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgTG9nUG9saWN5IGV4dGVuZHMgQmFzZVJlcXVlc3RQb2xpY3kge1xuICBsb2dnZXI/OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbmV4dFBvbGljeTogUmVxdWVzdFBvbGljeSxcbiAgICBvcHRpb25zOiBSZXF1ZXN0UG9saWN5T3B0aW9uc0xpa2UsXG4gICAgbG9nZ2VyOiBhbnkgPSBjb25zb2xlLmxvZ1xuICApIHtcbiAgICBzdXBlcihuZXh0UG9saWN5LCBvcHRpb25zKTtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgfVxuXG4gIHB1YmxpYyBzZW5kUmVxdWVzdChyZXF1ZXN0OiBXZWJSZXNvdXJjZUxpa2UpOiBQcm9taXNlPEh0dHBPcGVyYXRpb25SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9uZXh0UG9saWN5LnNlbmRSZXF1ZXN0KHJlcXVlc3QpLnRoZW4oKHJlc3BvbnNlKSA9PiBsb2dSZXNwb25zZSh0aGlzLCByZXNwb25zZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvZ1Jlc3BvbnNlKFxuICBwb2xpY3k6IExvZ1BvbGljeSxcbiAgcmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZVxuKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgcG9saWN5LmxvZ2dlcihgPj4gUmVxdWVzdDogJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZS5yZXF1ZXN0LCB1bmRlZmluZWQsIDIpfWApO1xuICBwb2xpY3kubG9nZ2VyKGA+PiBSZXNwb25zZSBzdGF0dXMgY29kZTogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gIGNvbnN0IHJlc3BvbnNlQm9keSA9IHJlc3BvbnNlLmJvZHlBc1RleHQ7XG4gIHBvbGljeS5sb2dnZXIoYD4+IEJvZHk6ICR7cmVzcG9uc2VCb2R5fWApO1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/credentials/tokenCredentials.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL3Rva2VuQ3JlZGVudGlhbHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9jcmVkZW50aWFscy90b2tlbkNyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFFL0YsOENBQTZDO0FBQzdDLCtDQUE4QztBQUk5QyxJQUFNLGVBQWUsR0FBRyxxQkFBUyxDQUFDLGVBQWUsQ0FBQztBQUNsRCxJQUFNLDRCQUE0QixHQUFHLFFBQVEsQ0FBQztBQUU5Qzs7R0FFRztBQUNIO0lBSUU7Ozs7OztPQU1HO0lBQ0gsMEJBQVksS0FBYSxFQUFFLG1CQUEwRDtRQUExRCxvQ0FBQSxFQUFBLGtEQUEwRDtRQVRyRix3QkFBbUIsR0FBVyw0QkFBNEIsQ0FBQztRQVV6RCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO0lBQ2pELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHNDQUFXLEdBQVgsVUFBWSxXQUE0QjtRQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87WUFBRSxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO1FBQ2xFLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNyQixlQUFlLENBQUMsYUFBYSxFQUMxQixJQUFJLENBQUMsbUJBQW1CLFNBQUksSUFBSSxDQUFDLEtBQU8sQ0FDNUMsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBakNELElBaUNDO0FBakNZLDRDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi4vaHR0cEhlYWRlcnNcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMgfSBmcm9tIFwiLi9zZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHNcIjtcblxuY29uc3QgSGVhZGVyQ29uc3RhbnRzID0gQ29uc3RhbnRzLkhlYWRlckNvbnN0YW50cztcbmNvbnN0IERFRkFVTFRfQVVUSE9SSVpBVElPTl9TQ0hFTUUgPSBcIkJlYXJlclwiO1xuXG4vKipcbiAqIEEgY3JlZGVudGlhbHMgb2JqZWN0IHRoYXQgdXNlcyBhIHRva2VuIHN0cmluZyBhbmQgYSBhdXRob3J6YXRpb24gc2NoZW1lIHRvIGF1dGhlbnRpY2F0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRva2VuQ3JlZGVudGlhbHMgaW1wbGVtZW50cyBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMge1xuICB0b2tlbjogc3RyaW5nO1xuICBhdXRob3JpemF0aW9uU2NoZW1lOiBzdHJpbmcgPSBERUZBVUxUX0FVVEhPUklaQVRJT05fU0NIRU1FO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFRva2VuQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIFRoZSB0b2tlbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFthdXRob3JpemF0aW9uU2NoZW1lXSBUaGUgYXV0aG9yaXphdGlvbiBzY2hlbWUuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0b2tlbjogc3RyaW5nLCBhdXRob3JpemF0aW9uU2NoZW1lOiBzdHJpbmcgPSBERUZBVUxUX0FVVEhPUklaQVRJT05fU0NIRU1FKSB7XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidG9rZW4gY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMuYXV0aG9yaXphdGlvblNjaGVtZSA9IGF1dGhvcml6YXRpb25TY2hlbWU7XG4gIH1cblxuICAvKipcbiAgICogU2lnbnMgYSByZXF1ZXN0IHdpdGggdGhlIEF1dGhlbnRpY2F0aW9uIGhlYWRlci5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJSZXNvdXJjZUxpa2V9IHdlYlJlc291cmNlIFRoZSBXZWJSZXNvdXJjZUxpa2UgdG8gYmUgc2lnbmVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFdlYlJlc291cmNlTGlrZT59IFRoZSBzaWduZWQgcmVxdWVzdCBvYmplY3QuXG4gICAqL1xuICBzaWduUmVxdWVzdCh3ZWJSZXNvdXJjZTogV2ViUmVzb3VyY2VMaWtlKSB7XG4gICAgaWYgKCF3ZWJSZXNvdXJjZS5oZWFkZXJzKSB3ZWJSZXNvdXJjZS5oZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgd2ViUmVzb3VyY2UuaGVhZGVycy5zZXQoXG4gICAgICBIZWFkZXJDb25zdGFudHMuQVVUSE9SSVpBVElPTixcbiAgICAgIGAke3RoaXMuYXV0aG9yaXphdGlvblNjaGVtZX0gJHt0aGlzLnRva2VufWBcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2ViUmVzb3VyY2UpO1xuICB9XG59XG4iXX0=
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL3Rva2VuQ3JlZGVudGlhbHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9jcmVkZW50aWFscy90b2tlbkNyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFFL0YsOENBQTZDO0FBQzdDLCtDQUE4QztBQUk5QyxJQUFNLGVBQWUsR0FBRyxxQkFBUyxDQUFDLGVBQWUsQ0FBQztBQUNsRCxJQUFNLDRCQUE0QixHQUFHLFFBQVEsQ0FBQztBQUU5Qzs7R0FFRztBQUNIO0lBSUU7Ozs7OztPQU1HO0lBQ0gsMEJBQVksS0FBYSxFQUFFLG1CQUEwRDtRQUExRCxvQ0FBQSxFQUFBLGtEQUEwRDtRQVRyRix3QkFBbUIsR0FBVyw0QkFBNEIsQ0FBQztRQVV6RCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO0lBQ2pELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHNDQUFXLEdBQVgsVUFBWSxXQUE0QjtRQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87WUFBRSxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO1FBQ2xFLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNyQixlQUFlLENBQUMsYUFBYSxFQUMxQixJQUFJLENBQUMsbUJBQW1CLFNBQUksSUFBSSxDQUFDLEtBQU8sQ0FDNUMsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBakNELElBaUNDO0FBakNZLDRDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi4vaHR0cEhlYWRlcnNcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMgfSBmcm9tIFwiLi9zZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHNcIjtcblxuY29uc3QgSGVhZGVyQ29uc3RhbnRzID0gQ29uc3RhbnRzLkhlYWRlckNvbnN0YW50cztcbmNvbnN0IERFRkFVTFRfQVVUSE9SSVpBVElPTl9TQ0hFTUUgPSBcIkJlYXJlclwiO1xuXG4vKipcbiAqIEEgY3JlZGVudGlhbHMgb2JqZWN0IHRoYXQgdXNlcyBhIHRva2VuIHN0cmluZyBhbmQgYSBhdXRob3J6YXRpb24gc2NoZW1lIHRvIGF1dGhlbnRpY2F0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRva2VuQ3JlZGVudGlhbHMgaW1wbGVtZW50cyBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMge1xuICB0b2tlbjogc3RyaW5nO1xuICBhdXRob3JpemF0aW9uU2NoZW1lOiBzdHJpbmcgPSBERUZBVUxUX0FVVEhPUklaQVRJT05fU0NIRU1FO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFRva2VuQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIFRoZSB0b2tlbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFthdXRob3JpemF0aW9uU2NoZW1lXSBUaGUgYXV0aG9yaXphdGlvbiBzY2hlbWUuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0b2tlbjogc3RyaW5nLCBhdXRob3JpemF0aW9uU2NoZW1lOiBzdHJpbmcgPSBERUZBVUxUX0FVVEhPUklaQVRJT05fU0NIRU1FKSB7XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidG9rZW4gY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMuYXV0aG9yaXphdGlvblNjaGVtZSA9IGF1dGhvcml6YXRpb25TY2hlbWU7XG4gIH1cblxuICAvKipcbiAgICogU2lnbnMgYSByZXF1ZXN0IHdpdGggdGhlIEF1dGhlbnRpY2F0aW9uIGhlYWRlci5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJSZXNvdXJjZUxpa2V9IHdlYlJlc291cmNlIFRoZSBXZWJSZXNvdXJjZUxpa2UgdG8gYmUgc2lnbmVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFdlYlJlc291cmNlTGlrZT59IFRoZSBzaWduZWQgcmVxdWVzdCBvYmplY3QuXG4gICAqL1xuICBzaWduUmVxdWVzdCh3ZWJSZXNvdXJjZTogV2ViUmVzb3VyY2VMaWtlKSB7XG4gICAgaWYgKCF3ZWJSZXNvdXJjZS5oZWFkZXJzKSB3ZWJSZXNvdXJjZS5oZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgd2ViUmVzb3VyY2UuaGVhZGVycy5zZXQoXG4gICAgICBIZWFkZXJDb25zdGFudHMuQVVUSE9SSVpBVElPTixcbiAgICAgIGAke3RoaXMuYXV0aG9yaXphdGlvblNjaGVtZX0gJHt0aGlzLnRva2VufWBcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2ViUmVzb3VyY2UpO1xuICB9XG59XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/credentials/basicAuthenticationCredentials.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2Jhc2ljQXV0aGVudGljYXRpb25DcmVkZW50aWFscy50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2Jhc2ljQXV0aGVudGljYXRpb25DcmVkZW50aWFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiw4Q0FBNkM7QUFDN0MsNkRBQXlDO0FBQ3pDLCtDQUE4QztBQUc5QyxJQUFNLGVBQWUsR0FBRyxxQkFBUyxDQUFDLGVBQWUsQ0FBQztBQUNsRCxJQUFNLDRCQUE0QixHQUFHLE9BQU8sQ0FBQztBQUU3QztJQUtFOzs7Ozs7O09BT0c7SUFDSCx3Q0FDRSxRQUFnQixFQUNoQixRQUFnQixFQUNoQixtQkFBMEQ7UUFBMUQsb0NBQUEsRUFBQSxrREFBMEQ7UUFiNUQsd0JBQW1CLEdBQVcsNEJBQTRCLENBQUM7UUFlekQsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksT0FBTyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssUUFBUSxFQUFFO1lBQ3pGLE1BQU0sSUFBSSxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztTQUNyRjtRQUNELElBQUksUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLE9BQU8sUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRTtZQUN6RixNQUFNLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7U0FDckY7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsb0RBQVcsR0FBWCxVQUFZLFdBQTRCO1FBQ3RDLElBQU0sV0FBVyxHQUFNLElBQUksQ0FBQyxRQUFRLFNBQUksSUFBSSxDQUFDLFFBQVUsQ0FBQztRQUN4RCxJQUFNLGtCQUFrQixHQUFNLElBQUksQ0FBQyxtQkFBbUIsU0FBSSxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBRyxDQUFDO1FBQzdGLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztZQUFFLFdBQVcsQ0FBQyxPQUFPLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7UUFDbEUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0gscUNBQUM7QUFBRCxDQUFDLEFBMUNELElBMENDO0FBMUNZLHdFQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi4vaHR0cEhlYWRlcnNcIjtcbmltcG9ydCAqIGFzIGJhc2U2NCBmcm9tIFwiLi4vdXRpbC9iYXNlNjRcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMgfSBmcm9tIFwiLi9zZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHNcIjtcbmNvbnN0IEhlYWRlckNvbnN0YW50cyA9IENvbnN0YW50cy5IZWFkZXJDb25zdGFudHM7XG5jb25zdCBERUZBVUxUX0FVVEhPUklaQVRJT05fU0NIRU1FID0gXCJCYXNpY1wiO1xuXG5leHBvcnQgY2xhc3MgQmFzaWNBdXRoZW50aWNhdGlvbkNyZWRlbnRpYWxzIGltcGxlbWVudHMgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIHtcbiAgdXNlck5hbWU6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbiAgYXV0aG9yaXphdGlvblNjaGVtZTogc3RyaW5nID0gREVGQVVMVF9BVVRIT1JJWkFUSU9OX1NDSEVNRTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBCYXNpY0F1dGhlbnRpY2F0aW9uQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJOYW1lIFVzZXIgbmFtZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFBhc3N3b3JkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2F1dGhvcml6YXRpb25TY2hlbWVdIFRoZSBhdXRob3JpemF0aW9uIHNjaGVtZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHVzZXJOYW1lOiBzdHJpbmcsXG4gICAgcGFzc3dvcmQ6IHN0cmluZyxcbiAgICBhdXRob3JpemF0aW9uU2NoZW1lOiBzdHJpbmcgPSBERUZBVUxUX0FVVEhPUklaQVRJT05fU0NIRU1FXG4gICkge1xuICAgIGlmICh1c2VyTmFtZSA9PT0gbnVsbCB8fCB1c2VyTmFtZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB1c2VyTmFtZS52YWx1ZU9mKCkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInVzZXJOYW1lIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5cIik7XG4gICAgfVxuICAgIGlmIChwYXNzd29yZCA9PT0gbnVsbCB8fCBwYXNzd29yZCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBwYXNzd29yZC52YWx1ZU9mKCkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhc3N3b3JkIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5cIik7XG4gICAgfVxuICAgIHRoaXMudXNlck5hbWUgPSB1c2VyTmFtZTtcbiAgICB0aGlzLnBhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgdGhpcy5hdXRob3JpemF0aW9uU2NoZW1lID0gYXV0aG9yaXphdGlvblNjaGVtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWducyBhIHJlcXVlc3Qgd2l0aCB0aGUgQXV0aGVudGljYXRpb24gaGVhZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYlJlc291cmNlTGlrZX0gd2ViUmVzb3VyY2UgVGhlIFdlYlJlc291cmNlTGlrZSB0byBiZSBzaWduZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFdlYlJlc291cmNlTGlrZT59IFRoZSBzaWduZWQgcmVxdWVzdCBvYmplY3QuXG4gICAqL1xuICBzaWduUmVxdWVzdCh3ZWJSZXNvdXJjZTogV2ViUmVzb3VyY2VMaWtlKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSBgJHt0aGlzLnVzZXJOYW1lfToke3RoaXMucGFzc3dvcmR9YDtcbiAgICBjb25zdCBlbmNvZGVkQ3JlZGVudGlhbHMgPSBgJHt0aGlzLmF1dGhvcml6YXRpb25TY2hlbWV9ICR7YmFzZTY0LmVuY29kZVN0cmluZyhjcmVkZW50aWFscyl9YDtcbiAgICBpZiAoIXdlYlJlc291cmNlLmhlYWRlcnMpIHdlYlJlc291cmNlLmhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICB3ZWJSZXNvdXJjZS5oZWFkZXJzLnNldChIZWFkZXJDb25zdGFudHMuQVVUSE9SSVpBVElPTiwgZW5jb2RlZENyZWRlbnRpYWxzKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdlYlJlc291cmNlKTtcbiAgfVxufVxuIl19
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2Jhc2ljQXV0aGVudGljYXRpb25DcmVkZW50aWFscy50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2Jhc2ljQXV0aGVudGljYXRpb25DcmVkZW50aWFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiw4Q0FBNkM7QUFDN0MsNkRBQXlDO0FBQ3pDLCtDQUE4QztBQUc5QyxJQUFNLGVBQWUsR0FBRyxxQkFBUyxDQUFDLGVBQWUsQ0FBQztBQUNsRCxJQUFNLDRCQUE0QixHQUFHLE9BQU8sQ0FBQztBQUU3QztJQUtFOzs7Ozs7O09BT0c7SUFDSCx3Q0FDRSxRQUFnQixFQUNoQixRQUFnQixFQUNoQixtQkFBMEQ7UUFBMUQsb0NBQUEsRUFBQSxrREFBMEQ7UUFiNUQsd0JBQW1CLEdBQVcsNEJBQTRCLENBQUM7UUFlekQsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksT0FBTyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssUUFBUSxFQUFFO1lBQ3pGLE1BQU0sSUFBSSxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztTQUNyRjtRQUNELElBQUksUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLE9BQU8sUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRTtZQUN6RixNQUFNLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7U0FDckY7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsb0RBQVcsR0FBWCxVQUFZLFdBQTRCO1FBQ3RDLElBQU0sV0FBVyxHQUFNLElBQUksQ0FBQyxRQUFRLFNBQUksSUFBSSxDQUFDLFFBQVUsQ0FBQztRQUN4RCxJQUFNLGtCQUFrQixHQUFNLElBQUksQ0FBQyxtQkFBbUIsU0FBSSxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBRyxDQUFDO1FBQzdGLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztZQUFFLFdBQVcsQ0FBQyxPQUFPLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7UUFDbEUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0gscUNBQUM7QUFBRCxDQUFDLEFBMUNELElBMENDO0FBMUNZLHdFQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi4vaHR0cEhlYWRlcnNcIjtcbmltcG9ydCAqIGFzIGJhc2U2NCBmcm9tIFwiLi4vdXRpbC9iYXNlNjRcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uL3dlYlJlc291cmNlXCI7XG5pbXBvcnQgeyBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMgfSBmcm9tIFwiLi9zZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHNcIjtcbmNvbnN0IEhlYWRlckNvbnN0YW50cyA9IENvbnN0YW50cy5IZWFkZXJDb25zdGFudHM7XG5jb25zdCBERUZBVUxUX0FVVEhPUklaQVRJT05fU0NIRU1FID0gXCJCYXNpY1wiO1xuXG5leHBvcnQgY2xhc3MgQmFzaWNBdXRoZW50aWNhdGlvbkNyZWRlbnRpYWxzIGltcGxlbWVudHMgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIHtcbiAgdXNlck5hbWU6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbiAgYXV0aG9yaXphdGlvblNjaGVtZTogc3RyaW5nID0gREVGQVVMVF9BVVRIT1JJWkFUSU9OX1NDSEVNRTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBCYXNpY0F1dGhlbnRpY2F0aW9uQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJOYW1lIFVzZXIgbmFtZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFBhc3N3b3JkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2F1dGhvcml6YXRpb25TY2hlbWVdIFRoZSBhdXRob3JpemF0aW9uIHNjaGVtZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHVzZXJOYW1lOiBzdHJpbmcsXG4gICAgcGFzc3dvcmQ6IHN0cmluZyxcbiAgICBhdXRob3JpemF0aW9uU2NoZW1lOiBzdHJpbmcgPSBERUZBVUxUX0FVVEhPUklaQVRJT05fU0NIRU1FXG4gICkge1xuICAgIGlmICh1c2VyTmFtZSA9PT0gbnVsbCB8fCB1c2VyTmFtZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB1c2VyTmFtZS52YWx1ZU9mKCkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInVzZXJOYW1lIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5cIik7XG4gICAgfVxuICAgIGlmIChwYXNzd29yZCA9PT0gbnVsbCB8fCBwYXNzd29yZCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBwYXNzd29yZC52YWx1ZU9mKCkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhc3N3b3JkIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5cIik7XG4gICAgfVxuICAgIHRoaXMudXNlck5hbWUgPSB1c2VyTmFtZTtcbiAgICB0aGlzLnBhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgdGhpcy5hdXRob3JpemF0aW9uU2NoZW1lID0gYXV0aG9yaXphdGlvblNjaGVtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWducyBhIHJlcXVlc3Qgd2l0aCB0aGUgQXV0aGVudGljYXRpb24gaGVhZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYlJlc291cmNlTGlrZX0gd2ViUmVzb3VyY2UgVGhlIFdlYlJlc291cmNlTGlrZSB0byBiZSBzaWduZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFdlYlJlc291cmNlTGlrZT59IFRoZSBzaWduZWQgcmVxdWVzdCBvYmplY3QuXG4gICAqL1xuICBzaWduUmVxdWVzdCh3ZWJSZXNvdXJjZTogV2ViUmVzb3VyY2VMaWtlKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSBgJHt0aGlzLnVzZXJOYW1lfToke3RoaXMucGFzc3dvcmR9YDtcbiAgICBjb25zdCBlbmNvZGVkQ3JlZGVudGlhbHMgPSBgJHt0aGlzLmF1dGhvcml6YXRpb25TY2hlbWV9ICR7YmFzZTY0LmVuY29kZVN0cmluZyhjcmVkZW50aWFscyl9YDtcbiAgICBpZiAoIXdlYlJlc291cmNlLmhlYWRlcnMpIHdlYlJlc291cmNlLmhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICB3ZWJSZXNvdXJjZS5oZWFkZXJzLnNldChIZWFkZXJDb25zdGFudHMuQVVUSE9SSVpBVElPTiwgZW5jb2RlZENyZWRlbnRpYWxzKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdlYlJlc291cmNlKTtcbiAgfVxufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/credentials/apiKeyCredentials.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2FwaUtleUNyZWRlbnRpYWxzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvY3JlZGVudGlhbHMvYXBpS2V5Q3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRiw4Q0FBNkM7QUFtQjdDOztHQUVHO0FBQ0g7SUFVRTs7O09BR0c7SUFDSCwyQkFBWSxPQUFnQztRQUMxQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNsRSxNQUFNLElBQUksS0FBSyxDQUNiLDhIQUEwSCxDQUMzSCxDQUFDO1NBQ0g7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHVDQUFXLEdBQVgsVUFBWSxXQUE0QjtRQUN0QyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FDbkIsSUFBSSxLQUFLLENBQUMseUVBQXVFLENBQUMsQ0FDbkYsQ0FBQztTQUNIO1FBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFO2dCQUN4QixXQUFXLENBQUMsT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO2FBQ3pDO1lBQ0QsS0FBSyxJQUFNLFVBQVUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUN0QyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2FBQ2hFO1NBQ0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3BCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDLENBQUM7YUFDL0U7WUFDRCxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDcEMsV0FBVyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7YUFDeEI7WUFDRCxLQUFLLElBQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDbEMsV0FBVyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7aUJBQ3hCO2dCQUNELFdBQVcsQ0FBQyxHQUFHLElBQU8sR0FBRyxTQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFHLENBQUM7YUFDbEQ7U0FDRjtRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBL0RELElBK0RDO0FBL0RZLDhDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi4vaHR0cEhlYWRlcnNcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuLi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vc2VydmljZUNsaWVudENyZWRlbnRpYWxzXCI7XG5cbi8qKlxuICogQGludGVyZmFjZSBBcGlLZXlDcmVkZW50aWFsT3B0aW9uc1xuICogRGVzY3JpYmVzIHRoZSBvcHRpb25zIHRvIGJlIHByb3ZpZGVkIHdoaWxlIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIEFwaUtleUNyZWRlbnRpYWxzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBpS2V5Q3JlZGVudGlhbE9wdGlvbnMge1xuICAvKipcbiAgICogQSBrZXkgdmFsdWUgcGFpciBvZiB0aGUgaGVhZGVyIHBhcmFtZXRlcnMgdGhhdCBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlcXVlc3QuXG4gICAqL1xuICBpbkhlYWRlcj86IHsgW3g6IHN0cmluZ106IGFueSB9O1xuICAvKipcbiAgICogQSBrZXkgdmFsdWUgcGFpciBvZiB0aGUgcXVlcnkgcGFyYW1ldGVycyB0aGF0IG5lZWQgdG8gYmUgYXBwbGllZCB0byB0aGUgcmVxdWVzdC5cbiAgICovXG4gIGluUXVlcnk/OiB7IFt4OiBzdHJpbmddOiBhbnkgfTtcbn1cblxuLyoqXG4gKiBBdXRoZW50aWNhdGVzIHRvIGEgc2VydmljZSB1c2luZyBhbiBBUEkga2V5LlxuICovXG5leHBvcnQgY2xhc3MgQXBpS2V5Q3JlZGVudGlhbHMgaW1wbGVtZW50cyBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMge1xuICAvKipcbiAgICogQSBrZXkgdmFsdWUgcGFpciBvZiB0aGUgaGVhZGVyIHBhcmFtZXRlcnMgdGhhdCBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlcXVlc3QuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGluSGVhZGVyPzogeyBbeDogc3RyaW5nXTogYW55IH07XG4gIC8qKlxuICAgKiBBIGtleSB2YWx1ZSBwYWlyIG9mIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIHRoYXQgbmVlZCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXF1ZXN0LlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBpblF1ZXJ5PzogeyBbeDogc3RyaW5nXTogYW55IH07XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAgIFNwZWNpZmllcyB0aGUgb3B0aW9ucyB0byBiZSBwcm92aWRlZCBmb3IgYXV0aC4gRWl0aGVyIGhlYWRlciBvciBxdWVyeSBuZWVkcyB0byBiZSBwcm92aWRlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEFwaUtleUNyZWRlbnRpYWxPcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zIHx8IChvcHRpb25zICYmICFvcHRpb25zLmluSGVhZGVyICYmICFvcHRpb25zLmluUXVlcnkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBvcHRpb25zIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4gRWl0aGVyIFwiaW5IZWFkZXJcIiBvciBcImluUXVlcnlcIiBwcm9wZXJ0eSBvZiB0aGUgb3B0aW9ucyBvYmplY3QgbmVlZHMgdG8gYmUgcHJvdmlkZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5pbkhlYWRlciA9IG9wdGlvbnMuaW5IZWFkZXI7XG4gICAgdGhpcy5pblF1ZXJ5ID0gb3B0aW9ucy5pblF1ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25zIGEgcmVxdWVzdCB3aXRoIHRoZSB2YWx1ZXMgcHJvdmlkZWQgaW4gdGhlIGluSGVhZGVyIGFuZCBpblF1ZXJ5IHBhcmFtZXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJSZXNvdXJjZX0gd2ViUmVzb3VyY2UgVGhlIFdlYlJlc291cmNlIHRvIGJlIHNpZ25lZC5cbiAgICogQHJldHVybnMge1Byb21pc2U8V2ViUmVzb3VyY2U+fSBUaGUgc2lnbmVkIHJlcXVlc3Qgb2JqZWN0LlxuICAgKi9cbiAgc2lnblJlcXVlc3Qod2ViUmVzb3VyY2U6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8V2ViUmVzb3VyY2VMaWtlPiB7XG4gICAgaWYgKCF3ZWJSZXNvdXJjZSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBuZXcgRXJyb3IoYHdlYlJlc291cmNlIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIFwib2JqZWN0XCIuYClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaW5IZWFkZXIpIHtcbiAgICAgIGlmICghd2ViUmVzb3VyY2UuaGVhZGVycykge1xuICAgICAgICB3ZWJSZXNvdXJjZS5oZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgaW4gdGhpcy5pbkhlYWRlcikge1xuICAgICAgICB3ZWJSZXNvdXJjZS5oZWFkZXJzLnNldChoZWFkZXJOYW1lLCB0aGlzLmluSGVhZGVyW2hlYWRlck5hbWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5pblF1ZXJ5KSB7XG4gICAgICBpZiAoIXdlYlJlc291cmNlLnVybCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGB1cmwgY2Fubm90IGJlIG51bGwgaW4gdGhlIHJlcXVlc3Qgb2JqZWN0LmApKTtcbiAgICAgIH1cbiAgICAgIGlmICh3ZWJSZXNvdXJjZS51cmwuaW5kZXhPZihcIj9cIikgPCAwKSB7XG4gICAgICAgIHdlYlJlc291cmNlLnVybCArPSBcIj9cIjtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuaW5RdWVyeSkge1xuICAgICAgICBpZiAoIXdlYlJlc291cmNlLnVybC5lbmRzV2l0aChcIj9cIikpIHtcbiAgICAgICAgICB3ZWJSZXNvdXJjZS51cmwgKz0gXCImXCI7XG4gICAgICAgIH1cbiAgICAgICAgd2ViUmVzb3VyY2UudXJsICs9IGAke2tleX09JHt0aGlzLmluUXVlcnlba2V5XX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2ViUmVzb3VyY2UpO1xuICB9XG59XG4iXX0=
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2FwaUtleUNyZWRlbnRpYWxzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvY3JlZGVudGlhbHMvYXBpS2V5Q3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRiw4Q0FBNkM7QUFtQjdDOztHQUVHO0FBQ0g7SUFVRTs7O09BR0c7SUFDSCwyQkFBWSxPQUFnQztRQUMxQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNsRSxNQUFNLElBQUksS0FBSyxDQUNiLDhIQUEwSCxDQUMzSCxDQUFDO1NBQ0g7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHVDQUFXLEdBQVgsVUFBWSxXQUE0QjtRQUN0QyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FDbkIsSUFBSSxLQUFLLENBQUMseUVBQXVFLENBQUMsQ0FDbkYsQ0FBQztTQUNIO1FBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFO2dCQUN4QixXQUFXLENBQUMsT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO2FBQ3pDO1lBQ0QsS0FBSyxJQUFNLFVBQVUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUN0QyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2FBQ2hFO1NBQ0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3BCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDLENBQUM7YUFDL0U7WUFDRCxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDcEMsV0FBVyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7YUFDeEI7WUFDRCxLQUFLLElBQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDbEMsV0FBVyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7aUJBQ3hCO2dCQUNELFdBQVcsQ0FBQyxHQUFHLElBQU8sR0FBRyxTQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFHLENBQUM7YUFDbEQ7U0FDRjtRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBL0RELElBK0RDO0FBL0RZLDhDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi4vaHR0cEhlYWRlcnNcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuLi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHsgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vc2VydmljZUNsaWVudENyZWRlbnRpYWxzXCI7XG5cbi8qKlxuICogQGludGVyZmFjZSBBcGlLZXlDcmVkZW50aWFsT3B0aW9uc1xuICogRGVzY3JpYmVzIHRoZSBvcHRpb25zIHRvIGJlIHByb3ZpZGVkIHdoaWxlIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIEFwaUtleUNyZWRlbnRpYWxzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBpS2V5Q3JlZGVudGlhbE9wdGlvbnMge1xuICAvKipcbiAgICogQSBrZXkgdmFsdWUgcGFpciBvZiB0aGUgaGVhZGVyIHBhcmFtZXRlcnMgdGhhdCBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlcXVlc3QuXG4gICAqL1xuICBpbkhlYWRlcj86IHsgW3g6IHN0cmluZ106IGFueSB9O1xuICAvKipcbiAgICogQSBrZXkgdmFsdWUgcGFpciBvZiB0aGUgcXVlcnkgcGFyYW1ldGVycyB0aGF0IG5lZWQgdG8gYmUgYXBwbGllZCB0byB0aGUgcmVxdWVzdC5cbiAgICovXG4gIGluUXVlcnk/OiB7IFt4OiBzdHJpbmddOiBhbnkgfTtcbn1cblxuLyoqXG4gKiBBdXRoZW50aWNhdGVzIHRvIGEgc2VydmljZSB1c2luZyBhbiBBUEkga2V5LlxuICovXG5leHBvcnQgY2xhc3MgQXBpS2V5Q3JlZGVudGlhbHMgaW1wbGVtZW50cyBTZXJ2aWNlQ2xpZW50Q3JlZGVudGlhbHMge1xuICAvKipcbiAgICogQSBrZXkgdmFsdWUgcGFpciBvZiB0aGUgaGVhZGVyIHBhcmFtZXRlcnMgdGhhdCBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlcXVlc3QuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGluSGVhZGVyPzogeyBbeDogc3RyaW5nXTogYW55IH07XG4gIC8qKlxuICAgKiBBIGtleSB2YWx1ZSBwYWlyIG9mIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIHRoYXQgbmVlZCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXF1ZXN0LlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBpblF1ZXJ5PzogeyBbeDogc3RyaW5nXTogYW55IH07XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAgIFNwZWNpZmllcyB0aGUgb3B0aW9ucyB0byBiZSBwcm92aWRlZCBmb3IgYXV0aC4gRWl0aGVyIGhlYWRlciBvciBxdWVyeSBuZWVkcyB0byBiZSBwcm92aWRlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEFwaUtleUNyZWRlbnRpYWxPcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zIHx8IChvcHRpb25zICYmICFvcHRpb25zLmluSGVhZGVyICYmICFvcHRpb25zLmluUXVlcnkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBvcHRpb25zIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4gRWl0aGVyIFwiaW5IZWFkZXJcIiBvciBcImluUXVlcnlcIiBwcm9wZXJ0eSBvZiB0aGUgb3B0aW9ucyBvYmplY3QgbmVlZHMgdG8gYmUgcHJvdmlkZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5pbkhlYWRlciA9IG9wdGlvbnMuaW5IZWFkZXI7XG4gICAgdGhpcy5pblF1ZXJ5ID0gb3B0aW9ucy5pblF1ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25zIGEgcmVxdWVzdCB3aXRoIHRoZSB2YWx1ZXMgcHJvdmlkZWQgaW4gdGhlIGluSGVhZGVyIGFuZCBpblF1ZXJ5IHBhcmFtZXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJSZXNvdXJjZX0gd2ViUmVzb3VyY2UgVGhlIFdlYlJlc291cmNlIHRvIGJlIHNpZ25lZC5cbiAgICogQHJldHVybnMge1Byb21pc2U8V2ViUmVzb3VyY2U+fSBUaGUgc2lnbmVkIHJlcXVlc3Qgb2JqZWN0LlxuICAgKi9cbiAgc2lnblJlcXVlc3Qod2ViUmVzb3VyY2U6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8V2ViUmVzb3VyY2VMaWtlPiB7XG4gICAgaWYgKCF3ZWJSZXNvdXJjZSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBuZXcgRXJyb3IoYHdlYlJlc291cmNlIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIFwib2JqZWN0XCIuYClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaW5IZWFkZXIpIHtcbiAgICAgIGlmICghd2ViUmVzb3VyY2UuaGVhZGVycykge1xuICAgICAgICB3ZWJSZXNvdXJjZS5oZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgaW4gdGhpcy5pbkhlYWRlcikge1xuICAgICAgICB3ZWJSZXNvdXJjZS5oZWFkZXJzLnNldChoZWFkZXJOYW1lLCB0aGlzLmluSGVhZGVyW2hlYWRlck5hbWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5pblF1ZXJ5KSB7XG4gICAgICBpZiAoIXdlYlJlc291cmNlLnVybCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGB1cmwgY2Fubm90IGJlIG51bGwgaW4gdGhlIHJlcXVlc3Qgb2JqZWN0LmApKTtcbiAgICAgIH1cbiAgICAgIGlmICh3ZWJSZXNvdXJjZS51cmwuaW5kZXhPZihcIj9cIikgPCAwKSB7XG4gICAgICAgIHdlYlJlc291cmNlLnVybCArPSBcIj9cIjtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuaW5RdWVyeSkge1xuICAgICAgICBpZiAoIXdlYlJlc291cmNlLnVybC5lbmRzV2l0aChcIj9cIikpIHtcbiAgICAgICAgICB3ZWJSZXNvdXJjZS51cmwgKz0gXCImXCI7XG4gICAgICAgIH1cbiAgICAgICAgd2ViUmVzb3VyY2UudXJsICs9IGAke2tleX09JHt0aGlzLmluUXVlcnlba2V5XX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2ViUmVzb3VyY2UpO1xuICB9XG59XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/credentials/topicCredentials.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL3RvcGljQ3JlZGVudGlhbHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9jcmVkZW50aWFscy90b3BpY0NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRS9GLHlEQUFpRjtBQUVqRjtJQUFzQyw0Q0FBaUI7SUFDckQ7Ozs7O09BS0c7SUFDSCwwQkFBWSxRQUFnQjtRQUE1QixpQkFVQztRQVRDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLEVBQUU7WUFDM0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO1NBQ3JGO1FBQ0QsSUFBTSxPQUFPLEdBQTRCO1lBQ3ZDLFFBQVEsRUFBRTtnQkFDUixhQUFhLEVBQUUsUUFBUTthQUN4QjtTQUNGLENBQUM7UUFDRixRQUFBLGtCQUFNLE9BQU8sQ0FBQyxTQUFDOztJQUNqQixDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBbEJELENBQXNDLHFDQUFpQixHQWtCdEQ7QUFsQlksNENBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBBcGlLZXlDcmVkZW50aWFscywgQXBpS2V5Q3JlZGVudGlhbE9wdGlvbnMgfSBmcm9tIFwiLi9hcGlLZXlDcmVkZW50aWFsc1wiO1xuXG5leHBvcnQgY2xhc3MgVG9waWNDcmVkZW50aWFscyBleHRlbmRzIEFwaUtleUNyZWRlbnRpYWxzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRXZlbnRHcmlkIFRvcGljQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljS2V5ICAgVGhlIEV2ZW50R3JpZCB0b3BpYyBrZXlcbiAgICovXG4gIGNvbnN0cnVjdG9yKHRvcGljS2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoIXRvcGljS2V5IHx8ICh0b3BpY0tleSAmJiB0eXBlb2YgdG9waWNLZXkgIT09IFwic3RyaW5nXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0b3BpY0tleSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zOiBBcGlLZXlDcmVkZW50aWFsT3B0aW9ucyA9IHtcbiAgICAgIGluSGVhZGVyOiB7XG4gICAgICAgIFwiYWVnLXNhcy1rZXlcIjogdG9waWNLZXksXG4gICAgICB9LFxuICAgIH07XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL3RvcGljQ3JlZGVudGlhbHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL2xpYi9jcmVkZW50aWFscy90b3BpY0NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRS9GLHlEQUFpRjtBQUVqRjtJQUFzQyw0Q0FBaUI7SUFDckQ7Ozs7O09BS0c7SUFDSCwwQkFBWSxRQUFnQjtRQUE1QixpQkFVQztRQVRDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLEVBQUU7WUFDM0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO1NBQ3JGO1FBQ0QsSUFBTSxPQUFPLEdBQTRCO1lBQ3ZDLFFBQVEsRUFBRTtnQkFDUixhQUFhLEVBQUUsUUFBUTthQUN4QjtTQUNGLENBQUM7UUFDRixRQUFBLGtCQUFNLE9BQU8sQ0FBQyxTQUFDOztJQUNqQixDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBbEJELENBQXNDLHFDQUFpQixHQWtCdEQ7QUFsQlksNENBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBBcGlLZXlDcmVkZW50aWFscywgQXBpS2V5Q3JlZGVudGlhbE9wdGlvbnMgfSBmcm9tIFwiLi9hcGlLZXlDcmVkZW50aWFsc1wiO1xuXG5leHBvcnQgY2xhc3MgVG9waWNDcmVkZW50aWFscyBleHRlbmRzIEFwaUtleUNyZWRlbnRpYWxzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRXZlbnRHcmlkIFRvcGljQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljS2V5ICAgVGhlIEV2ZW50R3JpZCB0b3BpYyBrZXlcbiAgICovXG4gIGNvbnN0cnVjdG9yKHRvcGljS2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoIXRvcGljS2V5IHx8ICh0b3BpY0tleSAmJiB0eXBlb2YgdG9waWNLZXkgIT09IFwic3RyaW5nXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0b3BpY0tleSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zOiBBcGlLZXlDcmVkZW50aWFsT3B0aW9ucyA9IHtcbiAgICAgIGluSGVhZGVyOiB7XG4gICAgICAgIFwiYWVnLXNhcy1rZXlcIjogdG9waWNLZXksXG4gICAgICB9LFxuICAgIH07XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/credentials/domainCredentials.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2RvbWFpbkNyZWRlbnRpYWxzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvY3JlZGVudGlhbHMvZG9tYWluQ3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFFL0YseURBQWlGO0FBRWpGO0lBQXVDLDZDQUFpQjtJQUN0RDs7Ozs7T0FLRztJQUNILDJCQUFZLFNBQWlCO1FBQTdCLGlCQVVDO1FBVEMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLENBQUMsRUFBRTtZQUM5RCxNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7U0FDdEY7UUFDRCxJQUFNLE9BQU8sR0FBNEI7WUFDdkMsUUFBUSxFQUFFO2dCQUNSLGFBQWEsRUFBRSxTQUFTO2FBQ3pCO1NBQ0YsQ0FBQztRQUNGLFFBQUEsa0JBQU0sT0FBTyxDQUFDLFNBQUM7O0lBQ2pCLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFsQkQsQ0FBdUMscUNBQWlCLEdBa0J2RDtBQWxCWSw4Q0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEFwaUtleUNyZWRlbnRpYWxzLCBBcGlLZXlDcmVkZW50aWFsT3B0aW9ucyB9IGZyb20gXCIuL2FwaUtleUNyZWRlbnRpYWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBEb21haW5DcmVkZW50aWFscyBleHRlbmRzIEFwaUtleUNyZWRlbnRpYWxzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRXZlbnRHcmlkIERvbWFpbkNyZWRlbnRpYWxzIG9iamVjdC5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkb21haW5LZXkgICBUaGUgRXZlbnRHcmlkIGRvbWFpbiBrZXlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvbWFpbktleTogc3RyaW5nKSB7XG4gICAgaWYgKCFkb21haW5LZXkgfHwgKGRvbWFpbktleSAmJiB0eXBlb2YgZG9tYWluS2V5ICE9PSBcInN0cmluZ1wiKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZG9tYWluS2V5IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5cIik7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbnM6IEFwaUtleUNyZWRlbnRpYWxPcHRpb25zID0ge1xuICAgICAgaW5IZWFkZXI6IHtcbiAgICAgICAgXCJhZWctc2FzLWtleVwiOiBkb21haW5LZXksXG4gICAgICB9LFxuICAgIH07XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvbGliL2NyZWRlbnRpYWxzL2RvbWFpbkNyZWRlbnRpYWxzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy9saWIvY3JlZGVudGlhbHMvZG9tYWluQ3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7Ozs7QUFFL0YseURBQWlGO0FBRWpGO0lBQXVDLDZDQUFpQjtJQUN0RDs7Ozs7T0FLRztJQUNILDJCQUFZLFNBQWlCO1FBQTdCLGlCQVVDO1FBVEMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLENBQUMsRUFBRTtZQUM5RCxNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7U0FDdEY7UUFDRCxJQUFNLE9BQU8sR0FBNEI7WUFDdkMsUUFBUSxFQUFFO2dCQUNSLGFBQWEsRUFBRSxTQUFTO2FBQ3pCO1NBQ0YsQ0FBQztRQUNGLFFBQUEsa0JBQU0sT0FBTyxDQUFDLFNBQUM7O0lBQ2pCLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFsQkQsQ0FBdUMscUNBQWlCLEdBa0J2RDtBQWxCWSw4Q0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEFwaUtleUNyZWRlbnRpYWxzLCBBcGlLZXlDcmVkZW50aWFsT3B0aW9ucyB9IGZyb20gXCIuL2FwaUtleUNyZWRlbnRpYWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBEb21haW5DcmVkZW50aWFscyBleHRlbmRzIEFwaUtleUNyZWRlbnRpYWxzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRXZlbnRHcmlkIERvbWFpbkNyZWRlbnRpYWxzIG9iamVjdC5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkb21haW5LZXkgICBUaGUgRXZlbnRHcmlkIGRvbWFpbiBrZXlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvbWFpbktleTogc3RyaW5nKSB7XG4gICAgaWYgKCFkb21haW5LZXkgfHwgKGRvbWFpbktleSAmJiB0eXBlb2YgZG9tYWluS2V5ICE9PSBcInN0cmluZ1wiKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZG9tYWluS2V5IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5cIik7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbnM6IEFwaUtleUNyZWRlbnRpYWxPcHRpb25zID0ge1xuICAgICAgaW5IZWFkZXI6IHtcbiAgICAgICAgXCJhZWctc2FzLWtleVwiOiBkb21haW5LZXksXG4gICAgICB9LFxuICAgIH07XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/data/TestClient/lib/models/mappers.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data/TestClient/lib/models/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data/TestClient/lib/models/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/data/TestClient/lib/testClient.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data/TestClient/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9kYXRhL1Rlc3RDbGllbnQvbGliL3Rlc3RDbGllbnQudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL3Rlc3QvZGF0YS9UZXN0Q2xpZW50L2xpYi90ZXN0Q2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsMEJBQTBCO0FBQzFCLHdCQUF3QjtBQUN4QiwwQkFBMEI7QUFFMUIsWUFBWSxDQUFDOzs7O0FBRWIscUVBQWlEO0FBQ2pELDRDQUEyQztBQUUzQzs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSDtJQUF5QixzQ0FBb0I7SUFLM0Msb0JBQVksT0FBZSxFQUFFLE9BQXFDO1FBQWxFLGlCQVlDO1FBWEMsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQzNCLFFBQUEsa0JBQU0sU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFDO1FBQzFCLEtBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLEtBQUksQ0FBQyxPQUFPLEdBQUcsOEJBQThCLENBQUM7U0FDL0M7UUFFRCxJQUFJLENBQUMsS0FBSSxDQUFDLGNBQWMsRUFBRTtZQUN4QixLQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQztTQUMvQjtRQUNELEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFPLENBQUMsQ0FBQzs7SUFDbkQsQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQWxCRCxDQUF5QixNQUFNLENBQUMsYUFBYSxHQWtCNUM7QUFFUSxnQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yXG4gKiBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICpcbiAqIENvZGUgZ2VuZXJhdGVkIGJ5IE1pY3Jvc29mdCAoUikgQXV0b1Jlc3QgQ29kZSBHZW5lcmF0b3IgMC4xNC4wLjBcbiAqIENoYW5nZXMgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvciBhbmQgd2lsbCBiZSBsb3N0IGlmIHRoZSBjb2RlIGlzXG4gKiByZWdlbmVyYXRlZC5cbiAqL1xuXG4vKiBqc2hpbnQgbGF0ZWRlZjpmYWxzZSAqL1xuLyoganNoaW50IGZvcmluOmZhbHNlICovXG4vKiBqc2hpbnQgbm9lbXB0eTpmYWxzZSAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0ICogYXMgbXNSZXN0IGZyb20gXCIuLi8uLi8uLi8uLi9saWIvbXNSZXN0XCI7XG5pbXBvcnQgeyBNYXBwZXJzIH0gZnJvbSBcIi4vbW9kZWxzL21hcHBlcnNcIjtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBUZXN0Q2xpZW50IGNsYXNzLlxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtiYXNlVXJpXSAtIFRoZSBiYXNlIFVSSSBvZiB0aGUgc2VydmljZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gVGhlIHBhcmFtZXRlciBvcHRpb25zXG4gKlxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuZmlsdGVyc10gLSBGaWx0ZXJzIHRvIGJlIGFkZGVkIHRvIHRoZSByZXF1ZXN0IHBpcGVsaW5lXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnJlcXVlc3RPcHRpb25zXSAtIE9wdGlvbnMgZm9yIHRoZSB1bmRlcmx5aW5nIHJlcXVlc3Qgb2JqZWN0XG4gKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdCNyZXF1ZXN0b3B0aW9ucy1jYWxsYmFjayBPcHRpb25zIGRvY31cbiAqXG4gKiBAcGFyYW0ge2Jvb2x9IFtvcHRpb25zLm5vUmV0cnlQb2xpY3ldIC0gSWYgc2V0IHRvIHRydWUsIHR1cm4gb2ZmIGRlZmF1bHQgcmV0cnkgcG9saWN5XG4gKi9cblxuY2xhc3MgVGVzdENsaWVudCBleHRlbmRzIG1zUmVzdC5TZXJ2aWNlQ2xpZW50IHtcbiAgYmFzZVVyaT86IHN0cmluZztcbiAgYWNjZXB0TGFuZ3VhZ2U/OiBzdHJpbmc7XG4gIG1vZGVscz86IGFueTtcbiAgc2VyaWFsaXplcjogbXNSZXN0LlNlcmlhbGl6ZXI7XG4gIGNvbnN0cnVjdG9yKGJhc2VVcmk6IHN0cmluZywgb3B0aW9ucz86IG1zUmVzdC5TZXJ2aWNlQ2xpZW50T3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAgIHN1cGVyKHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgdGhpcy5iYXNlVXJpID0gYmFzZVVyaTtcbiAgICBpZiAoIXRoaXMuYmFzZVVyaSkge1xuICAgICAgdGhpcy5iYXNlVXJpID0gXCJodHRwczovL21hbmFnZW1lbnQuYXp1cmUuY29tXCI7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmFjY2VwdExhbmd1YWdlKSB7XG4gICAgICB0aGlzLmFjY2VwdExhbmd1YWdlID0gXCJlbi1VU1wiO1xuICAgIH1cbiAgICB0aGlzLnNlcmlhbGl6ZXIgPSBuZXcgbXNSZXN0LlNlcmlhbGl6ZXIoTWFwcGVycyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgVGVzdENsaWVudCB9O1xuIl19
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/test/data/TestClient/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9kYXRhL1Rlc3RDbGllbnQvbGliL3Rlc3RDbGllbnQudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL3Rlc3QvZGF0YS9UZXN0Q2xpZW50L2xpYi90ZXN0Q2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsMEJBQTBCO0FBQzFCLHdCQUF3QjtBQUN4QiwwQkFBMEI7QUFFMUIsWUFBWSxDQUFDOzs7O0FBRWIscUVBQWlEO0FBQ2pELDRDQUEyQztBQUUzQzs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSDtJQUF5QixzQ0FBb0I7SUFLM0Msb0JBQVksT0FBZSxFQUFFLE9BQXFDO1FBQWxFLGlCQVlDO1FBWEMsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQzNCLFFBQUEsa0JBQU0sU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFDO1FBQzFCLEtBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLEtBQUksQ0FBQyxPQUFPLEdBQUcsOEJBQThCLENBQUM7U0FDL0M7UUFFRCxJQUFJLENBQUMsS0FBSSxDQUFDLGNBQWMsRUFBRTtZQUN4QixLQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQztTQUMvQjtRQUNELEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFPLENBQUMsQ0FBQzs7SUFDbkQsQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQWxCRCxDQUF5QixNQUFNLENBQUMsYUFBYSxHQWtCNUM7QUFFUSxnQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yXG4gKiBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICpcbiAqIENvZGUgZ2VuZXJhdGVkIGJ5IE1pY3Jvc29mdCAoUikgQXV0b1Jlc3QgQ29kZSBHZW5lcmF0b3IgMC4xNC4wLjBcbiAqIENoYW5nZXMgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvciBhbmQgd2lsbCBiZSBsb3N0IGlmIHRoZSBjb2RlIGlzXG4gKiByZWdlbmVyYXRlZC5cbiAqL1xuXG4vKiBqc2hpbnQgbGF0ZWRlZjpmYWxzZSAqL1xuLyoganNoaW50IGZvcmluOmZhbHNlICovXG4vKiBqc2hpbnQgbm9lbXB0eTpmYWxzZSAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0ICogYXMgbXNSZXN0IGZyb20gXCIuLi8uLi8uLi8uLi9saWIvbXNSZXN0XCI7XG5pbXBvcnQgeyBNYXBwZXJzIH0gZnJvbSBcIi4vbW9kZWxzL21hcHBlcnNcIjtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBUZXN0Q2xpZW50IGNsYXNzLlxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtiYXNlVXJpXSAtIFRoZSBiYXNlIFVSSSBvZiB0aGUgc2VydmljZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gVGhlIHBhcmFtZXRlciBvcHRpb25zXG4gKlxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuZmlsdGVyc10gLSBGaWx0ZXJzIHRvIGJlIGFkZGVkIHRvIHRoZSByZXF1ZXN0IHBpcGVsaW5lXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnJlcXVlc3RPcHRpb25zXSAtIE9wdGlvbnMgZm9yIHRoZSB1bmRlcmx5aW5nIHJlcXVlc3Qgb2JqZWN0XG4gKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdCNyZXF1ZXN0b3B0aW9ucy1jYWxsYmFjayBPcHRpb25zIGRvY31cbiAqXG4gKiBAcGFyYW0ge2Jvb2x9IFtvcHRpb25zLm5vUmV0cnlQb2xpY3ldIC0gSWYgc2V0IHRvIHRydWUsIHR1cm4gb2ZmIGRlZmF1bHQgcmV0cnkgcG9saWN5XG4gKi9cblxuY2xhc3MgVGVzdENsaWVudCBleHRlbmRzIG1zUmVzdC5TZXJ2aWNlQ2xpZW50IHtcbiAgYmFzZVVyaT86IHN0cmluZztcbiAgYWNjZXB0TGFuZ3VhZ2U/OiBzdHJpbmc7XG4gIG1vZGVscz86IGFueTtcbiAgc2VyaWFsaXplcjogbXNSZXN0LlNlcmlhbGl6ZXI7XG4gIGNvbnN0cnVjdG9yKGJhc2VVcmk6IHN0cmluZywgb3B0aW9ucz86IG1zUmVzdC5TZXJ2aWNlQ2xpZW50T3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAgIHN1cGVyKHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgdGhpcy5iYXNlVXJpID0gYmFzZVVyaTtcbiAgICBpZiAoIXRoaXMuYmFzZVVyaSkge1xuICAgICAgdGhpcy5iYXNlVXJpID0gXCJodHRwczovL21hbmFnZW1lbnQuYXp1cmUuY29tXCI7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmFjY2VwdExhbmd1YWdlKSB7XG4gICAgICB0aGlzLmFjY2VwdExhbmd1YWdlID0gXCJlbi1VU1wiO1xuICAgIH1cbiAgICB0aGlzLnNlcmlhbGl6ZXIgPSBuZXcgbXNSZXN0LlNlcmlhbGl6ZXIoTWFwcGVycyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgVGVzdENsaWVudCB9O1xuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/defaultHttpClientTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9kZWZhdWx0SHR0cENsaWVudFRlc3RzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy90ZXN0L2RlZmF1bHRIdHRwQ2xpZW50VGVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRiw2QkFBOEM7QUFDOUMsbURBQStCO0FBQy9CLGdDQUE4QjtBQUM5Qix5QkFBc0M7QUFFdEMsOERBQTZEO0FBQzdELDhDQUE2QztBQUM3QywyQ0FBMkM7QUFDM0Msa0RBQXlGO0FBQ3pGLHVDQUF5RDtBQUl6RCxJQUFNLE1BQU0sR0FBRyxDQUFDLGNBQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFpQixDQUFDO0FBRXZELFNBQVMsa0JBQWtCO0lBQ3pCLElBQUksVUFBMkIsQ0FBQztJQUNoQyxJQUFJLE9BQU8sZUFBZSxLQUFLLFVBQVUsRUFBRTtRQUN6QyxVQUFVLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztLQUNwQztTQUFNO1FBQ0wsSUFBTSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsNENBQTRDLENBQUM7YUFDbEYsZUFBZSxDQUFDO1FBQ25CLFVBQVUsR0FBRyxJQUFJLHVCQUF1QixFQUFFLENBQUM7S0FDNUM7SUFDRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsUUFBUSxDQUFDLG1CQUFtQixFQUFFO0lBQzVCLFNBQVMsS0FBSyxDQUFDLEVBQVU7UUFDdkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQXZCLENBQXVCLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsSUFBSSxRQUF3QixDQUFDO0lBQzdCLFVBQVUs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R0FBOEIsUUFBUSxDQUFDLFVBQVUsQ0FBQzt3QkFDOUQsb0JBQW9CLEdBQUcsNnhDQThDaEMsQ0FBQzt3QkFDRSxhQUFNLENBQUMsV0FBVyxDQUNoQixZQUFZLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQy9DLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQ3hDLENBQUM7d0JBQ0YsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDOzs7OztLQUNyQixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgYXNzZXJ0LCBBc3NlcnRpb25FcnJvciB9IGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgKiBhcyBzaW5vbiBmcm9tIFwic2lub25cIjtcbmltcG9ydCBcImNoYWkvcmVnaXN0ZXItc2hvdWxkXCI7XG5pbXBvcnQgeyBjcmVhdGVSZWFkU3RyZWFtIH0gZnJvbSBcImZzXCI7XG5cbmltcG9ydCB7IERlZmF1bHRIdHRwQ2xpZW50IH0gZnJvbSBcIi4uL2xpYi9kZWZhdWx0SHR0cENsaWVudFwiO1xuaW1wb3J0IHsgUmVzdEVycm9yIH0gZnJvbSBcIi4uL2xpYi9yZXN0RXJyb3JcIjtcbmltcG9ydCB7IGlzTm9kZSB9IGZyb20gXCIuLi9saWIvdXRpbC91dGlsc1wiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2UsIEh0dHBSZXF1ZXN0Qm9keSwgVHJhbnNmZXJQcm9ncmVzc0V2ZW50IH0gZnJvbSBcIi4uL2xpYi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHsgZ2V0SHR0cE1vY2ssIEh0dHBNb2NrRmFjYWRlIH0gZnJvbSBcIi4vbW9ja0h0dHBcIjtcbmltcG9ydCB7IFRlc3RGdW5jdGlvbiB9IGZyb20gXCJtb2NoYVwiO1xuaW1wb3J0IHsgQ29tbW9uUmVzcG9uc2UgfSBmcm9tIFwiLi4vbGliL2ZldGNoSHR0cENsaWVudFwiO1xuXG5jb25zdCBub2RlSXQgPSAoaXNOb2RlID8gaXQgOiBpdC5za2lwKSBhcyBUZXN0RnVuY3Rpb247XG5cbmZ1bmN0aW9uIGdldEFib3J0Q29udHJvbGxlcigpOiBBYm9ydENvbnRyb2xsZXIge1xuICBsZXQgY29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyO1xuICBpZiAodHlwZW9mIEFib3J0Q29udHJvbGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBBYm9ydENvbnRyb2xsZXJQb255ZmlsbCA9IHJlcXVpcmUoXCJhYm9ydGNvbnRyb2xsZXItcG9seWZpbGwvZGlzdC9janMtcG9ueWZpbGxcIilcbiAgICAgIC5BYm9ydENvbnRyb2xsZXI7XG4gICAgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXJQb255ZmlsbCgpO1xuICB9XG4gIHJldHVybiBjb250cm9sbGVyO1xufVxuXG5kZXNjcmliZShcImRlZmF1bHRIdHRwQ2xpZW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gc2xlZXAobXM6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xuICB9XG5cbiAgbGV0IGh0dHBNb2NrOiBIdHRwTW9ja0ZhY2FkZTtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgaHR0cE1vY2sgPSBnZXRIdHRwTW9jaygpO1xuICAgIGh0dHBNb2NrLnNldHVwKCk7XG4gIH0pO1xuICBhZnRlckVhY2goKCkgPT4gaHR0cE1vY2sudGVhcmRvd24oKSk7XG4gIGFmdGVyKCgpID0+IGh0dHBNb2NrLnRlYXJkb3duKCkpO1xuXG4gIGZ1bmN0aW9uIGdldE1vY2tlZEh0dHBDbGllbnQoKTogRGVmYXVsdEh0dHBDbGllbnQge1xuICAgIGNvbnN0IGh0dHBDbGllbnQgPSBuZXcgRGVmYXVsdEh0dHBDbGllbnQoKTtcbiAgICBjb25zdCBmZXRjaE1vY2sgPSBodHRwTW9jay5nZXRGZXRjaCgpO1xuICAgIGlmIChmZXRjaE1vY2spIHtcbiAgICAgIHNpbm9uLnN0dWIoaHR0cENsaWVudCwgXCJmZXRjaFwiKS5jYWxsc0Zha2UoYXN5bmMgKGlucHV0LCBpbml0KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hNb2NrKGlucHV0LCBpbml0KTtcbiAgICAgICAgcmV0dXJuIChyZXNwb25zZSBhcyB1bmtub3duKSBhcyBDb21tb25SZXNwb25zZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBodHRwQ2xpZW50O1xuICB9XG5cbiAgaXQoXCJzaG91bGQgcmV0dXJuIGEgcmVzcG9uc2UgaW5zdGVhZCBvZiB0aHJvd2luZyBmb3IgYXdhaXRlZCA0MDRcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlc291cmNlVXJsID0gXCIvbm9uZXhpc3RlbnRcIjtcblxuICAgIGh0dHBNb2NrLmdldChyZXNvdXJjZVVybCwgYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiA0MDQgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgV2ViUmVzb3VyY2UocmVzb3VyY2VVcmwsIFwiR0VUXCIpO1xuICAgIGNvbnN0IGh0dHBDbGllbnQgPSBnZXRNb2NrZWRIdHRwQ2xpZW50KCk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGh0dHBDbGllbnQuc2VuZFJlcXVlc3QocmVxdWVzdCk7XG4gICAgcmVzcG9uc2Uuc3RhdHVzLnNob3VsZC5lcXVhbCg0MDQpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBhbGxvdyBjYW5jZWxpbmcgcmVxdWVzdHNcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlc291cmNlVXJsID0gYC9maWxldXBsb2FkYDtcbiAgICBodHRwTW9jay5wb3N0KHJlc291cmNlVXJsLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBzbGVlcCgxMDAwMCk7XG4gICAgICBhc3NlcnQuZmFpbCgpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDEgfTtcbiAgICB9KTtcbiAgICBjb25zdCBjb250cm9sbGVyID0gZ2V0QWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3QgdmVyeUJpZ1BheWxvYWQgPSBcInZlcnkgbG9uZyBzdHJpbmdcIjtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFdlYlJlc291cmNlKFxuICAgICAgcmVzb3VyY2VVcmwsXG4gICAgICBcIlBPU1RcIixcbiAgICAgIHZlcnlCaWdQYXlsb2FkLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdHJ1ZSxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIGNvbnRyb2xsZXIuc2lnbmFsXG4gICAgKTtcbiAgICBjb25zdCBjbGllbnQgPSBnZXRNb2NrZWRIdHRwQ2xpZW50KCk7XG4gICAgY29uc3QgcHJvbWlzZSA9IGNsaWVudC5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHByb21pc2U7XG4gICAgICBhc3NlcnQuZmFpbChcIlwiKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGVyci5zaG91bGQubm90LmJlLmluc3RhbmNlb2YoQXNzZXJ0aW9uRXJyb3IpO1xuICAgIH1cbiAgfSk7XG5cbiAgbm9kZUl0KFwic2hvdWxkIG5vdCBvdmVyd3JpdGUgYSB1c2VyLXByb3ZpZGVkIGNvb2tpZSAobm9kZWpzIG9ubHkpXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDb29raWUgaXMgb25seSBhbGxvd2VkIHRvIGJlIHNldCBieSB0aGUgYnJvd3NlciBiYXNlZCBvbiBhbiBhY3R1YWwgcmVzcG9uc2UgU2V0LUNvb2tpZSBoZWFkZXJcbiAgICBodHRwTW9jay5nZXQoXCJodHRwOi8vbXkuZmFrZS5kb21haW4vc2V0LWNvb2tpZVwiLCB7XG4gICAgICBzdGF0dXM6IDIwMCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJTZXQtQ29va2llXCI6IFwiZGF0YT0xMjM0NTZcIixcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBodHRwTW9jay5nZXQoXCJodHRwOi8vbXkuZmFrZS5kb21haW4vY29va2llXCIsIGFzeW5jIChfdXJsLCBfbWV0aG9kLCBfYm9keSwgaGVhZGVycykgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0TW9ja2VkSHR0cENsaWVudCgpO1xuXG4gICAgY29uc3QgcmVxdWVzdDEgPSBuZXcgV2ViUmVzb3VyY2UoXCJodHRwOi8vbXkuZmFrZS5kb21haW4vc2V0LWNvb2tpZVwiKTtcbiAgICBjb25zdCByZXNwb25zZTEgPSBhd2FpdCBjbGllbnQuc2VuZFJlcXVlc3QocmVxdWVzdDEpO1xuICAgIHJlc3BvbnNlMS5oZWFkZXJzLmdldChcIlNldC1Db29raWVcIikhLnNob3VsZC5lcXVhbChcImRhdGE9MTIzNDU2XCIpO1xuXG4gICAgY29uc3QgcmVxdWVzdDIgPSBuZXcgV2ViUmVzb3VyY2UoXCJodHRwOi8vbXkuZmFrZS5kb21haW4vY29va2llXCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlMiA9IGF3YWl0IGNsaWVudC5zZW5kUmVxdWVzdChyZXF1ZXN0Mik7XG4gICAgcmVzcG9uc2UyLmhlYWRlcnMuZ2V0KFwiQ29va2llXCIpIS5zaG91bGQuZXF1YWwoXCJkYXRhPTEyMzQ1NlwiKTtcblxuICAgIGNvbnN0IHJlcXVlc3QzID0gbmV3IFdlYlJlc291cmNlKFwiaHR0cDovL215LmZha2UuZG9tYWluL2Nvb2tpZVwiLCBcIkdFVFwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwge1xuICAgICAgQ29va2llOiBcImRhdGE9YWJjZGVmZ1wiLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlMyA9IGF3YWl0IGNsaWVudC5zZW5kUmVxdWVzdChyZXF1ZXN0Myk7XG4gICAgcmVzcG9uc2UzLmhlYWRlcnMuZ2V0KFwiQ29va2llXCIpIS5zaG91bGQuZXF1YWwoXCJkYXRhPWFiY2RlZmdcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGFsbG93IGNhbmNlbGluZyBtdWx0aXBsZSByZXF1ZXN0cyB3aXRoIG9uZSB0b2tlblwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgaHR0cE1vY2sucG9zdChcIi9maWxldXBsb2FkXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHNsZWVwKDEwMDApO1xuICAgICAgYXNzZXJ0LmZhaWwoKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogMjAxIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb250cm9sbGVyID0gZ2V0QWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3QgYnVmID0gXCJWZXJ5IGxhcmdlIHN0cmluZ1wiO1xuICAgIGNvbnN0IHJlcXVlc3RzID0gW1xuICAgICAgbmV3IFdlYlJlc291cmNlKFxuICAgICAgICBcIi9maWxldXBsb2FkXCIsXG4gICAgICAgIFwiUE9TVFwiLFxuICAgICAgICBidWYsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB0cnVlLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIGNvbnRyb2xsZXIuc2lnbmFsXG4gICAgICApLFxuICAgICAgbmV3IFdlYlJlc291cmNlKFxuICAgICAgICBcIi9maWxldXBsb2FkXCIsXG4gICAgICAgIFwiUE9TVFwiLFxuICAgICAgICBidWYsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB0cnVlLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIGNvbnRyb2xsZXIuc2lnbmFsXG4gICAgICApLFxuICAgIF07XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0TW9ja2VkSHR0cENsaWVudCgpO1xuICAgIGNvbnN0IHByb21pc2VzID0gcmVxdWVzdHMubWFwKChyKSA9PiBjbGllbnQuc2VuZFJlcXVlc3QocikpO1xuICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAvLyBFbnN1cmUgZWFjaCBwcm9taXNlIGlzIGluZGl2aWR1YWxseSByZWplY3RlZFxuICAgIGZvciAoY29uc3QgcHJvbWlzZSBvZiBwcm9taXNlcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcHJvbWlzZTtcbiAgICAgICAgYXNzZXJ0LmZhaWwoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBlcnIuc2hvdWxkLm5vdC5iZS5pbnN0YW5jZW9mKEFzc2VydGlvbkVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwic2hvdWxkIHJlcG9ydCB1cGxvYWQgYW5kIGRvd25sb2FkIHByb2dyZXNzXCIsICgpID0+IHtcbiAgICB0eXBlIE5vdGlmaWVkID0geyBub3RpZmllZDogYm9vbGVhbiB9O1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKG9wZXJhdGlvblN0YXR1czogTm90aWZpZWQsIGV2OiBUcmFuc2ZlclByb2dyZXNzRXZlbnQpID0+IHtcbiAgICAgIG9wZXJhdGlvblN0YXR1cy5ub3RpZmllZCA9IHRydWU7XG4gICAgICBpZiAodHlwZW9mIFByb2dyZXNzRXZlbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZXYuc2hvdWxkLm5vdC5iZS5pbnN0YW5jZW9mKFByb2dyZXNzRXZlbnQpO1xuICAgICAgfVxuICAgICAgZXYubG9hZGVkQnl0ZXMuc2hvdWxkLmJlLmEoXCJOdW1iZXJcIik7XG4gICAgfTtcblxuICAgIGl0KFwiZm9yIHNpbXBsZSBib2RpZXNcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgaHR0cE1vY2sucG9zdChcIi9maWxldXBsb2FkXCIsIGFzeW5jIChfdXJsLCBfbWV0aG9kLCBfYm9keSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1czogMjUxLFxuICAgICAgICAgIGJvZHk6IGJvZHkucmVwZWF0KDkpLnN1YnN0cmluZygwLCAyMDApLFxuICAgICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LUxlbmd0aFwiOiBcIjIwMFwiIH0sXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgdXBsb2FkOiBOb3RpZmllZCA9IHsgbm90aWZpZWQ6IGZhbHNlIH07XG4gICAgICBjb25zdCBkb3dubG9hZDogTm90aWZpZWQgPSB7IG5vdGlmaWVkOiBmYWxzZSB9O1xuXG4gICAgICBjb25zdCBib2R5ID0gXCJWZXJ5IGxhcmdlIHN0cmluZyB0byB1cGxvYWRcIjtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgV2ViUmVzb3VyY2UoXG4gICAgICAgIFwiL2ZpbGV1cGxvYWRcIixcbiAgICAgICAgXCJQT1NUXCIsXG4gICAgICAgIGJvZHksXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIDAsXG4gICAgICAgIChldikgPT4gbGlzdGVuZXIodXBsb2FkLCBldiksXG4gICAgICAgIChldikgPT4gbGlzdGVuZXIoZG93bmxvYWQsIGV2KVxuICAgICAgKTtcblxuICAgICAgY29uc3QgY2xpZW50ID0gZ2V0TW9ja2VkSHR0cENsaWVudCgpO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuc2VuZFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICByZXNwb25zZS5zaG91bGQuZXhpc3Q7XG4gICAgICByZXNwb25zZS5zdGF0dXMuc2hvdWxkLmVxdWFsKDI1MSk7XG4gICAgICB1cGxvYWQubm90aWZpZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkb3dubG9hZC5ub3RpZmllZC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KFwiZm9yIGJsb2Igb3Igc3RyZWFtIGJvZGllc1wiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgcGF5bG9hZDogSHR0cFJlcXVlc3RCb2R5O1xuICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICBwYXlsb2FkID0gKCkgPT4gY3JlYXRlUmVhZFN0cmVhbShfX2ZpbGVuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBheWxvYWQgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoMTAyNCAqIDEwMjQpXSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNpemUgPSBpc05vZGUgPyBwYXlsb2FkLnRvU3RyaW5nKCkubGVuZ3RoIDogdW5kZWZpbmVkO1xuXG4gICAgICBodHRwTW9jay5wb3N0KFwiL2JpZ2ZpbGV1cGxvYWRcIiwgYXN5bmMgKF91cmwsIF9tZXRob2QsIF9ib2R5KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzOiAyNTAsXG4gICAgICAgICAgYm9keTogcGF5bG9hZCxcbiAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwidGV4dC9qYXZhc2NyaXB0XCIsIFwiQ29udGVudC1sZW5ndGhcIjogc2l6ZSB9LFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHVwbG9hZDogTm90aWZpZWQgPSB7IG5vdGlmaWVkOiBmYWxzZSB9O1xuICAgICAgY29uc3QgZG93bmxvYWQ6IE5vdGlmaWVkID0geyBub3RpZmllZDogZmFsc2UgfTtcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXNvdXJjZShcbiAgICAgICAgXCIvYmlnZmlsZXVwbG9hZFwiLFxuICAgICAgICBcIlBPU1RcIixcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHRydWUsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAwLFxuICAgICAgICAoZXYpID0+IGxpc3RlbmVyKHVwbG9hZCwgZXYpLFxuICAgICAgICAoZXYpID0+IGxpc3RlbmVyKGRvd25sb2FkLCBldilcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldE1vY2tlZEh0dHBDbGllbnQoKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgcmVzcG9uc2Uuc3RhdHVzLnNob3VsZC5lcXVhbCgyNTApO1xuICAgICAgaWYgKHJlc3BvbnNlLmJsb2JCb2R5KSB7XG4gICAgICAgIGF3YWl0IHJlc3BvbnNlLmJsb2JCb2R5O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY29uc3Qgc3RyZWFtQm9keSA9IChyZXNwb25zZS5yZWFkYWJsZVN0cmVhbUJvZHkgYXMgRnVuY3Rpb24pKCk7XG4gICAgICAgIHN0cmVhbUJvZHkub24oXCJkYXRhXCIsICgpID0+IHt9KTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIHN0cmVhbUJvZHkub24oXCJlbmRcIiwgcmVzb2x2ZSk7XG4gICAgICAgICAgc3RyZWFtQm9keS5vbihcImVycm9yXCIsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB1cGxvYWQubm90aWZpZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkb3dubG9hZC5ub3RpZmllZC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgaG9ub3IgcmVxdWVzdCB0aW1lb3V0c1wiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgaHR0cE1vY2sudGltZW91dChcIkdFVFwiLCBcIi9zbG93XCIpO1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXNvdXJjZShcbiAgICAgIFwiL3Nsb3dcIixcbiAgICAgIFwiR0VUXCIsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBmYWxzZSxcbiAgICAgIGZhbHNlLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgMTAwXG4gICAgKTtcbiAgICBjb25zdCBjbGllbnQgPSBnZXRNb2NrZWRIdHRwQ2xpZW50KCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNsaWVudC5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3QgZGlkIG5vdCBmYWlsIGFzIGV4cGVjdGVkXCIpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyLm1lc3NhZ2Uuc2hvdWxkLm5vdC5tYXRjaCgvcmVxdWVzdCBkaWQgbm90IGZhaWwgYXMgZXhwZWN0ZWQvKTtcbiAgICB9XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGdpdmUgYSBncmFjZWZ1bCBlcnJvciBmb3Igbm9uZXhpc3RlbnQgaG9zdHNcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlcXVlc3RVcmwgPSBcImh0dHA6Ly9mYWtlLmRvbWFpblwiO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgV2ViUmVzb3VyY2UocmVxdWVzdFVybCwgXCJHRVRcIik7XG4gICAgaHR0cE1vY2sucGFzc1Rocm91Z2goKTtcbiAgICAvLyB0ZXN0aW5nIHRoZSB1bnN0dWJiZWQgYmVoYXZpb3Igc28gbm90IHVzaW5nIGxvY2FsIG1vY2tcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgRGVmYXVsdEh0dHBDbGllbnQoKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY2xpZW50LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBkaWQgbm90IGZhaWwgYXMgZXhwZWN0ZWRcIik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBlcnIuc2hvdWxkLmJlLmluc3RhbmNlb2YoUmVzdEVycm9yKTtcbiAgICAgIGVyci5jb2RlLnNob3VsZC5lcXVhbChcIlJFUVVFU1RfU0VORF9FUlJPUlwiKTtcbiAgICB9XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGludGVycHJldCB1bmRlZmluZWQgYXMgYW4gZW1wdHkgYm9keVwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdFVybCA9IFwiL2V4cGVjdC1lbXB0eVwiO1xuICAgIGh0dHBNb2NrLnB1dChyZXF1ZXN0VXJsLCBhc3luYyAoX3VybCwgX21ldGhvZCwgYm9keSwgX2hlYWRlcnMpID0+IHtcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgICBib2R5OiBgRXhwZWN0ZWQgZW1wdHkgYm9keSBidXQgZ290IFwiJHtKU09OLnN0cmluZ2lmeShib2R5KX1cImAsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFdlYlJlc291cmNlKHJlcXVlc3RVcmwsIFwiUFVUXCIpO1xuICAgIGNvbnN0IGNsaWVudCA9IGdldE1vY2tlZEh0dHBDbGllbnQoKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICByZXNwb25zZS5zdGF0dXMuc2hvdWxkLmVxdWFsKDIwMCwgcmVzcG9uc2UuYm9keUFzVGV4dCEpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBzZW5kIEhUVFAgcmVxdWVzdHNcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgV2ViUmVzb3VyY2UoXCJodHRwczovL2V4YW1wbGUuY29tXCIsIFwiR0VUXCIpO1xuICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCIsIFwiQ29udGVudC1UeXBlXCIpO1xuICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCIsIFwiR0VUXCIpO1xuICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCJodHRwczovL2V4YW1wbGUuY29tXCIpO1xuICAgIGh0dHBNb2NrLnBhc3NUaHJvdWdoKCk7XG4gICAgLy8gdGVzdGluZyB0aGUgdW5zdHViYmVkIGJlaGF2aW9yIHNvIG5vdCB1c2luZyBsb2NhbCBtb2NrXG4gICAgY29uc3QgaHR0cENsaWVudCA9IG5ldyBEZWZhdWx0SHR0cENsaWVudCgpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBodHRwQ2xpZW50LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIGFzc2VydC5kZWVwRXF1YWwocmVzcG9uc2UucmVxdWVzdCwgcmVxdWVzdCk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKHJlc3BvbnNlLnN0YXR1cywgMjAwKTtcbiAgICBhc3NlcnQocmVzcG9uc2UuaGVhZGVycyk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpIS5zcGxpdChcIjtcIilbMF0sIFwidGV4dC9odG1sXCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlQm9keTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCA9IHJlc3BvbnNlLmJvZHlBc1RleHQ7XG4gICAgY29uc3QgZXhwZWN0ZWRSZXNwb25zZUJvZHkgPSBgPCFkb2N0eXBlIGh0bWw+XG48aHRtbD5cbjxoZWFkPlxuICAgIDx0aXRsZT5FeGFtcGxlIERvbWFpbjwvdGl0bGU+XG5cbiAgICA8bWV0YSBjaGFyc2V0PVwidXRmLThcIiAvPlxuICAgIDxtZXRhIGh0dHAtZXF1aXY9XCJDb250ZW50LXR5cGVcIiBjb250ZW50PVwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XCIgLz5cbiAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTFcIiAvPlxuICAgIDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5cbiAgICBib2R5IHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMjtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgc3lzdGVtLXVpLCBCbGlua01hY1N5c3RlbUZvbnQsIFwiU2Vnb2VVSVwiLCBcIk9wZW5TYW5zXCIsIFwiSGVsdmV0aWNhTmV1ZVwiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xuXG4gICAgfVxuICAgIGRpdiB7XG4gICAgICAgIHdpZHRoOiA2MDBweDtcbiAgICAgICAgbWFyZ2luOiA1ZW0gYXV0bztcbiAgICAgICAgcGFkZGluZzogMmVtO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRmZGZmO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAwLjVlbTtcbiAgICAgICAgYm94LXNoYWRvdzogMnB4IDNweCA3cHggMnB4IHJnYmEoMCwwLDAsMC4wMik7XG4gICAgfVxuICAgIGE6bGluaywgYTp2aXNpdGVkIHtcbiAgICAgICAgY29sb3I6ICMzODQ4OGY7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gICAgICAgIGRpdiB7XG4gICAgICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICB9XG4gICAgfVxuICAgIDwvc3R5bGU+XG48L2hlYWQ+XG5cbjxib2R5PlxuPGRpdj5cbiAgICA8aDE+RXhhbXBsZSBEb21haW48L2gxPlxuICAgIDxwPlRoaXMgZG9tYWluIGlzIGZvciB1c2UgaW4gaWxsdXN0cmF0aXZlIGV4YW1wbGVzIGluIGRvY3VtZW50cy4gWW91IG1heSB1c2UgdGhpc1xuICAgIGRvbWFpbiBpbiBsaXRlcmF0dXJlIHdpdGhvdXQgcHJpb3IgY29vcmRpbmF0aW9uIG9yIGFza2luZyBmb3IgcGVybWlzc2lvbi48L3A+XG4gICAgPHA+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmlhbmEub3JnL2RvbWFpbnMvZXhhbXBsZVwiPk1vcmUgaW5mb3JtYXRpb24uLi48L2E+PC9wPlxuPC9kaXY+XG48L2JvZHk+XG48L2h0bWw+XG5gO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChcbiAgICAgIHJlc3BvbnNlQm9keSAmJiByZXNwb25zZUJvZHkucmVwbGFjZSgvXFxzL2csIFwiXCIpLFxuICAgICAgZXhwZWN0ZWRSZXNwb25zZUJvZHkucmVwbGFjZSgvXFxzL2csIFwiXCIpXG4gICAgKTtcbiAgICBodHRwTW9jay50ZWFyZG93bigpO1xuICB9KTtcbn0pO1xuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/mockHttp.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/logFilterTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9sb2dGaWx0ZXJUZXN0cy50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9sb2dGaWx0ZXJUZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7QUFFL0YsNkJBQThCO0FBQzlCLGtEQUFpRDtBQUVqRCx1REFBc0Q7QUFDdEQsK0RBQW9GO0FBQ3BGLGtEQUFpRDtBQUVqRCxJQUFNLGtCQUFrQixHQUFrQjtJQUN4QyxXQUFXLEVBQVgsVUFBWSxPQUFvQjtRQUM5Qiw0Q0FBNEM7UUFDNUMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSx5QkFBVyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDakcsQ0FBQztDQUNGLENBQUM7QUFFRixRQUFRLENBQUMsWUFBWSxFQUFFO0lBQ3JCLEVBQUUsQ0FBQyxzREFBc0QsRUFBRSxVQUFDLElBQUk7UUFDOUQsSUFBTSxRQUFRLEdBQUcsK1BBY3BCLENBQUM7UUFDRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBTSxNQUFNLEdBQUcsVUFBQyxPQUFlO1lBQzdCLE1BQU0sSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQzNCLENBQUMsQ0FBQztRQUNGLElBQU0sRUFBRSxHQUFHLElBQUkscUJBQVMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLG9DQUFvQixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakYsSUFBTSxHQUFHLEdBQUcsSUFBSSx5QkFBVyxDQUFDLGlCQUFpQixFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO2FBQ2hCLElBQUksQ0FBQztZQUNKLHdDQUF3QztZQUN4QywwQkFBMEI7WUFDMUIseUJBQXlCO1lBQ3pCLGFBQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLElBQUksRUFBRSxDQUFDO1FBQ1QsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLFVBQUMsR0FBVTtZQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBIdHRwSGVhZGVycyB9IGZyb20gXCIuLi9saWIvaHR0cEhlYWRlcnNcIjtcbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9saWIvaHR0cE9wZXJhdGlvblJlc3BvbnNlXCI7XG5pbXBvcnQgeyBMb2dQb2xpY3kgfSBmcm9tIFwiLi4vbGliL3BvbGljaWVzL2xvZ1BvbGljeVwiO1xuaW1wb3J0IHsgUmVxdWVzdFBvbGljeSwgUmVxdWVzdFBvbGljeU9wdGlvbnMgfSBmcm9tIFwiLi4vbGliL3BvbGljaWVzL3JlcXVlc3RQb2xpY3lcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlIH0gZnJvbSBcIi4uL2xpYi93ZWJSZXNvdXJjZVwiO1xuXG5jb25zdCBlbXB0eVJlcXVlc3RQb2xpY3k6IFJlcXVlc3RQb2xpY3kgPSB7XG4gIHNlbmRSZXF1ZXN0KHJlcXVlc3Q6IFdlYlJlc291cmNlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLW51bGwta2V5d29yZFxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyByZXF1ZXN0LCBzdGF0dXM6IDIwMCwgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKCksIGJvZHlBc1RleHQ6IG51bGwgfSk7XG4gIH0sXG59O1xuXG5kZXNjcmliZShcIkxvZyBmaWx0ZXJcIiwgKCkgPT4ge1xuICBpdChcInNob3VsZCBsb2cgbWVzc2FnZXMgd2hlbiBhIGxvZ2dlciBvYmplY3QgaXMgcHJvdmlkZWRcIiwgKGRvbmUpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZCA9IGA+PiBSZXF1ZXN0OiB7XG4gIFwidXJsXCI6IFwiaHR0cHM6Ly9mb28uY29tXCIsXG4gIFwibWV0aG9kXCI6IFwiUFVUXCIsXG4gIFwiaGVhZGVyc1wiOiB7XG4gICAgXCJfaGVhZGVyc01hcFwiOiB7fVxuICB9LFxuICBcImJvZHlcIjoge1xuICAgIFwiYVwiOiAxXG4gIH0sXG4gIFwid2l0aENyZWRlbnRpYWxzXCI6IGZhbHNlLFxuICBcInRpbWVvdXRcIjogMFxufVxuPj4gUmVzcG9uc2Ugc3RhdHVzIGNvZGU6IDIwMFxuPj4gQm9keTogbnVsbFxuYDtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgICBjb25zdCBsb2dnZXIgPSAobWVzc2FnZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBvdXRwdXQgKz0gbWVzc2FnZSArIFwiXFxuXCI7XG4gICAgfTtcbiAgICBjb25zdCBsZiA9IG5ldyBMb2dQb2xpY3koZW1wdHlSZXF1ZXN0UG9saWN5LCBuZXcgUmVxdWVzdFBvbGljeU9wdGlvbnMoKSwgbG9nZ2VyKTtcbiAgICBjb25zdCByZXEgPSBuZXcgV2ViUmVzb3VyY2UoXCJodHRwczovL2Zvby5jb21cIiwgXCJQVVRcIiwgeyBhOiAxIH0pO1xuICAgIGxmLnNlbmRSZXF1ZXN0KHJlcSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5kaXIob3V0cHV0LCB7IGRlcHRoOiBudWxsIH0pO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIj4+Pj4+Pj5cIik7XG4gICAgICAgIC8vIGNvbnNvbGUuZGlyKGV4cGVjdGVkKTtcbiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChvdXRwdXQsIGV4cGVjdGVkKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICBkb25lKGVycik7XG4gICAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9sb2dGaWx0ZXJUZXN0cy50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9sb2dGaWx0ZXJUZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7QUFFL0YsNkJBQThCO0FBQzlCLGtEQUFpRDtBQUVqRCx1REFBc0Q7QUFDdEQsK0RBQW9GO0FBQ3BGLGtEQUFpRDtBQUVqRCxJQUFNLGtCQUFrQixHQUFrQjtJQUN4QyxXQUFXLEVBQVgsVUFBWSxPQUFvQjtRQUM5Qiw0Q0FBNEM7UUFDNUMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSx5QkFBVyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDakcsQ0FBQztDQUNGLENBQUM7QUFFRixRQUFRLENBQUMsWUFBWSxFQUFFO0lBQ3JCLEVBQUUsQ0FBQyxzREFBc0QsRUFBRSxVQUFDLElBQUk7UUFDOUQsSUFBTSxRQUFRLEdBQUcsK1BBY3BCLENBQUM7UUFDRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBTSxNQUFNLEdBQUcsVUFBQyxPQUFlO1lBQzdCLE1BQU0sSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQzNCLENBQUMsQ0FBQztRQUNGLElBQU0sRUFBRSxHQUFHLElBQUkscUJBQVMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLG9DQUFvQixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakYsSUFBTSxHQUFHLEdBQUcsSUFBSSx5QkFBVyxDQUFDLGlCQUFpQixFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO2FBQ2hCLElBQUksQ0FBQztZQUNKLHdDQUF3QztZQUN4QywwQkFBMEI7WUFDMUIseUJBQXlCO1lBQ3pCLGFBQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLElBQUksRUFBRSxDQUFDO1FBQ1QsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLFVBQUMsR0FBVTtZQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBIdHRwSGVhZGVycyB9IGZyb20gXCIuLi9saWIvaHR0cEhlYWRlcnNcIjtcbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi9saWIvaHR0cE9wZXJhdGlvblJlc3BvbnNlXCI7XG5pbXBvcnQgeyBMb2dQb2xpY3kgfSBmcm9tIFwiLi4vbGliL3BvbGljaWVzL2xvZ1BvbGljeVwiO1xuaW1wb3J0IHsgUmVxdWVzdFBvbGljeSwgUmVxdWVzdFBvbGljeU9wdGlvbnMgfSBmcm9tIFwiLi4vbGliL3BvbGljaWVzL3JlcXVlc3RQb2xpY3lcIjtcbmltcG9ydCB7IFdlYlJlc291cmNlIH0gZnJvbSBcIi4uL2xpYi93ZWJSZXNvdXJjZVwiO1xuXG5jb25zdCBlbXB0eVJlcXVlc3RQb2xpY3k6IFJlcXVlc3RQb2xpY3kgPSB7XG4gIHNlbmRSZXF1ZXN0KHJlcXVlc3Q6IFdlYlJlc291cmNlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLW51bGwta2V5d29yZFxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyByZXF1ZXN0LCBzdGF0dXM6IDIwMCwgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKCksIGJvZHlBc1RleHQ6IG51bGwgfSk7XG4gIH0sXG59O1xuXG5kZXNjcmliZShcIkxvZyBmaWx0ZXJcIiwgKCkgPT4ge1xuICBpdChcInNob3VsZCBsb2cgbWVzc2FnZXMgd2hlbiBhIGxvZ2dlciBvYmplY3QgaXMgcHJvdmlkZWRcIiwgKGRvbmUpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZCA9IGA+PiBSZXF1ZXN0OiB7XG4gIFwidXJsXCI6IFwiaHR0cHM6Ly9mb28uY29tXCIsXG4gIFwibWV0aG9kXCI6IFwiUFVUXCIsXG4gIFwiaGVhZGVyc1wiOiB7XG4gICAgXCJfaGVhZGVyc01hcFwiOiB7fVxuICB9LFxuICBcImJvZHlcIjoge1xuICAgIFwiYVwiOiAxXG4gIH0sXG4gIFwid2l0aENyZWRlbnRpYWxzXCI6IGZhbHNlLFxuICBcInRpbWVvdXRcIjogMFxufVxuPj4gUmVzcG9uc2Ugc3RhdHVzIGNvZGU6IDIwMFxuPj4gQm9keTogbnVsbFxuYDtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgICBjb25zdCBsb2dnZXIgPSAobWVzc2FnZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBvdXRwdXQgKz0gbWVzc2FnZSArIFwiXFxuXCI7XG4gICAgfTtcbiAgICBjb25zdCBsZiA9IG5ldyBMb2dQb2xpY3koZW1wdHlSZXF1ZXN0UG9saWN5LCBuZXcgUmVxdWVzdFBvbGljeU9wdGlvbnMoKSwgbG9nZ2VyKTtcbiAgICBjb25zdCByZXEgPSBuZXcgV2ViUmVzb3VyY2UoXCJodHRwczovL2Zvby5jb21cIiwgXCJQVVRcIiwgeyBhOiAxIH0pO1xuICAgIGxmLnNlbmRSZXF1ZXN0KHJlcSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5kaXIob3V0cHV0LCB7IGRlcHRoOiBudWxsIH0pO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIj4+Pj4+Pj5cIik7XG4gICAgICAgIC8vIGNvbnNvbGUuZGlyKGV4cGVjdGVkKTtcbiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChvdXRwdXQsIGV4cGVjdGVkKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICBkb25lKGVycik7XG4gICAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/msAssert.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9tc0Fzc2VydC50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9tc0Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiw2QkFBOEI7QUFFOUIsMkNBQTJDO0FBRTlCLFFBQUEsTUFBTSxHQUF1QyxDQUFDLGNBQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BFLFFBQUEsU0FBUyxHQUF1QyxjQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUN0RSxRQUFBLFlBQVksR0FBeUMsQ0FBQyxjQUFNO0lBQ3ZFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSTtJQUNmLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDQSxRQUFBLGVBQWUsR0FBeUMsY0FBTTtJQUN6RSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUk7SUFDZixDQUFDLENBQUMsUUFBUSxDQUFDO0FBRWI7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsTUFBTSxDQUNwQixZQUF3QixFQUN4QixhQUFnRDtJQUVoRCxJQUFJLFdBQThCLENBQUM7SUFFbkMsSUFBSTtRQUNGLFlBQVksRUFBRSxDQUFDO0tBQ2hCO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxXQUFXLEdBQUcsS0FBSyxDQUFDO0tBQ3JCO0lBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNoQixhQUFNLENBQUMsTUFBTSxDQUFDLGNBQU8sQ0FBQyxDQUFDLENBQUM7S0FDekI7U0FBTSxJQUFJLGFBQWEsWUFBWSxLQUFLLEVBQUU7UUFDekMsYUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDOUM7U0FBTSxJQUFJLGFBQWEsRUFBRTtRQUN4QixhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLFdBQVksQ0FBQztBQUN0QixDQUFDO0FBckJELHdCQXFCQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQXNCLFdBQVcsQ0FDL0IsYUFBOEMsRUFDOUMsYUFBZ0Q7Ozs7Ozs7b0JBSzlDLHFCQUFNLENBQUMsT0FBTyxhQUFhLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUE7O29CQUE3RSxTQUE2RSxDQUFDOzs7O29CQUU5RSxXQUFXLEdBQUcsT0FBSyxDQUFDOzs7b0JBR3RCLElBQUksQ0FBQyxXQUFXLEVBQUU7d0JBQ2hCLGFBQU0sQ0FBQyxNQUFNLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQztxQkFDekI7eUJBQU0sSUFBSSxhQUFhLFlBQVksS0FBSyxFQUFFO3dCQUN6QyxhQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztxQkFDOUM7eUJBQU0sSUFBSSxhQUFhLEVBQUU7d0JBQ3hCLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztxQkFDNUI7b0JBRUQsc0JBQU8sV0FBWSxFQUFDOzs7O0NBQ3JCO0FBckJELGtDQXFCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7IFN1aXRlRnVuY3Rpb24sIFBlbmRpbmdTdWl0ZUZ1bmN0aW9uLCBUZXN0RnVuY3Rpb24sIFBlbmRpbmdUZXN0RnVuY3Rpb24gfSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCB7IGlzTm9kZSB9IGZyb20gXCIuLi9saWIvdXRpbC91dGlsc1wiO1xuXG5leHBvcnQgY29uc3Qgbm9kZUl0OiBUZXN0RnVuY3Rpb24gfCBQZW5kaW5nVGVzdEZ1bmN0aW9uID0gIWlzTm9kZSA/IGl0LnNraXAgOiBpdDtcbmV4cG9ydCBjb25zdCBicm93c2VySXQ6IFRlc3RGdW5jdGlvbiB8IFBlbmRpbmdUZXN0RnVuY3Rpb24gPSBpc05vZGUgPyBpdC5za2lwIDogaXQ7XG5leHBvcnQgY29uc3Qgbm9kZURlc2NyaWJlOiBTdWl0ZUZ1bmN0aW9uIHwgUGVuZGluZ1N1aXRlRnVuY3Rpb24gPSAhaXNOb2RlXG4gID8gZGVzY3JpYmUuc2tpcFxuICA6IGRlc2NyaWJlO1xuZXhwb3J0IGNvbnN0IGJyb3dzZXJEZXNjcmliZTogU3VpdGVGdW5jdGlvbiB8IFBlbmRpbmdTdWl0ZUZ1bmN0aW9uID0gaXNOb2RlXG4gID8gZGVzY3JpYmUuc2tpcFxuICA6IGRlc2NyaWJlO1xuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSBwcm92aWRlZCBzeW5jRnVuY3Rpb24gdGhyb3dzIGFuIEVycm9yLiBJZiB0aGUgZXhwZWN0ZWRFcnJvciBpcyB1bmRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBqdXN0IGFzc2VydCB0aGF0IGFuIEVycm9yIHdhcyB0aHJvd24uIElmIHRoZSBleHBlY3RlZEVycm9yIGlzIGRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBhc3NlcnQgdGhhdCB0aGUgRXJyb3IgdGhhdCB3YXMgdGhyb3duIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBleHBlY3RlZEVycm9yLlxuICogQHBhcmFtIHN5bmNGdW5jdGlvbiBUaGUgc3luY2hyb25vdXMgZnVuY3Rpb24gdGhhdCBpcyBleHBlY3RlZCB0byB0aHJvd24gYW4gRXJyb3IuXG4gKiBAcGFyYW0gZXhwZWN0ZWRFcnJvciBUaGUgRXJyb3IgdGhhdCBpcyBleHBlY3RlZCB0byBiZSB0aHJvd24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd3MoXG4gIHN5bmNGdW5jdGlvbjogKCkgPT4gdm9pZCxcbiAgZXhwZWN0ZWRFcnJvcj86ICgoZXJyb3I6IEVycm9yKSA9PiB2b2lkKSB8IEVycm9yXG4pOiBFcnJvciB7XG4gIGxldCB0aHJvd25FcnJvcjogRXJyb3IgfCB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBzeW5jRnVuY3Rpb24oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvd25FcnJvciA9IGVycm9yO1xuICB9XG5cbiAgaWYgKCF0aHJvd25FcnJvcikge1xuICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge30pO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGFzc2VydC5kZWVwRXF1YWwodGhyb3duRXJyb3IsIGV4cGVjdGVkRXJyb3IpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkRXJyb3IpIHtcbiAgICBleHBlY3RlZEVycm9yKHRocm93bkVycm9yKTtcbiAgfVxuXG4gIHJldHVybiB0aHJvd25FcnJvciE7XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3ZpZGVkIGFzeW5jRnVuY3Rpb24gdGhyb3dzIGFuIEVycm9yLiBJZiB0aGUgZXhwZWN0ZWRFcnJvciBpcyB1bmRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBqdXN0IGFzc2VydCB0aGF0IGFuIEVycm9yIHdhcyB0aHJvd24uIElmIHRoZSBleHBlY3RlZEVycm9yIGlzIGRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBhc3NlcnQgdGhhdCB0aGUgRXJyb3IgdGhhdCB3YXMgdGhyb3duIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBleHBlY3RlZEVycm9yLlxuICogQHBhcmFtIGFzeW5jRnVuY3Rpb24gVGhlIGFzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHRocm93biBhbiBFcnJvci5cbiAqIEBwYXJhbSBleHBlY3RlZEVycm9yIFRoZSBFcnJvciB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIHRocm93bi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRocm93c0FzeW5jPFQ+KFxuICBhc3luY0Z1bmN0aW9uOiAoKCkgPT4gUHJvbWlzZTxUPikgfCBQcm9taXNlPFQ+LFxuICBleHBlY3RlZEVycm9yPzogKChlcnJvcjogRXJyb3IpID0+IHZvaWQpIHwgRXJyb3Jcbik6IFByb21pc2U8RXJyb3I+IHtcbiAgbGV0IHRocm93bkVycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGF3YWl0ICh0eXBlb2YgYXN5bmNGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gYXN5bmNGdW5jdGlvbigpIDogYXN5bmNGdW5jdGlvbik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3duRXJyb3IgPSBlcnJvcjtcbiAgfVxuXG4gIGlmICghdGhyb3duRXJyb3IpIHtcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHt9KTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZEVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBhc3NlcnQuZGVlcEVxdWFsKHRocm93bkVycm9yLCBleHBlY3RlZEVycm9yKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZEVycm9yKSB7XG4gICAgZXhwZWN0ZWRFcnJvcih0aHJvd25FcnJvcik7XG4gIH1cblxuICByZXR1cm4gdGhyb3duRXJyb3IhO1xufVxuIl19
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9tc0Fzc2VydC50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9tc0Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiw2QkFBOEI7QUFFOUIsMkNBQTJDO0FBRTlCLFFBQUEsTUFBTSxHQUF1QyxDQUFDLGNBQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BFLFFBQUEsU0FBUyxHQUF1QyxjQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUN0RSxRQUFBLFlBQVksR0FBeUMsQ0FBQyxjQUFNO0lBQ3ZFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSTtJQUNmLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDQSxRQUFBLGVBQWUsR0FBeUMsY0FBTTtJQUN6RSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUk7SUFDZixDQUFDLENBQUMsUUFBUSxDQUFDO0FBRWI7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsTUFBTSxDQUNwQixZQUF3QixFQUN4QixhQUFnRDtJQUVoRCxJQUFJLFdBQThCLENBQUM7SUFFbkMsSUFBSTtRQUNGLFlBQVksRUFBRSxDQUFDO0tBQ2hCO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxXQUFXLEdBQUcsS0FBSyxDQUFDO0tBQ3JCO0lBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNoQixhQUFNLENBQUMsTUFBTSxDQUFDLGNBQU8sQ0FBQyxDQUFDLENBQUM7S0FDekI7U0FBTSxJQUFJLGFBQWEsWUFBWSxLQUFLLEVBQUU7UUFDekMsYUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDOUM7U0FBTSxJQUFJLGFBQWEsRUFBRTtRQUN4QixhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLFdBQVksQ0FBQztBQUN0QixDQUFDO0FBckJELHdCQXFCQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQXNCLFdBQVcsQ0FDL0IsYUFBOEMsRUFDOUMsYUFBZ0Q7Ozs7Ozs7b0JBSzlDLHFCQUFNLENBQUMsT0FBTyxhQUFhLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUE7O29CQUE3RSxTQUE2RSxDQUFDOzs7O29CQUU5RSxXQUFXLEdBQUcsT0FBSyxDQUFDOzs7b0JBR3RCLElBQUksQ0FBQyxXQUFXLEVBQUU7d0JBQ2hCLGFBQU0sQ0FBQyxNQUFNLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQztxQkFDekI7eUJBQU0sSUFBSSxhQUFhLFlBQVksS0FBSyxFQUFFO3dCQUN6QyxhQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztxQkFDOUM7eUJBQU0sSUFBSSxhQUFhLEVBQUU7d0JBQ3hCLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztxQkFDNUI7b0JBRUQsc0JBQU8sV0FBWSxFQUFDOzs7O0NBQ3JCO0FBckJELGtDQXFCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7IFN1aXRlRnVuY3Rpb24sIFBlbmRpbmdTdWl0ZUZ1bmN0aW9uLCBUZXN0RnVuY3Rpb24sIFBlbmRpbmdUZXN0RnVuY3Rpb24gfSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCB7IGlzTm9kZSB9IGZyb20gXCIuLi9saWIvdXRpbC91dGlsc1wiO1xuXG5leHBvcnQgY29uc3Qgbm9kZUl0OiBUZXN0RnVuY3Rpb24gfCBQZW5kaW5nVGVzdEZ1bmN0aW9uID0gIWlzTm9kZSA/IGl0LnNraXAgOiBpdDtcbmV4cG9ydCBjb25zdCBicm93c2VySXQ6IFRlc3RGdW5jdGlvbiB8IFBlbmRpbmdUZXN0RnVuY3Rpb24gPSBpc05vZGUgPyBpdC5za2lwIDogaXQ7XG5leHBvcnQgY29uc3Qgbm9kZURlc2NyaWJlOiBTdWl0ZUZ1bmN0aW9uIHwgUGVuZGluZ1N1aXRlRnVuY3Rpb24gPSAhaXNOb2RlXG4gID8gZGVzY3JpYmUuc2tpcFxuICA6IGRlc2NyaWJlO1xuZXhwb3J0IGNvbnN0IGJyb3dzZXJEZXNjcmliZTogU3VpdGVGdW5jdGlvbiB8IFBlbmRpbmdTdWl0ZUZ1bmN0aW9uID0gaXNOb2RlXG4gID8gZGVzY3JpYmUuc2tpcFxuICA6IGRlc2NyaWJlO1xuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSBwcm92aWRlZCBzeW5jRnVuY3Rpb24gdGhyb3dzIGFuIEVycm9yLiBJZiB0aGUgZXhwZWN0ZWRFcnJvciBpcyB1bmRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBqdXN0IGFzc2VydCB0aGF0IGFuIEVycm9yIHdhcyB0aHJvd24uIElmIHRoZSBleHBlY3RlZEVycm9yIGlzIGRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBhc3NlcnQgdGhhdCB0aGUgRXJyb3IgdGhhdCB3YXMgdGhyb3duIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBleHBlY3RlZEVycm9yLlxuICogQHBhcmFtIHN5bmNGdW5jdGlvbiBUaGUgc3luY2hyb25vdXMgZnVuY3Rpb24gdGhhdCBpcyBleHBlY3RlZCB0byB0aHJvd24gYW4gRXJyb3IuXG4gKiBAcGFyYW0gZXhwZWN0ZWRFcnJvciBUaGUgRXJyb3IgdGhhdCBpcyBleHBlY3RlZCB0byBiZSB0aHJvd24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd3MoXG4gIHN5bmNGdW5jdGlvbjogKCkgPT4gdm9pZCxcbiAgZXhwZWN0ZWRFcnJvcj86ICgoZXJyb3I6IEVycm9yKSA9PiB2b2lkKSB8IEVycm9yXG4pOiBFcnJvciB7XG4gIGxldCB0aHJvd25FcnJvcjogRXJyb3IgfCB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBzeW5jRnVuY3Rpb24oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvd25FcnJvciA9IGVycm9yO1xuICB9XG5cbiAgaWYgKCF0aHJvd25FcnJvcikge1xuICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge30pO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGFzc2VydC5kZWVwRXF1YWwodGhyb3duRXJyb3IsIGV4cGVjdGVkRXJyb3IpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkRXJyb3IpIHtcbiAgICBleHBlY3RlZEVycm9yKHRocm93bkVycm9yKTtcbiAgfVxuXG4gIHJldHVybiB0aHJvd25FcnJvciE7XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3ZpZGVkIGFzeW5jRnVuY3Rpb24gdGhyb3dzIGFuIEVycm9yLiBJZiB0aGUgZXhwZWN0ZWRFcnJvciBpcyB1bmRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBqdXN0IGFzc2VydCB0aGF0IGFuIEVycm9yIHdhcyB0aHJvd24uIElmIHRoZSBleHBlY3RlZEVycm9yIGlzIGRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBhc3NlcnQgdGhhdCB0aGUgRXJyb3IgdGhhdCB3YXMgdGhyb3duIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBleHBlY3RlZEVycm9yLlxuICogQHBhcmFtIGFzeW5jRnVuY3Rpb24gVGhlIGFzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHRocm93biBhbiBFcnJvci5cbiAqIEBwYXJhbSBleHBlY3RlZEVycm9yIFRoZSBFcnJvciB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIHRocm93bi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRocm93c0FzeW5jPFQ+KFxuICBhc3luY0Z1bmN0aW9uOiAoKCkgPT4gUHJvbWlzZTxUPikgfCBQcm9taXNlPFQ+LFxuICBleHBlY3RlZEVycm9yPzogKChlcnJvcjogRXJyb3IpID0+IHZvaWQpIHwgRXJyb3Jcbik6IFByb21pc2U8RXJyb3I+IHtcbiAgbGV0IHRocm93bkVycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGF3YWl0ICh0eXBlb2YgYXN5bmNGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gYXN5bmNGdW5jdGlvbigpIDogYXN5bmNGdW5jdGlvbik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3duRXJyb3IgPSBlcnJvcjtcbiAgfVxuXG4gIGlmICghdGhyb3duRXJyb3IpIHtcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHt9KTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZEVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBhc3NlcnQuZGVlcEVxdWFsKHRocm93bkVycm9yLCBleHBlY3RlZEVycm9yKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZEVycm9yKSB7XG4gICAgZXhwZWN0ZWRFcnJvcih0aHJvd25FcnJvcik7XG4gIH1cblxuICByZXR1cm4gdGhyb3duRXJyb3IhO1xufVxuIl19'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/msRestUserAgentPolicyTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/operationParameterTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9vcGVyYXRpb25QYXJhbWV0ZXJUZXN0cy50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9vcGVyYXRpb25QYXJhbWV0ZXJUZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7QUFFL0YsNkJBQThCO0FBQzlCLGdFQUEyRjtBQUUzRixRQUFRLENBQUMsMEJBQTBCLEVBQUU7SUFDbkMsRUFBRSxDQUFDLG1DQUFtQyxFQUFFO1FBQ3RDLGFBQU0sQ0FBQyxNQUFNLENBQUMsY0FBTSxPQUFBLCtDQUEwQixDQUFDLFNBQWdCLENBQUMsRUFBNUMsQ0FBNEMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhCQUE4QixFQUFFO1FBQ2pDLDJDQUEyQztRQUMzQyxhQUFNLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSwrQ0FBMEIsQ0FBQyxJQUFXLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNFQUFzRSxFQUFFO1FBQ3pFLElBQU0sU0FBUyxHQUF1QjtZQUNwQyxhQUFhLEVBQUUsc0JBQXNCO1lBQ3JDLE1BQU0sRUFBRTtnQkFDTixjQUFjLEVBQUUsT0FBTztnQkFDdkIsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxRQUFRO2lCQUNmO2FBQ0Y7U0FDRixDQUFDO1FBQ0YsYUFBTSxDQUFDLFdBQVcsQ0FBQywrQ0FBMEIsQ0FBQyxTQUFTLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3BGLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9GQUFvRixFQUFFO1FBQ3ZGLElBQU0sU0FBUyxHQUF1QjtZQUNwQyxhQUFhLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUM7WUFDbkQsTUFBTSxFQUFFO2dCQUNOLGNBQWMsRUFBRSxPQUFPO2dCQUN2QixJQUFJLEVBQUU7b0JBQ0osSUFBSSxFQUFFLFFBQVE7aUJBQ2Y7YUFDRjtTQUNGLENBQUM7UUFDRixhQUFNLENBQUMsV0FBVyxDQUFDLCtDQUEwQixDQUFDLFNBQVMsQ0FBQyxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDdkYsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0dBQXNHLEVBQUU7UUFDekcsSUFBTSxTQUFTLEdBQXVCO1lBQ3BDLGFBQWEsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQztZQUN0RCxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLE9BQU87Z0JBQ3ZCLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsUUFBUTtpQkFDZjthQUNGO1NBQ0YsQ0FBQztRQUNGLGFBQU0sQ0FBQyxXQUFXLENBQUMsK0NBQTBCLENBQUMsU0FBUyxDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztJQUMxRixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnRkFBZ0YsRUFBRTtRQUNuRixJQUFNLFNBQVMsR0FBdUI7WUFDcEMsYUFBYSxFQUFFO2dCQUNiLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2FBQ1A7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLE9BQU87Z0JBQ3ZCLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsUUFBUTtpQkFDZjthQUNGO1NBQ0YsQ0FBQztRQUNGLGFBQU0sQ0FBQyxXQUFXLENBQUMsK0NBQTBCLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyLCBPcGVyYXRpb25QYXJhbWV0ZXIgfSBmcm9tIFwiLi4vbGliL29wZXJhdGlvblBhcmFtZXRlclwiO1xuXG5kZXNjcmliZShcImdldFBhcmFtZXRlclBhdGhTdHJpbmcoKVwiLCAoKSA9PiB7XG4gIGl0KFwic2hvdWxkIHRocm93IHdoZW4gZ2l2ZW4gdW5kZWZpbmVkXCIsICgpID0+IHtcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKHVuZGVmaW5lZCBhcyBhbnkpKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgdGhyb3cgd2hlbiBnaXZlbiBudWxsXCIsICgpID0+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgYXNzZXJ0LnRocm93cygoKSA9PiBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihudWxsIGFzIGFueSkpO1xuICB9KTtcblxuICBpdChcInNob3VsZCByZXR1cm4gdGhlIHBhcmFtZXRlclBhdGggdmFsdWUgd2hlbiBwYXJhbWV0ZXJQYXRoIGlzIGEgc3RyaW5nXCIsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbWV0ZXI6IE9wZXJhdGlvblBhcmFtZXRlciA9IHtcbiAgICAgIHBhcmFtZXRlclBhdGg6IFwicGF0aFRvUGFyYW1ldGVyVmFsdWVcIixcbiAgICAgIG1hcHBlcjoge1xuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXIocGFyYW1ldGVyKSwgXCJwYXRoVG9QYXJhbWV0ZXJWYWx1ZVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcmV0dXJuIHRoZSBkb3R0ZWQgdmVyc2lvbiBvZiBwYXJhbWV0ZXJQYXRoIHdoZW4gcGFyYW1ldGVyUGF0aCBpcyBhIHN0cmluZ1tdXCIsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbWV0ZXI6IE9wZXJhdGlvblBhcmFtZXRlciA9IHtcbiAgICAgIHBhcmFtZXRlclBhdGg6IFtcInBhdGhcIiwgXCJ0b1wiLCBcInBhcmFtZXRlclwiLCBcInZhbHVlXCJdLFxuICAgICAgbWFwcGVyOiB7XG4gICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcInZhbHVlXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihwYXJhbWV0ZXIpLCBcInBhdGgudG8ucGFyYW1ldGVyLnZhbHVlXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCByZXR1cm4gdGhlIGVzY2FwZWQgZG90dGVkIHZlcnNpb24gb2YgcGFyYW1ldGVyUGF0aCB3aGVuIHBhcmFtZXRlclBhdGggaXMgYSBzdHJpbmdbXSB3aXRoIGRvdHNcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtZXRlcjogT3BlcmF0aW9uUGFyYW1ldGVyID0ge1xuICAgICAgcGFyYW1ldGVyUGF0aDogW1wicGEudGhcIiwgXCJ0b1wiLCBcInBhci5hbWV0ZXJcIiwgXCJ2YWx1LmVcIl0sXG4gICAgICBtYXBwZXI6IHtcbiAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwidmFsdWVcIixcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKHBhcmFtZXRlciksIFwicGEudGgudG8ucGFyLmFtZXRlci52YWx1LmVcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHJldHVybiB0aGUgbWFwcGVyJ3Mgc2VyaWFsaXplZCBuYW1lIHdoZW4gdGhlIHBhcmFtZXRlclBhdGggaXMgYW4gb2JqZWN0XCIsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbWV0ZXI6IE9wZXJhdGlvblBhcmFtZXRlciA9IHtcbiAgICAgIHBhcmFtZXRlclBhdGg6IHtcbiAgICAgICAgYTogXCJBXCIsXG4gICAgICAgIGI6IFwiQlwiLFxuICAgICAgfSxcbiAgICAgIG1hcHBlcjoge1xuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXIocGFyYW1ldGVyKSwgXCJ2YWx1ZVwiKTtcbiAgfSk7XG59KTtcbiJdfQ==
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9vcGVyYXRpb25QYXJhbWV0ZXJUZXN0cy50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9vcGVyYXRpb25QYXJhbWV0ZXJUZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7QUFFL0YsNkJBQThCO0FBQzlCLGdFQUEyRjtBQUUzRixRQUFRLENBQUMsMEJBQTBCLEVBQUU7SUFDbkMsRUFBRSxDQUFDLG1DQUFtQyxFQUFFO1FBQ3RDLGFBQU0sQ0FBQyxNQUFNLENBQUMsY0FBTSxPQUFBLCtDQUEwQixDQUFDLFNBQWdCLENBQUMsRUFBNUMsQ0FBNEMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhCQUE4QixFQUFFO1FBQ2pDLDJDQUEyQztRQUMzQyxhQUFNLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSwrQ0FBMEIsQ0FBQyxJQUFXLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNFQUFzRSxFQUFFO1FBQ3pFLElBQU0sU0FBUyxHQUF1QjtZQUNwQyxhQUFhLEVBQUUsc0JBQXNCO1lBQ3JDLE1BQU0sRUFBRTtnQkFDTixjQUFjLEVBQUUsT0FBTztnQkFDdkIsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxRQUFRO2lCQUNmO2FBQ0Y7U0FDRixDQUFDO1FBQ0YsYUFBTSxDQUFDLFdBQVcsQ0FBQywrQ0FBMEIsQ0FBQyxTQUFTLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3BGLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9GQUFvRixFQUFFO1FBQ3ZGLElBQU0sU0FBUyxHQUF1QjtZQUNwQyxhQUFhLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUM7WUFDbkQsTUFBTSxFQUFFO2dCQUNOLGNBQWMsRUFBRSxPQUFPO2dCQUN2QixJQUFJLEVBQUU7b0JBQ0osSUFBSSxFQUFFLFFBQVE7aUJBQ2Y7YUFDRjtTQUNGLENBQUM7UUFDRixhQUFNLENBQUMsV0FBVyxDQUFDLCtDQUEwQixDQUFDLFNBQVMsQ0FBQyxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDdkYsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0dBQXNHLEVBQUU7UUFDekcsSUFBTSxTQUFTLEdBQXVCO1lBQ3BDLGFBQWEsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQztZQUN0RCxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLE9BQU87Z0JBQ3ZCLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsUUFBUTtpQkFDZjthQUNGO1NBQ0YsQ0FBQztRQUNGLGFBQU0sQ0FBQyxXQUFXLENBQUMsK0NBQTBCLENBQUMsU0FBUyxDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztJQUMxRixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnRkFBZ0YsRUFBRTtRQUNuRixJQUFNLFNBQVMsR0FBdUI7WUFDcEMsYUFBYSxFQUFFO2dCQUNiLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2FBQ1A7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLE9BQU87Z0JBQ3ZCLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsUUFBUTtpQkFDZjthQUNGO1NBQ0YsQ0FBQztRQUNGLGFBQU0sQ0FBQyxXQUFXLENBQUMsK0NBQTBCLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyLCBPcGVyYXRpb25QYXJhbWV0ZXIgfSBmcm9tIFwiLi4vbGliL29wZXJhdGlvblBhcmFtZXRlclwiO1xuXG5kZXNjcmliZShcImdldFBhcmFtZXRlclBhdGhTdHJpbmcoKVwiLCAoKSA9PiB7XG4gIGl0KFwic2hvdWxkIHRocm93IHdoZW4gZ2l2ZW4gdW5kZWZpbmVkXCIsICgpID0+IHtcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKHVuZGVmaW5lZCBhcyBhbnkpKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgdGhyb3cgd2hlbiBnaXZlbiBudWxsXCIsICgpID0+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgYXNzZXJ0LnRocm93cygoKSA9PiBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihudWxsIGFzIGFueSkpO1xuICB9KTtcblxuICBpdChcInNob3VsZCByZXR1cm4gdGhlIHBhcmFtZXRlclBhdGggdmFsdWUgd2hlbiBwYXJhbWV0ZXJQYXRoIGlzIGEgc3RyaW5nXCIsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbWV0ZXI6IE9wZXJhdGlvblBhcmFtZXRlciA9IHtcbiAgICAgIHBhcmFtZXRlclBhdGg6IFwicGF0aFRvUGFyYW1ldGVyVmFsdWVcIixcbiAgICAgIG1hcHBlcjoge1xuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXIocGFyYW1ldGVyKSwgXCJwYXRoVG9QYXJhbWV0ZXJWYWx1ZVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcmV0dXJuIHRoZSBkb3R0ZWQgdmVyc2lvbiBvZiBwYXJhbWV0ZXJQYXRoIHdoZW4gcGFyYW1ldGVyUGF0aCBpcyBhIHN0cmluZ1tdXCIsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbWV0ZXI6IE9wZXJhdGlvblBhcmFtZXRlciA9IHtcbiAgICAgIHBhcmFtZXRlclBhdGg6IFtcInBhdGhcIiwgXCJ0b1wiLCBcInBhcmFtZXRlclwiLCBcInZhbHVlXCJdLFxuICAgICAgbWFwcGVyOiB7XG4gICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcInZhbHVlXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihwYXJhbWV0ZXIpLCBcInBhdGgudG8ucGFyYW1ldGVyLnZhbHVlXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCByZXR1cm4gdGhlIGVzY2FwZWQgZG90dGVkIHZlcnNpb24gb2YgcGFyYW1ldGVyUGF0aCB3aGVuIHBhcmFtZXRlclBhdGggaXMgYSBzdHJpbmdbXSB3aXRoIGRvdHNcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtZXRlcjogT3BlcmF0aW9uUGFyYW1ldGVyID0ge1xuICAgICAgcGFyYW1ldGVyUGF0aDogW1wicGEudGhcIiwgXCJ0b1wiLCBcInBhci5hbWV0ZXJcIiwgXCJ2YWx1LmVcIl0sXG4gICAgICBtYXBwZXI6IHtcbiAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwidmFsdWVcIixcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKHBhcmFtZXRlciksIFwicGEudGgudG8ucGFyLmFtZXRlci52YWx1LmVcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHJldHVybiB0aGUgbWFwcGVyJ3Mgc2VyaWFsaXplZCBuYW1lIHdoZW4gdGhlIHBhcmFtZXRlclBhdGggaXMgYW4gb2JqZWN0XCIsICgpID0+IHtcbiAgICBjb25zdCBwYXJhbWV0ZXI6IE9wZXJhdGlvblBhcmFtZXRlciA9IHtcbiAgICAgIHBhcmFtZXRlclBhdGg6IHtcbiAgICAgICAgYTogXCJBXCIsXG4gICAgICAgIGI6IFwiQlwiLFxuICAgICAgfSxcbiAgICAgIG1hcHBlcjoge1xuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXIocGFyYW1ldGVyKSwgXCJ2YWx1ZVwiKTtcbiAgfSk7XG59KTtcbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/policies/agentPolicyTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9wb2xpY2llcy9hZ2VudFBvbGljeVRlc3RzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy90ZXN0L3BvbGljaWVzL2FnZW50UG9saWN5VGVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRixnQ0FBOEI7QUFFOUIsa0VBQXdFO0FBQ3hFLHFEQUFxRTtBQUNyRSxxREFBb0Q7QUFDcEQsOERBQTBFO0FBQzFFLHdDQUE0RDtBQUU1RCxRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3RCLElBQU0sa0JBQWtCLEdBQUc7UUFDekIsV0FBVyxFQUFFLFVBQUMsQ0FBa0I7WUFDOUIsT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNkLE9BQU8sRUFBRSxJQUFJLHlCQUFXLEVBQUU7Z0JBQzFCLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE9BQU8sRUFBRSxJQUFJLHlCQUFXLENBQUMsU0FBUyxDQUFDO2FBQ3BDLENBQUM7UUFKRixDQUlFO0tBQ0wsQ0FBQztJQUVGLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxvQ0FBb0IsRUFBRSxDQUFDO0lBRXRELHVCQUFZLENBQUMsYUFBYSxFQUFFO1FBQzFCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFL0IsSUFBTSxhQUFhLEdBQWtCO1lBQ25DLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDdEIsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtTQUN6QixDQUFDO1FBRUYsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1lBQzFDLElBQU0sT0FBTyxHQUFHLHlCQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFM0MsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBZ0IsQ0FBQztZQUVyRixNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpREFBaUQsRUFBRTtZQUNwRCxJQUFNLE1BQU0sR0FBRyxJQUFJLHlCQUFXLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFdEYsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsaURBQWlELEVBQUU7Ozs7Ozs0QkFDOUMsTUFBTSxHQUFHLElBQUkseUJBQVcsQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLENBQUMsQ0FBQzs0QkFDaEYsT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDOzRCQUVsQyxxQkFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFBOzs0QkFBakMsU0FBaUMsQ0FBQzs0QkFFbEMsT0FBTyxDQUFDLGFBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7Ozs7O1NBQzVELENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx1REFBdUQsRUFBRTs7Ozs7OzRCQUNwRCxNQUFNLEdBQUcsSUFBSSx5QkFBVyxDQUFDLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxDQUFDOzRCQUVoRixPQUFPLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7NEJBQzVCLDRCQUE0QixHQUFHO2dDQUNuQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDO2dDQUN6QyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDOzZCQUMzQyxDQUFDOzRCQUNGLE9BQU8sQ0FBQyxhQUFhLEdBQUcsNEJBQTRCLENBQUM7NEJBRXJELHFCQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUE7OzRCQUFqQyxTQUFpQyxDQUFDOzRCQUVsQyxPQUFPLENBQUMsYUFBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDOzs7OztTQUMzRSxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILDBCQUFlLENBQUMsYUFBYSxFQUFFO1FBQzdCLEVBQUUsQ0FBQyxpREFBaUQsRUFBRTtZQUNwRCxJQUFNLGFBQWEsR0FBRyxFQUFtQixDQUFDO1lBQzFDLElBQU0sU0FBUyxHQUFHO2dCQUNoQixPQUFBLElBQUkseUJBQVcsQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLENBQUM7WUFBdEUsQ0FBc0UsQ0FBQztZQUN6RSxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IFwiY2hhaS9yZWdpc3Rlci1zaG91bGRcIjtcbmltcG9ydCB7IEFnZW50U2V0dGluZ3MgfSBmcm9tIFwiLi4vLi4vbGliL3NlcnZpY2VDbGllbnRcIjtcbmltcG9ydCB7IFJlcXVlc3RQb2xpY3lPcHRpb25zIH0gZnJvbSBcIi4uLy4uL2xpYi9wb2xpY2llcy9yZXF1ZXN0UG9saWN5XCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZSwgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uLy4uL2xpYi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi4vLi4vbGliL2h0dHBIZWFkZXJzXCI7XG5pbXBvcnQgeyBhZ2VudFBvbGljeSwgQWdlbnRQb2xpY3kgfSBmcm9tIFwiLi4vLi4vbGliL3BvbGljaWVzL2FnZW50UG9saWN5XCI7XG5pbXBvcnQgeyBub2RlRGVzY3JpYmUsIGJyb3dzZXJEZXNjcmliZSB9IGZyb20gXCIuLi9tc0Fzc2VydFwiO1xuXG5kZXNjcmliZShcIkFnZW50UG9saWN5XCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgZW1wdHlSZXF1ZXN0UG9saWN5ID0ge1xuICAgIHNlbmRSZXF1ZXN0OiAoXzogV2ViUmVzb3VyY2VMaWtlKSA9PlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgcmVxdWVzdDogbmV3IFdlYlJlc291cmNlKCksXG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnModW5kZWZpbmVkKSxcbiAgICAgIH0pLFxuICB9O1xuXG4gIGNvbnN0IGVtcHR5UG9saWN5T3B0aW9ucyA9IG5ldyBSZXF1ZXN0UG9saWN5T3B0aW9ucygpO1xuXG4gIG5vZGVEZXNjcmliZShcImZvciBOb2RlLmpzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG4gICAgY29uc3QgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cbiAgICBjb25zdCBhZ2VudFNldHRpbmdzOiBBZ2VudFNldHRpbmdzID0ge1xuICAgICAgaHR0cDogbmV3IGh0dHAuQWdlbnQoKSxcbiAgICAgIGh0dHBzOiBuZXcgaHR0cHMuQWdlbnQoKSxcbiAgICB9O1xuXG4gICAgaXQoXCJmYWN0b3J5IHBhc3NlcyBjb3JyZWN0IGFnZW50IHNldHRpbmdzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGZhY3RvcnkgPSBhZ2VudFBvbGljeShhZ2VudFNldHRpbmdzKTtcblxuICAgICAgY29uc3QgcG9saWN5ID0gZmFjdG9yeS5jcmVhdGUoZW1wdHlSZXF1ZXN0UG9saWN5LCBlbXB0eVBvbGljeU9wdGlvbnMpIGFzIEFnZW50UG9saWN5O1xuXG4gICAgICBwb2xpY3kuYWdlbnRTZXR0aW5ncy5zaG91bGQuYmUuZGVlcC5lcXVhbChhZ2VudFNldHRpbmdzKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2V0cyBjb3JyZWN0IGFnZW50IHNldHRpbmdzIHRocm91Z2ggY29uc3RydWN0b3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcG9saWN5ID0gbmV3IEFnZW50UG9saWN5KGVtcHR5UmVxdWVzdFBvbGljeSwgZW1wdHlQb2xpY3lPcHRpb25zLCBhZ2VudFNldHRpbmdzKTtcblxuICAgICAgcG9saWN5LmFnZW50U2V0dGluZ3Muc2hvdWxkLmJlLmRlZXAuZXF1YWwoYWdlbnRTZXR0aW5ncyk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBhc3NpZ24gYWdlbnQgc2V0dGluZ3MgdG8gdGhlIHdlYiByZXF1ZXN0XCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHBvbGljeSA9IG5ldyBBZ2VudFBvbGljeShlbXB0eVJlcXVlc3RQb2xpY3ksIGVtcHR5UG9saWN5T3B0aW9ucywgYWdlbnRTZXR0aW5ncyk7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFdlYlJlc291cmNlKCk7XG5cbiAgICAgIGF3YWl0IHBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcblxuICAgICAgcmVxdWVzdC5hZ2VudFNldHRpbmdzIS5zaG91bGQuYmUuZGVlcC5lcXVhbChhZ2VudFNldHRpbmdzKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIG5vdCBvdmVycmlkZSBhZ2VudCBzZXR0aW5ncyB0byB0aGUgd2ViIHJlcXVlc3RcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcG9saWN5ID0gbmV3IEFnZW50UG9saWN5KGVtcHR5UmVxdWVzdFBvbGljeSwgZW1wdHlQb2xpY3lPcHRpb25zLCBhZ2VudFNldHRpbmdzKTtcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXNvdXJjZSgpO1xuICAgICAgY29uc3QgcmVxdWVzdFNwZWNpZmljQWdlbnRTZXR0aW5ncyA9IHtcbiAgICAgICAgaHR0cDogbmV3IGh0dHAuQWdlbnQoeyBrZWVwQWxpdmU6IHRydWUgfSksXG4gICAgICAgIGh0dHBzOiBuZXcgaHR0cC5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KSxcbiAgICAgIH07XG4gICAgICByZXF1ZXN0LmFnZW50U2V0dGluZ3MgPSByZXF1ZXN0U3BlY2lmaWNBZ2VudFNldHRpbmdzO1xuXG4gICAgICBhd2FpdCBwb2xpY3kuc2VuZFJlcXVlc3QocmVxdWVzdCk7XG5cbiAgICAgIHJlcXVlc3QuYWdlbnRTZXR0aW5ncyEuc2hvdWxkLmJlLmRlZXAuZXF1YWwocmVxdWVzdFNwZWNpZmljQWdlbnRTZXR0aW5ncyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGJyb3dzZXJEZXNjcmliZShcImZvciBicm93c2VyXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCB0aHJvdyBhbiBFcnJvciB3aGlsZSBjb25zdHJ1Y3Rpbmcgb2JqZWN0XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGFnZW50U2V0dGluZ3MgPSB7fSBhcyBBZ2VudFNldHRpbmdzO1xuICAgICAgY29uc3QgY29uc3RydWN0ID0gKCkgPT5cbiAgICAgICAgbmV3IEFnZW50UG9saWN5KGVtcHR5UmVxdWVzdFBvbGljeSwgZW1wdHlQb2xpY3lPcHRpb25zLCBhZ2VudFNldHRpbmdzKTtcbiAgICAgIGNvbnN0cnVjdC5zaG91bGQudGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9wb2xpY2llcy9hZ2VudFBvbGljeVRlc3RzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy90ZXN0L3BvbGljaWVzL2FnZW50UG9saWN5VGVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQUUvRixnQ0FBOEI7QUFFOUIsa0VBQXdFO0FBQ3hFLHFEQUFxRTtBQUNyRSxxREFBb0Q7QUFDcEQsOERBQTBFO0FBQzFFLHdDQUE0RDtBQUU1RCxRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3RCLElBQU0sa0JBQWtCLEdBQUc7UUFDekIsV0FBVyxFQUFFLFVBQUMsQ0FBa0I7WUFDOUIsT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNkLE9BQU8sRUFBRSxJQUFJLHlCQUFXLEVBQUU7Z0JBQzFCLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE9BQU8sRUFBRSxJQUFJLHlCQUFXLENBQUMsU0FBUyxDQUFDO2FBQ3BDLENBQUM7UUFKRixDQUlFO0tBQ0wsQ0FBQztJQUVGLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxvQ0FBb0IsRUFBRSxDQUFDO0lBRXRELHVCQUFZLENBQUMsYUFBYSxFQUFFO1FBQzFCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFL0IsSUFBTSxhQUFhLEdBQWtCO1lBQ25DLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDdEIsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtTQUN6QixDQUFDO1FBRUYsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1lBQzFDLElBQU0sT0FBTyxHQUFHLHlCQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFM0MsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBZ0IsQ0FBQztZQUVyRixNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpREFBaUQsRUFBRTtZQUNwRCxJQUFNLE1BQU0sR0FBRyxJQUFJLHlCQUFXLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFdEYsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsaURBQWlELEVBQUU7Ozs7Ozs0QkFDOUMsTUFBTSxHQUFHLElBQUkseUJBQVcsQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLENBQUMsQ0FBQzs0QkFDaEYsT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDOzRCQUVsQyxxQkFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFBOzs0QkFBakMsU0FBaUMsQ0FBQzs0QkFFbEMsT0FBTyxDQUFDLGFBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7Ozs7O1NBQzVELENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx1REFBdUQsRUFBRTs7Ozs7OzRCQUNwRCxNQUFNLEdBQUcsSUFBSSx5QkFBVyxDQUFDLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxDQUFDOzRCQUVoRixPQUFPLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7NEJBQzVCLDRCQUE0QixHQUFHO2dDQUNuQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDO2dDQUN6QyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDOzZCQUMzQyxDQUFDOzRCQUNGLE9BQU8sQ0FBQyxhQUFhLEdBQUcsNEJBQTRCLENBQUM7NEJBRXJELHFCQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUE7OzRCQUFqQyxTQUFpQyxDQUFDOzRCQUVsQyxPQUFPLENBQUMsYUFBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDOzs7OztTQUMzRSxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILDBCQUFlLENBQUMsYUFBYSxFQUFFO1FBQzdCLEVBQUUsQ0FBQyxpREFBaUQsRUFBRTtZQUNwRCxJQUFNLGFBQWEsR0FBRyxFQUFtQixDQUFDO1lBQzFDLElBQU0sU0FBUyxHQUFHO2dCQUNoQixPQUFBLElBQUkseUJBQVcsQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLENBQUM7WUFBdEUsQ0FBc0UsQ0FBQztZQUN6RSxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IFwiY2hhaS9yZWdpc3Rlci1zaG91bGRcIjtcbmltcG9ydCB7IEFnZW50U2V0dGluZ3MgfSBmcm9tIFwiLi4vLi4vbGliL3NlcnZpY2VDbGllbnRcIjtcbmltcG9ydCB7IFJlcXVlc3RQb2xpY3lPcHRpb25zIH0gZnJvbSBcIi4uLy4uL2xpYi9wb2xpY2llcy9yZXF1ZXN0UG9saWN5XCI7XG5pbXBvcnQgeyBXZWJSZXNvdXJjZSwgV2ViUmVzb3VyY2VMaWtlIH0gZnJvbSBcIi4uLy4uL2xpYi93ZWJSZXNvdXJjZVwiO1xuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi4vLi4vbGliL2h0dHBIZWFkZXJzXCI7XG5pbXBvcnQgeyBhZ2VudFBvbGljeSwgQWdlbnRQb2xpY3kgfSBmcm9tIFwiLi4vLi4vbGliL3BvbGljaWVzL2FnZW50UG9saWN5XCI7XG5pbXBvcnQgeyBub2RlRGVzY3JpYmUsIGJyb3dzZXJEZXNjcmliZSB9IGZyb20gXCIuLi9tc0Fzc2VydFwiO1xuXG5kZXNjcmliZShcIkFnZW50UG9saWN5XCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgZW1wdHlSZXF1ZXN0UG9saWN5ID0ge1xuICAgIHNlbmRSZXF1ZXN0OiAoXzogV2ViUmVzb3VyY2VMaWtlKSA9PlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgcmVxdWVzdDogbmV3IFdlYlJlc291cmNlKCksXG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnModW5kZWZpbmVkKSxcbiAgICAgIH0pLFxuICB9O1xuXG4gIGNvbnN0IGVtcHR5UG9saWN5T3B0aW9ucyA9IG5ldyBSZXF1ZXN0UG9saWN5T3B0aW9ucygpO1xuXG4gIG5vZGVEZXNjcmliZShcImZvciBOb2RlLmpzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG4gICAgY29uc3QgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cbiAgICBjb25zdCBhZ2VudFNldHRpbmdzOiBBZ2VudFNldHRpbmdzID0ge1xuICAgICAgaHR0cDogbmV3IGh0dHAuQWdlbnQoKSxcbiAgICAgIGh0dHBzOiBuZXcgaHR0cHMuQWdlbnQoKSxcbiAgICB9O1xuXG4gICAgaXQoXCJmYWN0b3J5IHBhc3NlcyBjb3JyZWN0IGFnZW50IHNldHRpbmdzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGZhY3RvcnkgPSBhZ2VudFBvbGljeShhZ2VudFNldHRpbmdzKTtcblxuICAgICAgY29uc3QgcG9saWN5ID0gZmFjdG9yeS5jcmVhdGUoZW1wdHlSZXF1ZXN0UG9saWN5LCBlbXB0eVBvbGljeU9wdGlvbnMpIGFzIEFnZW50UG9saWN5O1xuXG4gICAgICBwb2xpY3kuYWdlbnRTZXR0aW5ncy5zaG91bGQuYmUuZGVlcC5lcXVhbChhZ2VudFNldHRpbmdzKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2V0cyBjb3JyZWN0IGFnZW50IHNldHRpbmdzIHRocm91Z2ggY29uc3RydWN0b3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcG9saWN5ID0gbmV3IEFnZW50UG9saWN5KGVtcHR5UmVxdWVzdFBvbGljeSwgZW1wdHlQb2xpY3lPcHRpb25zLCBhZ2VudFNldHRpbmdzKTtcblxuICAgICAgcG9saWN5LmFnZW50U2V0dGluZ3Muc2hvdWxkLmJlLmRlZXAuZXF1YWwoYWdlbnRTZXR0aW5ncyk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBhc3NpZ24gYWdlbnQgc2V0dGluZ3MgdG8gdGhlIHdlYiByZXF1ZXN0XCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHBvbGljeSA9IG5ldyBBZ2VudFBvbGljeShlbXB0eVJlcXVlc3RQb2xpY3ksIGVtcHR5UG9saWN5T3B0aW9ucywgYWdlbnRTZXR0aW5ncyk7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFdlYlJlc291cmNlKCk7XG5cbiAgICAgIGF3YWl0IHBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcblxuICAgICAgcmVxdWVzdC5hZ2VudFNldHRpbmdzIS5zaG91bGQuYmUuZGVlcC5lcXVhbChhZ2VudFNldHRpbmdzKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIG5vdCBvdmVycmlkZSBhZ2VudCBzZXR0aW5ncyB0byB0aGUgd2ViIHJlcXVlc3RcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcG9saWN5ID0gbmV3IEFnZW50UG9saWN5KGVtcHR5UmVxdWVzdFBvbGljeSwgZW1wdHlQb2xpY3lPcHRpb25zLCBhZ2VudFNldHRpbmdzKTtcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXNvdXJjZSgpO1xuICAgICAgY29uc3QgcmVxdWVzdFNwZWNpZmljQWdlbnRTZXR0aW5ncyA9IHtcbiAgICAgICAgaHR0cDogbmV3IGh0dHAuQWdlbnQoeyBrZWVwQWxpdmU6IHRydWUgfSksXG4gICAgICAgIGh0dHBzOiBuZXcgaHR0cC5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KSxcbiAgICAgIH07XG4gICAgICByZXF1ZXN0LmFnZW50U2V0dGluZ3MgPSByZXF1ZXN0U3BlY2lmaWNBZ2VudFNldHRpbmdzO1xuXG4gICAgICBhd2FpdCBwb2xpY3kuc2VuZFJlcXVlc3QocmVxdWVzdCk7XG5cbiAgICAgIHJlcXVlc3QuYWdlbnRTZXR0aW5ncyEuc2hvdWxkLmJlLmRlZXAuZXF1YWwocmVxdWVzdFNwZWNpZmljQWdlbnRTZXR0aW5ncyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGJyb3dzZXJEZXNjcmliZShcImZvciBicm93c2VyXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCB0aHJvdyBhbiBFcnJvciB3aGlsZSBjb25zdHJ1Y3Rpbmcgb2JqZWN0XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGFnZW50U2V0dGluZ3MgPSB7fSBhcyBBZ2VudFNldHRpbmdzO1xuICAgICAgY29uc3QgY29uc3RydWN0ID0gKCkgPT5cbiAgICAgICAgbmV3IEFnZW50UG9saWN5KGVtcHR5UmVxdWVzdFBvbGljeSwgZW1wdHlQb2xpY3lPcHRpb25zLCBhZ2VudFNldHRpbmdzKTtcbiAgICAgIGNvbnN0cnVjdC5zaG91bGQudGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/policies/deserializationPolicyTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9wb2xpY2llcy9kZXNlcmlhbGl6YXRpb25Qb2xpY3lUZXN0cy50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9wb2xpY2llcy9kZXNlcmlhbGl6YXRpb25Qb2xpY3lUZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7O0FBRS9GLDZCQUE4QjtBQUM5QixxREFBb0Q7QUFFcEQsMkNBQXlFO0FBQ3pFLGtGQU1rRDtBQUNsRCxrRUFBdUY7QUFDdkYscURBQXFFO0FBRXJFLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRTtJQUNoQyxJQUFNLFVBQVUsR0FBa0I7UUFDaEMsV0FBVyxFQUFYLFVBQVksT0FBd0I7WUFDbEMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNyQixPQUFPLEVBQUUsT0FBTztnQkFDaEIsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsT0FBTyxFQUFFLElBQUkseUJBQVcsRUFBRTthQUMzQixDQUFDLENBQUM7UUFDTCxDQUFDO0tBQ0YsQ0FBQztJQUVGLEVBQUUsQ0FBQyw2REFBNkQsRUFBRTs7Ozs7O3dCQUMxRCxxQkFBcUIsR0FBRyxJQUFJLDZDQUFxQixDQUNyRCxVQUFVLEVBQ1YsRUFBRSxFQUNGLElBQUksb0NBQW9CLEVBQUUsQ0FDM0IsQ0FBQzt3QkFFSSxPQUFPLEdBQUcsYUFBYSxFQUFFLENBQUM7d0JBQ2hDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDO3dCQUU5QixxQkFBTSxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUE7O3dCQUFoRCxTQUFnRCxDQUFDO3dCQUNqRCxhQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7Ozs7O0tBQ2xELENBQUMsQ0FBQztJ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LENBQUM7QUFFSCxTQUFTLG1CQUFtQixDQUFDLFFBQStCO0lBQzFELE9BQU8sK0NBQXVCLENBQUMsK0NBQXVCLEVBQUUsOENBQXNCLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDNUYsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLGFBQTZCO0lBQ2xELElBQU0sT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3RDLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBIdHRwSGVhZGVycyB9IGZyb20gXCIuLi8uLi9saWIvaHR0cEhlYWRlcnNcIjtcbmltcG9ydCB7IEh0dHBPcGVyYXRpb25SZXNwb25zZSB9IGZyb20gXCIuLi8uLi9saWIvaHR0cE9wZXJhdGlvblJlc3BvbnNlXCI7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBPcGVyYXRpb25TcGVjLCBTZXJpYWxpemVyIH0gZnJvbSBcIi4uLy4uL2xpYi9tc1Jlc3RcIjtcbmltcG9ydCB7XG4gIERlc2VyaWFsaXphdGlvblBvbGljeSxcbiAgZGVzZXJpYWxpemF0aW9uUG9saWN5LFxuICBkZXNlcmlhbGl6ZVJlc3BvbnNlQm9keSxcbiAgZGVmYXVsdEpzb25Db250ZW50VHlwZXMsXG4gIGRlZmF1bHRYbWxDb250ZW50VHlwZXMsXG59IGZyb20gXCIuLi8uLi9saWIvcG9saWNpZXMvZGVzZXJpYWxpemF0aW9uUG9saWN5XCI7XG5pbXBvcnQgeyBSZXF1ZXN0UG9saWN5LCBSZXF1ZXN0UG9saWN5T3B0aW9ucyB9IGZyb20gXCIuLi8uLi9saWIvcG9saWNpZXMvcmVxdWVzdFBvbGljeVwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2UsIFdlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuLi8uLi9saWIvd2ViUmVzb3VyY2VcIjtcblxuZGVzY3JpYmUoXCJkZXNlcmlhbGl6YXRpb25Qb2xpY3lcIiwgZnVuY3Rpb24gKCkge1xuICBjb25zdCBtb2NrUG9saWN5OiBSZXF1ZXN0UG9saWN5ID0ge1xuICAgIHNlbmRSZXF1ZXN0KHJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycygpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcblxuICBpdChgc2hvdWxkIG5vdCBtb2RpZnkgYSByZXF1ZXN0IHRoYXQgaGFzIG5vIHJlcXVlc3QgYm9keSBtYXBwZXJgLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZGVzZXJpYWxpemF0aW9uUG9saWN5ID0gbmV3IERlc2VyaWFsaXphdGlvblBvbGljeShcbiAgICAgIG1vY2tQb2xpY3ksXG4gICAgICB7fSxcbiAgICAgIG5ldyBSZXF1ZXN0UG9saWN5T3B0aW9ucygpXG4gICAgKTtcblxuICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5ib2R5ID0gXCJoZWxsbyB0aGVyZSFcIjtcblxuICAgIGF3YWl0IGRlc2VyaWFsaXphdGlvblBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwocmVxdWVzdC5ib2R5LCBcImhlbGxvIHRoZXJlIVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcGFyc2UgYSBKU09OIHJlc3BvbnNlIGJvZHlcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSA9IGNyZWF0ZVJlcXVlc3QoKTtcbiAgICBjb25zdCBtb2NrQ2xpZW50OiBIdHRwQ2xpZW50ID0ge1xuICAgICAgc2VuZFJlcXVlc3Q6IChyZXEpID0+XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgcmVxdWVzdDogcmVxLFxuICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0pLFxuICAgICAgICAgIGJvZHlBc1RleHQ6IFwiWzEyMywgNDU2LCA3ODldXCIsXG4gICAgICAgIH0pLFxuICAgIH07XG5cbiAgICBjb25zdCBwb2xpY3kgPSBkZXNlcmlhbGl6YXRpb25Qb2xpY3koKS5jcmVhdGUobW9ja0NsaWVudCwgbmV3IFJlcXVlc3RQb2xpY3lPcHRpb25zKCkpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcG9saWN5LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIGFzc2VydC5kZWVwRXF1YWwocmVzcG9uc2UucGFyc2VkQm9keSwgWzEyMywgNDU2LCA3ODldKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcGFyc2UgYSBKU09OIHJlc3BvbnNlIGJvZHkgd2l0aCBhIGNoYXJzZXQgc3BlY2lmaWVkIGluIENvbnRlbnQtVHlwZVwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlID0gY3JlYXRlUmVxdWVzdCgpO1xuICAgIGNvbnN0IG1vY2tDbGllbnQ6IEh0dHBDbGllbnQgPSB7XG4gICAgICBzZW5kUmVxdWVzdDogKHJlcSkgPT5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICByZXF1ZXN0OiByZXEsXG4gICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIiB9KSxcbiAgICAgICAgICBib2R5QXNUZXh0OiBcIlsxMjMsIDQ1NiwgNzg5XVwiLFxuICAgICAgICB9KSxcbiAgICB9O1xuXG4gICAgY29uc3QgcG9saWN5ID0gZGVzZXJpYWxpemF0aW9uUG9saWN5KCkuY3JlYXRlKG1vY2tDbGllbnQsIG5ldyBSZXF1ZXN0UG9saWN5T3B0aW9ucygpKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICBhc3NlcnQuZGVlcEVxdWFsKHJlc3BvbnNlLnBhcnNlZEJvZHksIFsxMjMsIDQ1NiwgNzg5XSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHBhcnNlIGEgSlNPTiByZXNwb25zZSBib2R5IHdpdGggYW4gdXBwZXJjYXNlIENvbnRlbnQtVHlwZVwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdDogV2ViUmVzb3VyY2VMaWtlID0gY3JlYXRlUmVxdWVzdCgpO1xuICAgIGNvbnN0IG1vY2tDbGllbnQ6IEh0dHBDbGllbnQgPSB7XG4gICAgICBzZW5kUmVxdWVzdDogKHJlcSkgPT5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICByZXF1ZXN0OiByZXEsXG4gICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHsgXCJDb250ZW50LVR5cGVcIjogXCJBUFBMSUNBVElPTi9KU09OXCIgfSksXG4gICAgICAgICAgYm9keUFzVGV4dDogXCJbMTIzLCA0NTYsIDc4OV1cIixcbiAgICAgICAgfSksXG4gICAgfTtcblxuICAgIGNvbnN0IHBvbGljeSA9IGRlc2VyaWFsaXphdGlvblBvbGljeSgpLmNyZWF0ZShtb2NrQ2xpZW50LCBuZXcgUmVxdWVzdFBvbGljeU9wdGlvbnMoKSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwb2xpY3kuc2VuZFJlcXVlc3QocmVxdWVzdCk7XG4gICAgYXNzZXJ0LmRlZXBFcXVhbChyZXNwb25zZS5wYXJzZWRCb2R5LCBbMTIzLCA0NTYsIDc4OV0pO1xuICB9KTtcblxuICBpdChcInNob3VsZCBwYXJzZSBhIEpTT04gcmVzcG9uc2UgYm9keSB3aXRoIGEgbWlzc2luZyBDb250ZW50LVR5cGVcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlcXVlc3Q6IFdlYlJlc291cmNlTGlrZSA9IGNyZWF0ZVJlcXVlc3QoKTtcbiAgICBjb25zdCBtb2NrQ2xpZW50OiBIdHRwQ2xpZW50ID0ge1xuICAgICAgc2VuZFJlcXVlc3Q6IChyZXEpID0+XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgcmVxdWVzdDogcmVxLFxuICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycygpLFxuICAgICAgICAgIGJvZHlBc1RleHQ6IFwiWzEyMywgNDU2LCA3ODldXCIsXG4gICAgICAgIH0pLFxuICAgIH07XG5cbiAgICBjb25zdCBwb2xpY3kgPSBkZXNlcmlhbGl6YXRpb25Qb2xpY3koKS5jcmVhdGUobW9ja0NsaWVudCwgbmV3IFJlcXVlc3RQb2xpY3lPcHRpb25zKCkpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcG9saWN5LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIGFzc2VydC5kZWVwRXF1YWwocmVzcG9uc2UucGFyc2VkQm9keSwgWzEyMywgNDU2LCA3ODldKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoYHBhcnNlKEh0dHBPcGVyYXRpb25SZXNwb25zZSlgLCAoKSA9PiB7XG4gICAgaXQoYHdpdGggbm8gcmVzcG9uc2UgaGVhZGVycyBvciBib2R5YCwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IHtcbiAgICAgICAgcmVxdWVzdDogY3JlYXRlUmVxdWVzdCgpLFxuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKCksXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZXNlcmlhbGl6ZWRSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gYXdhaXQgZGVzZXJpYWxpemVSZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICAgIGFzc2VydChkZXNlcmlhbGl6ZWRSZXNwb25zZSk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLmJsb2JCb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLmJvZHlBc1RleHQsIHVuZGVmaW5lZCk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucGFyc2VkQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRIZWFkZXJzLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYHdpdGggeG1sIHJlc3BvbnNlIGJvZHksIGFwcGxpY2F0aW9uL3htbCBjb250ZW50LXR5cGUsIGJ1dCBubyBvcGVyYXRpb24gc3BlY2AsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgPSB7XG4gICAgICAgIHJlcXVlc3Q6IGNyZWF0ZVJlcXVlc3QoKSxcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94bWxcIixcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHlBc1RleHQ6IGA8ZnJ1aXQ+PGFwcGxlcz4zPC9hcHBsZXM+PC9mcnVpdD5gLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZGVzZXJpYWxpemVkUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IGF3YWl0IGRlc2VyaWFsaXplUmVzcG9uc2UocmVzcG9uc2UpO1xuXG4gICAgICBhc3NlcnQoZGVzZXJpYWxpemVkUmVzcG9uc2UpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnJlYWRhYmxlU3RyZWFtQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5ibG9iQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5ib2R5QXNUZXh0LCBgPGZydWl0PjxhcHBsZXM+MzwvYXBwbGVzPjwvZnJ1aXQ+YCk7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnBhcnNlZEJvZHksIHsgYXBwbGVzOiBcIjNcIiB9KTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRIZWFkZXJzLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYHdpdGggeG1sIHJlc3BvbnNlIGJvZHkgd2l0aCBjaGlsZCBlbGVtZW50IHdpdGggYXR0cmlidXRlcyBhbmQgdmFsdWUsIGFwcGxpY2F0aW9uL3htbCBjb250ZW50LXR5cGUsIGJ1dCBubyBvcGVyYXRpb24gc3BlY2AsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgPSB7XG4gICAgICAgIHJlcXVlc3Q6IGNyZWF0ZVJlcXVlc3QoKSxcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94bWxcIixcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHlBc1RleHQ6IGA8ZnJ1aXQ+PGFwcGxlcyB0YXN0eT1cInllc1wiPjM8L2FwcGxlcz48L2ZydWl0PmAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZXNlcmlhbGl6ZWRSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gYXdhaXQgZGVzZXJpYWxpemVSZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICAgIGFzc2VydChkZXNlcmlhbGl6ZWRSZXNwb25zZSk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLmJsb2JCb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgICAgICBkZXNlcmlhbGl6ZWRSZXNwb25zZS5ib2R5QXNUZXh0LFxuICAgICAgICBgPGZydWl0PjxhcHBsZXMgdGFzdHk9XCJ5ZXNcIj4zPC9hcHBsZXM+PC9mcnVpdD5gXG4gICAgICApO1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRCb2R5LCB7XG4gICAgICAgIGFwcGxlczoge1xuICAgICAgICAgICQ6IHtcbiAgICAgICAgICAgIHRhc3R5OiBcInllc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXzogXCIzXCIsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRIZWFkZXJzLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYHdpdGggeG1sIHJlc3BvbnNlIGJvZHksIGFwcGxpY2F0aW9uL3htbCBjb250ZW50LXR5cGUsIGFuZCBvcGVyYXRpb24gc3BlYyBmb3Igb25seSBTdHJpbmcgdmFsdWVgLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCByZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0ge1xuICAgICAgICByZXF1ZXN0OiBjcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICBodHRwTWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgIHNlcmlhbGl6ZXI6IG5ldyBTZXJpYWxpemVyKHt9LCB0cnVlKSxcbiAgICAgICAgICByZXNwb25zZXM6IHtcbiAgICAgICAgICAgIDIwMDoge1xuICAgICAgICAgICAgICBib2R5TWFwcGVyOiB7XG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJmcnVpdFwiLFxuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImZydWl0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJGcnVpdFwiLFxuICAgICAgICAgICAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxlczoge1xuICAgICAgICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiYXBwbGVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiYXBwbGVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94bWxcIixcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHlBc1RleHQ6IGA8ZnJ1aXQ+PGFwcGxlcyB0YXN0eT1cInllc1wiPjM8L2FwcGxlcz48L2ZydWl0PmAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZXNlcmlhbGl6ZWRSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gYXdhaXQgZGVzZXJpYWxpemVSZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICAgIGFzc2VydChkZXNlcmlhbGl6ZWRSZXNwb25zZSk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLmJsb2JCb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgICAgICBkZXNlcmlhbGl6ZWRSZXNwb25zZS5ib2R5QXNUZXh0LFxuICAgICAgICBgPGZydWl0PjxhcHBsZXMgdGFzdHk9XCJ5ZXNcIj4zPC9hcHBsZXM+PC9mcnVpdD5gXG4gICAgICApO1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRCb2R5LCB7IGFwcGxlczogXCIzXCIgfSk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucGFyc2VkSGVhZGVycywgdW5kZWZpbmVkKTtcbiAgICB9KTtcblxuICAgIGl0KGB3aXRoIHhtbCByZXNwb25zZSBib2R5LCBhcHBsaWNhdGlvbi94bWwgY29udGVudC10eXBlLCBhbmQgb3BlcmF0aW9uIHNwZWMgZm9yIG9ubHkgbnVtYmVyIHZhbHVlYCwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IHtcbiAgICAgICAgcmVxdWVzdDogY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgaHR0cE1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICBzZXJpYWxpemVyOiBuZXcgU2VyaWFsaXplcih7fSwgdHJ1ZSksXG4gICAgICAgICAgcmVzcG9uc2VzOiB7XG4gICAgICAgICAgICAyMDA6IHtcbiAgICAgICAgICAgICAgYm9keU1hcHBlcjoge1xuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZnJ1aXRcIixcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJmcnVpdFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiRnJ1aXRcIixcbiAgICAgICAgICAgICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgICBhcHBsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImFwcGxlc1wiLFxuICAgICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImFwcGxlc1wiLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24veG1sXCIsXG4gICAgICAgIH0pLFxuICAgICAgICBib2R5QXNUZXh0OiBgPGZydWl0PjxhcHBsZXMgdGFzdHk9XCJ5ZXNcIj4zPC9hcHBsZXM+PC9mcnVpdD5gLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZGVzZXJpYWxpemVkUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IGF3YWl0IGRlc2VyaWFsaXplUmVzcG9uc2UocmVzcG9uc2UpO1xuXG4gICAgICBhc3NlcnQoZGVzZXJpYWxpemVkUmVzcG9uc2UpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnJlYWRhYmxlU3RyZWFtQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5ibG9iQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChcbiAgICAgICAgZGVzZXJpYWxpemVkUmVzcG9uc2UuYm9keUFzVGV4dCxcbiAgICAgICAgYDxmcnVpdD48YXBwbGVzIHRhc3R5PVwieWVzXCI+MzwvYXBwbGVzPjwvZnJ1aXQ+YFxuICAgICAgKTtcbiAgICAgIGFzc2VydC5kZWVwRXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucGFyc2VkQm9keSwgeyBhcHBsZXM6IDMgfSk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucGFyc2VkSGVhZGVycywgdW5kZWZpbmVkKTtcbiAgICB9KTtcblxuICAgIGl0KGB3aXRoIHhtbCByZXNwb25zZSBib2R5LCBhcHBsaWNhdGlvbi94bWwgY29udGVudC10eXBlLCBhbmQgb3BlcmF0aW9uIHNwZWMgZm9yIG9ubHkgaGVhZGVyc2AsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgPSB7XG4gICAgICAgIHJlcXVlc3Q6IGNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgIGh0dHBNZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgc2VyaWFsaXplcjogbmV3IFNlcmlhbGl6ZXIoe30sIHRydWUpLFxuICAgICAgICAgIHJlc3BvbnNlczoge1xuICAgICAgICAgICAgMjAwOiB7XG4gICAgICAgICAgICAgIGJvZHlNYXBwZXI6IHtcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImZydWl0XCIsXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZnJ1aXRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkZydWl0XCIsXG4gICAgICAgICAgICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgeG1sTmFtZTogXCJhcHBsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJhcHBsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkFwcGxlc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc3R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ0YXN0eVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbElzQXR0cmlidXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcInRhc3R5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94bWxcIixcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHlBc1RleHQ6IGA8ZnJ1aXQ+PGFwcGxlcyB0YXN0eT1cInllc1wiPjM8L2FwcGxlcz48L2ZydWl0PmAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZXNlcmlhbGl6ZWRSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gYXdhaXQgZGVzZXJpYWxpemVSZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICAgIGFzc2VydChkZXNlcmlhbGl6ZWRSZXNwb25zZSk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLmJsb2JCb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgICAgICBkZXNlcmlhbGl6ZWRSZXNwb25zZS5ib2R5QXNUZXh0LFxuICAgICAgICBgPGZydWl0PjxhcHBsZXMgdGFzdHk9XCJ5ZXNcIj4zPC9hcHBsZXM+PC9mcnVpdD5gXG4gICAgICApO1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRCb2R5LCB7IGFwcGxlczogeyB0YXN0eTogXCJ5ZXNcIiB9IH0pO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnBhcnNlZEhlYWRlcnMsIHVuZGVmaW5lZCk7XG4gICAgfSk7XG5cbiAgICBpdChgd2l0aCB4bWwgcmVzcG9uc2UgYm9keSwgYXBwbGljYXRpb24vYXRvbSt4bWwgY29udGVudC10eXBlLCBidXQgbm8gb3BlcmF0aW9uIHNwZWNgLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCByZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0ge1xuICAgICAgICByZXF1ZXN0OiBjcmVhdGVSZXF1ZXN0KCksXG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vYXRvbSt4bWxcIixcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHlBc1RleHQ6IGA8ZnJ1aXQ+PGFwcGxlcz4zPC9hcHBsZXM+PC9mcnVpdD5gLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZGVzZXJpYWxpemVkUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IGF3YWl0IGRlc2VyaWFsaXplUmVzcG9uc2UocmVzcG9uc2UpO1xuXG4gICAgICBhc3NlcnQoZGVzZXJpYWxpemVkUmVzcG9uc2UpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnJlYWRhYmxlU3RyZWFtQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5ibG9iQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5ib2R5QXNUZXh0LCBgPGZydWl0PjxhcHBsZXM+MzwvYXBwbGVzPjwvZnJ1aXQ+YCk7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnBhcnNlZEJvZHksIHsgYXBwbGVzOiBcIjNcIiB9KTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRIZWFkZXJzLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYHdpdGggeG1sIHByb3BlcnR5IHdpdGggYXR0cmlidXRlIGFuZCB2YWx1ZSwgYXBwbGljYXRpb24vYXRvbSt4bWwgY29udGVudC10eXBlLCBidXQgbm8gb3BlcmF0aW9uIHNwZWNgLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCByZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0ge1xuICAgICAgICByZXF1ZXN0OiBjcmVhdGVSZXF1ZXN0KCksXG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vYXRvbSt4bWxcIixcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHlBc1RleHQ6IGA8ZnJ1aXQ+PGFwcGxlcyB0YXN0ZT1cImdvb2RcIj4zPC9hcHBsZXM+PC9mcnVpdD5gLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZGVzZXJpYWxpemVkUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IGF3YWl0IGRlc2VyaWFsaXplUmVzcG9uc2UocmVzcG9uc2UpO1xuXG4gICAgICBhc3NlcnQoZGVzZXJpYWxpemVkUmVzcG9uc2UpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnJlYWRhYmxlU3RyZWFtQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5ibG9iQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChcbiAgICAgICAgZGVzZXJpYWxpemVkUmVzcG9uc2UuYm9keUFzVGV4dCxcbiAgICAgICAgYDxmcnVpdD48YXBwbGVzIHRhc3RlPVwiZ29vZFwiPjM8L2FwcGxlcz48L2ZydWl0PmBcbiAgICAgICk7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnBhcnNlZEJvZHksIHtcbiAgICAgICAgYXBwbGVzOiB7XG4gICAgICAgICAgJDoge1xuICAgICAgICAgICAgdGFzdGU6IFwiZ29vZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXzogXCIzXCIsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRIZWFkZXJzLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYHdpdGggeG1sIHByb3BlcnR5IHdpdGggYXR0cmlidXRlIGFuZCB2YWx1ZSwgbXkvd2VpcmQteG1sIGNvbnRlbnQtdHlwZSwgYnV0IG5vIG9wZXJhdGlvbiBzcGVjYCwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IHtcbiAgICAgICAgcmVxdWVzdDogY3JlYXRlUmVxdWVzdCgpLFxuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHtcbiAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcIm15L3dlaXJkLXhtbFwiLFxuICAgICAgICB9KSxcbiAgICAgICAgYm9keUFzVGV4dDogYDxmcnVpdD48YXBwbGVzIHRhc3RlPVwiZ29vZFwiPjM8L2FwcGxlcz48L2ZydWl0PmAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZXNlcmlhbGl6ZWRSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gYXdhaXQgZGVzZXJpYWxpemVSZXNwb25zZUJvZHkoXG4gICAgICAgIFtdLFxuICAgICAgICBbXCJteS93ZWlyZC14bWxcIl0sXG4gICAgICAgIHJlc3BvbnNlXG4gICAgICApO1xuXG4gICAgICBhc3NlcnQoZGVzZXJpYWxpemVkUmVzcG9uc2UpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnJlYWRhYmxlU3RyZWFtQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5ibG9iQm9keSwgdW5kZWZpbmVkKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChcbiAgICAgICAgZGVzZXJpYWxpemVkUmVzcG9uc2UuYm9keUFzVGV4dCxcbiAgICAgICAgYDxmcnVpdD48YXBwbGVzIHRhc3RlPVwiZ29vZFwiPjM8L2FwcGxlcz48L2ZydWl0PmBcbiAgICAgICk7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLnBhcnNlZEJvZHksIHtcbiAgICAgICAgYXBwbGVzOiB7XG4gICAgICAgICAgJDoge1xuICAgICAgICAgICAgdGFzdGU6IFwiZ29vZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXzogXCIzXCIsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRIZWFkZXJzLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoYHdpdGggc2VydmljZSBidXMgcmVzcG9uc2UgYm9keSwgYXBwbGljYXRpb24vYXRvbSt4bWwgY29udGVudC10eXBlLCBhbmQgbm8gb3BlcmF0aW9uU3BlY2AsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgPSB7XG4gICAgICAgIHJlcXVlc3Q6IGNyZWF0ZVJlcXVlc3QoKSxcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9hdG9tK3htbDt0eXBlPWVudHJ5O2NoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHlBc1RleHQ6IGA8ZW50cnkgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDA1L0F0b21cIj48aWQ+aHR0cHM6Ly9kYXNjaHVsdHRlc3QxLnNlcnZpY2VidXMud2luZG93cy5uZXQvdGVzdFF1ZXVlUGF0aC8/YXBpLXZlcnNpb249MjAxNy0wNCZhbXA7ZW5yaWNoPUZhbHNlPC9pZD48dGl0bGUgdHlwZT1cInRleHRcIj50ZXN0UXVldWVQYXRoPC90aXRsZT48cHVibGlzaGVkPjIwMTgtMTAtMDlUMTk6NTY6MzRaPC9wdWJsaXNoZWQ+PHVwZGF0ZWQ+MjAxOC0xMC0wOVQxOTo1NjozNVo8L3VwZGF0ZWQ+PGF1dGhvcj48bmFtZT5kYXNjaHVsdHRlc3QxPC9uYW1lPjwvYXV0aG9yPjxsaW5rIHJlbD1cInNlbGZcIiBocmVmPVwiaHR0cHM6Ly9kYXNjaHVsdHRlc3QxLnNlcnZpY2VidXMud2luZG93cy5uZXQvdGVzdFF1ZXVlUGF0aC8/YXBpLXZlcnNpb249MjAxNy0wNCZhbXA7ZW5yaWNoPUZhbHNlXCIvPjxjb250ZW50IHR5cGU9XCJhcHBsaWNhdGlvbi94bWxcIj48UXVldWVEZXNjcmlwdGlvbiB4bWxucz1cImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vbmV0c2VydmljZXMvMjAxMC8xMC9zZXJ2aWNlYnVzL2Nvbm5lY3RcIiB4bWxuczppPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIj48TG9ja0R1cmF0aW9uPlBUMU08L0xvY2tEdXJhdGlvbj48TWF4U2l6ZUluTWVnYWJ5dGVzPjEwMjQ8L01heFNpemVJbk1lZ2FieXRlcz48UmVxdWlyZXNEdXBsaWNhdGVEZXRlY3Rpb24+ZmFsc2U8L1JlcXVpcmVzRHVwbGljYXRlRGV0ZWN0aW9uPjxSZXF1aXJlc1Nlc3Npb24+ZmFsc2U8L1JlcXVpcmVzU2Vzc2lvbj48RGVmYXVsdE1lc3NhZ2VUaW1lVG9MaXZlPlAxNEQ8L0RlZmF1bHRNZXNzYWdlVGltZVRvTGl2ZT48RGVhZExldHRlcmluZ09uTWVzc2FnZUV4cGlyYXRpb24+ZmFsc2U8L0RlYWRMZXR0ZXJpbmdPbk1lc3NhZ2VFeHBpcmF0aW9uPjxEdXBsaWNhdGVEZXRlY3Rpb25IaXN0b3J5VGltZVdpbmRvdz5QVDEwTTwvRHVwbGljYXRlRGV0ZWN0aW9uSGlzdG9yeVRpbWVXaW5kb3c+PE1heERlbGl2ZXJ5Q291bnQ+MTA8L01heERlbGl2ZXJ5Q291bnQ+PEVuYWJsZUJhdGNoZWRPcGVyYXRpb25zPnRydWU8L0VuYWJsZUJhdGNoZWRPcGVyYXRpb25zPjxTaXplSW5CeXRlcz4wPC9TaXplSW5CeXRlcz48TWVzc2FnZUNvdW50PjA8L01lc3NhZ2VDb3VudD48SXNBbm9ueW1vdXNBY2Nlc3NpYmxlPmZhbHNlPC9Jc0Fub255bW91c0FjY2Vzc2libGU+PEF1dGhvcml6YXRpb25SdWxlcz48L0F1dGhvcml6YXRpb25SdWxlcz48U3RhdHVzPkFjdGl2ZTwvU3RhdHVzPjxDcmVhdGVkQXQ+MjAxOC0xMC0wOVQxOTo1NjozNC45MDNaPC9DcmVhdGVkQXQ+PFVwZGF0ZWRBdD4yMDE4LTEwLTA5VDE5OjU2OjM1LjAxM1o8L1VwZGF0ZWRBdD48QWNjZXNzZWRBdD4wMDAxLTAxLTAxVDAwOjAwOjAwWjwvQWNjZXNzZWRBdD48U3VwcG9ydE9yZGVyaW5nPnRydWU8L1N1cHBvcnRPcmRlcmluZz48Q291bnREZXRhaWxzIHhtbG5zOmQycDE9XCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL25ldHNlcnZpY2VzLzIwMTEvMDYvc2VydmljZWJ1c1wiPjxkMnAxOkFjdGl2ZU1lc3NhZ2VDb3VudD4wPC9kMnAxOkFjdGl2ZU1lc3NhZ2VDb3VudD48ZDJwMTpEZWFkTGV0dGVyTWVzc2FnZUNvdW50PjA8L2QycDE6RGVhZExldHRlck1lc3NhZ2VDb3VudD48ZDJwMTpTY2hlZHVsZWRNZXNzYWdlQ291bnQ+MDwvZDJwMTpTY2hlZHVsZWRNZXNzYWdlQ291bnQ+PGQycDE6VHJhbnNmZXJNZXNzYWdlQ291bnQ+MDwvZDJwMTpUcmFuc2Zlck1lc3NhZ2VDb3VudD48ZDJwMTpUcmFuc2ZlckRlYWRMZXR0ZXJNZXNzYWdlQ291bnQ+MDwvZDJwMTpUcmFuc2ZlckRlYWRMZXR0ZXJNZXNzYWdlQ291bnQ+PC9Db3VudERldGFpbHM+PEF1dG9EZWxldGVPbklkbGU+UDEwNjc1MTk5RFQySDQ4TTUuNDc3NTgwN1M8L0F1dG9EZWxldGVPbklkbGU+PEVuYWJsZVBhcnRpdGlvbmluZz5mYWxzZTwvRW5hYmxlUGFydGl0aW9uaW5nPjxFbnRpdHlBdmFpbGFiaWxpdHlTdGF0dXM+QXZhaWxhYmxlPC9FbnRpdHlBdmFpbGFiaWxpdHlTdGF0dXM+PEVuYWJsZUV4cHJlc3M+ZmFsc2U8L0VuYWJsZUV4cHJlc3M+PC9RdWV1ZURlc2NyaXB0aW9uPjwvY29udGVudD48L2VudHJ5PmAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZXNlcmlhbGl6ZWRSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gYXdhaXQgZGVzZXJpYWxpemVSZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICAgIGFzc2VydChkZXNlcmlhbGl6ZWRSZXNwb25zZSk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRlc2VyaWFsaXplZFJlc3BvbnNlLmJsb2JCb2R5LCB1bmRlZmluZWQpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgICAgICBkZXNlcmlhbGl6ZWRSZXNwb25zZS5ib2R5QXNUZXh0LFxuICAgICAgICBgPGVudHJ5IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwNS9BdG9tXCI+PGlkPmh0dHBzOi8vZGFzY2h1bHR0ZXN0MS5zZXJ2aWNlYnVzLndpbmRvd3MubmV0L3Rlc3RRdWV1ZVBhdGgvP2FwaS12ZXJzaW9uPTIwMTctMDQmYW1wO2VucmljaD1GYWxzZTwvaWQ+PHRpdGxlIHR5cGU9XCJ0ZXh0XCI+dGVzdFF1ZXVlUGF0aDwvdGl0bGU+PHB1Ymxpc2hlZD4yMDE4LTEwLTA5VDE5OjU2OjM0WjwvcHVibGlzaGVkPjx1cGRhdGVkPjIwMTgtMTAtMDlUMTk6NTY6MzVaPC91cGRhdGVkPjxhdXRob3I+PG5hbWU+ZGFzY2h1bHR0ZXN0MTwvbmFtZT48L2F1dGhvcj48bGluayByZWw9XCJzZWxmXCIgaHJlZj1cImh0dHBzOi8vZGFzY2h1bHR0ZXN0MS5zZXJ2aWNlYnVzLndpbmRvd3MubmV0L3Rlc3RRdWV1ZVBhdGgvP2FwaS12ZXJzaW9uPTIwMTctMDQmYW1wO2VucmljaD1GYWxzZVwiLz48Y29udGVudCB0eXBlPVwiYXBwbGljYXRpb24veG1sXCI+PFF1ZXVlRGVzY3JpcHRpb24geG1sbnM9XCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL25ldHNlcnZpY2VzLzIwMTAvMTAvc2VydmljZWJ1cy9jb25uZWN0XCIgeG1sbnM6aT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCI+PExvY2tEdXJhdGlvbj5QVDFNPC9Mb2NrRHVyYXRpb24+PE1heFNpemVJbk1lZ2FieXRlcz4xMDI0PC9NYXhTaXplSW5NZWdhYnl0ZXM+PFJlcXVpcmVzRHVwbGljYXRlRGV0ZWN0aW9uPmZhbHNlPC9SZXF1aXJlc0R1cGxpY2F0ZURldGVjdGlvbj48UmVxdWlyZXNTZXNzaW9uPmZhbHNlPC9SZXF1aXJlc1Nlc3Npb24+PERlZmF1bHRNZXNzYWdlVGltZVRvTGl2ZT5QMTREPC9EZWZhdWx0TWVzc2FnZVRpbWVUb0xpdmU+PERlYWRMZXR0ZXJpbmdPbk1lc3NhZ2VFeHBpcmF0aW9uPmZhbHNlPC9EZWFkTGV0dGVyaW5nT25NZXNzYWdlRXhwaXJhdGlvbj48RHVwbGljYXRlRGV0ZWN0aW9uSGlzdG9yeVRpbWVXaW5kb3c+UFQxME08L0R1cGxpY2F0ZURldGVjdGlvbkhpc3RvcnlUaW1lV2luZG93PjxNYXhEZWxpdmVyeUNvdW50PjEwPC9NYXhEZWxpdmVyeUNvdW50PjxFbmFibGVCYXRjaGVkT3BlcmF0aW9ucz50cnVlPC9FbmFibGVCYXRjaGVkT3BlcmF0aW9ucz48U2l6ZUluQnl0ZXM+MDwvU2l6ZUluQnl0ZXM+PE1lc3NhZ2VDb3VudD4wPC9NZXNzYWdlQ291bnQ+PElzQW5vbnltb3VzQWNjZXNzaWJsZT5mYWxzZTwvSXNBbm9ueW1vdXNBY2Nlc3NpYmxlPjxBdXRob3JpemF0aW9uUnVsZXM+PC9BdXRob3JpemF0aW9uUnVsZXM+PFN0YXR1cz5BY3RpdmU8L1N0YXR1cz48Q3JlYXRlZEF0PjIwMTgtMTAtMDlUMTk6NTY6MzQuOTAzWjwvQ3JlYXRlZEF0PjxVcGRhdGVkQXQ+MjAxOC0xMC0wOVQxOTo1NjozNS4wMTNaPC9VcGRhdGVkQXQ+PEFjY2Vzc2VkQXQ+MDAwMS0wMS0wMVQwMDowMDowMFo8L0FjY2Vzc2VkQXQ+PFN1cHBvcnRPcmRlcmluZz50cnVlPC9TdXBwb3J0T3JkZXJpbmc+PENvdW50RGV0YWlscyB4bWxuczpkMnAxPVwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9uZXRzZXJ2aWNlcy8yMDExLzA2L3NlcnZpY2VidXNcIj48ZDJwMTpBY3RpdmVNZXNzYWdlQ291bnQ+MDwvZDJwMTpBY3RpdmVNZXNzYWdlQ291bnQ+PGQycDE6RGVhZExldHRlck1lc3NhZ2VDb3VudD4wPC9kMnAxOkRlYWRMZXR0ZXJNZXNzYWdlQ291bnQ+PGQycDE6U2NoZWR1bGVkTWVzc2FnZUNvdW50PjA8L2QycDE6U2NoZWR1bGVkTWVzc2FnZUNvdW50PjxkMnAxOlRyYW5zZmVyTWVzc2FnZUNvdW50PjA8L2QycDE6VHJhbnNmZXJNZXNzYWdlQ291bnQ+PGQycDE6VHJhbnNmZXJEZWFkTGV0dGVyTWVzc2FnZUNvdW50PjA8L2QycDE6VHJhbnNmZXJEZWFkTGV0dGVyTWVzc2FnZUNvdW50PjwvQ291bnREZXRhaWxzPjxBdXRvRGVsZXRlT25JZGxlPlAxMDY3NTE5OURUMkg0OE01LjQ3NzU4MDdTPC9BdXRvRGVsZXRlT25JZGxlPjxFbmFibGVQYXJ0aXRpb25pbmc+ZmFsc2U8L0VuYWJsZVBhcnRpdGlvbmluZz48RW50aXR5QXZhaWxhYmlsaXR5U3RhdHVzPkF2YWlsYWJsZTwvRW50aXR5QXZhaWxhYmlsaXR5U3RhdHVzPjxFbmFibGVFeHByZXNzPmZhbHNlPC9FbmFibGVFeHByZXNzPjwvUXVldWVEZXNjcmlwdGlvbj48L2NvbnRlbnQ+PC9lbnRyeT5gXG4gICAgICApO1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChkZXNlcmlhbGl6ZWRSZXNwb25zZS5wYXJzZWRCb2R5LCB7XG4gICAgICAgICQ6IHtcbiAgICAgICAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDA1L0F0b21cIixcbiAgICAgICAgfSxcbiAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgbmFtZTogXCJkYXNjaHVsdHRlc3QxXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAkOiB7XG4gICAgICAgICAgICB0eXBlOiBcImFwcGxpY2F0aW9uL3htbFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgUXVldWVEZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgJDoge1xuICAgICAgICAgICAgICB4bWxuczogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL25ldHNlcnZpY2VzLzIwMTAvMTAvc2VydmljZWJ1cy9jb25uZWN0XCIsXG4gICAgICAgICAgICAgIFwieG1sbnM6aVwiOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQWNjZXNzZWRBdDogXCIwMDAxLTAxLTAxVDAwOjAwOjAwWlwiLFxuICAgICAgICAgICAgQXV0aG9yaXphdGlvblJ1bGVzOiBcIlwiLFxuICAgICAgICAgICAgQXV0b0RlbGV0ZU9uSWRsZTogXCJQMTA2NzUxOTlEVDJINDhNNS40Nzc1ODA3U1wiLFxuICAgICAgICAgICAgQ291bnREZXRhaWxzOiB7XG4gICAgICAgICAgICAgICQ6IHtcbiAgICAgICAgICAgICAgICBcInhtbG5zOmQycDFcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL25ldHNlcnZpY2VzLzIwMTEvMDYvc2VydmljZWJ1c1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImQycDE6QWN0aXZlTWVzc2FnZUNvdW50XCI6IFwiMFwiLFxuICAgICAgICAgICAgICBcImQycDE6RGVhZExldHRlck1lc3NhZ2VDb3VudFwiOiBcIjBcIixcbiAgICAgICAgICAgICAgXCJkMnAxOlNjaGVkdWxlZE1lc3NhZ2VDb3VudFwiOiBcIjBcIixcbiAgICAgICAgICAgICAgXCJkMnAxOlRyYW5zZmVyRGVhZExldHRlck1lc3NhZ2VDb3VudFwiOiBcIjBcIixcbiAgICAgICAgICAgICAgXCJkMnAxOlRyYW5zZmVyTWVzc2FnZUNvdW50XCI6IFwiMFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIENyZWF0ZWRBdDogXCIyMDE4LTEwLTA5VDE5OjU2OjM0LjkwM1pcIixcbiAgICAgICAgICAgIERlYWRMZXR0ZXJpbmdPbk1lc3NhZ2VFeHBpcmF0aW9uOiBcImZhbHNlXCIsXG4gICAgICAgICAgICBEZWZhdWx0TWVzc2FnZVRpbWVUb0xpdmU6IFwiUDE0RFwiLFxuICAgICAgICAgICAgRHVwbGljYXRlRGV0ZWN0aW9uSGlzdG9yeVRpbWVXaW5kb3c6IFwiUFQxME1cIixcbiAgICAgICAgICAgIEVuYWJsZUJhdGNoZWRPcGVyYXRpb25zOiBcInRydWVcIixcbiAgICAgICAgICAgIEVuYWJsZUV4cHJlc3M6IFwiZmFsc2VcIixcbiAgICAgICAgICAgIEVuYWJsZVBhcnRpdGlvbmluZzogXCJmYWxzZVwiLFxuICAgICAgICAgICAgRW50aXR5QXZhaWxhYmlsaXR5U3RhdHVzOiBcIkF2YWlsYWJsZVwiLFxuICAgICAgICAgICAgSXNBbm9ueW1vdXNBY2Nlc3NpYmxlOiBcImZhbHNlXCIsXG4gICAgICAgICAgICBMb2NrRHVyYXRpb246IFwiUFQxTVwiLFxuICAgICAgICAgICAgTWF4RGVsaXZlcnlDb3VudDogXCIxMFwiLFxuICAgICAgICAgICAgTWF4U2l6ZUluTWVnYWJ5dGVzOiBcIjEwMjRcIixcbiAgICAgICAgICAgIE1lc3NhZ2VDb3VudDogXCIwXCIsXG4gICAgICAgICAgICBSZXF1aXJlc0R1cGxpY2F0ZURldGVjdGlvbjogXCJmYWxzZVwiLFxuICAgICAgICAgICAgUmVxdWlyZXNTZXNzaW9uOiBcImZhbHNlXCIsXG4gICAgICAgICAgICBTaXplSW5CeXRlczogXCIwXCIsXG4gICAgICAgICAgICBTdGF0dXM6IFwiQWN0aXZlXCIsXG4gICAgICAgICAgICBTdXBwb3J0T3JkZXJpbmc6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgVXBkYXRlZEF0OiBcIjIwMTgtMTAtMDlUMTk6NTY6MzUuMDEzWlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGlkOlxuICAgICAgICAgIFwiaHR0cHM6Ly9kYXNjaHVsdHRlc3QxLnNlcnZpY2VidXMud2luZG93cy5uZXQvdGVzdFF1ZXVlUGF0aC8/YXBpLXZlcnNpb249MjAxNy0wNCZlbnJpY2g9RmFsc2VcIixcbiAgICAgICAgbGluazoge1xuICAgICAgICAgICQ6IHtcbiAgICAgICAgICAgIGhyZWY6XG4gICAgICAgICAgICAgIFwiaHR0cHM6Ly9kYXNjaHVsdHRlc3QxLnNlcnZpY2VidXMud2luZG93cy5uZXQvdGVzdFF1ZXVlUGF0aC8/YXBpLXZlcnNpb249MjAxNy0wNCZlbnJpY2g9RmFsc2VcIixcbiAgICAgICAgICAgIHJlbDogXCJzZWxmXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcHVibGlzaGVkOiBcIjIwMTgtMTAtMDlUMTk6NTY6MzRaXCIsXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgJDoge1xuICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBfOiBcInRlc3RRdWV1ZVBhdGhcIixcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlZDogXCIyMDE4LTEwLTA5VDE5OjU2OjM1WlwiLFxuICAgICAgfSk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZGVzZXJpYWxpemVkUmVzcG9uc2UucGFyc2VkSGVhZGVycywgdW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZnVuY3Rpb24gZGVzZXJpYWxpemVSZXNwb25zZShyZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlKTogUHJvbWlzZTxIdHRwT3BlcmF0aW9uUmVzcG9uc2U+IHtcbiAgcmV0dXJuIGRlc2VyaWFsaXplUmVzcG9uc2VCb2R5KGRlZmF1bHRKc29uQ29udGVudFR5cGVzLCBkZWZhdWx0WG1sQ29udGVudFR5cGVzLCByZXNwb25zZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3Qob3BlcmF0aW9uU3BlYz86IE9wZXJhdGlvblNwZWMpOiBXZWJSZXNvdXJjZUxpa2Uge1xuICBjb25zdCByZXF1ZXN0ID0gbmV3IFdlYlJlc291cmNlKCk7XG4gIHJlcXVlc3Qub3BlcmF0aW9uU3BlYyA9IG9wZXJhdGlvblNwZWM7XG4gIHJldHVybiByZXF1ZXN0O1xufVxuIl19
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/policies/proxyPolicyTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/policies/redirectPolicyTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/policies/systemErrorRetryPolicyTests.spec.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/policies/throttlingRetryPolicyTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/policies/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/proxyAgent.node.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/redirectLimitTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC9yZWRpcmVjdExpbWl0VGVzdHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWpzL3Rlc3QvcmVkaXJlY3RMaW1pdFRlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFFL0YsNkJBQThCO0FBQzlCLHdEQUEwQjtBQUUxQiw4REFBNkQ7QUFDN0QsdUNBQXlEO0FBRXpELHNEQUFxRDtBQUNyRCx3Q0FBdUM7QUFFdkMsaUVBQWdFO0FBRWhFLElBQU0sTUFBTSxHQUFHLENBQUMsZUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQWlCLENBQUM7QUFFdkQsUUFBUSxDQUFDLGVBQWUsRUFBRTtJQUN4QixJQUFJLFFBQXdCLENBQUM7SUFDN0IsVUFBVSxDQUFDO1FBQ1QsUUFBUSxHQUFHLHNCQUFXLEVBQUUsQ0FBQztRQUN6QixRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDSCxTQUFTLENBQUMsY0FBTSxPQUFBLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO0lBRXJDLFNBQVMsbUJBQW1CO1FBQTVCLGlCQVVDO1FBVEMsSUFBTSxVQUFVLEdBQUcsSUFBSSxxQ0FBaUIsRUFBRSxDQUFDO1FBQzNDLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN0QyxJQUFJLFNBQVMsRUFBRTtZQUNiLGVBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFPLEtBQUssRUFBRSxJQUFJOzs7O2dDQUN6QyxxQkFBTSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFBOzs0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b3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHNpbm9uIGZyb20gXCJzaW5vblwiO1xuXG5pbXBvcnQgeyBEZWZhdWx0SHR0cENsaWVudCB9IGZyb20gXCIuLi9saWIvZGVmYXVsdEh0dHBDbGllbnRcIjtcbmltcG9ydCB7IGdldEh0dHBNb2NrLCBIdHRwTW9ja0ZhY2FkZSB9IGZyb20gXCIuL21vY2tIdHRwXCI7XG5pbXBvcnQgeyBDb21tb25SZXNwb25zZSB9IGZyb20gXCIuLi9saWIvZmV0Y2hIdHRwQ2xpZW50XCI7XG5pbXBvcnQgeyBTZXJ2aWNlQ2xpZW50IH0gZnJvbSBcIi4uL2xpYi9zZXJ2aWNlQ2xpZW50XCI7XG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tIFwiLi4vbGliL21zUmVzdFwiO1xuaW1wb3J0IHsgVGVzdEZ1bmN0aW9uIH0gZnJvbSBcIm1vY2hhXCI7XG5pbXBvcnQgeyByZWRpcmVjdFBvbGljeSB9IGZyb20gXCIuLi9saWIvcG9saWNpZXMvcmVkaXJlY3RQb2xpY3lcIjtcblxuY29uc3Qgbm9kZUl0ID0gKGlzTm9kZSA/IGl0IDogaXQuc2tpcCkgYXMgVGVzdEZ1bmN0aW9uO1xuXG5kZXNjcmliZShcInJlZGlyZWN0TGltaXRcIiwgZnVuY3Rpb24gKCkge1xuICBsZXQgaHR0cE1vY2s6IEh0dHBNb2NrRmFjYWRlO1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBodHRwTW9jayA9IGdldEh0dHBNb2NrKCk7XG4gICAgaHR0cE1vY2suc2V0dXAoKTtcbiAgfSk7XG4gIGFmdGVyRWFjaCgoKSA9PiBodHRwTW9jay50ZWFyZG93bigpKTtcblxuICBmdW5jdGlvbiBnZXRNb2NrZWRIdHRwQ2xpZW50KCk6IERlZmF1bHRIdHRwQ2xpZW50IHtcbiAgICBjb25zdCBodHRwQ2xpZW50ID0gbmV3IERlZmF1bHRIdHRwQ2xpZW50KCk7XG4gICAgY29uc3QgZmV0Y2hNb2NrID0gaHR0cE1vY2suZ2V0RmV0Y2goKTtcbiAgICBpZiAoZmV0Y2hNb2NrKSB7XG4gICAgICBzaW5vbi5zdHViKGh0dHBDbGllbnQsIFwiZmV0Y2hcIikuY2FsbHNGYWtlKGFzeW5jIChpbnB1dCwgaW5pdCkgPT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoTW9jayhpbnB1dCwgaW5pdCk7XG4gICAgICAgIHJldHVybiAocmVzcG9uc2UgYXMgdW5rbm93bikgYXMgQ29tbW9uUmVzcG9uc2U7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGh0dHBDbGllbnQ7XG4gIH1cblxuICBjb25zdCByZXNvdXJjZVVybCA9IFwiL3Jlc291cmNlXCI7XG4gIGNvbnN0IHJlZGlyZWN0ZWRVcmxfMSA9IFwiL3JlZGlyZWN0ZWRfMVwiO1xuICBjb25zdCByZWRpcmVjdGVkVXJsXzIgPSBcIi9yZWRpcmVjdGVkXzJcIjtcblxuICBmdW5jdGlvbiBjb25maWd1cmVNb2NrUmVkaXJlY3RSZXNwb25zZXMoKSB7XG4gICAgaHR0cE1vY2suZ2V0KHJlc291cmNlVXJsLCBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDMwMCwgaGVhZGVyczogeyBsb2NhdGlvbjogcmVkaXJlY3RlZFVybF8xIH0gfTtcbiAgICB9KTtcbiAgICBodHRwTW9jay5nZXQocmVkaXJlY3RlZFVybF8xLCBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDMwMCwgaGVhZGVyczogeyBsb2NhdGlvbjogcmVkaXJlY3RlZFVybF8yIH0gfTtcbiAgICB9KTtcbiAgICBodHRwTW9jay5nZXQocmVkaXJlY3RlZFVybF8yLCBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDIwMCB9O1xuICAgIH0pO1xuICB9XG5cbiAgbm9kZUl0KFxuICAgIFwib2YgMjAgc2hvdWxkIGZvbGxvdyByZWRpcmVjdHMgYW5kIHJldHVybiBsYXN0IHZpc2l0ZWQgdXJsIGluIHJlc3BvbnNlLnVybFwiLFxuICAgIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbmZpZ3VyZU1vY2tSZWRpcmVjdFJlc3BvbnNlcygpO1xuXG4gICAgICBjb25zdCBjbGllbnQgPSBuZXcgU2VydmljZUNsaWVudCh1bmRlZmluZWQsIHtcbiAgICAgICAgaHR0cENsaWVudDogZ2V0TW9ja2VkSHR0cENsaWVudCgpLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuc2VuZFJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHJlc291cmNlVXJsLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHJlZGlyZWN0TGltaXQ6IDIwLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UucmVkaXJlY3RlZCkudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS51cmwpLnRvLmVxdWFsKHJlZGlyZWN0ZWRVcmxfMik7XG4gICAgfVxuICApO1xuXG4gIG5vZGVJdChcbiAgICBcIm9mIDAgc2hvdWxkIG5vdCBmb2xsb3cgcmVkaXJlY3RzIGFuZCBzaG91bGQgcmV0dXJuIGxhc3QgdmlzaXRlZCB1cmwgaW4gcmVzcG9uc2UudXJsXCIsXG4gICAgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uZmlndXJlTW9ja1JlZGlyZWN0UmVzcG9uc2VzKCk7XG5cbiAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBTZXJ2aWNlQ2xpZW50KHVuZGVmaW5lZCwge1xuICAgICAgICBodHRwQ2xpZW50OiBnZXRNb2NrZWRIdHRwQ2xpZW50KCksXG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5zZW5kUmVxdWVzdCh7XG4gICAgICAgIHVybDogcmVzb3VyY2VVcmwsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgcmVkaXJlY3RMaW1pdDogMCxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgzMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwibG9jYXRpb25cIikpLnRvLmVxdWFsKHJlZGlyZWN0ZWRVcmxfMSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UucmVkaXJlY3RlZCkudG8uYmUuZmFsc2U7XG4gICAgICBleHBlY3QocmVzcG9uc2UudXJsKS50by5lcXVhbChyZXNvdXJjZVVybCk7XG4gICAgfVxuICApO1xuXG4gIG5vZGVJdChcbiAgICBcIm9mIDEgc2hvdWxkIGZvbGxvdyAxIHJlZGlyZWN0IGFuZCByZXR1cm4gbGFzdCB2aXNpdGVkIHVybCBpbiByZXNwb25zZS51cmxcIixcbiAgICBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25maWd1cmVNb2NrUmVkaXJlY3RSZXNwb25zZXMoKTtcblxuICAgICAgY29uc3QgY2xpZW50ID0gbmV3IFNlcnZpY2VDbGllbnQodW5kZWZpbmVkLCB7XG4gICAgICAgIGh0dHBDbGllbnQ6IGdldE1vY2tlZEh0dHBDbGllbnQoKSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnNlbmRSZXF1ZXN0KHtcbiAgICAgICAgdXJsOiByZXNvdXJjZVVybCxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICByZWRpcmVjdExpbWl0OiAxLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDMwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuaGVhZGVycy5nZXQoXCJsb2NhdGlvblwiKSkudG8uZXF1YWwocmVkaXJlY3RlZFVybF8yKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5yZWRpcmVjdGVkKS50by5iZS50cnVlO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnVybCkudG8uZXF1YWwocmVkaXJlY3RlZFVybF8xKTtcbiAgICB9XG4gICk7XG5cbiAgbm9kZUl0KFxuICAgIFwib2YgdW5kZWZpbmVkIHNob3VsZCBmb2xsb3cgcmVkaXJlY3RzIGFuZCByZXR1cm4gbGFzdCB2aXNpdGVkIHVybCBpbiByZXNwb25zZS51cmxcIixcbiAgICBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25maWd1cmVNb2NrUmVkaXJlY3RSZXNwb25zZXMoKTtcblxuICAgICAgY29uc3QgY2xpZW50ID0gbmV3IFNlcnZpY2VDbGllbnQodW5kZWZpbmVkLCB7XG4gICAgICAgIGh0dHBDbGllbnQ6IGdldE1vY2tlZEh0dHBDbGllbnQoKSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnNlbmRSZXF1ZXN0KHsgdXJsOiByZXNvdXJjZVVybCwgbWV0aG9kOiBcIkdFVFwiIH0pO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnJlZGlyZWN0ZWQpLnRvLmJlLnRydWU7XG4gICAgICBleHBlY3QocmVzcG9uc2UudXJsKS50by5lcXVhbChyZWRpcmVjdGVkVXJsXzIpO1xuICAgIH1cbiAgKTtcblxuICBub2RlSXQoXG4gICAgXCJvZiB1bmRlZmluZGVkIHdpdGggcG9saWN5IGxpbWl0IG9mIDEgc2hvdWxkIGZvbGxvdyAxIHJlZGlyZWN0IGFuZCByZXR1cm4gbGFzdCB2aXNpdGVkIHVybCBpbiByZXNwb25zZS51cmxcIixcbiAgICBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25maWd1cmVNb2NrUmVkaXJlY3RSZXNwb25zZXMoKTtcblxuICAgICAgY29uc3QgY2xpZW50ID0gbmV3IFNlcnZpY2VDbGllbnQodW5kZWZpbmVkLCB7XG4gICAgICAgIGh0dHBDbGllbnQ6IGdldE1vY2tlZEh0dHBDbGllbnQoKSxcbiAgICAgICAgcmVxdWVzdFBvbGljeUZhY3RvcmllczogW3JlZGlyZWN0UG9saWN5KDEpXSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnNlbmRSZXF1ZXN0KHsgdXJsOiByZXNvdXJjZVVybCwgbWV0aG9kOiBcIkdFVFwiIH0pO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgzMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwibG9jYXRpb25cIikpLnRvLmVxdWFsKHJlZGlyZWN0ZWRVcmxfMik7XG4gICAgICBleHBlY3QocmVzcG9uc2UucmVkaXJlY3RlZCkudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS51cmwpLnRvLmVxdWFsKHJlZGlyZWN0ZWRVcmxfMSk7XG4gICAgfVxuICApO1xufSk7XG4iXX0=
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/serializationTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/serviceClientTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/urlTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/xhrTests.browser.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC94aHJUZXN0cy5icm93c2VyLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy90ZXN0L3hoclRlc3RzLmJyb3dzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7O0FBRy9GLGtEQUFpRDtBQUNqRCw2QkFBOEI7QUFDOUIsc0RBQW1FO0FBRW5FLFFBQVEsQ0FBQyxlQUFlLEVBQUU7SUFDeEIsRUFBRSxDQUFDLGdCQUFnQixFQUFFO1FBQ25CLElBQU0sR0FBRyxHQUFHO1lBQ1YscUJBQXFCLEVBQUUsY0FBTSxPQUFBLHdCQUF3QixHQUFHLGtCQUFrQixFQUE3QyxDQUE2QztTQUN6RCxDQUFDO1FBQ3BCLElBQU0sT0FBTyxHQUFHLDRCQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsYUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEQsYUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1FBQ2hDLElBQU0sR0FBRyxHQUFHO1lBQ1YscUJBQXFCLEVBQUU7Z0JBQ3JCLE9BQUEsb0JBQW9CLEdBQUcsNENBQTRDO29CQUNuRSxZQUFZO1lBRFosQ0FDWTtTQUNHLENBQUM7UUFDcEIsSUFBTSxPQUFPLEdBQUcsNEJBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxhQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEQsYUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1FBQzFDLElBQU0sT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxhQUFhLEdBQUc7WUFDdEIsSUFBSSxFQUFFLFNBQVM7WUFDZixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUM7UUFFRixJQUFNLE1BQU0sR0FBRyxJQUFJLDZCQUFhLEVBQUUsQ0FBQztRQUNuQyxhQUFNLENBQUMsTUFBTSxDQUFDO1lBQ1osTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRTtRQUMxQyxJQUFNLE9BQU8sR0FBRyxJQUFJLHlCQUFXLEVBQUUsQ0FBQztRQUNsQyxPQUFPLENBQUMsYUFBYSxHQUFHLEVBQW1CLENBQUM7UUFFNUMsSUFBTSxNQUFNLEdBQUcsSUFBSSw2QkFBYSxFQUFFLENBQUM7UUFDbkMsYUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNaLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ1osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgQWdlbnRTZXR0aW5ncyB9IGZyb20gXCIuLi9saWIvc2VydmljZUNsaWVudFwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2UgfSBmcm9tIFwiLi4vbGliL3dlYlJlc291cmNlXCI7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHsgcGFyc2VIZWFkZXJzLCBYaHJIdHRwQ2xpZW50IH0gZnJvbSBcIi4uL2xpYi94aHJIdHRwQ2xpZW50XCI7XG5cbmRlc2NyaWJlKFwiWGhySHR0cENsaWVudFwiLCBmdW5jdGlvbiAoKSB7XG4gIGl0KFwicGFyc2VzIGhlYWRlcnNcIiwgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHhociA9IHtcbiAgICAgIGdldEFsbFJlc3BvbnNlSGVhZGVyczogKCkgPT4gXCJDb250ZW50LUxlbmd0aDogNDJcXHJcXG5cIiArIFwidmFsdWU6IGhlbGxvXFxyXFxuXCIsXG4gICAgfSBhcyBYTUxIdHRwUmVxdWVzdDtcbiAgICBjb25zdCBoZWFkZXJzID0gcGFyc2VIZWFkZXJzKHhocik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGhlYWRlcnMuZ2V0KFwiY29udGVudC1sZW5ndGhcIiksIFwiNDJcIik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGhlYWRlcnMuZ2V0KFwidmFsdWVcIiksIFwiaGVsbG9cIik7XG4gIH0pO1xuXG4gIGl0KFwicGFyc2VzIGVtcHR5IHN0cmluZyBoZWFkZXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB4aHIgPSB7XG4gICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnM6ICgpID0+XG4gICAgICAgIFwiQ29udGVudC1UeXBlOiBcXHJcXG5cIiArIC8vIHByZXNlcnZlIHRyYWlsaW5nIHdoaXRlc3BhY2UgaW4gdGVzdCBjYXNlXG4gICAgICAgIFwidmFsdWU6XFxyXFxuXCIsXG4gICAgfSBhcyBYTUxIdHRwUmVxdWVzdDtcbiAgICBjb25zdCBoZWFkZXJzID0gcGFyc2VIZWFkZXJzKHhocik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpLCBcIlwiKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoaGVhZGVycy5nZXQoXCJ2YWx1ZVwiKSwgXCJcIik7XG4gIH0pO1xuXG4gIGl0KFwidGhyb3dzIHdoZW4gcHJveHkgc2V0dGluZ3MgYXJlIHBhc3NlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXNvdXJjZSgpO1xuICAgIHJlcXVlc3QucHJveHlTZXR0aW5ncyA9IHtcbiAgICAgIGhvc3Q6IFwiMS4xLjEuMVwiLFxuICAgICAgcG9ydDogODA4MCxcbiAgICB9O1xuXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IFhockh0dHBDbGllbnQoKTtcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHtcbiAgICAgIGNsaWVudC5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICB9LCBFcnJvcik7XG4gIH0pO1xuXG4gIGl0KFwidGhyb3dzIHdoZW4gYWdlbnQgc2V0dGluZ3MgYXJlIHBhc3NlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXNvdXJjZSgpO1xuICAgIHJlcXVlc3QuYWdlbnRTZXR0aW5ncyA9IHt9IGFzIEFnZW50U2V0dGluZ3M7XG5cbiAgICBjb25zdCBjbGllbnQgPSBuZXcgWGhySHR0cENsaWVudCgpO1xuICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge1xuICAgICAgY2xpZW50LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIH0sIEVycm9yKTtcbiAgfSk7XG59KTtcbiJdfQ==
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtanMvdGVzdC94aHJUZXN0cy5icm93c2VyLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1qcy90ZXN0L3hoclRlc3RzLmJyb3dzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7O0FBRy9GLGtEQUFpRDtBQUNqRCw2QkFBOEI7QUFDOUIsc0RBQW1FO0FBRW5FLFFBQVEsQ0FBQyxlQUFlLEVBQUU7SUFDeEIsRUFBRSxDQUFDLGdCQUFnQixFQUFFO1FBQ25CLElBQU0sR0FBRyxHQUFHO1lBQ1YscUJBQXFCLEVBQUUsY0FBTSxPQUFBLHdCQUF3QixHQUFHLGtCQUFrQixFQUE3QyxDQUE2QztTQUN6RCxDQUFDO1FBQ3BCLElBQU0sT0FBTyxHQUFHLDRCQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsYUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEQsYUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1FBQ2hDLElBQU0sR0FBRyxHQUFHO1lBQ1YscUJBQXFCLEVBQUU7Z0JBQ3JCLE9BQUEsb0JBQW9CLEdBQUcsNENBQTRDO29CQUNuRSxZQUFZO1lBRFosQ0FDWTtTQUNHLENBQUM7UUFDcEIsSUFBTSxPQUFPLEdBQUcsNEJBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxhQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEQsYUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1FBQzFDLElBQU0sT0FBTyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxhQUFhLEdBQUc7WUFDdEIsSUFBSSxFQUFFLFNBQVM7WUFDZixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUM7UUFFRixJQUFNLE1BQU0sR0FBRyxJQUFJLDZCQUFhLEVBQUUsQ0FBQztRQUNuQyxhQUFNLENBQUMsTUFBTSxDQUFDO1lBQ1osTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRTtRQUMxQyxJQUFNLE9BQU8sR0FBRyxJQUFJLHlCQUFXLEVBQUUsQ0FBQztRQUNsQyxPQUFPLENBQUMsYUFBYSxHQUFHLEVBQW1CLENBQUM7UUFFNUMsSUFBTSxNQUFNLEdBQUcsSUFBSSw2QkFBYSxFQUFFLENBQUM7UUFDbkMsYUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNaLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ1osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgQWdlbnRTZXR0aW5ncyB9IGZyb20gXCIuLi9saWIvc2VydmljZUNsaWVudFwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2UgfSBmcm9tIFwiLi4vbGliL3dlYlJlc291cmNlXCI7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHsgcGFyc2VIZWFkZXJzLCBYaHJIdHRwQ2xpZW50IH0gZnJvbSBcIi4uL2xpYi94aHJIdHRwQ2xpZW50XCI7XG5cbmRlc2NyaWJlKFwiWGhySHR0cENsaWVudFwiLCBmdW5jdGlvbiAoKSB7XG4gIGl0KFwicGFyc2VzIGhlYWRlcnNcIiwgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHhociA9IHtcbiAgICAgIGdldEFsbFJlc3BvbnNlSGVhZGVyczogKCkgPT4gXCJDb250ZW50LUxlbmd0aDogNDJcXHJcXG5cIiArIFwidmFsdWU6IGhlbGxvXFxyXFxuXCIsXG4gICAgfSBhcyBYTUxIdHRwUmVxdWVzdDtcbiAgICBjb25zdCBoZWFkZXJzID0gcGFyc2VIZWFkZXJzKHhocik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGhlYWRlcnMuZ2V0KFwiY29udGVudC1sZW5ndGhcIiksIFwiNDJcIik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGhlYWRlcnMuZ2V0KFwidmFsdWVcIiksIFwiaGVsbG9cIik7XG4gIH0pO1xuXG4gIGl0KFwicGFyc2VzIGVtcHR5IHN0cmluZyBoZWFkZXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB4aHIgPSB7XG4gICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnM6ICgpID0+XG4gICAgICAgIFwiQ29udGVudC1UeXBlOiBcXHJcXG5cIiArIC8vIHByZXNlcnZlIHRyYWlsaW5nIHdoaXRlc3BhY2UgaW4gdGVzdCBjYXNlXG4gICAgICAgIFwidmFsdWU6XFxyXFxuXCIsXG4gICAgfSBhcyBYTUxIdHRwUmVxdWVzdDtcbiAgICBjb25zdCBoZWFkZXJzID0gcGFyc2VIZWFkZXJzKHhocik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpLCBcIlwiKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoaGVhZGVycy5nZXQoXCJ2YWx1ZVwiKSwgXCJcIik7XG4gIH0pO1xuXG4gIGl0KFwidGhyb3dzIHdoZW4gcHJveHkgc2V0dGluZ3MgYXJlIHBhc3NlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXNvdXJjZSgpO1xuICAgIHJlcXVlc3QucHJveHlTZXR0aW5ncyA9IHtcbiAgICAgIGhvc3Q6IFwiMS4xLjEuMVwiLFxuICAgICAgcG9ydDogODA4MCxcbiAgICB9O1xuXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IFhockh0dHBDbGllbnQoKTtcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHtcbiAgICAgIGNsaWVudC5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICB9LCBFcnJvcik7XG4gIH0pO1xuXG4gIGl0KFwidGhyb3dzIHdoZW4gYWdlbnQgc2V0dGluZ3MgYXJlIHBhc3NlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXNvdXJjZSgpO1xuICAgIHJlcXVlc3QuYWdlbnRTZXR0aW5ncyA9IHt9IGFzIEFnZW50U2V0dGluZ3M7XG5cbiAgICBjb25zdCBjbGllbnQgPSBuZXcgWGhySHR0cENsaWVudCgpO1xuICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge1xuICAgICAgY2xpZW50LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIH0sIEVycm9yKTtcbiAgfSk7XG59KTtcbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-js/lib/xhrHttpClient.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/lib/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-js/test/xmlTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-js/test/data:application/json;charset=utf-8;base64,'
(node:2960) [DEP0148] DeprecationWarning: Use of deprecated folder mapping "./" in the "exports" field module resolution of the package at /data/js-variants/multee/Original/ms-rest-js/node_modules/chai/package.json.
Update this package.json to use a subpath pattern like "./*".
(Use `node --trace-deprecation ...` to show where the warning was created)
ERROR: "test:karma" exited with 1.
I am package jwt
PASS lib/jwt.service.spec.ts (11.14 s)
  JWT Service
    should use config.secretOrKeyProvider
      ✓ signing should use config.secretOrKeyProvider (3 ms)
      ✓ signing (async) should use config.secretOrKeyProvider (1 ms)
      ✓ verifying should use config.secretOrKeyProvider (1 ms)
      ✓ verifying (async) should use config.secretOrKeyProvider (1 ms)
    should use config.secret
      ✓ signing should use config.secret (1 ms)
      ✓ signing (async) should use config.secret (1 ms)
      ✓ verifying should use config.secret
      ✓ verifying (async) should use config.secret (1 ms)
    should use config.privateKey and config.publicKey
      ✓ signing should use config.privateKey (1 ms)
      ✓ signing (async) should use config.privateKey (1 ms)
      ✓ verifying should use config.publicKey (1 ms)
      ✓ verifying (async) should use config.publicKey
    should use config.secretOrPrivateKey but warn about deprecation
      ✓ signing should use deprecated secretOrPrivateKey (2 ms)
      ✓ signing (async) should use deprecated secretOrPrivateKey (1 ms)
      ✓ verifying should use deprecated secretOrPrivateKey (1 ms)
      ✓ verifying (async) should use deprecated secretOrPrivateKey (1 ms)
    should allow buffers for secrets
      ✓ verifying should use base64 buffer key (16 ms)
      ✓ verifying (async) should use base64 buffer key (5 ms)
    should use secret key from options
      ✓ signing should use secret key from options
      ✓ signing (async) should use secret key from options (1 ms)
      ✓ verifying should use secret key from options
      ✓ verifying (async) should use secret key from options (1 ms)
    should use private/public key from options
      ✓ signing should use private key from options (1 ms)
      ✓ signing (async) should use private key from options
      ✓ verifying should use public key from options (1 ms)
      ✓ verifying (async) should use public key from options (1 ms)

Test Suites: 1 passed, 1 total
Tests:       26 passed, 26 total
Snapshots:   0 total
Time:        12.663 s
Ran all test suites.
I am package standard-engine
I am package is-online
I am package gaxios
I am package node-fast-html-parser
node:internal/errors:477
    ErrorCaptureStackTrace(err);
    ^

Error [ERR_MODULE_NOT_FOUND]: Cannot find package '/data/js-variants/multee/Original/node-fast-html-parser/test/node_modules/@test/root/' imported from /data/js-variants/multee/Original/node-fast-html-parser/test/benchmark/compare-node-html-parser.mjs
    at new NodeError (node:internal/errors:387:5)
    at legacyMainResolve (node:internal/modules/esm/resolve:341:9)
    at packageResolve (node:internal/modules/esm/resolve:938:14)
    at moduleResolve (node:internal/modules/esm/resolve:1000:20)
    at defaultResolve (node:internal/modules/esm/resolve:1214:11)
    at nextResolve (node:internal/modules/esm/loader:165:28)
    at ESMLoader.resolve (node:internal/modules/esm/loader:844:30)
    at ESMLoader.getModuleJob (node:internal/modules/esm/loader:431:18)
    at ModuleWrap.<anonymous> (node:internal/modules/esm/module_job:76:40)
    at link (node:internal/modules/esm/module_job:75:36) {
  code: 'ERR_MODULE_NOT_FOUND'
}
error Command failed with exit code 1.
I am package router
I am package art-template
=============================================================================
Writing coverage object [/data/js-variants/multee/Original/art-template/coverage/coverage.json]
Writing coverage reports at [/data/js-variants/multee/Original/art-template/coverage]
=============================================================================
node:internal/modules/cjs/loader:959
  throw err;
  ^

Error: Cannot find module './lib/index'
Require stack:
- /data/js-variants/multee/Original/art-template/index.js
- /data/js-variants/multee/Original/art-template/test/node.js
- /data/js-variants/multee/Original/art-template/node_modules/mocha/lib/mocha.js
- /data/js-variants/multee/Original/art-template/node_modules/mocha/index.js
- /data/js-variants/multee/Original/art-template/node_modules/mocha/bin/_mocha
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:956:15)
    at Function.Module._load (node:internal/modules/cjs/loader:804:27)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/art-template/index.js:2:1518)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions.<computed> (/data/js-variants/multee/Original/art-template/node_modules/istanbul/lib/hook.js:107:24)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/art-template/test/node.js:2:18)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object..js (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module._extensions.<computed> (/data/js-variants/multee/Original/art-template/node_modules/istanbul/lib/hook.js:109:37)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at /data/js-variants/multee/Original/art-template/node_modules/mocha/lib/mocha.js:250:27
    at Array.forEach (<anonymous>)
    at Mocha.loadFiles (/data/js-variants/multee/Original/art-template/node_modules/mocha/lib/mocha.js:247:14)
    at Mocha.run (/data/js-variants/multee/Original/art-template/node_modules/mocha/lib/mocha.js:576:10)
    at Object.<anonymous> (/data/js-variants/multee/Original/art-template/node_modules/mocha/bin/_mocha:637:18)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object..js (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module._extensions.<computed> (/data/js-variants/multee/Original/art-template/node_modules/istanbul/lib/hook.js:109:37)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at runFn (/data/js-variants/multee/Original/art-template/node_modules/istanbul/lib/command/common/run-with-cover.js:122:16)
    at /data/js-variants/multee/Original/art-template/node_modules/istanbul/lib/command/common/run-with-cover.js:251:17
    at /data/js-variants/multee/Original/art-template/node_modules/istanbul/lib/util/file-matcher.js:68:16
    at /data/js-variants/multee/Original/art-template/node_modules/async/lib/async.js:52:16
    at /data/js-variants/multee/Original/art-template/node_modules/async/lib/async.js:361:13
    at /data/js-variants/multee/Original/art-template/node_modules/async/lib/async.js:52:16
    at done (/data/js-variants/multee/Original/art-template/node_modules/async/lib/async.js:246:17)
    at /data/js-variants/multee/Original/art-template/node_modules/async/lib/async.js:44:16
    at /data/js-variants/multee/Original/art-template/node_modules/async/lib/async.js:358:17
    at LOOP (node:fs:2659:14)
    at processTicksAndRejections (node:internal/process/task_queues:78:11) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/data/js-variants/multee/Original/art-template/index.js',
    '/data/js-variants/multee/Original/art-template/test/node.js',
    '/data/js-variants/multee/Original/art-template/node_modules/mocha/lib/mocha.js',
    '/data/js-variants/multee/Original/art-template/node_modules/mocha/index.js',
    '/data/js-variants/multee/Original/art-template/node_modules/mocha/bin/_mocha'
  ]
}
I am package default-gateway
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-01T16_22_01_517Z-debug-0.log
I am package javascript-obfuscator
Could not resolve configuration file @istanbuljs/nyc-config-typescript from /data/js-variants/multee/Original/javascript-obfuscator.
I am package env-cmd

TSError: ⨯ Unable to compile TypeScript:
src/signal-termination.ts(92,7): error TS2322: Type 'true' is not assignable to type 'void'.

    at createTSError (/data/js-variants/multee/Original/env-cmd/node_modules/ts-node/src/index.ts:434:12)
    at reportTSError (/data/js-variants/multee/Original/env-cmd/node_modules/ts-node/src/index.ts:438:19)
    at getOutput (/data/js-variants/multee/Original/env-cmd/node_modules/ts-node/src/index.ts:578:36)
    at Object.compile (/data/js-variants/multee/Original/env-cmd/node_modules/ts-node/src/index.ts:775:32)
    at Module.m._compile (/data/js-variants/multee/Original/env-cmd/node_modules/ts-node/src/index.ts:858:43)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at require.extensions.<computed> (/data/js-variants/multee/Original/env-cmd/node_modules/ts-node/src/index.ts:861:12)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/env-cmd/test/env-cmd.spec.ts:3:1)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module.m._compile (/data/js-variants/multee/Original/env-cmd/node_modules/ts-node/src/index.ts:858:23)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at require.extensions.<computed> (/data/js-variants/multee/Original/env-cmd/node_modules/ts-node/src/index.ts:861:12)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at requireOrImport (/data/js-variants/multee/Original/env-cmd/node_modules/mocha/lib/esm-utils.js:15:12)
    at Object.exports.loadFilesAsync (/data/js-variants/multee/Original/env-cmd/node_modules/mocha/lib/esm-utils.js:28:26)
    at Mocha.loadFilesAsync (/data/js-variants/multee/Original/env-cmd/node_modules/mocha/lib/mocha.js:386:19)
    at singleRun (/data/js-variants/multee/Original/env-cmd/node_modules/mocha/lib/cli/run-helpers.js:149:15)
    at exports.runMocha (/data/js-variants/multee/Original/env-cmd/node_modules/mocha/lib/cli/run-helpers.js:186:11)
    at Object.exports.handler (/data/js-variants/multee/Original/env-cmd/node_modules/mocha/lib/cli/run.js:319:11)
    at /data/js-variants/multee/Original/env-cmd/node_modules/yargs/lib/command.js:241:49
I am package mongoosastic
FAIL test/mapping.test.ts (29.434 s)
  ● MappingGenerator › type mapping › maps field with simple text type

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › maps field with text type attribute

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › converts Date type to date

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › removes _id field without prefix

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › does not remove _id field with prefix

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › converts object id to text if not _id

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › does not modify the original schema tree

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an object and maps it as one

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an object and handles explict es_indexed

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes a nested schema and handles explict es_indexed

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an multi_field and maps it as one

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an geo_point and maps it as one

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an geo_point with independent lat lon fields and maps it as one

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an nested schema and maps it

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an es_type of nested with es_fields and maps it

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes a nested array with a simple type and maps it as a simple attribute

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes a nested array with a simple type and additional attributes and maps it as a simple attribute

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes a nested array with a complex object and maps it

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › excludes a virtual property from mapping

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › should not map type mixed on mixed fields

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › should not map type mixed on mixed fields

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/index.test.ts (202.027 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      Error [ERR_UNHANDLED_ERROR]: Unhandled error. (JestAssertionError: expect(received).toBeFalsy()
      
      Received: [MongooseError: Operation `tweets.findOneAndDelete()` buffering timed out after 10000ms]
          at /data/js-variants/multee/Original/mongoosastic/test/index.test.ts:349:21
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/model.js:4931:18
          at processTicksAndRejections (node:internal/process/task_queues:78:11) {
        matcherResult: { message: [Function: message], pass: false }
      })
          at new NodeError (node:internal/errors:387:5)
          at Function.emit (node:events:502:17)
          at Function.emit (node:domain:489:12)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/model.js:4933:15
          at processTicksAndRejections (node:internal/process/task_queues:78:11)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● indexing › Creating Index › should create index with settings if none exists

    MongooseError: Caught error after test environment was torn down

    Operation `mymodels.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Creating Index › should update index if one already exists

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Creating Index › should update index if one already exists

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Default plugin › should use the model's id as ES id

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should use the model's id as ES id

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Default plugin › should use the model's id as ES id

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      163 |     })
      164 |
    > 165 |     it('should use the model\'s id as ES id', async function () {
          |     ^
      166 |       const doc = await Tweet.findOne({ message: 'I like Riak better' })
      167 |       const esDoc = await esClient.get({
      168 |         index: 'tweets',

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:165:5)

  ● indexing › Default plugin › should be able to execute a simple query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should be able to execute a simple query

    MongooseError: Operation `tweets.findOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Default plugin › should be able to execute a simple query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Default plugin › should be able to execute a simple query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should be able to execute a simple query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Default plugin › should reindex when findOneAndUpdate

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should reindex when findOneAndUpdate

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      195 |     })
      196 |
    > 197 |     it('should reindex when findOneAndUpdate', async function () {
          |     ^
      198 |       await Tweet.findOneAndUpdate({
      199 |         message: 'I like Riak better'
      200 |       }, {

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:197:5)

  ● indexing › Default plugin › should be able to execute findOneAndUpdate if document doesn't exist

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should be able to execute findOneAndUpdate if document doesn't exist

    MongooseError: Operation `tweets.findOneAndUpdate()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Default plugin › should be able to execute findOneAndUpdate if document doesn't exist

    MongooseError: Operation `tweets.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Default plugin › should be able to index with insertMany

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should be able to index with insertMany

    Unhandled error. (JestAssertionError: expect(received).toBeFalsy()

    Received: [MongooseError: Operation `tweets.findOneAndUpdate()` buffering timed out after 10000ms]

      225 |         new: true
      226 |       }, function (err, doc) {
    > 227 |         expect(err).toBeFalsy()
          |                     ^
      228 |         expect(doc).toBeFalsy()
      229 |         done()
      230 |       })

      at test/index.test.ts:227:21
      at node_modules/mongoose/lib/model.js:4931:18
        matcherResult: { message: [Function: message], pass: false }
      })Error [ERR_UNHANDLED_ERROR]: Unhandled error. (JestAssertionError: expect(received).toBeFalsy()
      Received: [MongooseError: Operation `tweets.findOneAndUpdate()` buffering timed out after 10000ms]
      at test/index.test.ts:227:21
      at node_modules/mongoose/lib/model.js:4931:18
        matcherResult: { message: [Function: message], pass: false }
      })
      at node_modules/mongoose/lib/model.js:4933:15

  ● indexing › Default plugin › should report errors

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should report errors

    expect(received).toMatch(expected)

    Expected pattern: /(SearchPhaseExecutionException|parsing_exception)/
    Received string:  "connect ECONNREFUSED 127.0.0.1:9200"

      261 |       } as any) // We used 'any' since we are testing the case of passing an incorrect queries
      262 |         .then(results => expect(results).toBeFalsy())
    > 263 |         .catch(error => expect(error.message).toMatch(/(SearchPhaseExecutionException|parsing_exception)/))
          |                                               ^
      264 |     })
      265 |   })
      266 |

      at test/index.test.ts:263:47

  ● indexing › Removing › should remove from index when model is removed

    MongooseError: Operation `tweets.insertMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove from index when model is removed

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should remove from index when model is removed

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove from index when model is removed

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      276 |     })
      277 |
    > 278 |     it('should remove from index when model is removed', async function () {
          |     ^
      279 |       await tweet.remove()
      280 |       await config.sleep(config.INDEXING_TIMEOUT)
      281 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:278:5)

  ● indexing › Removing › should remove only index

    MongooseError: Operation `tweets.deleteOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove only index

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should remove only index

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove only index

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Removing › should queue for later removal if not in index

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should queue for later removal if not in index

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove from index when findOneAndRemove

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should remove from index when findOneAndRemove

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove from index when findOneAndRemove

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      322 |     })
      323 |
    > 324 |     it('should remove from index when findOneAndRemove', async function () {
          |     ^
      325 |       tweet = new Tweet({
      326 |         user: 'jamescarr',
      327 |         message: 'findOneAndRemove'

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:324:5)

  ● indexing › Removing › should be able to execute findOneAndRemove if document doesn't exist

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should be able to execute findOneAndRemove if document doesn't exist

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should be able to execute findOneAndRemove if document doesn't exist

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should be able to execute findOneAndRemove if document doesn't exist

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      343 |     })
      344 |
    > 345 |     it('should be able to execute findOneAndRemove if document doesn\'t exist', function (done) {
          |     ^
      346 |       Tweet.findOneAndRemove({
      347 |         message: 'Not existing document'
      348 |       }, {}, (err, doc) => {

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:345:5)

  ● indexing › Isolated Models › should only find models of type Tweet

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Isolated Models › should only find models of type Tweet

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Isolated Models › should only find models of type Tweet

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Isolated Models › should only find models of type Talk

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Isolated Models › should only find models of type Talk

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Always hydrate › when gathering search results while respecting default hydrate options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Always hydrate › when gathering search results while respecting default hydrate options

    MongooseError: Operation `people.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Always hydrate › when gathering search results while respecting default hydrate options

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Subset of Fields › should only return indexed fields

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › should only return indexed fields

    MongooseError: Operation `talks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Subset of Fields › should only return indexed fields

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Subset of Fields › should hydrate returned documents if desired

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › should hydrate returned documents if desired

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Subset of Fields › Sub-object Fields › should only return indexed fields and have indexed sub-objects

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › Sub-object Fields › should only return indexed fields and have indexed sub-objects

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › Sub-object Fields › should only return indexed fields and have indexed sub-objects

    MongooseError: Operation `people.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Subset of Fields › Sub-object Fields › should only return indexed fields and have indexed sub-objects

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Subset of Fields › should allow extra query options when hydrating

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › should allow extra query options when hydrating

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Existing Index › should just work

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Existing Index › should just work

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      558 |     })
      559 |
    > 560 |     it('should just work', async function () {
          |     ^
      561 |       await config.createModelAndEnsureIndex(Bum, {
      562 |         name: 'Roger Wilson'
      563 |       })

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:560:5)

  ● indexing › Disable automatic indexing › should save but not index

    MongooseError: Operation `bums.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Disable automatic indexing › should save but not index

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      575 |   describe('Disable automatic indexing', function () {
      576 |
    > 577 |     it('should save but not index', async function () {
          |     ^
      578 |       const newDog = new Dog({ name: 'Sparky' })
      579 |
      580 |       let whoopsIndexed = false

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:577:5)

FAIL test/search.test.ts (15.346 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `tweets.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Query DSL › range › should be able to find within range

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › range › should be able to find within range

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Simple sort › should be able to return all data, sorted by name ascending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Simple sort › should be able to return all data, sorted by name ascending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Simple sort › should be able to return all data, sorted by name descending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Simple sort › should be able to return all data, sorted by name descending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Complex sort › should be able to return all data, sorted by name ascending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Complex sort › should be able to return all data, sorted by name ascending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Complex sort › should be able to return all data, sorted by name descending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Complex sort › should be able to return all data, sorted by name descending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Aggregations › Simple aggregation › should be able to group by term

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Aggregations › Simple aggregation › should be able to group by term

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Fuzzy search › should do a fuzzy query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Fuzzy search › should do a fuzzy query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/geo.test.ts (35.835 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `bonds.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● GeoTest › should create a mapping where frame has the type geo_shape

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should create a mapping where frame has the type geo_shape

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● GeoTest › should be able to create and store geo coordinates

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should be able to create and store geo coordinates

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      77 |   })
      78 |
    > 79 |   it('should be able to create and store geo coordinates', async function () {
         |   ^
      80 |
      81 |     for (const point of points) {
      82 |       await point.save()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/geo.test.ts:79:3)

  ● GeoTest › should be able to find geo coordinates in the indexes

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should be able to find geo coordinates in the indexes

    MongooseError: Operation `geodocs.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● GeoTest › should be able to find geo coordinates in the indexes

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● GeoTest › should be able to resync geo coordinates from the database

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should be able to resync geo coordinates from the database

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● GeoTest › should be able to search points inside frames

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should be able to search points inside frames

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/hydrate-with-es-results.test.ts (24.22 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `geodocs.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Hydrate with ES data › Hydrate without adding ES data › should return simple objects

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Hydrate without adding ES data › should return simple objects

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Hydrate and add ES data › should return object enhanced with _esResult

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Hydrate and add ES data › should return object enhanced with _esResult

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Hydrate and add ES data › should remove _source object

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Hydrate and add ES data › should remove _source object

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/ref.test.ts (63.977 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `texts.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseServerSelectionError: Caught error after test environment was torn down
      
      Error: connect ECONNREFUSED 127.0.0.1:27017
          at NativeConnection.Object.<anonymous>.Connection.openUri (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/connection.js:797:32)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:332:10
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
          at new Promise (<anonymous>)
          at promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
          at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:1153:10)
          at Mongoose.Object.<anonymous>.Mongoose.connect (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:331:20)
          at Object.<anonymous> (/data/js-variants/multee/Original/mongoosastic/test/hydrate-with-es-results.test.ts:43:20)
          at Generator.next (<anonymous>)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/tslib/tslib.js:117:75

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● references › indexing › should index selected fields from referenced schema

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › should index selected fields from referenced schema

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › should index selected fields from referenced schema

    MongooseError: Operation `users.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● references › indexing › should index selected fields from referenced schema

    MongooseServerSelectionError: Error: connect ECONNREFUSED 127.0.0.1:27017

      50 |
      51 |   beforeAll(async function () {
    > 52 |     await mongoose.connect(config.mongoUrl, config.mongoOpts)
         |                    ^
      53 |     await config.deleteIndexIfExists(['posts', 'users', 'postcomments'])
      54 |
      55 |     for (const model of [Post, User, PostComment]) {

      at NativeConnection.Object.<anonymous>.Connection.openUri (node_modules/mongoose/lib/connection.js:797:32)
      at node_modules/mongoose/lib/index.js:332:10
      at node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
      at promiseOrCallback (node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
      at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (node_modules/mongoose/lib/index.js:1153:10)
      at Mongoose.Object.<anonymous>.Mongoose.connect (node_modules/mongoose/lib/index.js:331:20)
      at Object.<anonymous> (test/ref.test.ts:52:20)
      at node_modules/tslib/tslib.js:117:75

  ● references › indexing › should index selected fields from referenced schema

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      91 |     })
      92 |
    > 93 |     it('should index selected fields from referenced schema', async function () {
         |     ^
      94 |
      95 |       const post = await Post.findOne({})
      96 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/ref.test.ts:93:5)

  ● references › indexing › should be able to execute a simple query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › should be able to execute a simple query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › should be able to execute a simple query

    MongooseError: Operation `posts.findOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● references › indexing › should be able to execute a simple query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● references › indexing › arrays of references › should correctly index arrays

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › arrays of references › should correctly index arrays

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › arrays of references › should correctly index arrays

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      118 |     describe('arrays of references', function () {
      119 |
    > 120 |       it('should correctly index arrays', async function () {
          |       ^
      121 |
      122 |         const post = await Post.findOne({})
      123 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/ref.test.ts:120:7)

  ● references › indexing › arrays of references › should respect populate options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › arrays of references › should respect populate options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › arrays of references › should respect populate options

    MongooseError: Operation `posts.findOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● references › indexing › arrays of references › should respect populate options

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      133 |       })
      134 |
    > 135 |       it('should respect populate options', async function () {
          |       ^
      136 |
      137 |         const post = await Post.findOne({})
      138 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/ref.test.ts:135:7)

FAIL test/synchronize.test.ts (44.849 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `posts.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Synchronize › an existing collection with invalid field values › should index all but one document

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Synchronize › an existing collection with invalid field values › should index all but one document

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      59 |     })
      60 |
    > 61 |     it('should index all but one document', done => {
         |     ^
      62 |       saveCounter = 0
      63 |       const stream = Book.synchronize()
      64 |       let count = 0

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/synchronize.test.ts:61:5)

  ● Synchronize › an existing collection › should index all existing objects

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Synchronize › an existing collection › should index all existing objects

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      107 |     })
      108 |
    > 109 |     it('should index all existing objects', done => {
          |     ^
      110 |       saveCounter = 0
      111 |       let count = 0
      112 |       const stream = Book.synchronize()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/synchronize.test.ts:109:5)

  ● Synchronize › an existing collection › should index all existing objects without saving them in MongoDB

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Synchronize › an existing collection › should index all existing objects without saving them in MongoDB

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      133 |     })
      134 |
    > 135 |     it('should index all existing objects without saving them in MongoDB', done => {
          |     ^
      136 |       saveCounter = 0
      137 |       const stream = Book.synchronize({}, { saveOnSynchronize: false })
      138 |       let count = 0

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/synchronize.test.ts:135:5)

FAIL test/force-index-refresh.test.ts (64.804 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `books.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on insert

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on insert

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      46 |   })
      47 |
    > 48 |   it('should always suceed: refresh the index immediately on insert', async function () {
         |   ^
      49 |     const d = new DummyRefresh({ text: 'Text1' })
      50 |     const refresh = true
      51 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/force-index-refresh.test.ts:48:3)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on insert

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on insert

    MongooseError: Operation `dummyrefreshes.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on insert

    MongooseServerSelectionError: Error: connect ECONNREFUSED 127.0.0.1:27017

      30 |
      31 |   beforeAll(async function () {
    > 32 |     await mongoose.connect(config.mongoUrl, config.mongoOpts)
         |                    ^
      33 |     await config.deleteIndexIfExists(['indexName'])
      34 |     for (const model of [Dummy, DummyRefresh]) {
      35 |       await model.deleteMany()

      at NativeConnection.Object.<anonymous>.Connection.openUri (node_modules/mongoose/lib/connection.js:797:32)
      at node_modules/mongoose/lib/index.js:332:10
      at node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
      at promiseOrCallback (node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
      at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (node_modules/mongoose/lib/index.js:1153:10)
      at Mongoose.Object.<anonymous>.Mongoose.connect (node_modules/mongoose/lib/index.js:331:20)
      at Object.<anonymous> (test/force-index-refresh.test.ts:32:20)
      at node_modules/tslib/tslib.js:117:75

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on insert

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      53 |   })
      54 |
    > 55 |   it('should fail randomly: refresh the index every 1s on insert', async function () {
         |   ^
      56 |     const d = new Dummy({ text: 'Text1' })
      57 |     const refresh = false
      58 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/force-index-refresh.test.ts:55:3)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on update

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on update

    MongooseError: Operation `dummies.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on update

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      60 |   })
      61 |
    > 62 |   it('should always suceed: refresh the index immediately on update', async function () {
         |   ^
      63 |     const d = new DummyRefresh({ text: 'Text1' })
      64 |     const refresh = true
      65 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/force-index-refresh.test.ts:62:3)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on update

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on update

    MongooseError: Operation `dummyrefreshes.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on update

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      67 |   })
      68 |
    > 69 |   it('should fail randomly: refresh the index every 1s on update', async function () {
         |   ^
      70 |     const d = new Dummy({ text: 'Text1' })
      71 |     const refresh = false
      72 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/force-index-refresh.test.ts:69:3)

FAIL test/highlight.test.ts (24.45 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `dummies.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Highlight search › Highlight without hydrating › should return highlighted text on every hit result

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Highlight search › Highlight without hydrating › should return highlighted text on every hit result

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Highlight search › Highlight hydrated results › should return highlighted text on every resulting document

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Highlight search › Highlight hydrated results › should return highlighted text on every resulting document

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/geo-bounding-box.test.ts (36.471 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `texts.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseServerSelectionError: Caught error after test environment was torn down
      
      Error: connect ECONNREFUSED 127.0.0.1:27017
          at NativeConnection.Object.<anonymous>.Connection.openUri (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/connection.js:797:32)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:332:10
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
          at new Promise (<anonymous>)
          at promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
          at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:1153:10)
          at Mongoose.Object.<anonymous>.Mongoose.connect (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:331:20)
          at Object.<anonymous> (/data/js-variants/multee/Original/mongoosastic/test/highlight.test.ts:50:20)
          at Generator.next (<anonymous>)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/tslib/tslib.js:117:75

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Geo Bounding Box Test › should be able to create and store geo coordinates

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Geo Bounding Box Test › should be able to create and store geo coordinates

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      63 |   })
      64 |
    > 65 |   it('should be able to create and store geo coordinates', async function () {
         |   ^
      66 |
      67 |     for (const point of points) {
      68 |       await point.save()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/geo-bounding-box.test.ts:65:3)

  ● Geo Bounding Box Test › should be able to find geo coordinates in the indexes

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Geo Bounding Box Test › should be able to find geo coordinates in the indexes

    MongooseError: Operation `geoboundingdocs.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Geo Bounding Box Test › should be able to find geo coordinates in the indexes

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Geo Bounding Box Test › should be able to resync geo coordinates from the database

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Geo Bounding Box Test › should be able to resync geo coordinates from the database

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Geo Bounding Box Test › should be able to search bounding box

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Geo Bounding Box Test › should be able to search bounding box

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/hydrate-preserves-ordering.test.ts (24.571 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `geoboundingdocs.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Hydrate with ES data › Preserve ordering from MongoDB on hydration › should return an array of objects ordered 'desc' by MongoDB

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Preserve ordering from MongoDB on hydration › should return an array of objects ordered 'desc' by MongoDB

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Preserve ordering from MongoDB on hydration › should return an array of objects ordered 'asc' by MongoDB

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Preserve ordering from MongoDB on hydration › should return an array of objects ordered 'asc' by MongoDB

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Preserve ordering from ElasticSearch on hydration › should return an array of objects ordered 'desc' by ES

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Preserve ordering from ElasticSearch on hydration › should return an array of objects ordered 'desc' by ES

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Preserve ordering from ElasticSearch on hydration › should return an array of objects ordered 'asc' by ES

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Preserve ordering from ElasticSearch on hydration › should return an array of objects ordered 'asc' by ES

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/routing.test.ts (175.294 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `ranks.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseServerSelectionError: Caught error after test environment was torn down
      
      Error: connect ECONNREFUSED 127.0.0.1:27017
          at NativeConnection.Object.<anonymous>.Connection.openUri (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/connection.js:797:32)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:332:10
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
          at new Promise (<anonymous>)
          at promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
          at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:1153:10)
          at Mongoose.Object.<anonymous>.Mongoose.connect (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:331:20)
          at Object.<anonymous> (/data/js-variants/multee/Original/mongoosastic/test/hydrate-preserves-ordering.test.ts:38:20)
          at Generator.next (<anonymous>)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/tslib/tslib.js:117:75

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Routing › should found task if no routing

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should found task if no routing

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      34 |   })
      35 |
    > 36 |   it('should found task if no routing', async function () {
         |   ^
      37 |
      38 |     const task = await config.createModelAndEnsureIndex(Task, { content: Date.now() })
      39 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:36:3)

  ● Routing › should found task if routing with task.content

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should found task if routing with task.content

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should found task if routing with task.content

    MongooseServerSelectionError: Error: connect ECONNREFUSED 127.0.0.1:27017

      23 |
      24 |   beforeAll(async function () {
    > 25 |     await mongoose.connect(config.mongoUrl, config.mongoOpts)
         |                    ^
      26 |     await config.deleteIndexIfExists(['tasks'])
      27 |     await Task.deleteMany()
      28 |   })

      at NativeConnection.Object.<anonymous>.Connection.openUri (node_modules/mongoose/lib/connection.js:797:32)
      at node_modules/mongoose/lib/index.js:332:10
      at node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
      at promiseOrCallback (node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
      at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (node_modules/mongoose/lib/index.js:1153:10)
      at Mongoose.Object.<anonymous>.Mongoose.connect (node_modules/mongoose/lib/index.js:331:20)
      at Object.<anonymous> (test/routing.test.ts:25:20)
      at node_modules/tslib/tslib.js:117:75

  ● Routing › should found task if routing with task.content

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      47 |   })
      48 |
    > 49 |   it('should found task if routing with task.content', async function () {
         |   ^
      50 |
      51 |     const task = await config.createModelAndEnsureIndex(Task, { content: Date.now() })
      52 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:49:3)

  ● Routing › should not found task if routing with invalid routing

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should not found task if routing with invalid routing

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should not found task if routing with invalid routing

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      63 |   })
      64 |
    > 65 |   it('should not found task if routing with invalid routing', async function () {
         |   ^
      66 |
      67 |     const task = await config.createModelAndEnsureIndex(Task, { content: Date.now() })
      68 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:65:3)

  ● Routing › should not found task after remove

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should not found task after remove

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should not found task after remove

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      78 |   })
      79 |
    > 80 |   it('should not found task after remove', async function () {
         |   ^
      81 |     const task = await Task.create({ content: Date.now() })
      82 |
      83 |     await task.remove()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:80:3)

  ● Routing › should not found task after unIndex

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should not found task after unIndex

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should not found task after unIndex

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      93 |   })
      94 |
    > 95 |   it('should not found task after unIndex', async function () {
         |   ^
      96 |     const task = await Task.create({ content: Date.now() })
      97 |
      98 |     await task.unIndex()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:95:3)

  ● Routing › should not found task after esTruncate

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should not found task after esTruncate

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should not found task after esTruncate

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      107 |   })
      108 |
    > 109 |   it('should not found task after esTruncate', async function () {
          |   ^
      110 |     const task = await Task.create({ content: Date.now() })
      111 |
      112 |     await Task.esTruncate()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:109:3)

PASS test/serialize.test.ts
FAIL test/transform.test.ts (33.337 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `tasks.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Transform mode › should index with field "fullTitle"

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Transform mode › should index with field "fullTitle"

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      66 |   })
      67 |
    > 68 |   it('should index with field "fullTitle"', async function () {
         |   ^
      69 |
      70 |     await config.createModelAndEnsureIndex(Repo, {
      71 |       name: 'LOTR',

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/transform.test.ts:68:3)

  ● Transform mode › should wait for promise if transform is async

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Transform mode › should wait for promise if transform is async

    MongooseError: Operation `repos.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Transform mode › should wait for promise if transform is async

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      83 |   })
      84 |
    > 85 |   it('should wait for promise if transform is async', async function () {
         |   ^
      86 |
      87 |     await config.createModelAndEnsureIndex(Podcast, {
      88 |       name: 'The Fitzroy Diaries'

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/transform.test.ts:85:3)

FAIL test/filtering.test.ts (53.978 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `repos.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Filter mode › should index horror genre

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Filter mode › should index horror genre

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      48 |   })
      49 |
    > 50 |   it('should index horror genre', async function () {
         |   ^
      51 |     await config.createModelAndEnsureIndex(Movie, {
      52 |       title: 'LOTR',
      53 |       genre: 'horror'

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/filtering.test.ts:50:3)

  ● Filter mode › should not index action genre

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Filter mode › should not index action genre

    MongooseError: Operation `movies.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Filter mode › should not index action genre

    MongooseServerSelectionError: Error: connect ECONNREFUSED 127.0.0.1:27017

      37 |
      38 |   beforeAll(async function () {
    > 39 |     await mongoose.connect(config.mongoUrl, config.mongoOpts)
         |                    ^
      40 |     await Movie.deleteMany()
      41 |     await config.deleteIndexIfExists(['movies'])
      42 |   })

      at NativeConnection.Object.<anonymous>.Connection.openUri (node_modules/mongoose/lib/connection.js:797:32)
      at node_modules/mongoose/lib/index.js:332:10
      at node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
      at promiseOrCallback (node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
      at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (node_modules/mongoose/lib/index.js:1153:10)
      at Mongoose.Object.<anonymous>.Mongoose.connect (node_modules/mongoose/lib/index.js:331:20)
      at Object.<anonymous> (test/filtering.test.ts:39:20)
      at node_modules/tslib/tslib.js:117:75

  ● Filter mode › should not index action genre

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      63 |   })
      64 |
    > 65 |   it('should not index action genre', async function () {
         |   ^
      66 |
      67 |     await config.createModelAndSave(Movie, {
      68 |       title: 'Man in Black',

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/filtering.test.ts:65:3)

  ● Filter mode › should unindex filtered models

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Filter mode › should unindex filtered models

    MongooseError: Operation `movies.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Filter mode › should unindex filtered models

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      79 |   })
      80 |
    > 81 |   it('should unindex filtered models', async function () {
         |   ^
      82 |     const movie = await config.createModelAndEnsureIndex(Movie, {
      83 |       title: 'REC',
      84 |       genre: 'horror'

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/filtering.test.ts:81:3)

FAIL test/connection.test.ts (29.144 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `movies.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Elasticsearch Connection › should be able to connect with default options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Elasticsearch Connection › should be able to connect with default options

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Elasticsearch Connection › should be able to connect with explicit options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Elasticsearch Connection › should be able to connect with explicit options

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Elasticsearch Connection › should be able to connect with an existing elasticsearch client

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Elasticsearch Connection › should be able to connect with an existing elasticsearch client

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/suggesters.test.ts (33.11 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `tweets.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseServerSelectionError: Caught error after test environment was torn down
      
      Error: connect ECONNREFUSED 127.0.0.1:27017
          at NativeConnection.Object.<anonymous>.Connection.openUri (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/connection.js:797:32)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:332:10
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
          at new Promise (<anonymous>)
          at promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
          at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:1153:10)
          at Mongoose.Object.<anonymous>.Mongoose.connect (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:331:20)
          at Object.<anonymous> (/data/js-variants/multee/Original/mongoosastic/test/connection.test.ts:34:20)
          at Generator.next (<anonymous>)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/tslib/tslib.js:117:75

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Suggesters › Testing Suggest › should index property name with type completion

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Suggesters › Testing Suggest › should index property name with type completion

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Suggesters › Testing Suggest › should return suggestions after hits

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Suggesters › Testing Suggest › should return suggestions after hits

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      73 |     })
      74 |
    > 75 |     it('should return suggestions after hits', async function () {
         |     ^
      76 |
      77 |       await Kitten.insertMany(kittens)
      78 |       await config.sleep(config.BULK_ACTION_TIMEOUT)

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/suggesters.test.ts:75:5)

FAIL test/custom-mapping.test.ts (23.643 s)
  ● Custom Properties for Mapping › should index with field "created"

    MongooseError: Caught error after test environment was torn down

    Operation `kittens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    MongooseError: Operation `phones.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

FAIL test/alternative-index-method.test.ts (39.96 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `phones.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseServerSelectionError: Caught error after test environment was torn down
      
      Error: connect ECONNREFUSED 127.0.0.1:27017
          at NativeConnection.Object.<anonymous>.Connection.openUri (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/connection.js:797:32)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:332:10
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
          at new Promise (<anonymous>)
          at promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
          at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:1153:10)
          at Mongoose.Object.<anonymous>.Mongoose.connect (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:331:20)
          at Object.<anonymous> (/data/js-variants/multee/Original/mongoosastic/test/custom-mapping.test.ts:40:20)
          at Generator.next (<anonymous>)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/tslib/tslib.js:117:75

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Index Method › should be able to index it directly without saving

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Index Method › should be able to index it directly without saving

    MongooseError: Caught error after test environment was torn down

    Operation `phones.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Index Method › should be able to index to alternative index

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Index Method › should be able to index to alternative index

    MongooseError: Operation `tweets.findOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Index Method › should be able to index to alternative index

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      44 |   })
      45 |
    > 46 |   it('should be able to index to alternative index', async function () {
         |   ^
      47 |     const doc = await Tweet.findOne({ message: 'I know kung-fu!' })
      48 |
      49 |     if (doc) {

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/alternative-index-method.test.ts:46:3)

FAIL test/count.test.ts (24.54 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `tweets.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Count › should count a type

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Count › should count a type

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Count › should count a type without query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Count › should count a type without query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/bulk.test.ts (8.207 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `comments.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Bulk mode › should index all objects and support deletions too

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Bulk mode › should index all objects and support deletions too

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/custom-serialize.test.ts (32.937 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseServerSelectionError: Caught error after test environment was torn down
      
      Error: connect ECONNREFUSED 127.0.0.1:27017
          at NativeConnection.Object.<anonymous>.Connection.openUri (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/connection.js:797:32)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:332:10
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
          at new Promise (<anonymous>)
          at promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
          at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:1153:10)
          at Mongoose.Object.<anonymous>.Mongoose.connect (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:331:20)
          at Object.<anonymous> (/data/js-variants/multee/Original/mongoosastic/test/count.test.ts:50:20)
          at Generator.next (<anonymous>)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/tslib/tslib.js:117:75

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Custom Serialize › should index all fields returned from the customSerialize function

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Custom Serialize › should index all fields returned from the customSerialize function

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      43 |   })
      44 |
    > 45 |   it('should index all fields returned from the customSerialize function', async function () {
         |   ^
      46 |
      47 |     await config.createModelAndEnsureIndex(Food, { name: 'pizza' })
      48 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/custom-serialize.test.ts:45:3)

FAIL test/boost-field.test.ts (22.968 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `foods.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Add Boost Option Per Field › should create a mapping with boost field added

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Add Boost Option Per Field › should create a mapping with boost field added

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/truncate.test.ts (23.197 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `blogposts.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseServerSelectionError: Caught error after test environment was torn down
      
      Error: connect ECONNREFUSED 127.0.0.1:27017
          at NativeConnection.Object.<anonymous>.Connection.openUri (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/connection.js:797:32)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:332:10
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
          at new Promise (<anonymous>)
          at promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
          at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:1153:10)
          at Mongoose.Object.<anonymous>.Mongoose.connect (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:331:20)
          at Object.<anonymous> (/data/js-variants/multee/Original/mongoosastic/test/boost-field.test.ts:31:20)
          at Generator.next (<anonymous>)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/tslib/tslib.js:117:75

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Truncate › esTruncate › should be able to truncate all documents

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Truncate › esTruncate › should be able to truncate all documents

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/refresh.test.ts (33.055 s)
  ● Console

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseError: Caught error after test environment was torn down
      
      Operation `dummytruncates.deleteMany()` buffering timed out after 10000ms
          at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
          at listOnTimeout (node:internal/timers:559:17)
          at processTimers (node:internal/timers:502:7)

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      Unhandled error

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:248:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

    console.error
      MongooseServerSelectionError: Caught error after test environment was torn down
      
      Error: connect ECONNREFUSED 127.0.0.1:27017
          at NativeConnection.Object.<anonymous>.Connection.openUri (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/connection.js:797:32)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:332:10
          at /data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
          at new Promise (<anonymous>)
          at promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
          at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:1153:10)
          at Mongoose.Object.<anonymous>.Mongoose.connect (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/index.js:331:20)
          at Object.<anonymous> (/data/js-variants/multee/Original/mongoosastic/test/truncate.test.ts:21:20)
          at Generator.next (<anonymous>)
          at /data/js-variants/multee/Original/mongoosastic/node_modules/tslib/tslib.js:117:75

      at process.uncaught (node_modules/jest-jasmine2/build/jasmine/Env.js:249:21)
      at processEmit (../../../../../usr/local/lib/node_modules/nyc/node_modules/signal-exit/index.js:199:34)
      at process.emit.sharedData.processEmitHook.installedValue (node_modules/@cspotcode/source-map-support/source-map-support.js:613:40)
      at processEmit [as emit] (node_modules/signal-exit/index.js:175:34)

  ● Refresh › should be able to search for the element after refresh

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Refresh › should be able to search for the element after refresh

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      32 |   })
      33 |
    > 34 |   it('should be able to search for the element after refresh', async function () {
         |   ^
      35 |
      36 |     const refresh = new Refresh({ title: `${Date.now()}` })
      37 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/refresh.test.ts:34:3)

Summary of all failing tests
FAIL test/mapping.test.ts (29.434 s)
  ● MappingGenerator › type mapping › maps field with simple text type

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › maps field with text type attribute

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › converts Date type to date

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › removes _id field without prefix

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › does not remove _id field with prefix

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › converts object id to text if not _id

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › does not modify the original schema tree

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an object and maps it as one

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an object and handles explict es_indexed

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes a nested schema and handles explict es_indexed

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an multi_field and maps it as one

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an geo_point and maps it as one

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an geo_point with independent lat lon fields and maps it as one

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an nested schema and maps it

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes an es_type of nested with es_fields and maps it

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes a nested array with a simple type and maps it as a simple attribute

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes a nested array with a simple type and additional attributes and maps it as a simple attribute

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › recognizes a nested array with a complex object and maps it

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › excludes a virtual property from mapping

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › should not map type mixed on mixed fields

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● MappingGenerator › type mapping › should not map type mixed on mixed fields

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/index.test.ts (202.027 s)
  ● indexing › Creating Index › should create index with settings if none exists

    MongooseError: Caught error after test environment was torn down

    Operation `mymodels.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Creating Index › should update index if one already exists

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Creating Index › should update index if one already exists

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Default plugin › should use the model's id as ES id

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should use the model's id as ES id

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Default plugin › should use the model's id as ES id

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      163 |     })
      164 |
    > 165 |     it('should use the model\'s id as ES id', async function () {
          |     ^
      166 |       const doc = await Tweet.findOne({ message: 'I like Riak better' })
      167 |       const esDoc = await esClient.get({
      168 |         index: 'tweets',

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:165:5)

  ● indexing › Default plugin › should be able to execute a simple query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should be able to execute a simple query

    MongooseError: Operation `tweets.findOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Default plugin › should be able to execute a simple query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Default plugin › should be able to execute a simple query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should be able to execute a simple query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Default plugin › should reindex when findOneAndUpdate

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should reindex when findOneAndUpdate

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      195 |     })
      196 |
    > 197 |     it('should reindex when findOneAndUpdate', async function () {
          |     ^
      198 |       await Tweet.findOneAndUpdate({
      199 |         message: 'I like Riak better'
      200 |       }, {

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:197:5)

  ● indexing › Default plugin › should be able to execute findOneAndUpdate if document doesn't exist

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should be able to execute findOneAndUpdate if document doesn't exist

    MongooseError: Operation `tweets.findOneAndUpdate()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Default plugin › should be able to execute findOneAndUpdate if document doesn't exist

    MongooseError: Operation `tweets.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Default plugin › should be able to index with insertMany

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should be able to index with insertMany

    Unhandled error. (JestAssertionError: expect(received).toBeFalsy()

    Received: [MongooseError: Operation `tweets.findOneAndUpdate()` buffering timed out after 10000ms]

      225 |         new: true
      226 |       }, function (err, doc) {
    > 227 |         expect(err).toBeFalsy()
          |                     ^
      228 |         expect(doc).toBeFalsy()
      229 |         done()
      230 |       })

      at test/index.test.ts:227:21
      at node_modules/mongoose/lib/model.js:4931:18
        matcherResult: { message: [Function: message], pass: false }
      })Error [ERR_UNHANDLED_ERROR]: Unhandled error. (JestAssertionError: expect(received).toBeFalsy()
      Received: [MongooseError: Operation `tweets.findOneAndUpdate()` buffering timed out after 10000ms]
      at test/index.test.ts:227:21
      at node_modules/mongoose/lib/model.js:4931:18
        matcherResult: { message: [Function: message], pass: false }
      })
      at node_modules/mongoose/lib/model.js:4933:15

  ● indexing › Default plugin › should report errors

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Default plugin › should report errors

    expect(received).toMatch(expected)

    Expected pattern: /(SearchPhaseExecutionException|parsing_exception)/
    Received string:  "connect ECONNREFUSED 127.0.0.1:9200"

      261 |       } as any) // We used 'any' since we are testing the case of passing an incorrect queries
      262 |         .then(results => expect(results).toBeFalsy())
    > 263 |         .catch(error => expect(error.message).toMatch(/(SearchPhaseExecutionException|parsing_exception)/))
          |                                               ^
      264 |     })
      265 |   })
      266 |

      at test/index.test.ts:263:47

  ● indexing › Removing › should remove from index when model is removed

    MongooseError: Operation `tweets.insertMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove from index when model is removed

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should remove from index when model is removed

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove from index when model is removed

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      276 |     })
      277 |
    > 278 |     it('should remove from index when model is removed', async function () {
          |     ^
      279 |       await tweet.remove()
      280 |       await config.sleep(config.INDEXING_TIMEOUT)
      281 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:278:5)

  ● indexing › Removing › should remove only index

    MongooseError: Operation `tweets.deleteOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove only index

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should remove only index

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove only index

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Removing › should queue for later removal if not in index

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should queue for later removal if not in index

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove from index when findOneAndRemove

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should remove from index when findOneAndRemove

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should remove from index when findOneAndRemove

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      322 |     })
      323 |
    > 324 |     it('should remove from index when findOneAndRemove', async function () {
          |     ^
      325 |       tweet = new Tweet({
      326 |         user: 'jamescarr',
      327 |         message: 'findOneAndRemove'

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:324:5)

  ● indexing › Removing › should be able to execute findOneAndRemove if document doesn't exist

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should be able to execute findOneAndRemove if document doesn't exist

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Removing › should be able to execute findOneAndRemove if document doesn't exist

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Removing › should be able to execute findOneAndRemove if document doesn't exist

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      343 |     })
      344 |
    > 345 |     it('should be able to execute findOneAndRemove if document doesn\'t exist', function (done) {
          |     ^
      346 |       Tweet.findOneAndRemove({
      347 |         message: 'Not existing document'
      348 |       }, {}, (err, doc) => {

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:345:5)

  ● indexing › Isolated Models › should only find models of type Tweet

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Isolated Models › should only find models of type Tweet

    MongooseError: Operation `tweets.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Isolated Models › should only find models of type Tweet

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Isolated Models › should only find models of type Talk

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Isolated Models › should only find models of type Talk

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Always hydrate › when gathering search results while respecting default hydrate options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Always hydrate › when gathering search results while respecting default hydrate options

    MongooseError: Operation `people.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Always hydrate › when gathering search results while respecting default hydrate options

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Subset of Fields › should only return indexed fields

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › should only return indexed fields

    MongooseError: Operation `talks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Subset of Fields › should only return indexed fields

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Subset of Fields › should hydrate returned documents if desired

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › should hydrate returned documents if desired

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Subset of Fields › Sub-object Fields › should only return indexed fields and have indexed sub-objects

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › Sub-object Fields › should only return indexed fields and have indexed sub-objects

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › Sub-object Fields › should only return indexed fields and have indexed sub-objects

    MongooseError: Operation `people.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Subset of Fields › Sub-object Fields › should only return indexed fields and have indexed sub-objects

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Subset of Fields › should allow extra query options when hydrating

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● indexing › Subset of Fields › should allow extra query options when hydrating

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Existing Index › should just work

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● indexing › Existing Index › should just work

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      558 |     })
      559 |
    > 560 |     it('should just work', async function () {
          |     ^
      561 |       await config.createModelAndEnsureIndex(Bum, {
      562 |         name: 'Roger Wilson'
      563 |       })

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:560:5)

  ● indexing › Disable automatic indexing › should save but not index

    MongooseError: Operation `bums.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● indexing › Disable automatic indexing › should save but not index

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      575 |   describe('Disable automatic indexing', function () {
      576 |
    > 577 |     it('should save but not index', async function () {
          |     ^
      578 |       const newDog = new Dog({ name: 'Sparky' })
      579 |
      580 |       let whoopsIndexed = false

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/index.test.ts:577:5)

FAIL test/search.test.ts (15.346 s)
  ● Query DSL › range › should be able to find within range

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › range › should be able to find within range

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Simple sort › should be able to return all data, sorted by name ascending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Simple sort › should be able to return all data, sorted by name ascending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Simple sort › should be able to return all data, sorted by name descending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Simple sort › should be able to return all data, sorted by name descending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Complex sort › should be able to return all data, sorted by name ascending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Complex sort › should be able to return all data, sorted by name ascending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Complex sort › should be able to return all data, sorted by name descending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Sort › Complex sort › should be able to return all data, sorted by name descending

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Aggregations › Simple aggregation › should be able to group by term

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Aggregations › Simple aggregation › should be able to group by term

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Fuzzy search › should do a fuzzy query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Query DSL › Fuzzy search › should do a fuzzy query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/geo.test.ts (35.835 s)
  ● GeoTest › should create a mapping where frame has the type geo_shape

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should create a mapping where frame has the type geo_shape

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● GeoTest › should be able to create and store geo coordinates

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should be able to create and store geo coordinates

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      77 |   })
      78 |
    > 79 |   it('should be able to create and store geo coordinates', async function () {
         |   ^
      80 |
      81 |     for (const point of points) {
      82 |       await point.save()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/geo.test.ts:79:3)

  ● GeoTest › should be able to find geo coordinates in the indexes

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should be able to find geo coordinates in the indexes

    MongooseError: Operation `geodocs.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● GeoTest › should be able to find geo coordinates in the indexes

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● GeoTest › should be able to resync geo coordinates from the database

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should be able to resync geo coordinates from the database

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● GeoTest › should be able to search points inside frames

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● GeoTest › should be able to search points inside frames

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/hydrate-with-es-results.test.ts (24.22 s)
  ● Hydrate with ES data › Hydrate without adding ES data › should return simple objects

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Hydrate without adding ES data › should return simple objects

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Hydrate and add ES data › should return object enhanced with _esResult

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Hydrate and add ES data › should return object enhanced with _esResult

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Hydrate and add ES data › should remove _source object

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Hydrate and add ES data › should remove _source object

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/ref.test.ts (63.977 s)
  ● references › indexing › should index selected fields from referenced schema

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › should index selected fields from referenced schema

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › should index selected fields from referenced schema

    MongooseError: Operation `users.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● references › indexing › should index selected fields from referenced schema

    MongooseServerSelectionError: Error: connect ECONNREFUSED 127.0.0.1:27017

      50 |
      51 |   beforeAll(async function () {
    > 52 |     await mongoose.connect(config.mongoUrl, config.mongoOpts)
         |                    ^
      53 |     await config.deleteIndexIfExists(['posts', 'users', 'postcomments'])
      54 |
      55 |     for (const model of [Post, User, PostComment]) {

      at NativeConnection.Object.<anonymous>.Connection.openUri (node_modules/mongoose/lib/connection.js:797:32)
      at node_modules/mongoose/lib/index.js:332:10
      at node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
      at promiseOrCallback (node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
      at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (node_modules/mongoose/lib/index.js:1153:10)
      at Mongoose.Object.<anonymous>.Mongoose.connect (node_modules/mongoose/lib/index.js:331:20)
      at Object.<anonymous> (test/ref.test.ts:52:20)
      at node_modules/tslib/tslib.js:117:75

  ● references › indexing › should index selected fields from referenced schema

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      91 |     })
      92 |
    > 93 |     it('should index selected fields from referenced schema', async function () {
         |     ^
      94 |
      95 |       const post = await Post.findOne({})
      96 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/ref.test.ts:93:5)

  ● references › indexing › should be able to execute a simple query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › should be able to execute a simple query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › should be able to execute a simple query

    MongooseError: Operation `posts.findOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● references › indexing › should be able to execute a simple query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● references › indexing › arrays of references › should correctly index arrays

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › arrays of references › should correctly index arrays

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › arrays of references › should correctly index arrays

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      118 |     describe('arrays of references', function () {
      119 |
    > 120 |       it('should correctly index arrays', async function () {
          |       ^
      121 |
      122 |         const post = await Post.findOne({})
      123 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/ref.test.ts:120:7)

  ● references › indexing › arrays of references › should respect populate options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › arrays of references › should respect populate options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● references › indexing › arrays of references › should respect populate options

    MongooseError: Operation `posts.findOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● references › indexing › arrays of references › should respect populate options

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      133 |       })
      134 |
    > 135 |       it('should respect populate options', async function () {
          |       ^
      136 |
      137 |         const post = await Post.findOne({})
      138 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/ref.test.ts:135:7)

FAIL test/synchronize.test.ts (44.849 s)
  ● Synchronize › an existing collection with invalid field values › should index all but one document

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Synchronize › an existing collection with invalid field values › should index all but one document

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      59 |     })
      60 |
    > 61 |     it('should index all but one document', done => {
         |     ^
      62 |       saveCounter = 0
      63 |       const stream = Book.synchronize()
      64 |       let count = 0

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/synchronize.test.ts:61:5)

  ● Synchronize › an existing collection › should index all existing objects

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Synchronize › an existing collection › should index all existing objects

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      107 |     })
      108 |
    > 109 |     it('should index all existing objects', done => {
          |     ^
      110 |       saveCounter = 0
      111 |       let count = 0
      112 |       const stream = Book.synchronize()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/synchronize.test.ts:109:5)

  ● Synchronize › an existing collection › should index all existing objects without saving them in MongoDB

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Synchronize › an existing collection › should index all existing objects without saving them in MongoDB

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      133 |     })
      134 |
    > 135 |     it('should index all existing objects without saving them in MongoDB', done => {
          |     ^
      136 |       saveCounter = 0
      137 |       const stream = Book.synchronize({}, { saveOnSynchronize: false })
      138 |       let count = 0

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/synchronize.test.ts:135:5)

FAIL test/force-index-refresh.test.ts (64.804 s)
  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on insert

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on insert

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      46 |   })
      47 |
    > 48 |   it('should always suceed: refresh the index immediately on insert', async function () {
         |   ^
      49 |     const d = new DummyRefresh({ text: 'Text1' })
      50 |     const refresh = true
      51 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/force-index-refresh.test.ts:48:3)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on insert

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on insert

    MongooseError: Operation `dummyrefreshes.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on insert

    MongooseServerSelectionError: Error: connect ECONNREFUSED 127.0.0.1:27017

      30 |
      31 |   beforeAll(async function () {
    > 32 |     await mongoose.connect(config.mongoUrl, config.mongoOpts)
         |                    ^
      33 |     await config.deleteIndexIfExists(['indexName'])
      34 |     for (const model of [Dummy, DummyRefresh]) {
      35 |       await model.deleteMany()

      at NativeConnection.Object.<anonymous>.Connection.openUri (node_modules/mongoose/lib/connection.js:797:32)
      at node_modules/mongoose/lib/index.js:332:10
      at node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
      at promiseOrCallback (node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
      at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (node_modules/mongoose/lib/index.js:1153:10)
      at Mongoose.Object.<anonymous>.Mongoose.connect (node_modules/mongoose/lib/index.js:331:20)
      at Object.<anonymous> (test/force-index-refresh.test.ts:32:20)
      at node_modules/tslib/tslib.js:117:75

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on insert

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      53 |   })
      54 |
    > 55 |   it('should fail randomly: refresh the index every 1s on insert', async function () {
         |   ^
      56 |     const d = new Dummy({ text: 'Text1' })
      57 |     const refresh = false
      58 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/force-index-refresh.test.ts:55:3)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on update

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on update

    MongooseError: Operation `dummies.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● forceIndexRefresh connection option › should always suceed: refresh the index immediately on update

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      60 |   })
      61 |
    > 62 |   it('should always suceed: refresh the index immediately on update', async function () {
         |   ^
      63 |     const d = new DummyRefresh({ text: 'Text1' })
      64 |     const refresh = true
      65 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/force-index-refresh.test.ts:62:3)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on update

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on update

    MongooseError: Operation `dummyrefreshes.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● forceIndexRefresh connection option › should fail randomly: refresh the index every 1s on update

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      67 |   })
      68 |
    > 69 |   it('should fail randomly: refresh the index every 1s on update', async function () {
         |   ^
      70 |     const d = new Dummy({ text: 'Text1' })
      71 |     const refresh = false
      72 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/force-index-refresh.test.ts:69:3)

FAIL test/highlight.test.ts (24.45 s)
  ● Highlight search › Highlight without hydrating › should return highlighted text on every hit result

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Highlight search › Highlight without hydrating › should return highlighted text on every hit result

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Highlight search › Highlight hydrated results › should return highlighted text on every resulting document

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Highlight search › Highlight hydrated results › should return highlighted text on every resulting document

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/geo-bounding-box.test.ts (36.471 s)
  ● Geo Bounding Box Test › should be able to create and store geo coordinates

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Geo Bounding Box Test › should be able to create and store geo coordinates

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      63 |   })
      64 |
    > 65 |   it('should be able to create and store geo coordinates', async function () {
         |   ^
      66 |
      67 |     for (const point of points) {
      68 |       await point.save()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/geo-bounding-box.test.ts:65:3)

  ● Geo Bounding Box Test › should be able to find geo coordinates in the indexes

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Geo Bounding Box Test › should be able to find geo coordinates in the indexes

    MongooseError: Operation `geoboundingdocs.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Geo Bounding Box Test › should be able to find geo coordinates in the indexes

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Geo Bounding Box Test › should be able to resync geo coordinates from the database

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Geo Bounding Box Test › should be able to resync geo coordinates from the database

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Geo Bounding Box Test › should be able to search bounding box

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Geo Bounding Box Test › should be able to search bounding box

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/hydrate-preserves-ordering.test.ts (24.571 s)
  ● Hydrate with ES data › Preserve ordering from MongoDB on hydration › should return an array of objects ordered 'desc' by MongoDB

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Preserve ordering from MongoDB on hydration › should return an array of objects ordered 'desc' by MongoDB

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Preserve ordering from MongoDB on hydration › should return an array of objects ordered 'asc' by MongoDB

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Preserve ordering from MongoDB on hydration › should return an array of objects ordered 'asc' by MongoDB

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Preserve ordering from ElasticSearch on hydration › should return an array of objects ordered 'desc' by ES

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Preserve ordering from ElasticSearch on hydration › should return an array of objects ordered 'desc' by ES

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Hydrate with ES data › Preserve ordering from ElasticSearch on hydration › should return an array of objects ordered 'asc' by ES

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Hydrate with ES data › Preserve ordering from ElasticSearch on hydration › should return an array of objects ordered 'asc' by ES

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/routing.test.ts (175.294 s)
  ● Routing › should found task if no routing

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should found task if no routing

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      34 |   })
      35 |
    > 36 |   it('should found task if no routing', async function () {
         |   ^
      37 |
      38 |     const task = await config.createModelAndEnsureIndex(Task, { content: Date.now() })
      39 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:36:3)

  ● Routing › should found task if routing with task.content

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should found task if routing with task.content

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should found task if routing with task.content

    MongooseServerSelectionError: Error: connect ECONNREFUSED 127.0.0.1:27017

      23 |
      24 |   beforeAll(async function () {
    > 25 |     await mongoose.connect(config.mongoUrl, config.mongoOpts)
         |                    ^
      26 |     await config.deleteIndexIfExists(['tasks'])
      27 |     await Task.deleteMany()
      28 |   })

      at NativeConnection.Object.<anonymous>.Connection.openUri (node_modules/mongoose/lib/connection.js:797:32)
      at node_modules/mongoose/lib/index.js:332:10
      at node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
      at promiseOrCallback (node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
      at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (node_modules/mongoose/lib/index.js:1153:10)
      at Mongoose.Object.<anonymous>.Mongoose.connect (node_modules/mongoose/lib/index.js:331:20)
      at Object.<anonymous> (test/routing.test.ts:25:20)
      at node_modules/tslib/tslib.js:117:75

  ● Routing › should found task if routing with task.content

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      47 |   })
      48 |
    > 49 |   it('should found task if routing with task.content', async function () {
         |   ^
      50 |
      51 |     const task = await config.createModelAndEnsureIndex(Task, { content: Date.now() })
      52 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:49:3)

  ● Routing › should not found task if routing with invalid routing

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should not found task if routing with invalid routing

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should not found task if routing with invalid routing

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      63 |   })
      64 |
    > 65 |   it('should not found task if routing with invalid routing', async function () {
         |   ^
      66 |
      67 |     const task = await config.createModelAndEnsureIndex(Task, { content: Date.now() })
      68 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:65:3)

  ● Routing › should not found task after remove

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should not found task after remove

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should not found task after remove

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      78 |   })
      79 |
    > 80 |   it('should not found task after remove', async function () {
         |   ^
      81 |     const task = await Task.create({ content: Date.now() })
      82 |
      83 |     await task.remove()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:80:3)

  ● Routing › should not found task after unIndex

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should not found task after unIndex

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should not found task after unIndex

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      93 |   })
      94 |
    > 95 |   it('should not found task after unIndex', async function () {
         |   ^
      96 |     const task = await Task.create({ content: Date.now() })
      97 |
      98 |     await task.unIndex()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:95:3)

  ● Routing › should not found task after esTruncate

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Routing › should not found task after esTruncate

    MongooseError: Operation `tasks.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Routing › should not found task after esTruncate

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      107 |   })
      108 |
    > 109 |   it('should not found task after esTruncate', async function () {
          |   ^
      110 |     const task = await Task.create({ content: Date.now() })
      111 |
      112 |     await Task.esTruncate()

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/routing.test.ts:109:3)

FAIL test/transform.test.ts (33.337 s)
  ● Transform mode › should index with field "fullTitle"

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Transform mode › should index with field "fullTitle"

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      66 |   })
      67 |
    > 68 |   it('should index with field "fullTitle"', async function () {
         |   ^
      69 |
      70 |     await config.createModelAndEnsureIndex(Repo, {
      71 |       name: 'LOTR',

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/transform.test.ts:68:3)

  ● Transform mode › should wait for promise if transform is async

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Transform mode › should wait for promise if transform is async

    MongooseError: Operation `repos.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Transform mode › should wait for promise if transform is async

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      83 |   })
      84 |
    > 85 |   it('should wait for promise if transform is async', async function () {
         |   ^
      86 |
      87 |     await config.createModelAndEnsureIndex(Podcast, {
      88 |       name: 'The Fitzroy Diaries'

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/transform.test.ts:85:3)

FAIL test/filtering.test.ts (53.978 s)
  ● Filter mode › should index horror genre

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Filter mode › should index horror genre

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      48 |   })
      49 |
    > 50 |   it('should index horror genre', async function () {
         |   ^
      51 |     await config.createModelAndEnsureIndex(Movie, {
      52 |       title: 'LOTR',
      53 |       genre: 'horror'

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/filtering.test.ts:50:3)

  ● Filter mode › should not index action genre

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Filter mode › should not index action genre

    MongooseError: Operation `movies.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Filter mode › should not index action genre

    MongooseServerSelectionError: Error: connect ECONNREFUSED 127.0.0.1:27017

      37 |
      38 |   beforeAll(async function () {
    > 39 |     await mongoose.connect(config.mongoUrl, config.mongoOpts)
         |                    ^
      40 |     await Movie.deleteMany()
      41 |     await config.deleteIndexIfExists(['movies'])
      42 |   })

      at NativeConnection.Object.<anonymous>.Connection.openUri (node_modules/mongoose/lib/connection.js:797:32)
      at node_modules/mongoose/lib/index.js:332:10
      at node_modules/mongoose/lib/helpers/promiseOrCallback.js:32:5
      at promiseOrCallback (node_modules/mongoose/lib/helpers/promiseOrCallback.js:31:10)
      at Mongoose.Object.<anonymous>.Mongoose._promiseOrCallback (node_modules/mongoose/lib/index.js:1153:10)
      at Mongoose.Object.<anonymous>.Mongoose.connect (node_modules/mongoose/lib/index.js:331:20)
      at Object.<anonymous> (test/filtering.test.ts:39:20)
      at node_modules/tslib/tslib.js:117:75

  ● Filter mode › should not index action genre

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      63 |   })
      64 |
    > 65 |   it('should not index action genre', async function () {
         |   ^
      66 |
      67 |     await config.createModelAndSave(Movie, {
      68 |       title: 'Man in Black',

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/filtering.test.ts:65:3)

  ● Filter mode › should unindex filtered models

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Filter mode › should unindex filtered models

    MongooseError: Operation `movies.insertOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Filter mode › should unindex filtered models

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      79 |   })
      80 |
    > 81 |   it('should unindex filtered models', async function () {
         |   ^
      82 |     const movie = await config.createModelAndEnsureIndex(Movie, {
      83 |       title: 'REC',
      84 |       genre: 'horror'

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/filtering.test.ts:81:3)

FAIL test/connection.test.ts (29.144 s)
  ● Elasticsearch Connection › should be able to connect with default options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Elasticsearch Connection › should be able to connect with default options

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Elasticsearch Connection › should be able to connect with explicit options

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Elasticsearch Connection › should be able to connect with explicit options

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Elasticsearch Connection › should be able to connect with an existing elasticsearch client

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Elasticsearch Connection › should be able to connect with an existing elasticsearch client

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/suggesters.test.ts (33.11 s)
  ● Suggesters › Testing Suggest › should index property name with type completion

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Suggesters › Testing Suggest › should index property name with type completion

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Suggesters › Testing Suggest › should return suggestions after hits

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Suggesters › Testing Suggest › should return suggestions after hits

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      73 |     })
      74 |
    > 75 |     it('should return suggestions after hits', async function () {
         |     ^
      76 |
      77 |       await Kitten.insertMany(kittens)
      78 |       await config.sleep(config.BULK_ACTION_TIMEOUT)

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/suggesters.test.ts:75:5)

FAIL test/custom-mapping.test.ts (23.643 s)
  ● Custom Properties for Mapping › should index with field "created"

    MongooseError: Caught error after test environment was torn down

    Operation `kittens.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    MongooseError: Operation `phones.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Custom Properties for Mapping › should fail index if value for field "created" is the wrong type

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

FAIL test/alternative-index-method.test.ts (39.96 s)
  ● Index Method › should be able to index it directly without saving

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Index Method › should be able to index it directly without saving

    MongooseError: Caught error after test environment was torn down

    Operation `phones.deleteMany()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Index Method › should be able to index to alternative index

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Index Method › should be able to index to alternative index

    MongooseError: Operation `tweets.findOne()` buffering timed out after 10000ms

      at Timeout.<anonymous> (node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)

  ● Index Method › should be able to index to alternative index

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      44 |   })
      45 |
    > 46 |   it('should be able to index to alternative index', async function () {
         |   ^
      47 |     const doc = await Tweet.findOne({ message: 'I know kung-fu!' })
      48 |
      49 |     if (doc) {

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/alternative-index-method.test.ts:46:3)

FAIL test/count.test.ts (24.54 s)
  ● Count › should count a type

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Count › should count a type

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Count › should count a type without query

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Count › should count a type without query

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/bulk.test.ts (8.207 s)
  ● Bulk mode › should index all objects and support deletions too

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

  ● Bulk mode › should index all objects and support deletions too

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/custom-serialize.test.ts (32.937 s)
  ● Custom Serialize › should index all fields returned from the customSerialize function

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Custom Serialize › should index all fields returned from the customSerialize function

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      43 |   })
      44 |
    > 45 |   it('should index all fields returned from the customSerialize function', async function () {
         |   ^
      46 |
      47 |     await config.createModelAndEnsureIndex(Food, { name: 'pizza' })
      48 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/custom-serialize.test.ts:45:3)

FAIL test/boost-field.test.ts (22.968 s)
  ● Add Boost Option Per Field › should create a mapping with boost field added

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Add Boost Option Per Field › should create a mapping with boost field added

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/truncate.test.ts (23.197 s)
  ● Truncate › esTruncate › should be able to truncate all documents

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Truncate › esTruncate › should be able to truncate all documents

    ConnectionError: connect ECONNREFUSED 127.0.0.1:9200

      at ClientRequest.onError (node_modules/@elastic/elasticsearch/lib/Connection.js:116:16)

FAIL test/refresh.test.ts (33.055 s)
  ● Refresh › should be able to search for the element after refresh

    Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error: Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.

      at mapper (node_modules/jest-jasmine2/build/queueRunner.js:27:45)

  ● Refresh › should be able to search for the element after refresh

    : Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 10000 ms timeout specified by jest.setTimeout.Error:

      32 |   })
      33 |
    > 34 |   it('should be able to search for the element after refresh', async function () {
         |   ^
      35 |
      36 |     const refresh = new Refresh({ title: `${Date.now()}` })
      37 |

      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:116:22)
      at Suite.<anonymous> (test/refresh.test.ts:34:3)


Test Suites: 24 failed, 1 passed, 25 total
Tests:       106 failed, 16 passed, 122 total
Snapshots:   0 total
Time:        1105.595 s
Ran all test suites.
/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149
          const err = new MongooseError(message);
                      ^
MongooseError: Caught error after test environment was torn down

Operation `refreshes.deleteMany()` buffering timed out after 10000ms
    at Timeout.<anonymous> (/data/js-variants/multee/Original/mongoosastic/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:149:23)
    at listOnTimeout (node:internal/timers:559:17)
    at processTimers (node:internal/timers:502:7)
I am package abstract-leveldown
standard: Use JavaScript Standard Style (https://standardjs.com)
standard: Some warnings are present which will be errors in the next version (https://standardjs.com)
standard: Run `standard --fix` to automatically fix some problems.
I am package farmhash
I am package trash
I am package expand-range
I am package isomorphic-git

src/index.js → index.js...
created index.js in 1.1s

src/index.js → index.cjs...
created index.cjs in 1.1s

src/internal-apis.js → internal-apis.js...
created internal-apis.js in 463ms

src/internal-apis.js → internal-apis.cjs...
created internal-apis.cjs in 473ms

src/http/node/index.js → http/node/index.js...
created http/node/index.js in 13ms

src/http/node/index.js → http/node/index.cjs...
created http/node/index.cjs in 14ms

src/http/web/index.js → http/web/index.js...
created http/web/index.js in 15ms

src/http/web/index.js → http/web/index.cjs...
created http/web/index.cjs in 18ms

src/http/web/index.js → http/web/index.umd.js...
created http/web/index.umd.js in 13ms
'async-lock' is imported by index.js, but could not be resolved – treating it as an external dependency
'sha.js/sha1.js' is imported by index.js, but could not be resolved – treating it as an external dependency
'crc-32' is imported by index.js, but could not be resolved – treating it as an external dependency
'pako' is imported by index.js, but could not be resolved – treating it as an external dependency
'ignore' is imported by index.js, but could not be resolved – treating it as an external dependency
'pify' is imported by index.js, but could not be resolved – treating it as an external dependency
'clean-git-ref' is imported by index.js, but could not be resolved – treating it as an external dependency
'diff3' is imported by index.js, but could not be resolved – treating it as an external dependency
Success! index.js is fully tree-shakeable
npm notice 
npm notice 📦  isomorphic-git@0.0.0-development
npm notice === Tarball Contents === 
npm notice 1.1kB   LICENSE.md            
npm notice 42.9kB  README.md             
npm notice 2B      browser-tests.json    
npm notice 987B    cli.cjs               
npm notice 6.3kB   http/node/index.cjs   
npm notice 1.9kB   http/node/index.d.ts  
npm notice 6.0kB   http/node/index.js    
npm notice 96B     http/node/package.json
npm notice 4.4kB   http/web/index.cjs    
npm notice 1.9kB   http/web/index.d.ts   
npm notice 4.4kB   http/web/index.js     
npm notice 5.0kB   http/web/index.umd.js 
npm notice 123B    http/web/package.json 
npm notice 434.5kB index.cjs             
npm notice 168.7kB index.d.ts            
npm notice 432.9kB index.js              
npm notice 168.7kB index.umd.min.d.ts    
npm notice 299.7kB index.umd.min.js      
npm notice 1.1MB   index.umd.min.js.map  
npm notice 4.3kB   package.json          
npm notice 298.2kB size_report.html      
npm notice === Tarball Details === 
npm notice name:          isomorphic-git                          
npm notice version:       0.0.0-development                       
npm notice filename:      isomorphic-git-0.0.0-development.tgz    
npm notice package size:  730.8 kB                                
npm notice unpacked size: 3.0 MB                                  
npm notice shasum:        ec17931cf41e359db94a0ae7c1c35ecd67b4fccb
npm notice integrity:     sha512-xfG9Ov1tbfGzM[...]ceL2kksk22eNg==
npm notice total files:   21                                      
npm notice 
PASS __tests__/test-log-file.js (13.246 s)
PASS __tests__/test-log.js
PASS __tests__/test-readObject.js
PASS __tests__/test-merge.js
PASS __tests__/test-wire.js
PASS __tests__/test-GitConfig.js
PASS __tests__/test-readTree.js
PASS __tests__/test-writeObject.js
PASS __tests__/test-flatFileListToDirectoryStructure.js
PASS __tests__/test-checkout.js
PASS __tests__/test-push.js (5.51 s)
PASS __tests__/test-statusMatrix.js
PASS __tests__/test-listObjects.js
PASS __tests__/test-fetch.js (12.328 s)
PASS __tests__/test-listServerRefs.js
PASS __tests__/test-GitRefManager.js
PASS __tests__/test-clone.js (19.795 s)
PASS __tests__/test-readBlob.js
PASS __tests__/test-updateIndex.js
PASS __tests__/test-hosting-providers.js (22.605 s)
PASS __tests__/test-commit.js
PASS __tests__/test-addNote.js
PASS __tests__/test-findMergeBase.js
PASS __tests__/test-add.js
PASS __tests__/test-walk.js
PASS __tests__/test-branch.js
PASS __tests__/test-GitPackIndex.js
PASS __tests__/test-readCommit.js
PASS __tests__/test-writeTree.js
PASS __tests__/test-unicode-paths.js
PASS __tests__/test-GitIndex.js
PASS __tests__/test-pull.js
PASS __tests__/test-remove.js
PASS __tests__/test-GitPktLine.js
PASS __tests__/test-status.js
PASS __tests__/test-renameBranch.js
PASS __tests__/test-packObjects.js
PASS __tests__/test-resetIndex.js
PASS __tests__/test-getRemoteInfo2.js
PASS __tests__/test-listFiles.js
PASS __tests__/test-resolveRef.js
PASS __tests__/test-GitRemoteManager.js
PASS __tests__/test-GitAnnotatedTag.js
PASS __tests__/test-utils-join.js
PASS __tests__/test-submodules.js
PASS __tests__/test-annotatedTag.js
PASS __tests__/test-config.js
PASS __tests__/test-tag.js
PASS __tests__/test-writeCommit.js
PASS __tests__/test-hashBlob.js
PASS __tests__/test-init.js
PASS __tests__/test-exports.js
PASS __tests__/test-writeBlob.js
PASS __tests__/test-getRemoteInfo.js
PASS __tests__/test-writeTag.js
PASS __tests__/test-deleteBranch.js
PASS __tests__/test-removeNote.js
PASS __tests__/test-readNote.js
PASS __tests__/test-isIgnored.js
PASS __tests__/test-listNotes.js
PASS __tests__/test-addRemote.js
PASS __tests__/test-expandOid.js
PASS __tests__/test-mergeFile.js
PASS __tests__/test-GitRefSpecSet.js
PASS __tests__/test-writeRef.js
PASS __tests__/test-deleteRef.js
PASS __tests__/test-listTags.js
PASS __tests__/test-readTag.js
PASS __tests__/test-findRoot.js
PASS __tests__/test-isBinary.js
PASS __tests__/test-currentBranch.js
PASS __tests__/test-deleteRemote.js
PASS __tests__/test-GitError.js
PASS __tests__/test-deleteTag.js
PASS __tests__/test-listBranches.js
PASS __tests__/test-listCommitsAndTags.js
PASS __tests__/test-uploadPack.js
PASS __tests__/test-listRemotes.js
PASS __tests__/test-version.js

Test Suites: 79 passed, 79 total
Tests:       2 skipped, 458 passed, 460 total
Snapshots:   90 passed, 90 total
Time:        136.129 s
Ran all test suites.
The script called "test.karma" which runs "cross-env karma start ./karma.conf.cjs --single-run -log-level debug" failed with exit code 1 https://github.com/sezna/nps/blob/master/other/ERRORS_AND_WARNINGS.md#failed-with-exit-code
The script called "test" which runs "nps lint && nps build && nps test.typecheck && nps test.setup && nps test.jest && nps test.karma && nps test.teardown" failed with exit code 1 https://github.com/sezna/nps/blob/master/other/ERRORS_AND_WARNINGS.md#failed-with-exit-code
I am package projectz
node:internal/modules/cjs/loader:959
  throw err;
  ^

Error: Cannot find module '/data/js-variants/multee/Original/projectz/edition-es2019/test.js'
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:956:15)
    at Function.Module._load (node:internal/modules/cjs/loader:804:27)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}
I am package string-to-stream
I am package limax
I am package regex-not
I am package watchr
I am package socketcluster
I am package node-website-scraper
I am package node-hid
I am package codeceptjs
sh: mocha: command not found
I am package gulp-jasmine
DEPRECATION: Jasmine#onComplete is deprecated. Instead of calling onComplete, set the Jasmine instance's exitOnCompletion property to false and use the promise returned from the execute method.
Error: 
    at <Jasmine>
    at Jasmine.onComplete (/data/js-variants/multee/Original/gulp-jasmine/node_modules/jasmine/lib/jasmine.js:474:12)
    at DestroyableTransform._flush (/data/js-variants/multee/Original/gulp-jasmine/index.js:5:795)
    at DestroyableTransform.prefinish (/data/js-variants/multee/Original/gulp-jasmine/node_modules/readable-stream/lib/_stream_transform.js:138:10)
    at DestroyableTransform.emit (node:events:513:28)
    at prefinish (/data/js-variants/multee/Original/gulp-jasmine/node_modules/readable-stream/lib/_stream_writable.js:619:14)
Note: This message will be shown only once. Set the verboseDeprecations config property to true to see every occurrence.
Running 4 specs.
the timeout
[33m    should pass: pending[0m
beforeAll
[32m    should be called first: passed[0m
[32m    should be called once: passed[0m
fixture
[32m    should pass: passed[0m

4 specs, 0 failures, 1 pending spec
Finished in 0 seconds
DEPRECATION: Jasmine#onComplete is deprecated. Instead of calling onComplete, set the Jasmine instance's exitOnCompletion property to false and use the promise returned from the execute method.
Error: 
    at <Jasmine>
    at Jasmine.onComplete (/data/js-variants/multee/Original/gulp-jasmine/node_modules/jasmine/lib/jasmine.js:474:12)
    at DestroyableTransform._flush (/data/js-variants/multee/Original/gulp-jasmine/index.js:5:795)
    at DestroyableTransform.prefinish (/data/js-variants/multee/Original/gulp-jasmine/node_modules/readable-stream/lib/_stream_transform.js:138:10)
    at DestroyableTransform.emit (node:events:513:28)
    at prefinish (/data/js-variants/multee/Original/gulp-jasmine/node_modules/readable-stream/lib/_stream_writable.js:619:14)
Note: This message will be shown only once. Set the verboseDeprecations config property to true to see every occurrence.
Running 1 spec.
fail-fixture
[31m    should fail: failed[0m

Failures: 
1) fail-fixture should fail
1.1) [31mExpected 3 to equal 4.[0m

1 spec, 1 failure
Finished in 0 seconds
DEPRECATION: Jasmine#onComplete is deprecated. Instead of calling onComplete, set the Jasmine instance's exitOnCompletion property to false and use the promise returned from the execute method.
Error: 
    at <Jasmine>
    at Jasmine.onComplete (/data/js-variants/multee/Original/gulp-jasmine/node_modules/jasmine/lib/jasmine.js:474:12)
    at DestroyableTransform._flush (/data/js-variants/multee/Original/gulp-jasmine/index.js:5:795)
    at DestroyableTransform.prefinish (/data/js-variants/multee/Original/gulp-jasmine/node_modules/readable-stream/lib/_stream_transform.js:138:10)
    at DestroyableTransform.emit (node:events:513:28)
    at prefinish (/data/js-variants/multee/Original/gulp-jasmine/node_modules/readable-stream/lib/_stream_writable.js:619:14)
Note: This message will be shown only once. Set the verboseDeprecations config property to true to see every occurrence.
Running 1 spec.
fail-fixture
[31m    should fail: failed[0m

Failures: 
1) fail-fixture should fail
1.1) [31mExpected 3 to equal 4.[0m

1 spec, 1 failure
Finished in 0 seconds
DEPRECATION: Jasmine#onComplete is deprecated. Instead of calling onComplete, set the Jasmine instance's exitOnCompletion property to false and use the promise returned from the execute method.
Error: 
    at <Jasmine>
    at Jasmine.onComplete (/data/js-variants/multee/Original/gulp-jasmine/node_modules/jasmine/lib/jasmine.js:474:12)
    at DestroyableTransform._flush (/data/js-variants/multee/Original/gulp-jasmine/index.js:5:795)
    at DestroyableTransform.prefinish (/data/js-variants/multee/Original/gulp-jasmine/node_modules/readable-stream/lib/_stream_transform.js:138:10)
    at DestroyableTransform.emit (node:events:513:28)
    at prefinish (/data/js-variants/multee/Original/gulp-jasmine/node_modules/readable-stream/lib/_stream_writable.js:619:14)
Note: This message will be shown only once. Set the verboseDeprecations config property to true to see every occurrence.
I am package chalk-animation


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
This log should stop the animation


[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
This log should stop the animation


[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLor m ipsum
do or sit amet
[2F[G[2KLorem ipsum
do0or sit amet
[2F[G[2KLo e  ipsum
do or sit amet
This log should stop the animation


[2F[G[2KLorem ipsum
do or sit amet


[2F[G[2KLorem ipsum
dolor sit am t
[2F[G[2KLorem ipsum
dolor si  amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
do0or sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLore  ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor s t amet
[2F[G[2KLorem ipsum
dolor s t amet
[2F[G[2KLorem ipsum
dolor s t amet


[2F[G[2KL          
d             
[2F[G[2K o         
 o            
[2F[G[2K  r        
  l           
[2F[G[2K   e       
   o          
[2F[G[2K    m      
    r         
[2F[G[2K           
              
This log should stop the animation


[2F[G[2KL          
d             


[2F[G[2KL          
d             
[2F[G[2K o         
 o            


[2F[G[2KL          
d             
[2F[G[2K o         
 o            
[2F[G[2K  r        
  l           
[2F[G[2K   e       
   o          
[2F[G[2K    m      
    r         
[2F[G[2K           
              
[2F[G[2K      i    
      s       
[2F[G[2K       p   
       i      


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
This log should stop the animation


[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
This log should stop the animation


[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet


[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
[2F[G[2KLorem ipsum
dolor sit amet
I am package zx
  ⠋ npm i cpy@9.0.1 lodash-es@4.17.21  ⠙ npm i cpy@9.0.1 lodash-es@4.17.21  ⠹ npm i cpy@9.0.1 lodash-es@4.17.21  ⠸ npm i cpy@9.0.1 lodash-es@4.17.21  ⠼ npm i cpy@9.0.1 lodash-es@4.17.21  ⠴ npm i cpy@9.0.1 lodash-es@4.17.21  ⠦ npm i cpy@9.0.1 lodash-es@4.17.21  ⠧ npm i cpy@9.0.1 lodash-es@4.17.21  ⠇ npm i cpy@9.0.1 lodash-es@4.17.21  ⠏ npm i cpy@9.0.1 lodash-es@4.17.21  ⠋ npm i cpy@9.0.1 lodash-es@4.17.21  ⠙ npm i cpy@9.0.1 lodash-es@4.17.21  ⠹ npm i cpy@9.0.1 lodash-es@4.17.21  ⠸ npm i cpy@9.0.1 lodash-es@4.17.21  ⠼ npm i cpy@9.0.1 lodash-es@4.17.21  ⠴ npm i cpy@9.0.1 lodash-es@4.17.21  ⠦ npm i cpy@9.0.1 lodash-es@4.17.21  ⠧ npm i cpy@9.0.1 lodash-es@4.17.21  ⠇ npm i cpy@9.0.1 lodash-es@4.17.21  ⠏ npm i cpy@9.0.1 lodash-es@4.17.21  ⠋ npm i cpy@9.0.1 lodash-es@4.17.21  ⠙ npm i cpy@9.0.1 lodash-es@4.17.21  ⠹ npm i cpy@9.0.1 lodash-es@4.17.21  ⠸ npm i cpy@9.0.1 lodash-es@4.17.21  ⠼ npm i cpy@9.0.1 lodash-es@4.17.21  ⠴ npm i cpy@9.0.1 lodash-es@4.17.21  ⠦ npm i cpy@9.0.1 lodash-es@4.17.21  ⠧ npm i cpy@9.0.1 lodash-es@4.17.21  ⠇ npm i cpy@9.0.1 lodash-es@4.17.21  ⠏ npm i cpy@9.0.1 lodash-es@4.17.21  ⠋ npm i cpy@9.0.1 lodash-es@4.17.21  ⠙ npm i cpy@9.0.1 lodash-es@4.17.21  ⠹ npm i cpy@9.0.1 lodash-es@4.17.21  ⠸ npm i cpy@9.0.1 lodash-es@4.17.21  ⠼ npm i cpy@9.0.1 lodash-es@4.17.21  ⠴ npm i cpy@9.0.1 lodash-es@4.17.21I am package simple-peer
sh: standard: command not found
I am package parse-torrent
I am package favicon
I am package gluegun
sh: jest: command not found
I am package caw
I am package parse-filepath
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
Transformation error for /data/js-variants/multee/Original/parse-filepath/index.js ; return original code
path.parse is not a function
I am package ssh2-sftp-client

TypeError [ERR_INVALID_ARG_TYPE]: The "path" argument must be of type string or an instance of Buffer or URL. Received undefined
    at Object.openSync (node:fs:586:10)
    at readFileSync (node:fs:462:35)
    at Object.<anonymous> (/data/js-variants/multee/Original/ssh2-sftp-client/test/hooks/global-hooks.js:43:15)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/ssh2-sftp-client/test/01connections.js:13:20)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at ModuleWrap.<anonymous> (node:internal/modules/esm/translators:170:29)
    at ModuleJob.run (node:internal/modules/esm/module_job:193:25)
    at async Promise.all (index 0)
    at async ESMLoader.import (node:internal/modules/esm/loader:533:24)
    at async importModuleDynamicallyWrapper (node:internal/vm/module:438:15)
    at async formattedImport (/data/js-variants/multee/Original/ssh2-sftp-client/node_modules/mocha/lib/nodejs/esm-utils.js:9:14)
    at async Object.exports.requireOrImport (/data/js-variants/multee/Original/ssh2-sftp-client/node_modules/mocha/lib/nodejs/esm-utils.js:42:28)
    at async Object.exports.loadFilesAsync (/data/js-variants/multee/Original/ssh2-sftp-client/node_modules/mocha/lib/nodejs/esm-utils.js:100:20)
    at async singleRun (/data/js-variants/multee/Original/ssh2-sftp-client/node_modules/mocha/lib/cli/run-helpers.js:125:3)
    at async Object.exports.handler (/data/js-variants/multee/Original/ssh2-sftp-client/node_modules/mocha/lib/cli/run.js:370:5)
I am package yaspeller
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
SyntaxError: JSON Error in /data/js-variants/multee/Original/yaspeller/test/configs/error_parsing.json:
Unexpected token } in JSON at position 38
Unknown "check-yo" property in "test/configs/unknown_properties.json" config.
Unknown "unknown-prop" property in "test/configs/unknown_properties.json" config.
The type for "checkYo" property should be boolean in "test/configs/wrong_prop_type.json" config.
The type for "format" property should be string in "test/configs/wrong_prop_type.json" config.
Incorrect dictionary RegExp in "/(Ю|юзабилити/", SyntaxError: Invalid regular expression: /^/(Ю|юзабилити/$/: Unterminated group
Incorrect dictionary RegExp in "/москв[а/i", SyntaxError: Invalid regular expression: /^/москв[а/i$/: Unterminated character class
Error: test/dict/not_utf8.json: is not UTF-8.
Error: Error parsing in the file: test/dict/error_parsing.json
Error: test/dict/not_exists.json: is not exists.
Error: Cannot find module './test/reports/example_unknown'
Require stack:
- /data/js-variants/multee/Original/yaspeller/lib/reports/index.js
- /data/js-variants/multee/Original/yaspeller/test/reports.test.js
Missing "name" property in report module "./test/reports/without_name".
Missing methods (onStart, onResourceComplete or onComplete) in report module "./test/reports/without_methods".
I am package pretty
I am package labeled-stream-splicer
I am package cmake-js
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TOOL Using Ninja generator, because ninja is available.
info TOOL Using Ninja generator, because ninja is available.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '14.0.0',
info TEST   arch: undefined,
info TEST   preferClang: true,
info TEST   preferMake: true
info TEST }
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
info DIST Downloading distribution files to: /home/liu-yuxin/.cmake-js/node-x64/v14.0.0
http DIST 	- https://nodejs.org/dist/v14.0.0/SHASUMS256.txt
http DIST 	- https://nodejs.org/dist/v14.0.0/node-v14.0.0-headers.tar.gz
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '14.0.0',
info TEST   arch: undefined,
info TEST   preferClang: true
info TEST }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '14.0.0',
info TEST   arch: undefined,
info TEST   preferGnu: true,
info TEST   preferMake: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '14.0.0',
info TEST   arch: undefined,
info TEST   preferGnu: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { runtime: 'node', runtimeVersion: '14.0.0', arch: undefined }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '16.0.0',
info TEST   arch: undefined,
info TEST   preferClang: true,
info TEST   preferMake: true
info TEST }
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
info DIST Downloading distribution files to: /home/liu-yuxin/.cmake-js/node-x64/v16.0.0
http DIST 	- https://nodejs.org/dist/v16.0.0/SHASUMS256.txt
http DIST 	- https://nodejs.org/dist/v16.0.0/node-v16.0.0-headers.tar.gz
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '16.0.0',
info TEST   arch: undefined,
info TEST   preferClang: true
info TEST }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '16.0.0',
info TEST   arch: undefined,
info TEST   preferGnu: true,
info TEST   preferMake: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '16.0.0',
info TEST   arch: undefined,
info TEST   preferGnu: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { runtime: 'node', runtimeVersion: '16.0.0', arch: undefined }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '18.3.0',
info TEST   arch: undefined,
info TEST   preferClang: true,
info TEST   preferMake: true
info TEST }
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
info DIST Downloading distribution files to: /home/liu-yuxin/.cmake-js/node-x64/v18.3.0
http DIST 	- https://nodejs.org/dist/v18.3.0/SHASUMS256.txt
http DIST 	- https://nodejs.org/dist/v18.3.0/node-v18.3.0-headers.tar.gz
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '18.3.0',
info TEST   arch: undefined,
info TEST   preferClang: true
info TEST }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '18.3.0',
info TEST   arch: undefined,
info TEST   preferGnu: true,
info TEST   preferMake: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'node',
info TEST   runtimeVersion: '18.3.0',
info TEST   arch: undefined,
info TEST   preferGnu: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { runtime: 'node', runtimeVersion: '18.3.0', arch: undefined }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'nw',
info TEST   runtimeVersion: '0.64.0',
info TEST   arch: undefined,
info TEST   preferClang: true,
info TEST   preferMake: true
info TEST }
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
info DIST Downloading distribution files to: /home/liu-yuxin/.cmake-js/nw-x64/v0.64.0
http DIST 	- https://node-webkit.s3.amazonaws.com/v0.64.0/nw-headers-v0.64.0.tar.gz
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'nw',
info TEST   runtimeVersion: '0.64.0',
info TEST   arch: undefined,
info TEST   preferClang: true
info TEST }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'nw',
info TEST   runtimeVersion: '0.64.0',
info TEST   arch: undefined,
info TEST   preferGnu: true,
info TEST   preferMake: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'nw',
info TEST   runtimeVersion: '0.64.0',
info TEST   arch: undefined,
info TEST   preferGnu: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { runtime: 'nw', runtimeVersion: '0.64.0', arch: undefined }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'electron',
info TEST   runtimeVersion: '18.2.1',
info TEST   arch: undefined,
info TEST   preferClang: true,
info TEST   preferMake: true
info TEST }
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
info DIST Downloading distribution files to: /home/liu-yuxin/.cmake-js/electron-x64/v18.2.1
http DIST 	- https://artifacts.electronjs.org/headers/dist/v18.2.1/node-v18.2.1.tar.gz
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'electron',
info TEST   runtimeVersion: '18.2.1',
info TEST   arch: undefined,
info TEST   preferClang: true
info TEST }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'electron',
info TEST   runtimeVersion: '18.2.1',
info TEST   arch: undefined,
info TEST   preferGnu: true,
info TEST   preferMake: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {
info TEST   runtime: 'electron',
info TEST   runtimeVersion: '18.2.1',
info TEST   arch: undefined,
info TEST   preferGnu: true
info TEST }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { runtime: 'electron', runtimeVersion: '18.2.1', arch: undefined }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { preferClang: true, preferMake: true }
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { preferClang: true }
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { preferGnu: true, preferMake: true }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Unix Makefiles generator, because preferMake option is set, and make is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: { preferGnu: true }
info TOOL Using g++ compiler, because preferGnu option is set, and g++ is available.
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
info TEST Running case for options of: {}
info TOOL Using Ninja generator, because ninja is available.
ERR! OMG CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.
I am package firefox-profile-js
I am package node-windows
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-01T16_56_30_702Z-debug-0.log
I am package npm-run
I am package object.defaults
I am package node-bluetooth-serial-port
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-01T16_56_46_115Z-debug-0.log
I am package tus-js-client
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-01T16_56_47_003Z-debug-0.log
I am package awilix
PASS src/__tests__/container.test.ts (7.984 s)
PASS src/__tests__/load-modules.test.ts
PASS src/__tests__/param-parser.test.ts
PASS src/__tests__/resolvers.test.ts
PASS src/__tests__/function-tokenizer.test.ts
PASS src/__tests__/local-injections.test.ts
PASS src/__tests__/utils.test.ts
PASS src/__tests__/list-modules.test.ts
PASS src/__tests__/container.disposing.test.ts
PASS src/__tests__/param-parser.bugs.test.ts
FAIL src/__tests__/rollup.test.ts
  ● Test suite failed to run

    Cannot find module '../../lib/awilix' from 'src/__tests__/rollup.test.ts'

      1 | import * as path from 'path'
    > 2 | const cjs = require('../../lib/awilix')
        |             ^
      3 | // @ts-ignore
      4 | import * as es from '../../lib/awilix.module.mjs'
      5 | const umd = require('../../lib/awilix.umd')

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:425:11)
      at Object.<anonymous> (src/__tests__/rollup.test.ts:2:13)

PASS src/__tests__/integration.test.ts
PASS src/__tests__/inheritance.test.js
PASS src/__tests__/awilix.test.ts

Test Suites: 1 failed, 13 passed, 14 total
Tests:       145 passed, 145 total
Snapshots:   9 passed, 9 total
Time:        13.622 s
Ran all test suites.
I am package strong-error-handler
I am package bittorrent-dht
I am package node-argon2
I am package solana-web3.js
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
ws error: A bad thing happened to the socket
ws error: A bad thing happened to the socket
ws error: A bad thing happened to the socket
ws error: A bad thing happened to the socket
ws error: A bad thing happened to the socket
ws error: A bad thing happened to the socket
ws error: A bad thing happened to the socket
Ignored unsubscribe request because an active subscription with id `0` for 'signature result' events could not be found.
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.
No instructions provided
No instructions provided
No instructions provided
No instructions provided
I am package taskgroup
I am package merge-deep
I am package encoding-down
standard: Use JavaScript Standard Style (https://standardjs.com)
standard: Some warnings are present which will be errors in the next version (https://standardjs.com)
standard: Run `standard --fix` to automatically fix some problems.
I am package gulp-chmod
I am package grunt-filerev
I am package has-symbol-support-x
FAIL __tests__/has-symbol-support-x.test.js
  ● Test suite failed to run

    No "exports" main defined in /data/js-variants/multee/Original/has-symbol-support-x/node_modules/@babel/helper-compilation-targets/package.json

      at new NodeError (node:internal/errors:387:5)
      at throwExportsNotFound (node:internal/modules/esm/resolve:464:9)
      at packageExportsResolve (node:internal/modules/esm/resolve:748:3)
      at resolveExports (node:internal/modules/cjs/loader:493:36)
      at Function.Module._findPath (node:internal/modules/cjs/loader:533:31)
      at Function.Module._resolveFilename (node:internal/modules/cjs/loader:942:27)
      at Function.Module._load (node:internal/modules/cjs/loader:804:27)
      at Module.require (node:internal/modules/cjs/loader:1028:19)
      at require (node:internal/modules/cjs/helpers:102:18)
      at Object.<anonymous> (node_modules/@babel/preset-env/lib/debug.js:8:33)

Failed to collect coverage from /data/js-variants/multee/Original/has-symbol-support-x/src/has-symbol-support-x.js
ERROR: No "exports" main defined in /data/js-variants/multee/Original/has-symbol-support-x/node_modules/@babel/helper-compilation-targets/package.json
STACK: Error: No "exports" main defined in /data/js-variants/multee/Original/has-symbol-support-x/node_modules/@babel/helper-compilation-targets/package.json
    at new NodeError (node:internal/errors:387:5)
    at throwExportsNotFound (node:internal/modules/esm/resolve:464:9)
    at packageExportsResolve (node:internal/modules/esm/resolve:748:3)
    at resolveExports (node:internal/modules/cjs/loader:493:36)
    at Function.Module._findPath (node:internal/modules/cjs/loader:533:31)
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:942:27)
    at Function.Module._load (node:internal/modules/cjs/loader:804:27)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/has-symbol-support-x/node_modules/@babel/preset-env/lib/debug.js:8:33)
Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        125.5s
Ran all test suites.
I am package ky-universal
I am package timeout
I am package create-torrent
I am package purest
I am package connect-session-knex
node:internal/process/promises:279
            triggerUncaughtException(err, true /* fromPromise */);
            ^

Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16) {
  errno: -111,
  code: 'ECONNREFUSED',
  syscall: 'connect',
  address: '127.0.0.1',
  port: 5432
}
I am package fancy-test

Oops! Something went wrong! :(

ESLint: 7.27.0

ESLint couldn't find the plugin "@typescript-eslint/eslint-plugin".

(The package "@typescript-eslint/eslint-plugin" was not found when loaded as a Node module from the directory "/data/js-variants/multee/Original/fancy-test".)

It's likely that the plugin isn't installed correctly. Try reinstalling by running the following:

    npm install @typescript-eslint/eslint-plugin@latest --save-dev

The plugin "@typescript-eslint/eslint-plugin" was referenced from the config file in "--config » eslint-config-oclif-typescript".

If you still can't figure out the problem, please stop by https://eslint.org/chat/help to chat with the team.

error Command failed with exit code 2.
I am package node-resque
FAIL __tests__/core/queue.ts (22.246 s)
  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › can connect

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      14 |   });
      15 |
    > 16 |   test("can connect", async () => {
         |   ^
      17 |     queue = new Queue(
      18 |       { connection: specHelper.connectionDetails, queue: specHelper.queue },
      19 |       {}

      at __tests__/core/queue.ts:16:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can add a normal job

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can add delayed job (enqueueAt)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can add delayed job whose timestamp is a string (enqueueAt)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › will not enqueue a delayed job at the same time with matching params with error

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › will not enqueue a delayed job at the same time with matching params with error suppressed

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can add delayed job (enqueueIn)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can add a delayed job whose time is a string (enqueueIn)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can get the number of jobs currently enqueued

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can get the jobs in the queue

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can find previously scheduled jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › will not match previously scheduled jobs with differnt args

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can delete an enqueued job

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can delete all enqueued jobs of a particular function/class

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can delete a delayed job

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can delete a delayed job, and delayed queue should be empty

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can handle single arguments without explicit array

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › allows omitting arguments when enqueuing

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › allows omitting arguments when deleting

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › allows omitting arguments when adding delayed job

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › allows omitting arguments when deleting a delayed job

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can determine who the leader is

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › can load stats

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › locks › can get locks

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › locks › can get locks

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › [with connection] › locks › can get locks

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● queue › [with connection] › locks › can remove locks

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › locks › can remove locks

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › [with connection] › locks › can remove locks

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › [with connection] › locks › can remove locks

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › [with connection] › locks › can remove locks

    connect ECONNREFUSED 127.0.0.1:6379



  ● queue › [with connection] › locks › can remove locks

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      346 |       });
      347 |
    > 348 |       afterEach(async () => {
          |       ^
      349 |         await queue.connection.redis.del(
      350 |           queue.connection.key("lock:lists:queueName:jobName:[{}]")
      351 |         );

      at __tests__/core/queue.ts:348:7
      at __tests__/core/queue.ts:336:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › failed job managment › can list how many failed jobs there are

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › failed job managment › can get the body content for a collection of failed jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › failed job managment › can remove a failed job by payload

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › failed job managment › can re-enqueue a specific job, removing it from the failed queue

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › failed job managment › will return an error when trying to retry a job not in the failed queue

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › delayed status › can list the timestamps that exist

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › delayed status › can list the jobs delayed at a timestamp

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › delayed status › can also return a hash with all delayed tasks

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › can list running workers

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › can list running workers

    TypeError: Cannot read properties of undefined (reading 'end')

      543 |
      544 |       afterEach(async () => {
    > 545 |         await workerA.end();
          |                       ^
      546 |         await workerB.end();
      547 |       });
      548 |

      at Object.<anonymous> (__tests__/core/queue.ts:545:23)

  ● queue › [with connection] › worker status › we can see what workers are working on (idle)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › we can see what workers are working on (idle)

    TypeError: Cannot read properties of undefined (reading 'end')

      543 |
      544 |       afterEach(async () => {
    > 545 |         await workerA.end();
          |                       ^
      546 |         await workerB.end();
      547 |       });
      548 |

      at Object.<anonymous> (__tests__/core/queue.ts:545:23)

  ● queue › [with connection] › worker status › we can see what workers are working on (active)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › we can see what workers are working on (active)

    TypeError: Cannot read properties of undefined (reading 'end')

      543 |
      544 |       afterEach(async () => {
    > 545 |         await workerA.end();
          |                       ^
      546 |         await workerB.end();
      547 |       });
      548 |

      at Object.<anonymous> (__tests__/core/queue.ts:545:23)

  ● queue › [with connection] › worker status › can remove stuck workers and re-enqueue their jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › can remove stuck workers and re-enqueue their jobs

    TypeError: Cannot read properties of undefined (reading 'end')

      543 |
      544 |       afterEach(async () => {
    > 545 |         await workerA.end();
          |                       ^
      546 |         await workerB.end();
      547 |       });
      548 |

      at Object.<anonymous> (__tests__/core/queue.ts:545:23)

  ● queue › [with connection] › worker status › will not remove stuck jobs within the time limit

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › will not remove stuck jobs within the time limit

    TypeError: Cannot read properties of undefined (reading 'end')

      543 |
      544 |       afterEach(async () => {
    > 545 |         await workerA.end();
          |                       ^
      546 |         await workerB.end();
      547 |       });
      548 |

      at Object.<anonymous> (__tests__/core/queue.ts:545:23)

  ● queue › [with connection] › worker status › can forceClean a worker, returning the error payload

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › can forceClean a worker, returning the error payload

    TypeError: Cannot read properties of undefined (reading 'end')

      543 |
      544 |       afterEach(async () => {
    > 545 |         await workerA.end();
          |                       ^
      546 |         await workerB.end();
      547 |       });
      548 |

      at Object.<anonymous> (__tests__/core/queue.ts:545:23)

  ● queue › [with connection] › worker status › can forceClean a worker, returning the error payload and removing all keys it had set in redis

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › can forceClean a worker, returning the error payload and removing all keys it had set in redis

    TypeError: Cannot read properties of undefined (reading 'end')

      543 |
      544 |       afterEach(async () => {
    > 545 |         await workerA.end();
          |                       ^
      546 |         await workerB.end();
      547 |       });
      548 |

      at Object.<anonymous> (__tests__/core/queue.ts:545:23)

  ● queue › [with connection] › worker status › retryStuckJobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      24 |
      25 |   describe("[with connection]", () => {
    > 26 |     beforeAll(async () => {
         |     ^
      27 |       await specHelper.connect();
      28 |       queue = new Queue(
      29 |         { connection: specHelper.connectionDetails, queue: specHelper.queue },

      at __tests__/core/queue.ts:26:5
      at __tests__/core/queue.ts:25:3
      at Object.<anonymous> (__tests__/core/queue.ts:11:1)

  ● queue › [with connection] › worker status › retryStuckJobs

    TypeError: Cannot read properties of undefined (reading 'end')

      543 |
      544 |       afterEach(async () => {
    > 545 |         await workerA.end();
          |                       ^
      546 |         await workerB.end();
      547 |       });
      548 |

      at Object.<anonymous> (__tests__/core/queue.ts:545:23)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

FAIL __tests__/core/worker.ts (15.771 s)
  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● worker › can connect

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      66 |   });
      67 |
    > 68 |   test("can connect", async () => {
         |   ^
      69 |     const worker = new Worker(
      70 |       { connection: specHelper.connectionDetails, queues: [specHelper.queue] },
      71 |       {}

      at __tests__/core/worker.ts:68:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › can boot and stop

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › will determine the proper queue names

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › integration › will notice new job queues when started with queues=*

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › integration › with worker › will mark a job as failed

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › integration › with worker › can work a job and return successful things

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › integration › with worker › can accept jobs that are simple functions

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › integration › with worker › will not work jobs that are not defined

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › integration › with worker › will place failed jobs in the failed queue

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

  ● worker › [with connection] › integration › with worker › will ping with status even when working a slow job

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      132 |
      133 |   describe("[with connection]", () => {
    > 134 |     beforeAll(async () => {
          |     ^
      135 |       await specHelper.connect();
      136 |       queue = new Queue({ connection: specHelper.connectionDetails }, {});
      137 |       await queue.connect();

      at __tests__/core/worker.ts:134:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      138 |     });
      139 |
    > 140 |     afterAll(async () => {
          |     ^
      141 |       await specHelper.cleanup();
      142 |     });
      143 |

      at __tests__/core/worker.ts:140:5
      at __tests__/core/worker.ts:133:3
      at Object.<anonymous> (__tests__/core/worker.ts:63:1)

FAIL __tests__/plugins/retry.ts (36.202 s)
  ● plugins › retry › will work fine with non-crashing jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      42 | describe("plugins", () => {
      43 |   describe("retry", () => {
    > 44 |     beforeAll(async () => {
         |     ^
      45 |       await specHelper.connect();
      46 |       await specHelper.cleanup();
      47 |       queue = new Queue(

      at __tests__/plugins/retry.ts:44:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will work fine with non-crashing jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      67 |     });
      68 |
    > 69 |     afterEach(async () => {
         |     ^
      70 |       await specHelper.cleanup();
      71 |     });
      72 |

      at __tests__/plugins/retry.ts:69:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › will retry the job n times before finally failing

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      42 | describe("plugins", () => {
      43 |   describe("retry", () => {
    > 44 |     beforeAll(async () => {
         |     ^
      45 |       await specHelper.connect();
      46 |       await specHelper.cleanup();
      47 |       queue = new Queue(

      at __tests__/plugins/retry.ts:44:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › will retry the job n times before finally failing

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● plugins › retry › can have a retry count set

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      42 | describe("plugins", () => {
      43 |   describe("retry", () => {
    > 44 |     beforeAll(async () => {
         |     ^
      45 |       await specHelper.connect();
      46 |       await specHelper.cleanup();
      47 |       queue = new Queue(

      at __tests__/plugins/retry.ts:44:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › can have a retry count set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have a retry count set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have a retry count set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have a retry count set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have a retry count set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have a retry count set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have a retry count set

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      67 |     });
      68 |
    > 69 |     afterEach(async () => {
         |     ^
      70 |       await specHelper.cleanup();
      71 |     });
      72 |

      at __tests__/plugins/retry.ts:69:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › can have custom retry times set

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      42 | describe("plugins", () => {
      43 |   describe("retry", () => {
    > 44 |     beforeAll(async () => {
         |     ^
      45 |       await specHelper.connect();
      46 |       await specHelper.cleanup();
      47 |       queue = new Queue(

      at __tests__/plugins/retry.ts:44:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › can have custom retry times set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have custom retry times set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have custom retry times set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have custom retry times set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have custom retry times set

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › can have custom retry times set

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      67 |     });
      68 |
    > 69 |     afterEach(async () => {
         |     ^
      70 |       await specHelper.cleanup();
      71 |     });
      72 |

      at __tests__/plugins/retry.ts:69:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › when a job fails it should be re-enqueued (and not go to the failure queue)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      42 | describe("plugins", () => {
      43 |   describe("retry", () => {
    > 44 |     beforeAll(async () => {
         |     ^
      45 |       await specHelper.connect();
      46 |       await specHelper.cleanup();
      47 |       queue = new Queue(

      at __tests__/plugins/retry.ts:44:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › when a job fails it should be re-enqueued (and not go to the failure queue)

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › when a job fails it should be re-enqueued (and not go to the failure queue)

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › when a job fails it should be re-enqueued (and not go to the failure queue)

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › when a job fails it should be re-enqueued (and not go to the failure queue)

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › when a job fails it should be re-enqueued (and not go to the failure queue)

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › when a job fails it should be re-enqueued (and not go to the failure queue)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      67 |     });
      68 |
    > 69 |     afterEach(async () => {
         |     ^
      70 |       await specHelper.cleanup();
      71 |     });
      72 |

      at __tests__/plugins/retry.ts:69:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › will handle the stats properly for failing jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      42 | describe("plugins", () => {
      43 |   describe("retry", () => {
    > 44 |     beforeAll(async () => {
         |     ^
      45 |       await specHelper.connect();
      46 |       await specHelper.cleanup();
      47 |       queue = new Queue(

      at __tests__/plugins/retry.ts:44:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › will handle the stats properly for failing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will handle the stats properly for failing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will handle the stats properly for failing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will handle the stats properly for failing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will handle the stats properly for failing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will handle the stats properly for failing jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      67 |     });
      68 |
    > 69 |     afterEach(async () => {
         |     ^
      70 |       await specHelper.cleanup();
      71 |     });
      72 |

      at __tests__/plugins/retry.ts:69:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › will set the retry counter & retry data

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      42 | describe("plugins", () => {
      43 |   describe("retry", () => {
    > 44 |     beforeAll(async () => {
         |     ^
      45 |       await specHelper.connect();
      46 |       await specHelper.cleanup();
      47 |       queue = new Queue(

      at __tests__/plugins/retry.ts:44:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)

  ● plugins › retry › will set the retry counter & retry data

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will set the retry counter & retry data

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will set the retry counter & retry data

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will set the retry counter & retry data

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will set the retry counter & retry data

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › retry › will set the retry counter & retry data

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      67 |     });
      68 |
    > 69 |     afterEach(async () => {
         |     ^
      70 |       await specHelper.cleanup();
      71 |     });
      72 |

      at __tests__/plugins/retry.ts:69:5
      at __tests__/plugins/retry.ts:43:3
      at Object.<anonymous> (__tests__/plugins/retry.ts:42:1)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'end')

      62 |
      63 |     afterAll(async () => {
    > 64 |       await scheduler.end();
         |                       ^
      65 |       await queue.end();
      66 |       await specHelper.disconnect();
      67 |     });

      at Object.<anonymous> (__tests__/plugins/retry.ts:64:23)

FAIL __tests__/plugins/jobLock.ts (26.205 s)
  ● plugins › jobLock › will not lock jobs since arg objects are different

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      31 |
      32 | describe("plugins", () => {
    > 33 |   beforeAll(async () => {
         |   ^
      34 |     await specHelper.connect();
      35 |     await specHelper.cleanup();
      36 |     queue = new Queue(

      at __tests__/plugins/jobLock.ts:33:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)

  ● plugins › jobLock › will not lock jobs since arg objects are different

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not lock jobs since arg objects are different

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not lock jobs since arg objects are different

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not lock jobs since arg objects are different

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not lock jobs since arg objects are different

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not lock jobs since arg objects are different

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      44 |   });
      45 |
    > 46 |   afterEach(async () => {
         |   ^
      47 |     await specHelper.cleanup();
      48 |   });
      49 |

      at __tests__/plugins/jobLock.ts:46:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)

  ● plugins › jobLock › allows the key to be specified as a function

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      31 |
      32 | describe("plugins", () => {
    > 33 |   beforeAll(async () => {
         |   ^
      34 |     await specHelper.connect();
      35 |     await specHelper.cleanup();
      36 |     queue = new Queue(

      at __tests__/plugins/jobLock.ts:33:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)

  ● plugins › jobLock › allows the key to be specified as a function

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › allows the key to be specified as a function

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● plugins › jobLock › will not run 2 jobs with the same args at the same time

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      31 |
      32 | describe("plugins", () => {
    > 33 |   beforeAll(async () => {
         |   ^
      34 |     await specHelper.connect();
      35 |     await specHelper.cleanup();
      36 |     queue = new Queue(

      at __tests__/plugins/jobLock.ts:33:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)

  ● plugins › jobLock › will not run 2 jobs with the same args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not run 2 jobs with the same args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not run 2 jobs with the same args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not run 2 jobs with the same args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not run 2 jobs with the same args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will not run 2 jobs with the same args at the same time

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      44 |   });
      45 |
    > 46 |   afterEach(async () => {
         |   ^
      47 |     await specHelper.cleanup();
      48 |   });
      49 |

      at __tests__/plugins/jobLock.ts:46:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)

  ● plugins › jobLock › can be configured not to re-enqueue a duplicate task

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      31 |
      32 | describe("plugins", () => {
    > 33 |   beforeAll(async () => {
         |   ^
      34 |     await specHelper.connect();
      35 |     await specHelper.cleanup();
      36 |     queue = new Queue(

      at __tests__/plugins/jobLock.ts:33:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)

  ● plugins › jobLock › can be configured not to re-enqueue a duplicate task

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › can be configured not to re-enqueue a duplicate task

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › can be configured not to re-enqueue a duplicate task

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › can be configured not to re-enqueue a duplicate task

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › can be configured not to re-enqueue a duplicate task

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › can be configured not to re-enqueue a duplicate task

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      44 |   });
      45 |
    > 46 |   afterEach(async () => {
         |   ^
      47 |     await specHelper.cleanup();
      48 |   });
      49 |

      at __tests__/plugins/jobLock.ts:46:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)

  ● plugins › jobLock › will run 2 jobs with the different args at the same time

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      31 |
      32 | describe("plugins", () => {
    > 33 |   beforeAll(async () => {
         |   ^
      34 |     await specHelper.connect();
      35 |     await specHelper.cleanup();
      36 |     queue = new Queue(

      at __tests__/plugins/jobLock.ts:33:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)

  ● plugins › jobLock › will run 2 jobs with the different args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will run 2 jobs with the different args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will run 2 jobs with the different args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will run 2 jobs with the different args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will run 2 jobs with the different args at the same time

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › jobLock › will run 2 jobs with the different args at the same time

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      44 |   });
      45 |
    > 46 |   afterEach(async () => {
         |   ^
      47 |     await specHelper.cleanup();
      48 |   });
      49 |

      at __tests__/plugins/jobLock.ts:46:3
      at Object.<anonymous> (__tests__/plugins/jobLock.ts:32:1)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'end')

      49 |
      50 |   afterAll(async () => {
    > 51 |     await queue.end();
         |                 ^
      52 |     await specHelper.disconnect();
      53 |   });
      54 |

      at Object.<anonymous> (__tests__/plugins/jobLock.ts:51:17)

FAIL __tests__/core/connection.ts (20.723 s)
  ● connection › should stat with no redis keys in the namespace

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › it has loaded Lua commands

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › getKeys returns appropriate keys based on matcher given

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › getKeys returns appropriate keys based on matcher given

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      30 |     const db = specHelper.connectionDetails.database;
      31 |     let connection: Connection;
    > 32 |     beforeAll(async () => {
         |     ^
      33 |       connection = new Connection(specHelper.cleanConnectionDetails());
      34 |       await connection.connect();
      35 |     });

      at __tests__/core/connection.ts:32:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › getKeys returns appropriate keys based on matcher given

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      37 |     let prefixedConnection: Connection;
      38 |     let prefixedRedis: Redis;
    > 39 |     beforeAll(async () => {
         |     ^
      40 |       prefixedRedis = new Redis(null, null, {
      41 |         keyPrefix: "customNamespace:",
      42 |         db: db,

      at __tests__/core/connection.ts:39:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with the default namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with the default namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      30 |     const db = specHelper.connectionDetails.database;
      31 |     let connection: Connection;
    > 32 |     beforeAll(async () => {
         |     ^
      33 |       connection = new Connection(specHelper.cleanConnectionDetails());
      34 |       await connection.connect();
      35 |     });

      at __tests__/core/connection.ts:32:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with the default namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      37 |     let prefixedConnection: Connection;
      38 |     let prefixedRedis: Redis;
    > 39 |     beforeAll(async () => {
         |     ^
      40 |       prefixedRedis = new Redis(null, null, {
      41 |         keyPrefix: "customNamespace:",
      42 |         db: db,

      at __tests__/core/connection.ts:39:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › ioredis transparent key prefix writes keys with the prefix even if they are not returned

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › ioredis transparent key prefix writes keys with the prefix even if they are not returned

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      30 |     const db = specHelper.connectionDetails.database;
      31 |     let connection: Connection;
    > 32 |     beforeAll(async () => {
         |     ^
      33 |       connection = new Connection(specHelper.cleanConnectionDetails());
      34 |       await connection.connect();
      35 |     });

      at __tests__/core/connection.ts:32:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › ioredis transparent key prefix writes keys with the prefix even if they are not returned

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      37 |     let prefixedConnection: Connection;
      38 |     let prefixedRedis: Redis;
    > 39 |     beforeAll(async () => {
         |     ^
      40 |       prefixedRedis = new Redis(null, null, {
      41 |         keyPrefix: "customNamespace:",
      42 |         db: db,

      at __tests__/core/connection.ts:39:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with a custom namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with a custom namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      30 |     const db = specHelper.connectionDetails.database;
      31 |     let connection: Connection;
    > 32 |     beforeAll(async () => {
         |     ^
      33 |       connection = new Connection(specHelper.cleanConnectionDetails());
      34 |       await connection.connect();
      35 |     });

      at __tests__/core/connection.ts:32:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with a custom namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      37 |     let prefixedConnection: Connection;
      38 |     let prefixedRedis: Redis;
    > 39 |     beforeAll(async () => {
         |     ^
      40 |       prefixedRedis = new Redis(null, null, {
      41 |         keyPrefix: "customNamespace:",
      42 |         db: db,

      at __tests__/core/connection.ts:39:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with a array namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with a array namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      30 |     const db = specHelper.connectionDetails.database;
      31 |     let connection: Connection;
    > 32 |     beforeAll(async () => {
         |     ^
      33 |       connection = new Connection(specHelper.cleanConnectionDetails());
      34 |       await connection.connect();
      35 |     });

      at __tests__/core/connection.ts:32:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › keys built with a array namespace are correct

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      37 |     let prefixedConnection: Connection;
      38 |     let prefixedRedis: Redis;
    > 39 |     beforeAll(async () => {
         |     ^
      40 |       prefixedRedis = new Redis(null, null, {
      41 |         keyPrefix: "customNamespace:",
      42 |         db: db,

      at __tests__/core/connection.ts:39:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › will properly build namespace strings dynamically

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › will properly build namespace strings dynamically

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      30 |     const db = specHelper.connectionDetails.database;
      31 |     let connection: Connection;
    > 32 |     beforeAll(async () => {
         |     ^
      33 |       connection = new Connection(specHelper.cleanConnectionDetails());
      34 |       await connection.connect();
      35 |     });

      at __tests__/core/connection.ts:32:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › keys and namespaces › will properly build namespace strings dynamically

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      37 |     let prefixedConnection: Connection;
      38 |     let prefixedRedis: Redis;
    > 39 |     beforeAll(async () => {
         |     ^
      40 |       prefixedRedis = new Redis(null, null, {
      41 |         keyPrefix: "customNamespace:",
      42 |         db: db,

      at __tests__/core/connection.ts:39:5
      at __tests__/core/connection.ts:29:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › will select redis db from options

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › removes empty namespace from generated key

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

  ● connection › removes the redis event listeners when end

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      4 |
      5 | describe("connection", () => {
    > 6 |   beforeAll(async () => {
        |   ^
      7 |     await specHelper.connect();
      8 |     await specHelper.cleanup();
      9 |   });

      at __tests__/core/connection.ts:6:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

       9 |   });
      10 |
    > 11 |   afterAll(async () => {
         |   ^
      12 |     await specHelper.cleanup();
      13 |     await specHelper.disconnect();
      14 |   });

      at __tests__/core/connection.ts:11:3
      at Object.<anonymous> (__tests__/core/connection.ts:5:1)

FAIL __tests__/core/scheduler.ts (20.874 s)
  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    connect ECONNREFUSED 127.0.0.1:6379



  ● scheduler › can connect

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      12 |
      13 | describe("scheduler", () => {
    > 14 |   test("can connect", async () => {
         |   ^
      15 |     scheduler = new Scheduler({
      16 |       connection: specHelper.connectionDetails,
      17 |       timeout: specHelper.timeout,

      at __tests__/core/scheduler.ts:14:3
      at Object.<anonymous> (__tests__/core/scheduler.ts:13:1)

  ● scheduler › with specHelper › locking › should only have one leader, and can failover

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      22 |
      23 |   describe("with specHelper", () => {
    > 24 |     beforeAll(async () => await specHelper.connect());
         |     ^
      25 |     afterAll(async () => await specHelper.disconnect());
      26 |
      27 |     describe("locking", () => {

      at __tests__/core/scheduler.ts:24:5
      at __tests__/core/scheduler.ts:23:3
      at Object.<anonymous> (__tests__/core/scheduler.ts:13:1)

  ● scheduler › with specHelper › [with connection] › can start and stop

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      22 |
      23 |   describe("with specHelper", () => {
    > 24 |     beforeAll(async () => await specHelper.connect());
         |     ^
      25 |     afterAll(async () => await specHelper.disconnect());
      26 |
      27 |     describe("locking", () => {

      at __tests__/core/scheduler.ts:24:5
      at __tests__/core/scheduler.ts:23:3
      at Object.<anonymous> (__tests__/core/scheduler.ts:13:1)

  ● scheduler › with specHelper › [with connection] › queues can see who the leader is

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      22 |
      23 |   describe("with specHelper", () => {
    > 24 |     beforeAll(async () => await specHelper.connect());
         |     ^
      25 |     afterAll(async () => await specHelper.disconnect());
      26 |
      27 |     describe("locking", () => {

      at __tests__/core/scheduler.ts:24:5
      at __tests__/core/scheduler.ts:23:3
      at Object.<anonymous> (__tests__/core/scheduler.ts:13:1)

  ● scheduler › with specHelper › [with connection] › will move enqueued jobs when the time comes

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      22 |
      23 |   describe("with specHelper", () => {
    > 24 |     beforeAll(async () => await specHelper.connect());
         |     ^
      25 |     afterAll(async () => await specHelper.disconnect());
      26 |
      27 |     describe("locking", () => {

      at __tests__/core/scheduler.ts:24:5
      at __tests__/core/scheduler.ts:23:3
      at Object.<anonymous> (__tests__/core/scheduler.ts:13:1)

  ● scheduler › with specHelper › [with connection] › will not move jobs in the future

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      22 |
      23 |   describe("with specHelper", () => {
    > 24 |     beforeAll(async () => await specHelper.connect());
         |     ^
      25 |     afterAll(async () => await specHelper.disconnect());
      26 |
      27 |     describe("locking", () => {

      at __tests__/core/scheduler.ts:24:5
      at __tests__/core/scheduler.ts:23:3
      at Object.<anonymous> (__tests__/core/scheduler.ts:13:1)

  ● scheduler › with specHelper › [with connection] › stuck workers › will remove stuck workers and fail their jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      22 |
      23 |   describe("with specHelper", () => {
    > 24 |     beforeAll(async () => await specHelper.connect());
         |     ^
      25 |     afterAll(async () => await specHelper.disconnect());
      26 |
      27 |     describe("locking", () => {

      at __tests__/core/scheduler.ts:24:5
      at __tests__/core/scheduler.ts:23:3
      at Object.<anonymous> (__tests__/core/scheduler.ts:13:1)

  ● scheduler › with specHelper › [with connection] › stuck workers › will remove stuck workers and fail their jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      138 |         };
      139 |
    > 140 |         beforeAll(async () => {
          |         ^
      141 |           worker = new Worker(
      142 |             {
      143 |               connection: specHelper.connectionDetails,

      at __tests__/core/scheduler.ts:140:9
      at __tests__/core/scheduler.ts:126:7
      at __tests__/core/scheduler.ts:68:5
      at __tests__/core/scheduler.ts:23:3


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      29 |         await specHelper.cleanup();
      30 |       });
    > 31 |       afterAll(async () => {
         |       ^
      32 |         await specHelper.cleanup();
      33 |       });
      34 |

      at __tests__/core/scheduler.ts:31:7
      at __tests__/core/scheduler.ts:27:5
      at __tests__/core/scheduler.ts:23:3
      at Object.<anonymous> (__tests__/core/scheduler.ts:13:1)

  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



FAIL __tests__/plugins/queueLock.ts (31.124 s)
  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      55 | describe("plugins", () => {
      56 |   describe("queueLock", () => {
    > 57 |     beforeAll(async () => {
         |     ^
      58 |       await specHelper.connect();
      59 |       await specHelper.cleanup();
      60 |       queue = new Queue(

      at __tests__/plugins/queueLock.ts:57:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will not enque a job with the same args if it is already in the queue

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      71 |       await specHelper.cleanup();
      72 |     });
    > 73 |     afterEach(async () => {
         |     ^
      74 |       await specHelper.cleanup();
      75 |     });
      76 |

      at __tests__/plugins/queueLock.ts:73:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › will enque a job with the different args

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      55 | describe("plugins", () => {
      56 |   describe("queueLock", () => {
    > 57 |     beforeAll(async () => {
         |     ^
      58 |       await specHelper.connect();
      59 |       await specHelper.cleanup();
      60 |       queue = new Queue(

      at __tests__/plugins/queueLock.ts:57:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › will enque a job with the different args

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enque a job with the different args

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enque a job with the different args

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      55 | describe("plugins", () => {
      56 |   describe("queueLock", () => {
    > 57 |     beforeAll(async () => {
         |     ^
      58 |       await specHelper.connect();
      59 |       await specHelper.cleanup();
      60 |       queue = new Queue(

      at __tests__/plugins/queueLock.ts:57:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a job with timeout set by QueueLock plugin options and check its ttl

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      71 |       await specHelper.cleanup();
      72 |     });
    > 73 |     afterEach(async () => {
         |     ^
      74 |       await specHelper.cleanup();
      75 |     });
      76 |

      at __tests__/plugins/queueLock.ts:73:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      55 | describe("plugins", () => {
      56 |   describe("queueLock", () => {
    > 57 |     beforeAll(async () => {
         |     ^
      58 |       await specHelper.connect();
      59 |       await specHelper.cleanup();
      60 |       queue = new Queue(

      at __tests__/plugins/queueLock.ts:57:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › will enqueue a repeated stuck job after another one to overwrite the ttl and the expiration time of the lock

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      71 |       await specHelper.cleanup();
      72 |     });
    > 73 |     afterEach(async () => {
         |     ^
      74 |       await specHelper.cleanup();
      75 |     });
      76 |

      at __tests__/plugins/queueLock.ts:73:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      55 | describe("plugins", () => {
      56 |   describe("queueLock", () => {
    > 57 |     beforeAll(async () => {
         |     ^
      58 |       await specHelper.connect();
      59 |       await specHelper.cleanup();
      60 |       queue = new Queue(

      at __tests__/plugins/queueLock.ts:57:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job when the job has been worked

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      71 |       await specHelper.cleanup();
      72 |     });
    > 73 |     afterEach(async () => {
         |     ^
      74 |       await specHelper.cleanup();
      75 |     });
      76 |

      at __tests__/plugins/queueLock.ts:73:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      55 | describe("plugins", () => {
      56 |   describe("queueLock", () => {
    > 57 |     beforeAll(async () => {
         |     ^
      58 |       await specHelper.connect();
      59 |       await specHelper.cleanup();
      60 |       queue = new Queue(

      at __tests__/plugins/queueLock.ts:57:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)

  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › queueLock › with worker › will remove a lock on a job if a plugin does not run the job

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      71 |       await specHelper.cleanup();
      72 |     });
    > 73 |     afterEach(async () => {
         |     ^
      74 |       await specHelper.cleanup();
      75 |     });
      76 |

      at __tests__/plugins/queueLock.ts:73:5
      at __tests__/plugins/queueLock.ts:56:3
      at Object.<anonymous> (__tests__/plugins/queueLock.ts:55:1)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'end')

      76 |
      77 |     afterAll(async () => {
    > 78 |       await queue.end();
         |                   ^
      79 |       await specHelper.disconnect();
      80 |     });
      81 |

      at Object.<anonymous> (__tests__/plugins/queueLock.ts:78:19)

FAIL __tests__/core/multiWorker.ts (11.083 s)
  ● multiWorker › should never have less than one worker

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● multiWorker › should never have less than one worker

    TypeError: Cannot read properties of undefined (reading 'delQueue')

      73 |
      74 |   afterEach(async () => {
    > 75 |     await queue.delQueue(specHelper.queue);
         |                 ^
      76 |   });
      77 |
      78 |   afterAll(async () => {

      at Object.<anonymous> (__tests__/core/multiWorker.ts:75:17)
          at runMicrotasks (<anonymous>)

  ● multiWorker › should stop adding workers when the max is hit & CPU utilization is low

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● multiWorker › should stop adding workers when the max is hit & CPU utilization is low

    TypeError: Cannot read properties of undefined (reading 'delQueue')

      73 |
      74 |   afterEach(async () => {
    > 75 |     await queue.delQueue(specHelper.queue);
         |                 ^
      76 |   });
      77 |
      78 |   afterAll(async () => {

      at Object.<anonymous> (__tests__/core/multiWorker.ts:75:17)
          at runMicrotasks (<anonymous>)

  ● multiWorker › should not add workers when CPU utilization is high

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● multiWorker › should not add workers when CPU utilization is high

    TypeError: Cannot read properties of undefined (reading 'delQueue')

      73 |
      74 |   afterEach(async () => {
    > 75 |     await queue.delQueue(specHelper.queue);
         |                 ^
      76 |   });
      77 |
      78 |   afterAll(async () => {

      at Object.<anonymous> (__tests__/core/multiWorker.ts:75:17)
          at runMicrotasks (<anonymous>)

  ● multiWorker › should pass on all worker emits to the instance of multiWorker

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)

  ● multiWorker › should pass on all worker emits to the instance of multiWorker

    TypeError: Cannot read properties of undefined (reading 'delQueue')

      73 |
      74 |   afterEach(async () => {
    > 75 |     await queue.delQueue(specHelper.queue);
         |                 ^
      76 |   });
      77 |
      78 |   afterAll(async () => {

      at Object.<anonymous> (__tests__/core/multiWorker.ts:75:17)
          at runMicrotasks (<anonymous>)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'end')

      77 |
      78 |   afterAll(async () => {
    > 79 |     await queue.end();
         |                 ^
      80 |     await specHelper.disconnect();
      81 |   });
      82 |

      at Object.<anonymous> (__tests__/core/multiWorker.ts:79:17)
          at runMicrotasks (<anonymous>)

FAIL __tests__/plugins/noop.ts (10.985 s)
  ● plugins › noop › will work fine with non-crashing jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      37 | describe("plugins", () => {
      38 |   describe("noop", () => {
    > 39 |     beforeAll(async () => {
         |     ^
      40 |       await specHelper.connect();
      41 |       await specHelper.cleanup();
      42 |       queue = new Queue(

      at __tests__/plugins/noop.ts:39:5
      at __tests__/plugins/noop.ts:38:3
      at Object.<anonymous> (__tests__/plugins/noop.ts:37:1)

  ● plugins › noop › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will work fine with non-crashing jobs

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will work fine with non-crashing jobs

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      66 |     });
      67 |
    > 68 |     afterEach(async () => {
         |     ^
      69 |       await specHelper.cleanup();
      70 |     });
      71 |

      at __tests__/plugins/noop.ts:68:5
      at __tests__/plugins/noop.ts:38:3
      at Object.<anonymous> (__tests__/plugins/noop.ts:37:1)

  ● plugins › noop › will prevent any failed jobs from ending in the failed queue

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      37 | describe("plugins", () => {
      38 |   describe("noop", () => {
    > 39 |     beforeAll(async () => {
         |     ^
      40 |       await specHelper.connect();
      41 |       await specHelper.cleanup();
      42 |       queue = new Queue(

      at __tests__/plugins/noop.ts:39:5
      at __tests__/plugins/noop.ts:38:3
      at Object.<anonymous> (__tests__/plugins/noop.ts:37:1)

  ● plugins › noop › will prevent any failed jobs from ending in the failed queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will prevent any failed jobs from ending in the failed queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will prevent any failed jobs from ending in the failed queue

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › noop › will prevent any failed jobs from ending in the failed queue

    MaxRetriesPerRequestError: Reached the max retries per request limit (which is 20). Refer to "maxRetriesPerRequest" option for details.

      at Socket.<anonymous> (node_modules/ioredis/built/redis/event_handler.js:175:37)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'end')

      61 |
      62 |     afterAll(async () => {
    > 63 |       await scheduler.end();
         |                       ^
      64 |       await queue.end();
      65 |       await specHelper.disconnect();
      66 |     });

      at Object.<anonymous> (__tests__/plugins/noop.ts:63:23)
          at runMicrotasks (<anonymous>)

PASS __tests__/integration/ioredis-mock.ts
FAIL __tests__/plugins/delayedQueueLock.ts (5.486 s)
  ● plugins › delayQueueLock › will not enque a job with the same args if it is already in the delayed queue

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      28 |
      29 | describe("plugins", () => {
    > 30 |   beforeAll(async () => {
         |   ^
      31 |     await specHelper.connect();
      32 |     await specHelper.cleanup();
      33 |     queue = new Queue(

      at __tests__/plugins/delayedQueueLock.ts:30:3
      at Object.<anonymous> (__tests__/plugins/delayedQueueLock.ts:29:1)

  ● plugins › delayQueueLock › will enque a job with the different args

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      28 |
      29 | describe("plugins", () => {
    > 30 |   beforeAll(async () => {
         |   ^
      31 |     await specHelper.connect();
      32 |     await specHelper.cleanup();
      33 |     queue = new Queue(

      at __tests__/plugins/delayedQueueLock.ts:30:3
      at Object.<anonymous> (__tests__/plugins/delayedQueueLock.ts:29:1)


  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    connect ECONNREFUSED 127.0.0.1:6379



  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'end')

      42 |
      43 |   afterAll(async () => {
    > 44 |     await queue.end();
         |                 ^
      45 |     await specHelper.cleanup();
      46 |     await specHelper.disconnect();
      47 |   });

      at Object.<anonymous> (__tests__/plugins/delayedQueueLock.ts:44:17)

FAIL __tests__/integration/ioredis.ts (30.498 s)
  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a queue can be created

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      29 |   });
      30 |
    > 31 |   test("a queue can be created", async () => {
         |   ^
      32 |     queue = new Queue({ connection: connectionDetails }, jobs);
      33 |     await queue.connect();
      34 |   });

      at __tests__/integration/ioredis.ts:31:3
      at Object.<anonymous> (__tests__/integration/ioredis.ts:20:1)

  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a scheduler can be created

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      34 |   });
      35 |
    > 36 |   test("a scheduler can be created", async () => {
         |   ^
      37 |     scheduler = new Scheduler({ connection: connectionDetails }, jobs);
      38 |     await scheduler.connect();
      39 |     // await scheduler.start();

      at __tests__/integration/ioredis.ts:36:3
      at Object.<anonymous> (__tests__/integration/ioredis.ts:20:1)

  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a worker can be created

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      40 |   });
      41 |
    > 42 |   test("a worker can be created", async () => {
         |   ^
      43 |     worker = new Worker(
      44 |       {
      45 |         connection: connectionDetails,

      at __tests__/integration/ioredis.ts:42:3
      at Object.<anonymous> (__tests__/integration/ioredis.ts:20:1)

  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › a job can be enqueued

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      53 |   });
      54 |
    > 55 |   test("a job can be enqueued", async () => {
         |   ^
      56 |     await queue.enqueueIn(1, "math", "add", [1, 2]);
      57 |     const times = await queue.scheduledAt("math", "add", [1, 2]);
      58 |     expect(times.length).toBe(1);

      at __tests__/integration/ioredis.ts:55:3
      at Object.<anonymous> (__tests__/integration/ioredis.ts:20:1)

  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the scheduler can promote the job

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      59 |   });
      60 |
    > 61 |   test("the scheduler can promote the job", async () => {
         |   ^
      62 |     await scheduler.poll();
      63 |     const times = await queue.scheduledAt("math", "add", [1, 2]);
      64 |     expect(times.length).toBe(0);

      at __tests__/integration/ioredis.ts:61:3
      at Object.<anonymous> (__tests__/integration/ioredis.ts:20:1)

  ● testing with ioredis package › the worker can work the job

    TypeError: Cannot read properties of undefined (reading 'redis')

      483 |   private async track() {
      484 |     this.running = true;
    > 485 |     return this.connection.redis.sadd(
          |                            ^
      486 |       this.connection.key("workers"),
      487 |       this.name + ":" + this.stringQueues()
      488 |     );

      at Worker.track (src/core/worker.ts:485:28)
      at Worker.init (src/core/worker.ts:156:16)
      at Worker.start (src/core/worker.ts:150:18)
      at __tests__/integration/ioredis.ts:71:20
      at Object.<anonymous> (__tests__/integration/ioredis.ts:70:11)

  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    connect ECONNREFUSED 127.0.0.1:6379



  ● testing with ioredis package › the worker can work the job

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      67 |   });
      68 |
    > 69 |   test("the worker can work the job", async () => {
         |   ^
      70 |     await new Promise(async (resolve) => {
      71 |       await worker.start();
      72 |       worker.on("success", async (q, job, result, duration) => {

      at __tests__/integration/ioredis.ts:69:3
      at Object.<anonymous> (__tests__/integration/ioredis.ts:20:1)

FAIL __tests__/core/connectionError.ts
  ● connection error › can provide an error if connection failed

    connect ECONNREFUSED 127.0.0.1:6379



  ● connection error › can provide an error if connection failed

    connect ECONNREFUSED 127.0.0.1:6379



  ● connection error › can provide an error if connection failed

    connect ECONNREFUSED 127.0.0.1:6379



  ● connection error › can provide an error if connection failed

    connect ECONNREFUSED 127.0.0.1:6379



  ● connection error › can provide an error if connection failed

    connect ECONNREFUSED 127.0.0.1:6379



  ● connection error › can provide an error if connection failed

    connect ECONNREFUSED 127.0.0.1:6379



FAIL __tests__/plugins/custom_plugins.ts (5.51 s)
  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    connect ECONNREFUSED 127.0.0.1:6379



  ● plugins › custom plugins › runs a custom plugin outside of the plugins directory

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

       5 | describe("plugins", () => {
       6 |   describe("custom plugins", () => {
    >  7 |     test("runs a custom plugin outside of the plugins directory", async () => {
         |     ^
       8 |       const jobs = {
       9 |         //@ts-ignore
      10 |         myJob: {

      at __tests__/plugins/custom_plugins.ts:7:5
      at __tests__/plugins/custom_plugins.ts:6:3
      at Object.<anonymous> (__tests__/plugins/custom_plugins.ts:5:1)

Test Suites: 13 failed, 1 passed, 14 total
Tests:       103 failed, 10 passed, 113 total
Snapshots:   0 total
Time:        241.703 s
Ran all test suites.
node:events:491
      throw er; // Unhandled 'error' event
      ^

Error: connect ECONNREFUSED 127.0.0.1:6379
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1247:16)
Emitted 'error' event on Queue instance at:
    at Connection.<anonymous> (/data/js-variants/multee/Original/node-resque/src/core/queue.ts:23:18)
    at Connection.emit (node:events:513:28)
    at EventEmitter.eventListeners.error (/data/js-variants/multee/Original/node-resque/src/core/connection.ts:53:18)
    at EventEmitter.emit (node:events:513:28)
    at EventEmitter.silentEmit (/data/js-variants/multee/Original/node-resque/node_modules/ioredis/built/Redis.js:460:30)
    at Socket.<anonymous> (/data/js-variants/multee/Original/node-resque/node_modules/ioredis/built/redis/event_handler.js:189:14)
    at Object.onceWrapper (node:events:628:26)
    at Socket.emit (node:events:525:35)
    at emitErrorNT (node:internal/streams/destroy:157:8)
    at emitErrorCloseNT (node:internal/streams/destroy:122:3) {
  errno: -111,
  code: 'ECONNREFUSED',
  syscall: 'connect',
  address: '127.0.0.1',
  port: 6379
}
I am package gulp-markdown
I am package rpc-websockets
I am package stream-splicer
I am package cordova-js
I am package eslint-plugin-require-path-exists
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-01T17_09_38_181Z-debug-0.log
I am package penthouse
node:internal/process/promises:279
            triggerUncaughtException(err, true /* fromPromise */);
            ^

Error: Failed to launch the browser process!
/data/js-variants/multee/Original/penthouse/node_modules/puppeteer/.local-chromium/linux-722234/chrome-linux/chrome: error while loading shared libraries: libX11-xcb.so.1: cannot open shared object file: No such file or directory


TROUBLESHOOTING: https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md

    at onClose (/data/js-variants/multee/Original/penthouse/node_modules/puppeteer/lib/Launcher.js:750:14)
    at Interface.<anonymous> (/data/js-variants/multee/Original/penthouse/node_modules/puppeteer/lib/Launcher.js:739:50)
    at Interface.emit (node:events:525:35)
    at Interface.close (node:readline:590:8)
    at Socket.onend (node:readline:280:10)
    at Socket.emit (node:events:525:35)
    at endReadableNT (node:internal/streams/readable:1358:12)
    at processTicksAndRejections (node:internal/process/task_queues:83:21)
I am package node-google-spreadsheet
PASS test/rows.test.js (32.585s)
FAIL test/manage.test.js (18.784s)
  ● Managing doc info and sheets › copying a sheet to another document › should fail without proper permissions

    expect(received).rejects.toThrow(expected)

    Expected substring: "403"
    Received message:   "Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'."

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)
      at Object.toThrow (node_modules/expect/build/index.js:242:20)
      at Object.<anonymous> (test/manage.test.js:235:63)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Managing doc info and sheets › copying a sheet to another document › can copy the sheet to another doc

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

FAIL test/cells.test.js
  ● Cell-based operations › loading cells › fetches all cells if no range given

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › fetches all cells if no range given

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      38 | 
      39 |     it('fetches all cells if no range given', async () => {
    > 40 |       await sheet.loadCells();
         |                   ^
      41 |       expect(sheet.cellStats).toEqual({
      42 |         nonEmpty: 3,
      43 |         loaded: TOTAL_CELLS,

      at Object.<anonymous> (test/cells.test.js:40:19)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › fetches all cells if no range given

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can fetch a specific A1 range by passing a string

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › can fetch a specific A1 range by passing a string

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      47 | 
      48 |     it('can fetch a specific A1 range by passing a string', async () => {
    > 49 |       await sheet.loadCells('B1:D3');
         |                   ^
      50 |       expect(sheet.cellStats).toMatchObject({
      51 |         nonEmpty: 2,
      52 |         loaded: 9,

      at Object.<anonymous> (test/cells.test.js:49:19)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can fetch a specific A1 range by passing a string

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can load multiple ranges

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › can load multiple ranges

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      55 | 
      56 |     it('can load multiple ranges', async () => {
    > 57 |       await sheet.loadCells(['A1:A3', 'C1:C3']);
         |                   ^
      58 |       expect(sheet.cellStats).toMatchObject({
      59 |         nonEmpty: 2,
      60 |         loaded: 6,

      at Object.<anonymous> (test/cells.test.js:57:19)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can load multiple ranges

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can fetch a range that overlaps the sheet but goes out of bounds

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › can fetch a range that overlaps the sheet but goes out of bounds

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      63 | 
      64 |     it('can fetch a range that overlaps the sheet but goes out of bounds', async () => {
    > 65 |       await sheet.loadCells('A10:B11');
         |                   ^
      66 |       expect(sheet.cellStats).toMatchObject({ loaded: 2 });
      67 |     });
      68 | 

      at Object.<anonymous> (test/cells.test.js:65:19)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can fetch a range that overlaps the sheet but goes out of bounds

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can fetch a range using a GridRange style object

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › can fetch a range using a GridRange style object

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      69 |     it('can fetch a range using a GridRange style object', async () => {
      70 |       // start is inclusive, end is exclusive
    > 71 |       await sheet.loadCells({
         |                   ^
      72 |         startRowIndex: 0,
      73 |         endRowIndex: 3,
      74 |         startColumnIndex: 2,

      at Object.<anonymous> (test/cells.test.js:71:19)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can fetch a range using a GridRange style object

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › should throw if a cell is not loaded yet

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › should throw if a cell is not loaded yet

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can load a cell multiple times (this was a bug)

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › can load a cell multiple times (this was a bug)

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      87 | 
      88 |     it('can load a cell multiple times (this was a bug)', async () => {
    > 89 |       await sheet.loadCells('J10');
         |                   ^
      90 |       expect(sheet.getCellByA1('J10').value).toBeNull();
      91 |       await sheet.loadCells('J10');
      92 |       expect(sheet.getCellByA1('J10').value).toBeNull();

      at Object.<anonymous> (test/cells.test.js:89:19)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › can load a cell multiple times (this was a bug)

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for invalid A1 range

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › invalid filters › throws for invalid A1 range

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      102 |       }, (badFilter, description) => {
      103 |         it(`throws for ${description}`, async () => {
    > 104 |           await expect(sheet.loadCells(badFilter)).rejects.toThrow();
          |                              ^
      105 |         });
      106 |       });
      107 |     });

      at Object.<anonymous> (test/cells.test.js:104:30)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for invalid A1 range

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for A1 range out of bounds

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › invalid filters › throws for A1 range out of bounds

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      102 |       }, (badFilter, description) => {
      103 |         it(`throws for ${description}`, async () => {
    > 104 |           await expect(sheet.loadCells(badFilter)).rejects.toThrow();
          |                              ^
      105 |         });
      106 |       });
      107 |     });

      at Object.<anonymous> (test/cells.test.js:104:30)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for A1 range out of bounds

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for gridrange sheetId mismatch

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › invalid filters › throws for gridrange sheetId mismatch

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      102 |       }, (badFilter, description) => {
      103 |         it(`throws for ${description}`, async () => {
    > 104 |           await expect(sheet.loadCells(badFilter)).rejects.toThrow();
          |                              ^
      105 |         });
      106 |       });
      107 |     });

      at Object.<anonymous> (test/cells.test.js:104:30)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for gridrange sheetId mismatch

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for gridrange range out of bounds

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › invalid filters › throws for gridrange range out of bounds

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      102 |       }, (badFilter, description) => {
      103 |         it(`throws for ${description}`, async () => {
    > 104 |           await expect(sheet.loadCells(badFilter)).rejects.toThrow();
          |                              ^
      105 |         });
      106 |       });
      107 |     });

      at Object.<anonymous> (test/cells.test.js:104:30)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for gridrange range out of bounds

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for not a string or object

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › loading cells › invalid filters › throws for not a string or object

    TypeError: Cannot read properties of undefined (reading 'loadCells')

      102 |       }, (badFilter, description) => {
      103 |         it(`throws for ${description}`, async () => {
    > 104 |           await expect(sheet.loadCells(badFilter)).rejects.toThrow();
          |                              ^
      105 |         });
      106 |       });
      107 |     });

      at Object.<anonymous> (test/cells.test.js:104:30)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › loading cells › invalid filters › throws for not a string or object

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      34 |   describe('loading cells', () => {
      35 |     afterEach(() => {
    > 36 |       sheet.resetLocalCache(true);
         |             ^
      37 |     });
      38 | 
      39 |     it('fetches all cells if no range given', async () => {

      at Object.<anonymous> (test/cells.test.js:36:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can select a cell by A1 address or row/col index

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › can select a cell by A1 address or row/col index

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can select a cell by A1 address or row/col index

    TypeError: Cannot read properties of undefined (reading 'rowIndex')

      121 |     it('can select a cell by A1 address or row/col index', async () => {
      122 |       // c2 is `sheet.getCell(0, 1);`
    > 123 |       expect(c2.rowIndex).toBe(0);
          |                 ^
      124 |       expect(c2.columnIndex).toBe(1);
      125 |       expect(c2.a1Address).toBe('B1');
      126 |       expect(c2).toEqual(sheet.getCellByA1('B1'));

      at Object.<anonymous> (test/cells.test.js:123:17)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can update cells and save them

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › can update cells and save them

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can update cells and save them

    TypeError: Cannot set properties of undefined (setting 'value')

      128 | 
      129 |     it('can update cells and save them', async () => {
    > 130 |       c1.value = 1.2345;
          |       ^
      131 |       c2.value = 2.3456;
      132 |       c3.formula = '=A1 + B1';
      133 |       await sheet.saveUpdatedCells();

      at Object.<anonymous> (test/cells.test.js:130:7)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can save a single cell using cell.save()

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › can save a single cell using cell.save()

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can save a single cell using cell.save()

    TypeError: Cannot set properties of undefined (setting 'value')

      136 | 
      137 |     it('can save a single cell using cell.save()', async () => {
    > 138 |       c1.value = 9.8765;
          |       ^
      139 |       await c1.save();
      140 |     });
      141 | 

      at Object.<anonymous> (test/cells.test.js:138:7)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can set cell value formatting

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › can set cell value formatting

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can set cell value formatting

    TypeError: Cannot set properties of undefined (setting 'numberFormat')

      141 | 
      142 |     it('can set cell value formatting', async () => {
    > 143 |       c3.numberFormat = { type: 'NUMBER', pattern: '#.00' };
          |       ^
      144 |       await sheet.saveUpdatedCells();
      145 |       expect(c3.value).toBe(c1.value + c2.value);
      146 |       expect(c3.formattedValue).toBe(c3.value.toFixed(2));

      at Object.<anonymous> (test/cells.test.js:143:7)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can update a cells note

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › can update a cells note

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can update a cells note

    TypeError: Cannot set properties of undefined (setting 'note')

      149 | 
      150 |     it('can update a cells note', async () => {
    > 151 |       c1.note = 'This is a note!';
          |       ^
      152 |       await sheet.saveUpdatedCells();
      153 |       sheet.resetLocalCache(true);
      154 |       await sheet.loadCells('A1');

      at Object.<anonymous> (test/cells.test.js:151:7)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can update multiple cell properties at once

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › can update multiple cell properties at once

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can update multiple cell properties at once

    TypeError: Cannot set properties of undefined (setting 'note')

      157 | 
      158 |     it('can update multiple cell properties at once', async () => {
    > 159 |       c1.note = null;
          |       ^
      160 |       c1.value = 567.89;
      161 |       c1.textFormat = { bold: true };
      162 |       await sheet.saveUpdatedCells();

      at Object.<anonymous> (test/cells.test.js:159:7)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can clear cell value using null, undefined, empty string

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › can clear cell value using null, undefined, empty string

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › can clear cell value using null, undefined, empty string

    TypeError: Cannot set properties of undefined (setting 'value')

      164 | 
      165 |     it('can clear cell value using null, undefined, empty string', async () => {
    > 166 |       _.each([c1, c2, c3], (cell) => { cell.value = 'something'; });
          |                                        ^
      167 |       await sheet.saveUpdatedCells();
      168 |       c1.value = null;
      169 |       c2.value = undefined;

      at test/cells.test.js:166:40
      at arrayEach (node_modules/lodash/lodash.js:530:11)
      at Function.each [as forEach] (node_modules/lodash/lodash.js:9410:14)
      at Object.<anonymous> (test/cells.test.js:166:9)
          at runMicrotasks (<anonymous>)

  ● Cell-based operations › basic cell functionality › cannot set a cell value to an object

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › cannot set a cell value to an object

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › can save an array of cells

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › can save an array of cells

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › can save an array of cells

    TypeError: Cannot set properties of undefined (setting 'value')

      179 |     describe('calling saveCells directly', () => {
      180 |       it('can save an array of cells', async () => {
    > 181 |         _.each([c1, c2, c3], (cell) => { cell.value = 'calling saveCells'; });
          |                                          ^
      182 |         await sheet.saveCells([c1, c2, c3]);
      183 |       });
      184 | 

      at test/cells.test.js:181:42
      at arrayEach (node_modules/lodash/lodash.js:530:11)
      at Function.each [as forEach] (node_modules/lodash/lodash.js:9410:14)
      at Object.<anonymous> (test/cells.test.js:181:11)
          at runMicrotasks (<anonymous>)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › can save a mix of dirty and non-dirty

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › can save a mix of dirty and non-dirty

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › can save a mix of dirty and non-dirty

    TypeError: Cannot set properties of undefined (setting 'value')

      184 | 
      185 |       it('can save a mix of dirty and non-dirty', async () => {
    > 186 |         c2.value = 'saveCells again';
          |         ^
      187 |         await sheet.saveCells([c1, c2, c3]);
      188 |       });
      189 | 

      at Object.<anonymous> (test/cells.test.js:186:9)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › will throw an error if no cells are dirty

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › will throw an error if no cells are dirty

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › calling saveCells directly › will throw an error if no cells are dirty

    TypeError: Cannot read properties of undefined (reading 'saveCells')

      189 | 
      190 |       it('will throw an error if no cells are dirty', async () => {
    > 191 |         await expect(sheet.saveCells([c1, c2, c3])).rejects.toThrow();
          |                            ^
      192 |       });
      193 |     });
      194 | 

      at Object.<anonymous> (test/cells.test.js:191:28)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › cell formulas › can update a cell with a formula via .value

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › cell formulas › can update a cell with a formula via .value

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › cell formulas › can update a cell with a formula via .value

    TypeError: Cannot set properties of undefined (setting 'value')

      195 |     describe('cell formulas', () => {
      196 |       it('can update a cell with a formula via .value', async () => {
    > 197 |         c1.value = '=2';
          |         ^
      198 |         await sheet.saveUpdatedCells();
      199 |         expect(c1.value).toBe(2);
      200 |         expect(c1.formula).toBe('=2');

      at Object.<anonymous> (test/cells.test.js:197:9)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › cell formulas › can update a cell with a formula via .formula

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › cell formulas › can update a cell with a formula via .formula

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › cell formulas › can update a cell with a formula via .formula

    TypeError: Cannot set properties of undefined (setting 'formula')

      202 | 
      203 |       it('can update a cell with a formula via .formula', async () => {
    > 204 |         c1.formula = '=1';
          |         ^
      205 |         await sheet.saveUpdatedCells();
      206 |         expect(c1.value).toBe(1);
      207 |         expect(c1.formula).toBe('=1');

      at Object.<anonymous> (test/cells.test.js:204:9)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › cell formulas › can only set .formula with a formula (starting with "=")

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › cell formulas › can only set .formula with a formula (starting with "=")

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › cell formulas › handles formula errors correctly

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › cell formulas › handles formula errors correctly

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › cell formulas › handles formula errors correctly

    TypeError: Cannot set properties of undefined (setting 'formula')

      213 | 
      214 |       it('handles formula errors correctly', async () => {
    > 215 |         c1.formula = '=NOTAFORMULA';
          |         ^
      216 |         await sheet.saveUpdatedCells();
      217 |         expect(c1.value).toBeInstanceOf(GoogleSpreadsheetFormulaError);
      218 |         expect(c1.value).toEqual(c1.formulaError);

      at Object.<anonymous> (test/cells.test.js:215:9)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - string

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - string

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - string

    TypeError: Cannot set properties of undefined (setting 'value')

      231 |       }, (spec, type) => {
      232 |         it(`can set a value with type - ${type}`, async () => {
    > 233 |           c1.value = spec.value;
          |           ^
      234 |           await sheet.saveUpdatedCells();
      235 |           expect(c1.valueType).toBe(spec.valueType);
      236 |         });

      at Object.<anonymous> (test/cells.test.js:233:11)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - number

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - number

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - number

    TypeError: Cannot set properties of undefined (setting 'value')

      231 |       }, (spec, type) => {
      232 |         it(`can set a value with type - ${type}`, async () => {
    > 233 |           c1.value = spec.value;
          |           ^
      234 |           await sheet.saveUpdatedCells();
      235 |           expect(c1.valueType).toBe(spec.valueType);
      236 |         });

      at Object.<anonymous> (test/cells.test.js:233:11)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - boolean

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - boolean

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - boolean

    TypeError: Cannot set properties of undefined (setting 'value')

      231 |       }, (spec, type) => {
      232 |         it(`can set a value with type - ${type}`, async () => {
    > 233 |           c1.value = spec.value;
          |           ^
      234 |           await sheet.saveUpdatedCells();
      235 |           expect(c1.valueType).toBe(spec.valueType);
      236 |         });

      at Object.<anonymous> (test/cells.test.js:233:11)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula number

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula number

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula number

    TypeError: Cannot set properties of undefined (setting 'value')

      231 |       }, (spec, type) => {
      232 |         it(`can set a value with type - ${type}`, async () => {
    > 233 |           c1.value = spec.value;
          |           ^
      234 |           await sheet.saveUpdatedCells();
      235 |           expect(c1.valueType).toBe(spec.valueType);
      236 |         });

      at Object.<anonymous> (test/cells.test.js:233:11)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula boolean

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula boolean

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula boolean

    TypeError: Cannot set properties of undefined (setting 'value')

      231 |       }, (spec, type) => {
      232 |         it(`can set a value with type - ${type}`, async () => {
    > 233 |           c1.value = spec.value;
          |           ^
      234 |           await sheet.saveUpdatedCells();
      235 |           expect(c1.valueType).toBe(spec.valueType);
      236 |         });

      at Object.<anonymous> (test/cells.test.js:233:11)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula string

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula string

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula string

    TypeError: Cannot set properties of undefined (setting 'value')

      231 |       }, (spec, type) => {
      232 |         it(`can set a value with type - ${type}`, async () => {
    > 233 |           c1.value = spec.value;
          |           ^
      234 |           await sheet.saveUpdatedCells();
      235 |           expect(c1.valueType).toBe(spec.valueType);
      236 |         });

      at Object.<anonymous> (test/cells.test.js:233:11)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula error

    Google API error - [429] Quota exceeded for quota metric 'Write requests' and limit 'Write requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula error

    TypeError: Cannot read properties of undefined (reading 'resetLocalCache')

      112 |       c3;
      113 |     beforeEach(async () => {
    > 114 |       sheet.resetLocalCache(true);
          |             ^
      115 |       await sheet.loadCells('A1:C1');
      116 |       c1 = sheet.getCell(0, 0);
      117 |       c2 = sheet.getCell(0, 1);

      at Object.<anonymous> (test/cells.test.js:114:13)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

  ● Cell-based operations › basic cell functionality › value type handling › can set a value with type - formula error

    TypeError: Cannot set properties of undefined (setting 'value')

      231 |       }, (spec, type) => {
      232 |         it(`can set a value with type - ${type}`, async () => {
    > 233 |           c1.value = spec.value;
          |           ^
      234 |           await sheet.saveUpdatedCells();
      235 |           expect(c1.valueType).toBe(spec.valueType);
      236 |         });

      at Object.<anonymous> (test/cells.test.js:233:11)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

FAIL test/auth.test.js (9.694s)
  ● Authentication › using service account creds › Doc type = publicReadOnly › reading cell data should succeed

    Google API error - [429] Quota exceeded for quota metric 'Read requests' and limit 'Read requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Authentication › using service account creds › Doc type = privateReadOnly › reading row data should succeed

    Google API error - [429] Quota exceeded for quota metric 'Read requests' and limit 'Read requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Authentication › using service account creds › Doc type = privateReadOnly › reading cell data should succeed

    Google API error - [429] Quota exceeded for quota metric 'Read requests' and limit 'Read requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'.

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)

  ● Authentication › using service account creds › Doc type = privateReadOnly › writing should fail

    expect(received).rejects.toThrow(expected)

    Expected substring: "[403]"
    Received message:   "Google API error - [429] Quota exceeded for quota metric 'Read requests' and limit 'Read requests per minute per user' of service 'sheets.googleapis.com' for consumer 'project_number:728251180113'."

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at settle (node_modules/axios/lib/core/settle.js:17:12)
      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:269:11)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1358:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21)
      at Object.toThrow (node_modules/expect/build/index.js:242:20)
      at Object.<anonymous> (test/auth.test.js:43:55)
          at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)

Test Suites: 3 failed, 1 passed, 4 total
Tests:       40 failed, 88 passed, 128 total
Snapshots:   0 total
Time:        62.072s
Ran all test suites.
I am package Shopify-api-node
I am package loopback-connector-mysql
(node:20798) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
Connection fails: Error: connect ECONNREFUSED 127.0.0.1:3306
It will be retried for the next request.
Connection fails: Error: connect ECONNREFUSED 127.0.0.1:3306
It will be retried for the next request.
I am package delete-empty
I am package node-gcm
Message#addDataWithKeyValue has been deprecated. Please use Message#addData instead.
Message#addDataWithKeyValue has been deprecated. Please use Message#addData instead.
Message#addDataWithObject has been deprecated. Please use Message#addData instead.
Message#addDataWithObject has been deprecated. Please use Message#addData instead.
Message#addDataWithObject has been deprecated. Please use Message#addData instead.
Message#addDataWithObject has been deprecated. Please use Message#addData instead.
I am package deglob
I am package resolve-dir
I am package renamer
I am package multistream
Error:
Airtap tried to run tests in Sauce Labs, however no credentials were provided.
See doc/cloud-testing.md for info on how to setup cloud testing.
I am package arangojs
Error: getaddrinfo ENOTFOUND does.not.exist.example
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:109:26) {
  errno: -3008,
  code: 'ENOTFOUND',
  syscall: 'getaddrinfo',
  hostname: 'does.not.exist.example',
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      response: [Function],
      timeout: [Function (anonymous)],
      error: [Function (anonymous)]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: Socket {
      connecting: false,
      _hadError: true,
      _parent: null,
      _host: 'does.not.exist.example',
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: 'GET /_db/_system/_api/collection/does-not-exist HTTP/1.1\r\n' +
        'content-type: text/plain\r\n' +
        'x-arango-version: 30900\r\n' +
        'authorization: Basic cm9vdDo=\r\n' +
        'Host: does.not.exist.example:9999\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _pendingEncoding: 'latin1',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular *1],
      [Symbol(async_id_symbol)]: 158,
      [Symbol(kHandle)]: null,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'GET /_db/_system/_api/collection/does-not-exist HTTP/1.1\r\n' +
      'content-type: text/plain\r\n' +
      'x-arango-version: 30900\r\n' +
      'authorization: Basic cm9vdDo=\r\n' +
      'Host: does.not.exist.example:9999\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype],
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype],
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 3,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/_db/_system/_api/collection/does-not-exist',
    _ended: false,
    res: null,
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'does.not.exist.example',
    protocol: 'http:',
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'content-type': [Array],
      'x-arango-version': [Array],
      authorization: [Array],
      host: [Array]
    },
    [Symbol(kUniqueHeaders)]: null
  },
  toJSON: [Function: systemErrorToJSON]
}
I am package cordova-common
I am package pm2-io-apm
I am package express-mysql-session
I am package nodejs-bigquery
I am package gradient-string
I am package node-jira-client
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
I am package swagger-cli
I am package webdav-client
(node:65745) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
ERROR: "test:web" exited with 1.
I am package gpu.js
sh: qunit: command not found
I am package docker-modem
I am package aedes
I am package global-agent
temp certs cleared
rootCA generated
PLEASE TRUST the rootCA.crt in /home/liu-yuxin/.anyproxy/certificates
[AnyProxy Log][2023-02-02 08:37:21]: Http proxy started on port 3000
I am package gulp-nunjucks
I am package inversify-express-utils
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
PASS test/server.test.ts (11.062 s)
PASS test/base_middleware.test.ts
PASS test/features/controller_inheritance.test.ts
PASS test/action_result.test.ts
PASS test/framework.test.ts
PASS test/decorators.test.ts
PASS test/debug.test.ts
PASS test/base_http_controller.test.ts
PASS test/auth_provider.test.ts
PASS test/http_context.test.ts
PASS test/issue_590.test.ts
PASS test/content/jsonContent.test.ts
PASS test/constants.test.ts

Test Suites: 13 passed, 13 total
Tests:       78 passed, 78 total
Snapshots:   0 total
Time:        18.533 s
Ran all test suites.
I am package babel-preset-transform-test-files
I am package csv-stream
I am package symlink-dir
I am package nodejs-error-reporting
I am package junit-report-builder
sh: grunt: command not found
I am package metalsmith-layouts
I am package node-hue-api
I am package pdfjs
I am package pmx
2023-02-02T08:41:33.316Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/pmx/node_modules/mocha/bin/node_modules/event-loop-inspector
2023-02-02T08:41:33.324Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/Original/pmx/node_modules/mocha/bin/node_modules/event-loop-inspector
2023-02-02T08:41:33.324Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/pmx/node_modules/mocha/node_modules/event-loop-inspector
2023-02-02T08:41:33.324Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/Original/pmx/node_modules/mocha/node_modules/event-loop-inspector
2023-02-02T08:41:33.324Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/pmx/node_modules/event-loop-inspector
2023-02-02T08:41:33.325Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/Original/pmx/node_modules/event-loop-inspector
2023-02-02T08:41:33.325Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/node_modules/event-loop-inspector
2023-02-02T08:41:33.325Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/Original/node_modules/event-loop-inspector
2023-02-02T08:41:33.326Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/node_modules/event-loop-inspector
2023-02-02T08:41:33.326Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/node_modules/event-loop-inspector
2023-02-02T08:41:33.326Z axm:profiling Checking event-loop-inspector in path /data/js-variants/node_modules/event-loop-inspector
2023-02-02T08:41:33.326Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/node_modules/event-loop-inspector
2023-02-02T08:41:33.326Z axm:profiling Checking event-loop-inspector in path /data/node_modules/event-loop-inspector
2023-02-02T08:41:33.326Z axm:profiling [-] event-loop-inspector not found in path /data/node_modules/event-loop-inspector
2023-02-02T08:41:33.326Z axm:profiling Checking event-loop-inspector in path /node_modules/event-loop-inspector
2023-02-02T08:41:33.327Z axm:profiling [-] event-loop-inspector not found in path /node_modules/event-loop-inspector
2023-02-02T08:41:33.327Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/pmx/event-loop-inspector
2023-02-02T08:41:33.327Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/Original/pmx/event-loop-inspector
2023-02-02T08:41:33.327Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/pmx/node_modules/event-loop-inspector
2023-02-02T08:41:33.327Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/Original/pmx/node_modules/event-loop-inspector
2023-02-02T08:41:33.327Z axm:profiling [x] event-loop-inspector NOT FOUND
2023-02-02T08:41:36.708Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/pmx/node_modules/mocha/bin/node_modules/event-loop-inspector
2023-02-02T08:41:36.708Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/Original/pmx/node_modules/mocha/bin/node_modules/event-loop-inspector
2023-02-02T08:41:36.708Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/pmx/node_modules/mocha/node_modules/event-loop-inspector
2023-02-02T08:41:36.708Z axm:profiling [-] event-loop-inspector not found in path /data/js-variants/multee/Original/pmx/node_modules/mocha/node_modules/event-loop-inspector
2023-02-02T08:41:36.708Z axm:profiling Checking event-loop-inspector in path /data/js-variants/multee/Original/pmx/node_modules/event-loop-inspector
2023-02-02T08:41:36.708Z axm:profiling [+] event-loop-inspector detected in path /data/js-variants/multee/Original/pmx/node_modules/event-loop-inspector
2023-02-02T08:42:07.357Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/pmx/node_modules/mocha/bin/node_modules/v8-profiler-node8
2023-02-02T08:42:07.366Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/Original/pmx/node_modules/mocha/bin/node_modules/v8-profiler-node8
2023-02-02T08:42:07.366Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/pmx/node_modules/mocha/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/Original/pmx/node_modules/mocha/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/pmx/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/Original/pmx/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/Original/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/node_modules/v8-profiler-node8
2023-02-02T08:42:07.367Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/node_modules/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling Checking v8-profiler-node8 in path /data/node_modules/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling [-] v8-profiler-node8 not found in path /data/node_modules/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling Checking v8-profiler-node8 in path /node_modules/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling [-] v8-profiler-node8 not found in path /node_modules/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/pmx/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/Original/pmx/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/pmx/node_modules/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/Original/pmx/node_modules/v8-profiler-node8
2023-02-02T08:42:07.368Z axm:profiling [x] v8-profiler-node8 NOT FOUND
2023-02-02T08:42:25.390Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/pmx/node_modules/mocha/bin/node_modules/v8-profiler-node8
2023-02-02T08:42:25.391Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/Original/pmx/node_modules/mocha/bin/node_modules/v8-profiler-node8
2023-02-02T08:42:25.391Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/pmx/node_modules/mocha/node_modules/v8-profiler-node8
2023-02-02T08:42:25.391Z axm:profiling [-] v8-profiler-node8 not found in path /data/js-variants/multee/Original/pmx/node_modules/mocha/node_modules/v8-profiler-node8
2023-02-02T08:42:25.391Z axm:profiling Checking v8-profiler-node8 in path /data/js-variants/multee/Original/pmx/node_modules/v8-profiler-node8
2023-02-02T08:42:25.392Z axm:profiling [+] v8-profiler-node8 detected in path /data/js-variants/multee/Original/pmx/node_modules/v8-profiler-node8
I am package node-neo4j
I am package discord.io
I am package cote
I am package cli-columns
I am package is-reachable
I am package dugite
PASS test/fast/git-process-test.ts (184.73 s)
PASS test/fast/stdin-test.ts
PASS test/fast/errors-test.ts
PASS test/fast/environment-test.ts
PASS test/fast/commit-test.ts
PASS test/fast/status-test.ts
PASS test/fast/lfs-test.ts
PASS test/fast/config-test.ts

Test Suites: 8 passed, 8 total
Tests:       67 passed, 67 total
Snapshots:   0 total
Time:        189.711 s
FAIL test/slow/git-process-test.ts (8.647 s)
  ● git-process › clone › returns exit code and error when repository requires credentials

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: null

      58 |       })
      59 |       const error = GitProcess.parseError(result.stderr)
    > 60 |       expect(error).toBe(GitError.HTTPSAuthenticationFailed)
         |                     ^
      61 |     })
      62 |
      63 |     it('returns exit code when successful', async () => {

      at toBe (test/slow/git-process-test.ts:60:21)
      at fulfilled (test/slow/git-process-test.ts:13:24)

  ● git-process › fetch › returns exit code and error when repository requires credentials

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: null

      146 |       })
      147 |       const error = GitProcess.parseError(result.stderr)
    > 148 |       expect(error).toBe(GitError.HTTPSAuthenticationFailed)
          |                     ^
      149 |     })
      150 |
      151 |     it('returns exit code when successful', async () => {

      at toBe (test/slow/git-process-test.ts:148:21)
      at fulfilled (test/slow/git-process-test.ts:13:24)

PASS test/slow/git-spawn-test.ts (5.072 s)

Test Suites: 1 failed, 1 passed, 2 total
Tests:       2 failed, 8 passed, 10 total
Snapshots:   0 total
Time:        14.116 s
error Command failed with exit code 1.
I am package season
TypeError: os.tmpDir is not a function
    at Object.<anonymous> (/data/js-variants/multee/Original/season/node_modules/temp/lib/temp.js:142:32)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (/data/js-variants/multee/Original/season/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/season/spec/cson-spec.coffee:3:8)
    at Object.<anonymous> (/data/js-variants/multee/Original/season/spec/cson-spec.coffee:1:1)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Object.loadFile (/data/js-variants/multee/Original/season/node_modules/coffee-script/lib/coffee-script/register.js:16:19)
    at Module.load (/data/js-variants/multee/Original/season/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.jasmine.executeSpecsInFolder (/data/js-variants/multee/Original/season/node_modules/jasmine-node/lib/jasmine-node/index.js:130:9)
    at Object.<anonymous> (/data/js-variants/multee/Original/season/node_modules/jasmine-node/lib/jasmine-node/cli.js:235:9)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (/data/js-variants/multee/Original/season/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/season/node_modules/jasmine-node/bin/jasmine-node:6:1)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (/data/js-variants/multee/Original/season/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/season/node_modules/jasmine-focused/bin/jasmine-focused:4:1)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47

I am package jsdoc-api
I am package pg-monitor
I am package docx
(node:70092) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
I am package gulp-vulcanize
I am package js-xlsx
Submodule 'test_files' (https://github.com/SheetJS/test_files) registered for path 'test_files'
Cloning into '/data/js-variants/multee/Original/js-xlsx/test_files'...
(node:70357) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
make: *** [Makefile:42: test] Error 175
I am package express-openapi-validator
unknownFormats is deprecated.
unknownFormats is deprecated.
(node:70491) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 SIGTERM listeners added to [process]. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
(node:70491) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 SIGINT listeners added to [process]. Use emitter.setMaxListeners() to increase limit
Method Not Allowed: PUT method not allowed
    at /data/js-variants/multee/Original/express-openapi-validator/src/middlewares/openapi.metadata.ts:1:48
    at /data/js-variants/multee/Original/express-openapi-validator/src/openapi.validator.ts:30:24
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
"validateFormats" as a string is deprecated. Set to a boolean and use "ajvFormats"
"validateFormats" as a string is deprecated. Set to a boolean and use "ajvFormats"
formats as an array is deprecated. Use object instead https://ajv.js.org/options.html#formats
openapi.validator: Validating schema
openapi.validator: validation errors [
  {
    "instancePath": "/paths/~1dev~1hello~1echo/get/parameters",
    "schemaPath": "#/properties/parameters/type",
    "keyword": "type",
    "params": {
      "type": "array"
    },
    "message": "must be array"
  }
]
Error: openapi.validator: args.apiDoc was invalid.  See the output.
    at OpenAPIFramework.initialize (/data/js-variants/multee/Original/express-openapi-validator/src/framework/index.ts:3:476)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async OpenApiSpecLoader.discoverRoutes (/data/js-variants/multee/Original/express-openapi-validator/src/framework/openapi.spec.loader.ts:30:38)
TypeError: (intermediate value)(intermediate value)(intermediate value) is not iterable
    at Object.visitApi (/data/js-variants/multee/Original/express-openapi-validator/src/framework/openapi.spec.loader.ts:30:38)
    at OpenAPIFramework.initialize (/data/js-variants/multee/Original/express-openapi-validator/src/framework/index.ts:1:1)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async OpenApiSpecLoader.discoverRoutes (/data/js-variants/multee/Original/express-openapi-validator/src/framework/openapi.spec.loader.ts:30:38)
unknownFormats is deprecated.
unknownFormats is deprecated.
unknownFormats is deprecated.
unknownFormats is deprecated.
unknownFormats is deprecated.
unknownFormats is deprecated.
I am package openwhisk-client-js
I am package prettier-check
 
 [90m[2m⠋[22m[39m [2K[1A[2K[0G 
 [90m[2m⠙[22m[39m [2K[1A[2K[0G 
 [90m[2m⠹[22m[39m [2K[1A[2K[0G 
 [90m[2m⠸[22m[39m [2K[1A[2K[0G 
 [90m[2m⠼[22m[39m [2K[1A[2K[0G 
 [90m[2m⠴[22m[39m [2K[1A[2K[0G 
 [90m[2m⠦[22m[39m [2K[1A[2K[0G 
 [90m[2m⠧[22m[39m [2K[1A[2K[0G 
 [90m[2m⠇[22m[39m [2K[1A[2K[0G 
 [90m[2m⠏[22m[39m [2K[1A[2K[0G 
 [90m[2m⠋[22m[39m [2K[1A[2K[0G 
 [90m[2m⠙[22m[39m [2K[1A[2K[0G 
 [90m[2m⠹[22m[39m [2K[1A[2K[0G 
 [90m[2m⠸[22m[39m [2K[1A[2K[0G 
 [90m[2m⠼[22m[39m [2K[1A[2K[0G 
 [90m[2m⠴[22m[39m [2K[1A[2K[0G 
 [90m[2m⠦[22m[39m [2K[1A[2K[0G 
 [90m[2m⠧[22m[39m [2K[1A[2K[0G 
 [90m[2m⠇[22m[39m [2K[1A[2K[0G 
 [90m[2m⠏[22m[39m [2K[1A[2K[0G 
 [90m[2m⠋[22m[39m [2K[1A[2K[0G 
 [90m[2m⠙[22m[39m [2K[1A[2K[0G 
 [90m[2m⠹[22m[39m [2K[1A[2K[0G 
 [90m[2m⠸[22m[39m [2K[1A[2K[0G 
 [90m[2m⠼[22m[39m [2K[1A[2K[0G 
 [90m[2m⠴[22m[39m [2K[1A[2K[0G 
 [90m[2m⠦[22m[39m [2K[1A[2K[0G 
 [90m[2m⠧[22m[39m [2K[1A[2K[0G 
 [90m[2m⠇[22m[39m [2K[1A[2K[0G 
 [90m[2m⠏[22m[39m [2K[1A[2K[0G 
 [90m[2m⠋[22m[39m [2K[1A[2K[0G 
 [90m[2m⠙[22m[39m [2K[1A[2K[0GError when running prettier:
 
 [90m[2m⠙[22m[39m [2K[1A[2K[0Gcosmiconfig requires at least version 4 of Node, please upgrade

 
 [90m[2m⠙[22m[39m [2K[1A[2K[0G 
 [90m[2m⠙[22m[39m bad file…

  [32m1 passed[39m[2K[1A[2K[1A[2K[1A[2K[0GError when running prettier:
 
 [90m[2m⠙[22m[39m bad file…

  [32m1 passed[39m[2K[1A[2K[1A[2K[1A[2K[0Gcosmiconfig requires at least version 4 of Node, please upgrade

 
 [90m[2m⠙[22m[39m bad file…

  [32m1 passed[39m[2K[1A[2K[1A[2K[1A[2K[0G 
 [90m[2m⠹[22m[39m bad file…

  [32m1 passed[39m[2K[1A[2K[1A[2K[1A[2K[0G 
 [90m[2m⠹[22m[39m [31mgood file[39m

  [32m1 passed[39m
  [31m1 failed[39m[2K[1A[2K[1A[2K[1A[2K[1A[2K[0GError when running prettier:
 
 [90m[2m⠹[22m[39m [31mgood file[39m

  [32m1 passed[39m
  [31m1 failed[39m[2K[1A[2K[1A[2K[1A[2K[1A[2K[0Gcosmiconfig requires at least version 4 of Node, please upgrade

 
 [90m[2m⠹[22m[39m [31mgood file[39m

  [32m1 passed[39m
  [31m1 failed[39m[2K[1A[2K[1A[2K[1A[2K[1A[2K[0G 
 [90m[2m⠹[22m[39m [31mugly file[39m

  [32m1 passed[39m
  [31m2 failed[39m[2K[1A[2K[1A[2K[1A[2K[1A[2K[0G
  [32m1 passed[39m
  [31m2 failed[39m

  [37mgood file[39m
[31m    
  t.is(code, 0)
       |       
       4       
  
[39m[90m    Test.<anonymous> (test.js:6:5)
    Generator.next (<anonymous>)
    processTicksAndRejections (node:internal/process/task_queues:96:5)[39m

  [37mugly file[39m
[31m    
  t.is(code, 3)
       |       
       4       
  
[39m[90m    Test.<anonymous> (test.js:16:5)
    Generator.next (<anonymous>)
    processTicksAndRejections (node:internal/process/task_queues:96:5)[39m

I am package term-img
I am package node-libcurl
Cannot find module 'ts-node/register'
Require stack:
- /usr/local/lib/node_modules/nyc/bin/nyc.js
I am package eris
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-02T08_54_27_510Z-debug-0.log
I am package opencv4nodejs
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-02T08_54_28_420Z-debug-0.log
I am package right-align
I am package threads.js
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten
- Bundling code
✔ Bundling done.
Error: Chromium revision is not downloaded. Run "npm install" or "yarn install"
    at Launcher.launch (/data/js-variants/multee/Original/threads.js/node_modules/puppeteer-core/lib/Launcher.js:119:15)
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
Warning (worker-plugin): output.globalObject is set to "window". It must be set to "self" to support HMR in Workers.
I am package unzip-stream
(node:71590) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:71604) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:71615) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:71626) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:71643) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:71654) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:71665) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:71679) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
I am package node-sonos
(node:71713) [DEP0066] DeprecationWarning: OutgoingMessage.prototype._headers is deprecated
(Use `node --trace-deprecation ...` to show where the warning was created)
I am package packager
I am package facebook-node-sdk
(node:71925) Warning: Accessing non-existent property 'cat' of module exports inside circular dependency
(Use `node --trace-warnings ...` to show where the warning was created)
(node:71925) Warning: Accessing non-existent property 'cd' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'chmod' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'cp' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'dirs' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'pushd' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'popd' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'echo' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'tempdir' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'pwd' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'exec' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'ls' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'find' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'grep' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'head' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'ln' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'mkdir' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'rm' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'mv' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'sed' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'set' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'sort' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'tail' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'test' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'to' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'toEnd' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'touch' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'uniq' of module exports inside circular dependency
(node:71925) Warning: Accessing non-existent property 'which' of module exports inside circular dependency
(node:71925) [DEP0066] DeprecationWarning: OutgoingMessage.prototype._headers is deprecated
(node:71925) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
I am package ascii-progress
I am package mixpanel-node
I am package restana
I am package node-casbin
PASS test/enforcer.test.ts (8.058 s)
  ● Console

    console.log
      Policy:  [
        [ 'alice', 'data1', 'read' ],
        [ 'bob', 'data2', 'write' ],
        [ 'data2_admin', 'data2', 'read' ],
        [ 'data2_admin', 'data2', 'write' ]
      ]

      at test/enforcer.test.ts:37:11

    console.log
      Model:

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)

    console.log
      r.r: sub, obj, act

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at Map.forEach (<anonymous>)
          at Map.forEach (<anonymous>)

    console.log
      p.p: sub, obj, act

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at Map.forEach (<anonymous>)
          at Map.forEach (<anonymous>)

    console.log
      e.e: some(where (p_eft == allow))

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at Map.forEach (<anonymous>)
          at Map.forEach (<anonymous>)

    console.log
      m.m: r_sub == p_sub && r_obj == p_obj && r_act == p_act

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at Map.forEach (<anonymous>)
          at Map.forEach (<anonymous>)

    console.log
      Request: alice, data1, read ---> true

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at privateEnforce.next (<anonymous>)

    console.log
      Request: alice, data1, write ---> false

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at privateEnforce.next (<anonymous>)

    console.log
      Request: alice, data2, read ---> false

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at privateEnforce.next (<anonymous>)

    console.log
      Request: alice, data2, write ---> false

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at privateEnforce.next (<anonymous>)

    console.log
      Request: bob, data1, read ---> false

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at privateEnforce.next (<anonymous>)

    console.log
      Request: bob, data1, write ---> false

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at privateEnforce.next (<anonymous>)

    console.log
      Request: bob, data2, read ---> false

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at privateEnforce.next (<anonymous>)

    console.log
      Request: bob, data2, write ---> true

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)
          at privateEnforce.next (<anonymous>)

(node:72136) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
PASS test/model.test.ts
PASS test/managementAPI.test.ts
PASS test/rbacAPI.test.ts
PASS test/util.test.ts
  ● Console

    console.log
      test log

      at DefaultLogger.print (src/log/defaultLogger.ts:31:15)

    console.log
      I am alice

      at ipMatch (src/util/builtinOperators.ts:279:15)

PASS test/rbacHierarchicalDomain.test.ts
PASS test/syncedEnforcer.test.ts
PASS test/model/model.test.ts
PASS test/frontend.test.ts
PASS test/persist/helper.test.ts
PASS test/rbacwDomainAPI.test.ts
PASS test/config/config.test.ts
PASS test/cachedEnforcer.test.ts
PASS test/rbac/defaultRoleManager.test.ts

Test Suites: 14 passed, 14 total
Tests:       166 passed, 166 total
Snapshots:   0 total
Time:        15.052 s
Ran all test suites.
I am package gulp-html-replace
(node:72226) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
I am package koa-websocket
(node:72260) Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to '0' makes TLS connections and HTTPS requests insecure by disabling certificate verification.
(Use `node --trace-warnings ...` to show where the warning was created)
I am package subleveldown
I am package node-jwk-to-pem
I am package node-sparkpost
(node:72527) Warning: Accessing non-existent property 'cat' of module exports inside circular dependency
(Use `node --trace-warnings ...` to show where the warning was created)
(node:72527) Warning: Accessing non-existent property 'cd' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'chmod' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'cp' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'dirs' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'pushd' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'popd' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'echo' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'tempdir' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'pwd' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'exec' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'ls' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'find' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'grep' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'head' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'ln' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'mkdir' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'rm' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'mv' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'sed' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'set' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'sort' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'tail' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'test' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'to' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'toEnd' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'touch' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'uniq' of module exports inside circular dependency
(node:72527) Warning: Accessing non-existent property 'which' of module exports inside circular dependency
(node:72540) [DEP0128] DeprecationWarning: Invalid 'main' field in '/data/js-variants/multee/Original/node-sparkpost/node_modules/create-thenable/package.json' of './src'. Please either fix that or report it to the module author
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:72540) [DEP0066] DeprecationWarning: OutgoingMessage.prototype._headers is deprecated
=============================================================================
Writing coverage object [/data/js-variants/multee/Original/node-sparkpost/test/reports/coverage.json]
Writing coverage reports at [/data/js-variants/multee/Original/node-sparkpost/test/reports]
=============================================================================
I am package slonik
Cannot find module 'ts-node/register/transpile-only'
Require stack:
- /usr/local/lib/node_modules/nyc/bin/nyc.js
I am package HummusJS
I am package line-bot-sdk-nodejs
I am package js-beautify
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-02T09_00_07_442Z-debug-0.log
I am package pal-nodejs
I am package bundlewatch
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-02T09_00_19_436Z-debug-0.log
I am package winston-logzio
I am package nodejs-system-sleep
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-02T09_00_23_896Z-debug-0.log
I am package ink-link
]8;;https://sindresorhus.comMy Website]8;;
My Website (​https://sindresorhus.com​)
My Website
My Website (​https://sindresorhus.com​)
I am package opentok-node
I am package piscina
I am package q-i
cosmiconfig requires at least version 4 of Node, please upgrade
I am package deferred-leveldown
standard: Use JavaScript Standard Style (https://standardjs.com)
standard: Some warnings are present which will be errors in the next version (https://standardjs.com)
standard: Run `standard --fix` to automatically fix some problems.
I am package find-pkg
I am package prebuildify
gyp info it worked if it ends with ok
gyp info using node-gyp@9.0.0
gyp info using node@16.17.0 | linux | x64
gyp info find Python using Python version 3.9.13 found at "/home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9"
gyp http GET https://nodejs.org/download/release/v16.17.0/node-v16.17.0-headers.tar.gz
gyp http 200 https://nodejs.org/download/release/v16.17.0/node-v16.17.0-headers.tar.gz
gyp http GET https://nodejs.org/download/release/v16.17.0/SHASUMS256.txt
gyp http 200 https://nodejs.org/download/release/v16.17.0/SHASUMS256.txt
gyp info spawn /home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9
gyp info spawn args [
gyp info spawn args   '/usr/local/lib/node_modules/node-gyp/gyp/gyp_main.py',
gyp info spawn args   'binding.gyp',
gyp info spawn args   '-f',
gyp info spawn args   'make',
gyp info spawn args   '-I',
gyp info spawn args   '/data/js-variants/multee/Original/prebuildify/test/package/build/config.gypi',
gyp info spawn args   '-I',
gyp info spawn args   '/usr/local/lib/node_modules/node-gyp/addon.gypi',
gyp info spawn args   '-I',
gyp info spawn args   '/tmp/prebuildify/node/16.17.0/include/node/common.gypi',
gyp info spawn args   '-Dlibrary=shared_library',
gyp info spawn args   '-Dvisibility=default',
gyp info spawn args   '-Dnode_root_dir=/tmp/prebuildify/node/16.17.0',
gyp info spawn args   '-Dnode_gyp_dir=/usr/local/lib/node_modules/node-gyp',
gyp info spawn args   '-Dnode_lib_file=/tmp/prebuildify/node/16.17.0/<(target_arch)/node.lib',
gyp info spawn args   '-Dmodule_root_dir=/data/js-variants/multee/Original/prebuildify/test/package',
gyp info spawn args   '-Dnode_engine=v8',
gyp info spawn args   '--depth=.',
gyp info spawn args   '--no-parallel',
gyp info spawn args   '--generator-output',
gyp info spawn args   'build',
gyp info spawn args   '-Goutput_dir=.'
gyp info spawn args ]
gyp info spawn make
gyp info spawn args [ 'BUILDTYPE=Release', '-C', 'build' ]
In file included from ../addon.cc:1:
/tmp/prebuildify/node/16.17.0/include/node/node.h:859:43: warning: cast between incompatible function types from ‘void (*)(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE)’ {aka ‘void (*)(v8::Local<v8::Object>)’} to ‘node::addon_register_func’ {aka ‘void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, void*)’} [-Wcast-function-type]
  859 |       (node::addon_register_func) (regfunc),                          \
      |                                           ^
/tmp/prebuildify/node/16.17.0/include/node/node.h:893:3: note: in expansion of macro ‘NODE_MODULE_X’
  893 |   NODE_MODULE_X(modname, regfunc, NULL, 0)  // NOLINT (readability/null_usage)
      |   ^~~~~~~~~~~~~
../addon.cc:12:1: note: in expansion of macro ‘NODE_MODULE’
   12 | NODE_MODULE(secp256k1, Init)
      | ^~~~~~~~~~~
gyp info ok 
gyp info it worked if it ends with ok
gyp info using node-gyp@9.0.0
gyp info using node@16.17.0 | linux | x64
gyp info find Python using Python version 3.9.13 found at "/home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9"
gyp info spawn /home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9
gyp info spawn args [
gyp info spawn args   '/usr/local/lib/node_modules/node-gyp/gyp/gyp_main.py',
gyp info spawn args   'binding.gyp',
gyp info spawn args   '-f',
gyp info spawn args   'make',
gyp info spawn args   '-I',
gyp info spawn args   '/data/js-variants/multee/Original/prebuildify/test/package/build/config.gypi',
gyp info spawn args   '-I',
gyp info spawn args   '/usr/local/lib/node_modules/node-gyp/addon.gypi',
gyp info spawn args   '-I',
gyp info spawn args   '/tmp/prebuildify/node/16.17.0/include/node/common.gypi',
gyp info spawn args   '-Dlibrary=shared_library',
gyp info spawn args   '-Dvisibility=default',
gyp info spawn args   '-Dnode_root_dir=/tmp/prebuildify/node/16.17.0',
gyp info spawn args   '-Dnode_gyp_dir=/usr/local/lib/node_modules/node-gyp',
gyp info spawn args   '-Dnode_lib_file=/tmp/prebuildify/node/16.17.0/<(target_arch)/node.lib',
gyp info spawn args   '-Dmodule_root_dir=/data/js-variants/multee/Original/prebuildify/test/package',
gyp info spawn args   '-Dnode_engine=v8',
gyp info spawn args   '--depth=.',
gyp info spawn args   '--no-parallel',
gyp info spawn args   '--generator-output',
gyp info spawn args   'build',
gyp info spawn args   '-Goutput_dir=.'
gyp info spawn args ]
gyp info spawn make
gyp info spawn args [ 'BUILDTYPE=Release', '-C', 'build' ]
In file included from ../addon.cc:1:
/tmp/prebuildify/node/16.17.0/include/node/node.h:859:43: warning: cast between incompatible function types from ‘void (*)(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE)’ {aka ‘void (*)(v8::Local<v8::Object>)’} to ‘node::addon_register_func’ {aka ‘void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, void*)’} [-Wcast-function-type]
  859 |       (node::addon_register_func) (regfunc),                          \
      |                                           ^
/tmp/prebuildify/node/16.17.0/include/node/node.h:893:3: note: in expansion of macro ‘NODE_MODULE_X’
  893 |   NODE_MODULE_X(modname, regfunc, NULL, 0)  // NOLINT (readability/null_usage)
      |   ^~~~~~~~~~~~~
../addon.cc:12:1: note: in expansion of macro ‘NODE_MODULE’
   12 | NODE_MODULE(secp256k1, Init)
      | ^~~~~~~~~~~
gyp info ok 
I am package manifesto
node:internal/modules/cjs/loader:959
  throw err;
  ^

Error: Cannot find module '../../dist-commonjs'
Require stack:
- /data/js-variants/multee/Original/manifesto/test/tests/rijksmuseum-image-api-v3-thumbnails.js
- /data/js-variants/multee/Original/manifesto/test/index.js
- /data/js-variants/multee/Original/manifesto/node_modules/mocha/lib/mocha.js
- /data/js-variants/multee/Original/manifesto/node_modules/mocha/index.js
- /data/js-variants/multee/Original/manifesto/node_modules/mocha/bin/_mocha
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:956:15)
    at Function.Module._load (node:internal/modules/cjs/loader:804:27)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/data/js-variants/multee/Original/manifesto/test/tests/rijksmuseum-image-api-v3-thumbnails.js:3:17)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Suite.<anonymous> (/data/js-variants/multee/Original/manifesto/test/index.js:10:9)
    at context.describe.context.context (/data/js-variants/multee/Original/manifesto/node_modules/mocha/lib/interfaces/bdd.js:49:10)
    at importTest (/data/js-variants/multee/Original/manifesto/test/index.js:8:5)
    at Object.<anonymous> (/data/js-variants/multee/Original/manifesto/test/index.js:32:1)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Module.require (node:internal/modules/cjs/loader:1028:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at /data/js-variants/multee/Original/manifesto/node_modules/mocha/lib/mocha.js:192:27
    at Array.forEach (<anonymous>)
    at Mocha.loadFiles (/data/js-variants/multee/Original/manifesto/node_modules/mocha/lib/mocha.js:189:14)
    at Mocha.run (/data/js-variants/multee/Original/manifesto/node_modules/mocha/lib/mocha.js:422:31)
    at Object.<anonymous> (/data/js-variants/multee/Original/manifesto/node_modules/mocha/bin/_mocha:398:16)
    at Module._compile (node:internal/modules/cjs/loader:1126:14)
    at Module.replacementCompile (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:60:13)
    at Module._extensions..js (node:internal/modules/cjs/loader:1180:10)
    at Object.<anonymous> (/usr/local/lib/node_modules/nyc/node_modules/append-transform/index.js:64:4)
    at Module.load (node:internal/modules/cjs/loader:1004:32)
    at Function.Module._load (node:internal/modules/cjs/loader:839:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/data/js-variants/multee/Original/manifesto/test/tests/rijksmuseum-image-api-v3-thumbnails.js',
    '/data/js-variants/multee/Original/manifesto/test/index.js',
    '/data/js-variants/multee/Original/manifesto/node_modules/mocha/lib/mocha.js',
    '/data/js-variants/multee/Original/manifesto/node_modules/mocha/index.js',
    '/data/js-variants/multee/Original/manifesto/node_modules/mocha/bin/_mocha'
  ]
}
I am package iota.lib.js
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-02T09_05_50_891Z-debug-0.log
I am package node-whois
I am package i18next-http-backend
I am package aliyun-sdk-js
(node:74913) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2
cov_2rfshkm62d=function(){return actualCoverage;};}return actualCoverage;}cov_2rfshkm62d();var ALY=(cov_2rfshkm62d().s[0]++,require('./core'));var inherit=(cov_2rfshkm62d().s[1]++,ALY.util.inherit);function AcceptorStateMachine(states,state){cov_2rfshkm62d().f[0]++;cov_2rfshkm62d().s[2]++;this.currentState=(cov_2rfshkm62d().b[0][0]++,state)||(cov_2rfshkm62d().b[0][1]++,null);cov_2rfshkm62d().s[3]++;this.states=(cov_2rfshkm62d().b[1][0]++,states)||(cov_2rfshkm62d().b[1][1]++,{});}cov_2rfshkm62d().s[4]++;AcceptorStateMachine.prototype.runTo=function runTo(finalState,done,bindObject,inputError){cov_2rfshkm62d().f[1]++;cov_2rfshkm62d().s[5]++;if(typeof finalState==='function'){cov_2rfshkm62d().b[2][0]++;cov_2rfshkm62d().s[6]++;inputError=bindObject;cov_2rfshkm62d().s[7]++;bindObject=done;cov_2rfshkm62d().s[8]++;done=finalState;cov_2rfshkm62d().s[9]++;finalState=null;}else{cov_2rfshkm62d().b[2][1]++;}var self=(cov_2rfshkm62d().s[10]++,this);var state=(cov_2rfshkm62d().s[11]++,self.states[self.currentState]);cov_2rfshkm62d().s[12]++;state.fn.call((cov_2rfshkm62d().b[3][0]++,bindObject)||(cov_2rfshkm62d().b[3][1]++,self),inputError,function(err){cov_2rfshkm62d().f[2]++;cov_2rfshkm62d().s[13]++;if(err){cov_2rfshkm62d().b[4][0]++;cov_2rfshkm62d().s[14]++;if(bindObject.logger){cov_2rfshkm62d().b[5][0]++;cov_2rfshkm62d().s[15]++;bindObject.logger.log(self.currentState,'->',state.fail,err);}else{cov_2rfshkm62d().b[5][1]++;}cov_2rfshkm62d().s[16]++;if(state.fail){cov_2rfshkm62d().b[6][0]++;cov_2rfshkm62d().s[17]++;self.currentState=state.fail;}else{cov_2rfshkm62d().b[6][1]++;cov_2rfshkm62d().s[18]++;return done?(cov_2rfshkm62d().b[7][0]++,done(err)):(cov_2rfshkm62d().b[7][1]++,null);}}else{cov_2rfshkm62d().b[4][1]++;cov_2rfshkm62d().s[19]++;if(bindObject.logger){cov_2rfshkm62d().b[8][0]++;cov_2rfshkm62d().s[20]++;bindObject.logger.log(self.currentState,'->',state.accept);}else{cov_2rfshkm62d().b[8][1]++;}cov_2rfshkm62d().s[21]++;if(state.accept){cov_2rfshkm62d().b[9][0]++;cov_2rfshkm62d().s[22]++;self.currentState=state.accept;}else{cov_2rfshkm62d().b[9][1]++;cov_2rfshkm62d().s[23]++;return done?(cov_2rfshkm62d().b[10][0]++,done()):(cov_2rfshkm62d().b[10][1]++,null);}}cov_2rfshkm62d().s[24]++;if(self.currentState===finalState){cov_2rfshkm62d().b[11][0]++;cov_2rfshkm62d().s[25]++;return done?(cov_2rfshkm62d().b[12][0]++,done(err)):(cov_2rfshkm62d().b[12][1]++,null);}else{cov_2rfshkm62d().b[11][1]++;}cov_2rfshkm62d().s[26]++;self.runTo(finalState,done,bindObject,err);});};cov_2rfshkm62d().s[27]++;AcceptorStateMachine.prototype.addState=function addState(name,acceptState,failState,fn){cov_2rfshkm62d().f[3]++;cov_2rfshkm62d().s[28]++;if(typeof acceptState==='function'){cov_2rfshkm62d().b[13][0]++;cov_2rfshkm62d().s[29]++;fn=acceptState;cov_2rfshkm62d().s[30]++;acceptState=null;cov_2rfshkm62d().s[31]++;failState=null;}else{cov_2rfshkm62d().b[13][1]++;cov_2rfshkm62d().s[32]++;if(typeof failState==='function'){cov_2rfshkm62d().b[14][0]++;cov_2rfshkm62d().s[33]++;fn=failState;cov_2rfshkm62d().s[34]++;failState=null;}else{cov_2rfshkm62d().b[14][1]++;}}cov_2rfshkm62d().s[35]++;if(!this.currentState){cov_2rfshkm62d().b[15][0]++;cov_2rfshkm62d().s[36]++;this.currentState=name;}else{cov_2rfshkm62d().b[15][1]++;}cov_2rfshkm62d().s[37]++;this.states[name]={accept:acceptState,fail:failState,fn:fn};cov_2rfshkm62d().s[38]++;return this;};var fsm=(cov_2rfshkm62d().s[39]++,new AcceptorStateMachine());cov_2rfshkm62d().s[40]++;fsm.setupStates=function(){cov_2rfshkm62d().f[4]++;var hardErrorStates=(cov_2rfshkm62d().s[41]++,['success','error','complete']);cov_2rfshkm62d().s[42]++;var transition=function transition(err,done){cov_2rfshkm62d().f[5]++;cov_2rfshkm62d().s[43]++;try{var self=(cov_2rfshkm62d().s[44]++,this);var origError=(cov_2rfshkm62d().s[45]++,self.response.error);cov_2rfshkm62d().s[46]++;self.emit(self._asm.currentState,function(){cov_2rfshkm62d().f[6]++;cov_2rfshkm62d().s[47]++;if((cov_2rfshkm62d().b[17][0]++,self.response.error)&&(cov_2rfshkm62d().b[17][1]++,origError!=self.response.error)){cov_2rfshkm62d().b[16][0]++;cov_2rfshkm62d().s[48]++;if(hardErrorStates.indexOf(this._asm.currentState)>=0){cov_2rfshkm62d().b[18][0]++;cov_2rfshkm62d().s[49]++;this._hardError=true;}else{cov_2rfshkm62d().b[18][1]++;}}else{cov_2rfshkm62d().b[16][1]++;}cov_2rfshkm62d().s[50]++;done(self.response.error);});}catch(e){cov_2rfshkm62d().s[51]++;this.response.error=e;cov_2rfshkm62d().s[52]++;if(hardErrorStates.indexOf(this._asm.currentState)>=0){cov_2rfshkm62d().b[19][0]++;cov_2rfshkm62d().s[53]++;this._hardError=true;}else{cov_2rfshkm62d().b[19][1]++;}cov_2rfshkm62d().s[54]++;done(e);}};cov_2rfshkm62d().s[55]++;this.addState('validate','build','error',transition);cov_2rfshkm62d().s[56]++;this.addState('restart','build','error',function(err,done){cov_2rfshkm62d().f[7]++;cov_2rfshkm62d().s[57]++;err=this.response.error;cov_2rfshkm62d().s[58]++;if(!err){cov_2rfshkm62d().b[20][0]++;cov_2rfshkm62d().s[59]++;return done();}else{cov_2rfshkm62d().b[20][1]++;}cov_2rfshkm62d().s[60]++;if(!err.retryable){cov_2rfshkm62d().b[21][0]++;cov_2rfshkm62d().s[61]++;return done(err);}else{cov_2rfshkm62d().b[21][1]++;}cov_2rfshkm62d().s[62]++;if(this.response.retryCount<this.service.config.maxRetries){cov_2rfshkm62d().b[22][0]++;cov_2rfshkm62d().s[63]++;this.response.retryCount++;cov_2rfshkm62d().s[64]++;done();}else{cov_2rfshkm62d().b[22][1]++;cov_2rfshkm62d().s[65]++;done(err);}});cov_2rfshkm62d().s[66]++;this.addState('build','afterBuild','restart',transition);cov_2rfshkm62d().s[67]++;this.addState('afterBuild','sign','restart',transition);cov_2rfshkm62d().s[68]++;this.addState('sign','send','retry',transition);cov_2rfshkm62d().s[69]++;this.addState('retry','afterRetry','afterRetry',transition);cov_2rfshkm62d().s[70]++;this.addState('afterRetry','sign','error',transition);cov_2rfshkm62d().s[71]++;this.addState('send','validateResponse','retry',transition);cov_2rfshkm62d().s[72]++;this.addState('validateResponse','extractData','extractError',transition);cov_2rfshkm62d().s[73]++;this.addState('extractError','extractData','retry',transition);cov_2rfshkm62d().s[74]++;this.addState('extractData','success','retry',transition);cov_2rfshkm62d().s[75]++;this.addState('success','complete','complete',transition);cov_2rfshkm62d().s[76]++;this.addState('error','complete','complete',transition);cov_2rfshkm62d().s[77]++;this.addState('complete',null,'uncaughtException',transition);cov_2rfshkm62d().s[78]++;this.addState('uncaughtException',function(err,done){cov_2rfshkm62d().f[8]++;cov_2rfshkm62d().s[79]++;try{cov_2rfshkm62d().s[80]++;ALY.SequentialExecutor.prototype.unhandledErrorCallback.call(this,err);}catch(e){cov_2rfshkm62d().s[81]++;if(this._hardError){cov_2rfshkm62d().b[23][0]++;cov_2rfshkm62d().s[82]++;throw err;}else{cov_2rfshkm62d().b[23][1]++;}}cov_2rfshkm62d().s[83]++;done(err);});};cov_2rfshkm62d().s[84]++;fsm.setupStates();cov_2rfshkm62d().s[85]++;ALY.Request=inherit({/**


TypeError: Cannot read properties of undefined (reading 'should')
    at Response.<anonymous> (/data/js-variants/multee/Original/aliyun-sdk-js/test/sls/2015-06-01.js:696:18)
    at Request.<anonymous> (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:31:275)
    at Request.callListeners (/data/js-variants/multee/Original/aliyun-sdk-js/lib/sequential_executor.js:19:38)
    at Request.emit (/data/js-variants/multee/Original/aliyun-sdk-js/lib/sequential_executor.js:15:799)
    at Request.emit (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:110:714)
    at Request.transition (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:3841)
    at AcceptorStateMachine.runTo (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:1053)
    at /data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:2460
    at Request.transition (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:4622)
    at AcceptorStateMachine.runTo (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:1053)
    at /data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:2460
    at Request.transition (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:4622)
    at AcceptorStateMachine.runTo (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:1053)
    at /data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:2460
    at Request.transition (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:4622)
    at AcceptorStateMachine.runTo (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:1053)
    at /data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:2460
    at Request.<anonymous> (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:2:4322)
    at Request.<anonymous> (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:110:956)
    at Request.callListeners (/data/js-variants/multee/Original/aliyun-sdk-js/lib/sequential_executor.js:17:208)
    at Request.<anonymous> (/data/js-variants/multee/Original/aliyun-sdk-js/lib/sequential_executor.js:18:492)
    at Request.<anonymous> (/data/js-variants/multee/Original/aliyun-sdk-js/lib/event_listeners.js:6:1169)
    at Request.<anonymous> (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:110:956)
    at Request.callListeners (/data/js-variants/multee/Original/aliyun-sdk-js/lib/sequential_executor.js:17:208)
    at Request.emit (/data/js-variants/multee/Original/aliyun-sdk-js/lib/sequential_executor.js:15:799)
    at Request.emit (/data/js-variants/multee/Original/aliyun-sdk-js/lib/request.js:110:714)
    at ClientRequest.error (/data/js-variants/multee/Original/aliyun-sdk-js/lib/event_listeners.js:6:1073)
    at ClientRequest.emit (node:events:513:28)
    at ClientRequest.emit (node:domain:489:12)
    at Socket.socketErrorListener (node:_http_client:481:9)
    at Socket.emit (node:events:513:28)
    at Socket.emit (node:domain:489:12)
    at emitErrorNT (node:internal/streams/destroy:157:8)
    at emitErrorCloseNT (node:internal/streams/destroy:122:3)
    at processTicksAndRejections (node:internal/process/task_queues:83:21)
I am package mailjet-apiv3-nodejs
I am package mediasoup-client
PASS src/tests/test.ts (10.717 s)
  ✓ mediasoup-client exposes debug dependency (3 ms)
  ✓ detectDevice() returns nothing in Node (1 ms)
  ✓ create a Device in Node without custom handlerName/handlerFactory throws UnsupportedError (64 ms)
  ✓ create a Device with an unknown handlerName string throws TypeError (2 ms)
  ✓ create a Device in Node with a valid handlerFactory succeeds (1 ms)
  ✓ device.rtpCapabilities getter throws InvalidStateError if not loaded (1 ms)
  ✓ device.sctpCapabilities getter throws InvalidStateError if not loaded (1 ms)
  ✓ device.canProduce() throws InvalidStateError if not loaded (7 ms)
  ✓ device.createSendTransport() throws InvalidStateError if not loaded (1 ms)
  ✓ device.load() without routerRtpCapabilities rejects with TypeError (13 ms)
  ✓ device.load() with invalid routerRtpCapabilities rejects with TypeError (3 ms)
  ✓ device.load() succeeds (4 ms)
  ✓ device.load() rejects with InvalidStateError if already loaded (1 ms)
  ✓ device.rtpCapabilities getter succeeds (1 ms)
  ✓ device.sctpCapabilities getter succeeds (1 ms)
  ✓ device.canProduce() with "audio"/"video" kind returns true
  ✓ device.canProduce() with invalid kind throws TypeError (1 ms)
  ✓ device.createSendTransport() for sending media succeeds (4 ms)
  ✓ device.createRecvTransport() for receiving media succeeds (2 ms)
  ✓ device.createSendTransport() with missing remote Transport parameters throws TypeError (3 ms)
  ✓ device.createRecvTransport() with a non object appData throws TypeError (1 ms)
  ✓ transport.produce() without "connect" listener rejects (23 ms)
  ✓ transport.produce() succeeds (16 ms)
  ✓ transport.produce() without track rejects with TypeError (1 ms)
  ✓ transport.produce() in a receiving Transport rejects with UnsupportedError (1 ms)
  ✓ transport.produce() with an ended track rejects with InvalidStateError (1 ms)
  ✓ transport.produce() with a non object appData rejects with TypeError (1 ms)
  ✓ transport.consume() succeeds (20 ms)
  ✓ transport.consume() without remote Consumer parameters rejects with TypeError (1 ms)
  ✓ transport.consume() with missing remote Consumer parameters rejects with TypeError (2 ms)
  ✓ transport.consume() in a sending Transport rejects with UnsupportedError (1 ms)
  ✓ transport.consume() with unsupported rtpParameters rejects with UnsupportedError (1 ms)
  ✓ transport.consume() with a non object appData rejects with TypeError (1 ms)
  ✓ transport.produceData() succeeds (3 ms)
  ✓ transport.produceData() in a receiving Transport rejects with UnsupportedError (1 ms)
  ✓ transport.produceData() with a non object appData rejects with TypeError (1 ms)
  ✓ transport.consumeData() succeeds (2 ms)
  ✓ transport.consumeData() without remote DataConsumer parameters rejects with TypeError (1 ms)
  ✓ transport.consumeData() with missing remote DataConsumer parameters rejects with TypeError (1 ms)
  ✓ transport.consumeData() in a sending Transport rejects with UnsupportedError (1 ms)
  ✓ transport.consumeData() with a non object appData rejects with TypeError
  ✓ transport.getStats() succeeds
  ✓ transport.restartIce() succeeds (1 ms)
  ✓ transport.restartIce() without remote iceParameters rejects with TypeError
  ✓ transport.updateIceServers() succeeds
  ✓ transport.updateIceServers() without iceServers rejects with TypeError (1 ms)
  ✓ transport.appData cannot be overridden (1 ms)
  ✓ transport.appData can be modified
  ✓ connection state change fires "connectionstatechange" in live Transport (1 ms)
  ✓ producer.pause() succeeds (1 ms)
  ✓ producer.resume() succeeds (1 ms)
  ✓ producer.replaceTrack() with a new track succeeds (2 ms)
  ✓ producer.replaceTrack() with null succeeds (1 ms)
  ✓ producer.replaceTrack() with an ended track rejects with InvalidStateError (5 ms)
  ✓ producer.replaceTrack() with the same track succeeds
  ✓ producer.setMaxSpatialLayer() succeeds
  ✓ producer.setMaxSpatialLayer() in an audio Producer rejects with UnsupportedError (1 ms)
  ✓ producer.setMaxSpatialLayer() with invalid spatialLayer rejects with TypeError (1 ms)
  ✓ producer.setMaxSpatialLayer() without spatialLayer rejects with TypeError (8 ms)
  ✓ producer.setRtpEncodingParameters() succeeds (1 ms)
  ✓ producer.getStats() succeeds (1 ms)
  ✓ producer.appData cannot be overridden (1 ms)
  ✓ consumer.resume() succeeds
  ✓ consumer.pause() succeeds (1 ms)
  ✓ consumer.getStats() succeeds (1 ms)
  ✓ cnosumer.appData cannot be overridden (2 ms)
  ✓ dataProducer.appData cannot be overridden (3 ms)
  ✓ dataConsumer.appData cannot be overridden (3 ms)
  ✓ producer.close() succeed (1 ms)
  ✓ producer.replaceTrack() rejects with InvalidStateError if closed (1 ms)
  ✓ producer.getStats() rejects with InvalidStateError if closed (1 ms)
  ✓ consumer.close() succeed (1 ms)
  ✓ consumer.getStats() rejects with InvalidStateError if closed (1 ms)
  ✓ dataProducer.close() succeed
  ✓ dataConsumer.close() succeed
  ✓ remotetely stopped track fires "trackended" in live Producers/Consumers (2 ms)
  ✓ transport.close() fires "transportclose" in live Producers/Consumers (1 ms)
  ✓ transport.produce() rejects with InvalidStateError if closed (1 ms)
  ✓ transport.consume() rejects with InvalidStateError if closed (1 ms)
  ✓ transport.produceData() rejects with InvalidStateError if closed
  ✓ transport.consumeData() rejects with InvalidStateError if closed
  ✓ transport.getStats() rejects with InvalidStateError if closed (1 ms)
  ✓ transport.restartIce() rejects with InvalidStateError if closed (1 ms)
  ✓ transport.updateIceServers() rejects with InvalidStateError if closed (1 ms)
  ✓ connection state change does not fire "connectionstatechange" in closed Transport (1 ms)
  ✓ RemoteSdp properly handles multiple streams of the same type in planB (13 ms)
  ✓ RemoteSdp does not duplicate codec descriptions (3 ms)
  ✓ parseScalabilityMode() works (2 ms)

Test Suites: 1 passed, 1 total
Tests:       88 passed, 88 total
Snapshots:   0 total
Time:        11.218 s
Ran all test suites.
I am package sodium-universal
npm ERR! Missing script: "test"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/liu-yuxin/.npm/_logs/2023-02-02T09_16_39_591Z-debug-0.log
I am package ms-rest-azure-js
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/test/azureServiceClientTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/lib/azureServiceClient.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/lib/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/lib/lroPoller.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/lib/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/lib/lroPollStrategy.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/lib/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvbGliL2xyb1BvbGxTdHJhdGVneS50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvbGliL2xyb1BvbGxTdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRixnREFBMEs7QUFrQjFLOztHQUVHO0FBQ0g7SUFDRSx5QkFBNkIsbUJBQXVDLEVBQXFCLFVBQXdCO1FBQXBGLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBb0I7UUFBcUIsZUFBVSxHQUFWLFVBQVUsQ0FBYztJQUNqSCxDQUFDO0lBRU0sNENBQWtCLEdBQXpCO1FBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksb0NBQVUsR0FBakI7UUFDRSxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7O09BR0c7SUFDVSwyQ0FBaUIsR0FBOUI7Ozs7Ozs2QkFDUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7d0JBQ2pCLGNBQWMsR0FBVyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO3dCQUMvRyxxQkFBTSxrQkFBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBQTs7d0JBQWxDLFNBQWtDLENBQUM7d0JBRW5DLHFCQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBQTs7d0JBQTVCLFNBQTRCLENBQUM7OzRCQUUvQixzQkFBTyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBQzs7OztLQUN2QztJQVVTLHlEQUErQixHQUF6QztRQUNFLElBQU0sb0JBQW9CLEdBQWdC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LElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7YUFDdEY7WUFFRCxZQUFZLENBQUMsS0FBSyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxXQUFXLENBQUM7WUFDNUUsWUFBWSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQztZQUN6QyxZQUFZLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNoRCxZQUFZLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSw0REFBdUIsR0FBOUI7UUFDRSxPQUFPLCtCQUErQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFUyw4REFBeUIsR0FBbkM7UUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBQ0gsaUNBQUM7QUFBRCxDQUFDLEFBakNELENBQXlDLGVBQWUsR0FpQ3ZEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBkZWxheSwgSHR0cE1ldGhvZHMsIEh0dHBPcGVyYXRpb25SZXNwb25zZSwgUmVxdWVzdE9wdGlvbnNCYXNlLCBSZXN0RXJyb3IsIHN0cmlwUmVxdWVzdCwgV2ViUmVzb3VyY2UsIE9wZXJhdGlvblJlc3BvbnNlLCBPcGVyYXRpb25TcGVjIH0gZnJvbSBcIkBhenVyZS9tcy1yZXN0LWpzXCI7XG5pbXBvcnQgeyBBenVyZVNlcnZpY2VDbGllbnQgfSBmcm9tIFwiLi9henVyZVNlcnZpY2VDbGllbnRcIjtcbmltcG9ydCB7IExvbmdSdW5uaW5nT3BlcmF0aW9uU3RhdGVzIH0gZnJvbSBcIi4vdXRpbC9jb25zdGFudHNcIjtcblxuZXhwb3J0IHR5cGUgTFJPUG9sbFN0cmF0ZWd5VHlwZSA9IFwiQXp1cmVBc3luY09wZXJhdGlvblwiIHwgXCJMb2NhdGlvblwiIHwgXCJHZXRSZXNvdXJjZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIExST1BvbGxTdGF0ZSB7XG4gIHBvbGxTdHJhdGVneVR5cGU6IExST1BvbGxTdHJhdGVneVR5cGU7XG4gIGluaXRpYWxSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlO1xuICBzdGF0ZTogTG9uZ1J1bm5pbmdPcGVyYXRpb25TdGF0ZXM7XG4gIG1vc3RSZWNlbnRSZXF1ZXN0OiBXZWJSZXNvdXJjZTtcbiAgbW9zdFJlY2VudFJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2U7XG4gIHJlc291cmNlOiBhbnk7XG4gIGF6dXJlQXN5bmNPcGVyYXRpb25IZWFkZXJWYWx1ZT86IHN0cmluZztcbiAgbG9jYXRpb25IZWFkZXJWYWx1ZT86IHN0cmluZztcbiAgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zQmFzZTtcbn1cblxuLyoqXG4gKiBBIGxvbmctcnVubmluZyBvcGVyYXRpb24gcG9sbGluZyBzdHJhdGVneSBiYXNlIGNsYXNzIHRoYXQgb3RoZXIgcG9sbGluZyBzdHJhdGVnaWVzIHNob3VsZCBleHRlbmQuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMUk9Qb2xsU3RyYXRlZ3kge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9henVyZVNlcnZpY2VDbGllbnQ6IEF6dXJlU2VydmljZUNsaWVudCwgcHJvdGVjdGVkIHJlYWRvbmx5IF9wb2xsU3RhdGU6IExST1BvbGxTdGF0ZSkge1xuICB9XG5cbiAgcHVibGljIGdldE9wZXJhdGlvblN0YXR1cygpOiBMb25nUnVubmluZ09wZXJhdGlvblN0YXRlcyB7XG4gICAgcmV0dXJuIHRoaXMuX3BvbGxTdGF0ZS5zdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciBvciBub3QgdGhpcyBwb2xsIHN0cmF0ZWd5J3MgTFJPIGlzIGZpbmlzaGVkLlxuICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0aGlzIHBvbGwgc3RyYXRlZ3kncyBMUk8gaXMgZmluaXNoZWQuXG4gICAqL1xuICBwdWJsaWMgaXNGaW5pc2hlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNGaW5pc2hlZCh0aGlzLl9wb2xsU3RhdGUuc3RhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgcG9sbCByZXF1ZXN0cyB0aGF0IGNoZWNrIHRoZSBMUk8ncyBzdGF0dXMgdW50aWwgaXQgaXMgZGV0ZXJtaW5lZCB0aGF0IHRoZSBMUk8gaXMgZmluaXNoZWQuXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IHRoZSBMUk8gc3VjY2VlZGVkLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIHBvbGxVbnRpbEZpbmlzaGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHdoaWxlICghdGhpcy5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgIGNvbnN0IGRlbGF5SW5TZWNvbmRzOiBudW1iZXIgPSBnZXREZWxheUluU2Vjb25kcyh0aGlzLl9henVyZVNlcnZpY2VDbGllbnQsIHRoaXMuX3BvbGxTdGF0ZS5tb3N0UmVjZW50UmVzcG9uc2UpO1xuICAgICAgYXdhaXQgZGVsYXkoZGVsYXlJblNlY29uZHMgKiAxMDAwKTtcblxuICAgICAgYXdhaXQgdGhpcy5zZW5kUG9sbFJlcXVlc3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaXNGaW5hbFN0YXR1c0FjY2VwdGFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgc2luZ2xlIHBvbGwgcmVxdWVzdCB0aGF0IGNoZWNrcyB0aGUgTFJPJ3Mgc3RhdHVzIGFuZCByZXR1cm4gdGhlIHJlc3BvbnNlLiBJZiB0aGUgTFJPIGlzXG4gICAqIGZpbmlzaGVkLCB0aGVuIG5vIHJlcXVlc3Qgd2lsbCBiZSBzZW50IGFuZCB0aGUgbGFzdCByZXNwb25zZSByZWNlaXZlZCB3aWxsIGJlIHJldHVybmVkLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHNlbmRQb2xsUmVxdWVzdCgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBpc0ZpbmFsU3RhdHVzQWNjZXB0YWJsZSgpOiBib29sZWFuO1xuXG4gIHByb3RlY3RlZCBzaG91bGREb0ZpbmFsR2V0UmVzb3VyY2VSZXF1ZXN0KCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGluaXRpYWxSZXF1ZXN0TWV0aG9kOiBIdHRwTWV0aG9kcyA9IHRoaXMuX3BvbGxTdGF0ZS5pbml0aWFsUmVzcG9uc2UucmVxdWVzdC5tZXRob2Q7XG4gICAgcmV0dXJuICF0aGlzLl9wb2xsU3RhdGUucmVzb3VyY2UgJiYgKGluaXRpYWxSZXF1ZXN0TWV0aG9kID09PSBcIlBVVFwiIHx8IGluaXRpYWxSZXF1ZXN0TWV0aG9kID09PSBcIlBBVENIXCIgfHwgaW5pdGlhbFJlcXVlc3RNZXRob2QgPT09IFwiUE9TVFwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBkb0ZpbmFsR2V0UmVzb3VyY2VSZXF1ZXN0KCk6IFByb21pc2U8dm9pZD47XG5cbiAgcHVibGljIGdldE1vc3RSZWNlbnRSZXNwb25zZSgpOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2Uge1xuICAgIHJldHVybiB0aGlzLl9wb2xsU3RhdGUubW9zdFJlY2VudFJlc3BvbnNlO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldE9wZXJhdGlvblJlc3BvbnNlKCk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPiB7XG4gICAgaWYgKHRoaXMuc2hvdWxkRG9GaW5hbEdldFJlc291cmNlUmVxdWVzdCgpKSB7XG4gICAgICBhd2FpdCB0aGlzLmRvRmluYWxHZXRSZXNvdXJjZVJlcXVlc3QoKTtcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IHRoaXMuX3BvbGxTdGF0ZS5tb3N0UmVjZW50UmVzcG9uc2U7XG4gICAgY29uc3QgcmVzdWx0OiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgPSB7XG4gICAgICAuLi5yZXNwb25zZSxcbiAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMuY2xvbmUoKVxuICAgIH07XG4gICAgY29uc3QgcmVzb3VyY2U6IGFueSA9IHRoaXMuX3BvbGxTdGF0ZS5yZXNvdXJjZTtcbiAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICByZXN1bHQuYm9keUFzVGV4dCA9IHJlc3BvbnNlLmJvZHlBc1RleHQ7XG4gICAgICByZXN1bHQucGFyc2VkQm9keSA9IHJlc3BvbnNlLnBhcnNlZEJvZHk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzb3VyY2UudmFsdWVPZigpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXN1bHQuYm9keUFzVGV4dCA9IHJlc291cmNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0LnBhcnNlZEJvZHkgPSBKU09OLnBhcnNlKHJlc291cmNlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBUaGVyZSB3YXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgSlNPTi4gSGVuY2Ugd2Ugc2V0IHRoZSByZXNvdXJjZSBhcy1pcy4gTW9zdCBsaWtlbHksIHRoZVxuICAgICAgICAvLyByZXNvdXJjZSBpcyBhIHN0cmluZyB0aGF0IHdhcyBhbHJlYWR5IHBhcnNlZC5cbiAgICAgICAgcmVzdWx0LnBhcnNlZEJvZHkgPSByZXNvdXJjZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmJvZHlBc1RleHQgPSBKU09OLnN0cmluZ2lmeShyZXNvdXJjZSk7XG4gICAgICByZXN1bHQucGFyc2VkQm9keSA9IHJlc291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHVibGljIGdldFJlc3RFcnJvcigpOiBSZXN0RXJyb3Ige1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFJlc3RFcnJvcihcIlwiKTtcbiAgICBlcnJvci5yZXF1ZXN0ID0gc3RyaXBSZXF1ZXN0KHRoaXMuX3BvbGxTdGF0ZS5tb3N0UmVjZW50UmVxdWVzdCk7XG4gICAgZXJyb3IucmVzcG9uc2UgPSB0aGlzLl9wb2xsU3RhdGUubW9zdFJlY2VudFJlc3BvbnNlO1xuICAgIGVycm9yLm1lc3NhZ2UgPSBgTG9uZyBydW5uaW5nIG9wZXJhdGlvbiBmYWlsZWQgd2l0aCBzdGF0dXM6IFwiJHt0aGlzLl9wb2xsU3RhdGUuc3RhdGV9XCIuYDtcbiAgICBlcnJvci5ib2R5ID0gdGhpcy5fcG9sbFN0YXRlLnJlc291cmNlO1xuICAgIGlmIChlcnJvci5ib2R5KSB7XG4gICAgICBjb25zdCBpbm5lckVycm9yOiBhbnkgPSBlcnJvci5ib2R5LmVycm9yO1xuICAgICAgaWYgKGlubmVyRXJyb3IpIHtcbiAgICAgICAgaWYgKGlubmVyRXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSBgTG9uZyBydW5uaW5nIG9wZXJhdGlvbiBmYWlsZWQgd2l0aCBlcnJvcjogXCIke2lubmVyRXJyb3IubWVzc2FnZX1cIi5gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbm5lckVycm9yLmNvZGUpIHtcbiAgICAgICAgICBlcnJvci5jb2RlID0gaW5uZXJFcnJvci5jb2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIHByb3RlY3RlZCB1cGRhdGVTdGF0ZSh1cmw6IHN0cmluZywgc2hvdWxkRGVzZXJpYWxpemU6IGJvb2xlYW4gfCAoKHJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UpID0+IGJvb2xlYW4pKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlT3BlcmF0aW9uU3RhdHVzKHVybCwgc2hvdWxkRGVzZXJpYWxpemUpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgIHRoaXMuX3BvbGxTdGF0ZS5zdGF0ZSA9IGdldFByb3Zpc2lvbmluZ1N0YXRlKHJlc3VsdC5wYXJzZWRCb2R5KSB8fCBcIlN1Y2NlZWRlZFwiO1xuICAgICAgdGhpcy5fcG9sbFN0YXRlLm1vc3RSZWNlbnRSZXNwb25zZSA9IHJlc3VsdDtcbiAgICAgIHRoaXMuX3BvbGxTdGF0ZS5tb3N0UmVjZW50UmVxdWVzdCA9IHJlc3VsdC5yZXF1ZXN0O1xuICAgICAgdGhpcy5fcG9sbFN0YXRlLnJlc291cmNlID0gZ2V0UmVzcG9uc2VCb2R5KHJlc3VsdCk7XG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0U3RhdHVzOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgICBpZiAoZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2Uuc3RhdHVzKSB7XG4gICAgICAgIHJlc3VsdFN0YXR1cyA9IGVycm9yLnJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgaWYgKHRoaXMuX3BvbGxTdGF0ZS5pbml0aWFsUmVzcG9uc2UucmVxdWVzdC5tZXRob2QgIT09IFwiREVMRVRFXCIgfHwgcmVzdWx0U3RhdHVzISA8IDQwMCB8fCA0OTkgPCByZXN1bHRTdGF0dXMhKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBvcGVyYXRpb24gc3RhdHVzIGJ5IHF1ZXJ5aW5nIHRoZSBvcGVyYXRpb24gVVJMLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzVXJsIFVSTCB1c2VkIHRvIHBvbGwgb3BlcmF0aW9uIHJlc3VsdC5cbiAgICovXG4gIHByb3RlY3RlZCB1cGRhdGVPcGVyYXRpb25TdGF0dXMoc3RhdHVzVXJsOiBzdHJpbmcsIHNob3VsZERlc2VyaWFsaXplOiBib29sZWFuIHwgKChyZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlKSA9PiBib29sZWFuKSk6IFByb21pc2U8SHR0cE9wZXJhdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdFVybDogc3RyaW5nID0gc3RhdHVzVXJsLnJlcGxhY2UoXCIgXCIsIFwiJTIwXCIpO1xuICAgIGNvbnN0IGh0dHBSZXF1ZXN0ID0gbmV3IFdlYlJlc291cmNlKHJlcXVlc3RVcmwsIFwiR0VUXCIpO1xuICAgIGNvbnN0IHBvbGxTdGF0ZTogTFJPUG9sbFN0YXRlID0gdGhpcy5fcG9sbFN0YXRlO1xuICAgIGh0dHBSZXF1ZXN0Lm9wZXJhdGlvblNwZWMgPSBwb2xsU3RhdGUubW9zdFJlY2VudFJlcXVlc3Qub3BlcmF0aW9uU3BlYztcbiAgICBodHRwUmVxdWVzdC5zaG91bGREZXNlcmlhbGl6ZSA9IHNob3VsZERlc2VyaWFsaXplO1xuICAgIGh0dHBSZXF1ZXN0Lm9wZXJhdGlvblJlc3BvbnNlR2V0dGVyID0gZ2V0T3BlcmF0aW9uUmVzcG9uc2U7XG4gICAgY29uc3Qgb3B0aW9uczogUmVxdWVzdE9wdGlvbnNCYXNlIHwgdW5kZWZpbmVkID0gcG9sbFN0YXRlLm9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jdXN0b21IZWFkZXJzKSB7XG4gICAgICBjb25zdCBjdXN0b21IZWFkZXJzID0gb3B0aW9ucy5jdXN0b21IZWFkZXJzO1xuICAgICAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKGN1c3RvbUhlYWRlcnMpKSB7XG4gICAgICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnMuc2V0KGhlYWRlck5hbWUsIGN1c3RvbUhlYWRlcnNbaGVhZGVyTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXp1cmVTZXJ2aWNlQ2xpZW50LnNlbmRSZXF1ZXN0KGh0dHBSZXF1ZXN0KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQb2xsU3RhdGUoKTogTFJPUG9sbFN0YXRlIHtcbiAgICByZXR1cm4gdGhpcy5fcG9sbFN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE9wZXJhdGlvblJlc3BvbnNlKG9wZXJhdGlvblNwZWM6IE9wZXJhdGlvblNwZWMsIHJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UpOiBPcGVyYXRpb25SZXNwb25zZSB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IHN0YXR1c0NvZGU6IG51bWJlciA9IHJlc3BvbnNlLnN0YXR1cztcbiAgY29uc3Qgb3BlcmF0aW9uUmVzcG9uc2VzOiB7IFtzdGF0dXNDb2RlOiBzdHJpbmddOiBPcGVyYXRpb25SZXNwb25zZSB9ID0gb3BlcmF0aW9uU3BlYy5yZXNwb25zZXM7XG4gIGxldCByZXN1bHQ6IE9wZXJhdGlvblJlc3BvbnNlIHwgdW5kZWZpbmVkID0gb3BlcmF0aW9uUmVzcG9uc2VzW3N0YXR1c0NvZGVdO1xuICBpZiAoIXJlc3VsdCkge1xuICAgIGlmIChzdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgIHJlc3VsdCA9IG9wZXJhdGlvblJlc3BvbnNlc1syMDFdIHx8IG9wZXJhdGlvblJlc3BvbnNlc1syMDJdO1xuICAgIH0gZWxzZSBpZiAoMjAxIDw9IHN0YXR1c0NvZGUgJiYgc3RhdHVzQ29kZSA8PSAyOTkpIHtcbiAgICAgIHJlc3VsdCA9IHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVsYXlJblNlY29uZHMoYXp1cmVTZXJ2aWNlQ2xpZW50OiBBenVyZVNlcnZpY2VDbGllbnQsIHByZXZpb3VzUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSk6IG51bWJlciB7XG4gIGxldCBkZWxheUluU2Vjb25kcyA9IDMwO1xuICBpZiAoYXp1cmVTZXJ2aWNlQ2xpZW50LmxvbmdSdW5uaW5nT3BlcmF0aW9uUmV0cnlUaW1lb3V0ICE9IHVuZGVmaW5lZCkge1xuICAgIGRlbGF5SW5TZWNvbmRzID0gYXp1cmVTZXJ2aWNlQ2xpZW50LmxvbmdSdW5uaW5nT3BlcmF0aW9uUmV0cnlUaW1lb3V0O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJldHJ5QWZ0ZXJIZWFkZXJWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gcHJldmlvdXNSZXNwb25zZS5oZWFkZXJzLmdldChcInJldHJ5LWFmdGVyXCIpO1xuICAgIGlmIChyZXRyeUFmdGVySGVhZGVyVmFsdWUpIHtcbiAgICAgIGNvbnN0IHJldHJ5QWZ0ZXJEZWxheUluU2Vjb25kczogbnVtYmVyID0gcGFyc2VJbnQocmV0cnlBZnRlckhlYWRlclZhbHVlKTtcbiAgICAgIGlmICghTnVtYmVyLmlzTmFOKHJldHJ5QWZ0ZXJEZWxheUluU2Vjb25kcykpIHtcbiAgICAgICAgZGVsYXlJblNlY29uZHMgPSByZXRyeUFmdGVyRGVsYXlJblNlY29uZHM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWxheUluU2Vjb25kcztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvdmlzaW9uaW5nU3RhdGUocmVzcG9uc2VCb2R5OiBhbnkpOiBMb25nUnVubmluZ09wZXJhdGlvblN0YXRlcyB8IHVuZGVmaW5lZCB7XG4gIGxldCByZXN1bHQ6IExvbmdSdW5uaW5nT3BlcmF0aW9uU3RhdGVzIHwgdW5kZWZpbmVkO1xuICBpZiAocmVzcG9uc2VCb2R5KSB7XG4gICAgaWYgKHJlc3BvbnNlQm9keS5wcm92aXNpb25pbmdTdGF0ZSkge1xuICAgICAgcmVzdWx0ID0gcmVzcG9uc2VCb2R5LnByb3Zpc2lvbmluZ1N0YXRlO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2VCb2R5LnByb3BlcnRpZXMpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3BvbnNlQm9keS5wcm9wZXJ0aWVzLnByb3Zpc2lvbmluZ1N0YXRlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRSZXNwb25zZUJvZHkocmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSk6IGFueSB7XG4gIGxldCByZXN1bHQ6IGFueTtcbiAgdHJ5IHtcbiAgICBpZiAocmVzcG9uc2UucGFyc2VkQm9keSkge1xuICAgICAgcmVzdWx0ID0gcmVzcG9uc2UucGFyc2VkQm9keTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmJvZHlBc1RleHQgJiYgcmVzcG9uc2UuYm9keUFzVGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHlBc1RleHQpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBkZXNlcmlhbGl6YXRpb25FcnJvciA9IG5ldyBSZXN0RXJyb3IoYEVycm9yIFwiJHtlcnJvcn1cIiBvY2N1cnJlZCBpbiBwYXJzaW5nIHRoZSByZXNwb25zZUJvZHkgXCIgK1xuICAgICAgXCJ3aGlsZSBjcmVhdGluZyB0aGUgUG9sbGluZ1N0YXRlIGZvciBMb25nIFJ1bm5pbmcgT3BlcmF0aW9uLSBcIiR7cmVzcG9uc2UuYm9keUFzVGV4dH1cImApO1xuICAgIGRlc2VyaWFsaXphdGlvbkVycm9yLnJlcXVlc3QgPSByZXNwb25zZS5yZXF1ZXN0O1xuICAgIGRlc2VyaWFsaXphdGlvbkVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhyb3cgZGVzZXJpYWxpemF0aW9uRXJyb3I7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdHVzRnJvbVJlc3BvbnNlKHJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UsIHJlc3BvbnNlQm9keT86IGFueSk6IExvbmdSdW5uaW5nT3BlcmF0aW9uU3RhdGVzIHtcbiAgaWYgKHJlc3BvbnNlQm9keSA9PSB1bmRlZmluZWQpIHtcbiAgICByZXNwb25zZUJvZHkgPSBnZXRSZXNwb25zZUJvZHkocmVzcG9uc2UpO1xuICB9XG5cbiAgbGV0IHJlc3VsdDogTG9uZ1J1bm5pbmdPcGVyYXRpb25TdGF0ZXM7XG4gIHN3aXRjaCAocmVzcG9uc2Uuc3RhdHVzKSB7XG4gICAgY2FzZSAyMDI6XG4gICAgICByZXN1bHQgPSBcIkluUHJvZ3Jlc3NcIjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyMDQ6XG4gICAgICByZXN1bHQgPSBcIlN1Y2NlZWRlZFwiO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDIwMTpcbiAgICAgIHJlc3VsdCA9IGdldFByb3Zpc2lvbmluZ1N0YXRlKHJlc3BvbnNlQm9keSkgfHwgXCJJblByb2dyZXNzXCI7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMjAwOlxuICAgICAgY29uc3QgcHJvdmlzaW9uaW5nU3RhdGU6IExvbmdSdW5uaW5nT3BlcmF0aW9uU3RhdGVzIHwgdW5kZWZpbmVkID0gZ2V0UHJvdmlzaW9uaW5nU3RhdGUocmVzcG9uc2VCb2R5KTtcbiAgICAgIGlmIChwcm92aXNpb25pbmdTdGF0ZSkge1xuICAgICAgICByZXN1bHQgPSBwcm92aXNpb25pbmdTdGF0ZTtcbiAgICAgIH0gZWxzZSBpZiAoZ2V0QXp1cmVBc3luY09wZXJhdGlvbkhlYWRlclZhbHVlKHJlc3BvbnNlKSB8fCBnZXRMb2NhdGlvbkhlYWRlclZhbHVlKHJlc3BvbnNlKSkge1xuICAgICAgICByZXN1bHQgPSBcIkluUHJvZ3Jlc3NcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IFwiU3VjY2VlZGVkXCI7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXN1bHQgPSBcIkZhaWxlZFwiO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3QgdGVybWluYWxTdGF0ZXM6IExvbmdSdW5uaW5nT3BlcmF0aW9uU3RhdGVzW10gPSBbXCJTdWNjZWVkZWRcIiwgXCJGYWlsZWRcIiwgXCJDYW5jZWxlZFwiLCBcIkNhbmNlbGxlZFwiXTtcblxuLyoqXG4gKiBHZXQgd2hldGhlciBvciBub3QgYSBsb25nLXJ1bm5pbmcgb3BlcmF0aW9uIHdpdGggdGhlIHByb3ZpZGVkIHN0YXR1cyBpcyBmaW5pc2hlZC5cbiAqIEBwYXJhbSBzdGF0dXMgVGhlIGN1cnJlbnQgc3RhdHVzIG9mIGEgbG9uZy1ydW5uaW5nIG9wZXJhdGlvbi5cbiAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IGEgbG9uZy1ydW5uaW5nIG9wZXJhdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBzdGF0dXMgaXMgZmluaXNoZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbmlzaGVkKHN0YXR1czogTG9uZ1J1bm5pbmdPcGVyYXRpb25TdGF0ZXMpOiBib29sZWFuIHtcbiAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IHRlcm1pbmFsU3RhdGUgb2YgdGVybWluYWxTdGF0ZXMpIHtcbiAgICBpZiAobG9uZ1J1bm5pbmdPcGVyYXRpb25TdGF0ZXNFcXVhbChzdGF0dXMsIHRlcm1pbmFsU3RhdGUpKSB7XG4gICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb25nUnVubmluZ09wZXJhdGlvblN0YXRlc0VxdWFsKGxoczogTG9uZ1J1bm5pbmdPcGVyYXRpb25TdGF0ZXMsIHJoczogTG9uZ1J1bm5pbmdPcGVyYXRpb25TdGF0ZXMpOiBib29sZWFuIHtcbiAgY29uc3QgbGhzTG93ZXJDYXNlZDogc3RyaW5nID0gbGhzICYmIGxocy50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCByaHNMb3dlckNhc2VkOiBzdHJpbmcgPSByaHMgJiYgcmhzLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBsaHNMb3dlckNhc2VkID09PSByaHNMb3dlckNhc2VkO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBsb25nLXJ1bm5pbmcgb3BlcmF0aW9uIHBvbGxpbmcgc3RyYXRlZ3kgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGluaXRpYWwgcmVzcG9uc2UuXG4gKiBAcGFyYW0gaW5pdGlhbFJlc3BvbnNlIFRoZSBpbml0aWFsIHJlc3BvbnNlIHRvIHRoZSBsb25nLXJ1bm5pbmcgb3BlcmF0aW9uJ3MgaW5pdGlhbCByZXF1ZXN0LlxuICogQHBhcmFtIGF6dXJlU2VydmljZUNsaWVudCBUaGUgQXp1cmVTZXJ2aWNlQ2xpZW50IHRoYXQgd2FzIHVzZWQgdG8gc2VuZCB0aGUgaW5pdGlhbCByZXF1ZXN0LlxuICogQHBhcmFtIG9wdGlvbnMgQW55IG9wdGlvbnMgdGhhdCB3ZXJlIHByb3ZpZGVkIHRvIHRoZSBpbml0aWFsIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMUk9Qb2xsU3RyYXRlZ3lGcm9tSW5pdGlhbFJlc3BvbnNlKGluaXRpYWxSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlLCBhenVyZVNlcnZpY2VDbGllbnQ6IEF6dXJlU2VydmljZUNsaWVudCwgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zQmFzZSk6IExST1BvbGxTdHJhdGVneSB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IGluaXRpYWxSZXF1ZXN0TWV0aG9kOiBIdHRwTWV0aG9kcyA9IGluaXRpYWxSZXNwb25zZS5yZXF1ZXN0Lm1ldGhvZDtcbiAgY29uc3QgaW5pdGlhbFJlc3BvbnNlU3RhdHVzOiBudW1iZXIgPSBpbml0aWFsUmVzcG9uc2Uuc3RhdHVzO1xuXG4gIGxldCBscm9Qb2xsU3RyYXRlZ3lUeXBlOiBMUk9Qb2xsU3RyYXRlZ3lUeXBlIHwgdW5kZWZpbmVkO1xuICBpZiAoZ2V0QXp1cmVBc3luY09wZXJhdGlvbkhlYWRlclZhbHVlKGluaXRpYWxSZXNwb25zZSkpIHtcbiAgICBscm9Qb2xsU3RyYXRlZ3lUeXBlID0gXCJBenVyZUFzeW5jT3BlcmF0aW9uXCI7XG4gIH0gZWxzZSBpZiAoZ2V0TG9jYXRpb25IZWFkZXJWYWx1ZShpbml0aWFsUmVzcG9uc2UpKSB7XG4gICAgbHJvUG9sbFN0cmF0ZWd5VHlwZSA9IFwiTG9jYXRpb25cIjtcbiAgfSBlbHNlIGlmIChpbml0aWFsUmVxdWVzdE1ldGhvZCA9PT0gXCJQVVRcIiB8fCBpbml0aWFsUmVxdWVzdE1ldGhvZCA9PT0gXCJQQVRDSFwiKSB7XG4gICAgbHJvUG9sbFN0cmF0ZWd5VHlwZSA9IFwiR2V0UmVzb3VyY2VcIjtcbiAgfSBlbHNlIGlmIChpbml0aWFsUmVzcG9uc2VTdGF0dXMgIT09IDIwMSAmJiBpbml0aWFsUmVzcG9uc2VTdGF0dXMgIT09IDIwMiAmJiAhaXNGaW5pc2hlZChnZXRTdGF0dXNGcm9tUmVzcG9uc2UoaW5pdGlhbFJlc3BvbnNlKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBkZXRlcm1pbmUgbG9uZyBydW5uaW5nIG9wZXJhdGlvbiBwb2xsaW5nIHN0cmF0ZWd5LlwiKTtcbiAgfVxuXG4gIGxldCByZXN1bHQ6IExST1BvbGxTdHJhdGVneSB8IHVuZGVmaW5lZDtcbiAgaWYgKGxyb1BvbGxTdHJhdGVneVR5cGUpIHtcbiAgICBjb25zdCByZXNvdXJjZTogYW55ID0gZ2V0UmVzcG9uc2VCb2R5KGluaXRpYWxSZXNwb25zZSk7XG4gICAgY29uc3QgbHJvUG9sbFN0YXRlOiBMUk9Qb2xsU3RhdGUgPSB7XG4gICAgICBwb2xsU3RyYXRlZ3lUeXBlOiBscm9Qb2xsU3RyYXRlZ3lUeXBlLFxuICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgIGluaXRpYWxSZXNwb25zZTogaW5pdGlhbFJlc3BvbnNlLFxuICAgICAgbW9zdFJlY2VudFJlc3BvbnNlOiBpbml0aWFsUmVzcG9uc2UsXG4gICAgICBtb3N0UmVjZW50UmVxdWVzdDogaW5pdGlhbFJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICBhenVyZUFzeW5jT3BlcmF0aW9uSGVhZGVyVmFsdWU6IGdldEF6dXJlQXN5bmNPcGVyYXRpb25IZWFkZXJWYWx1ZShpbml0aWFsUmVzcG9uc2UpLFxuICAgICAgbG9jYXRpb25IZWFkZXJWYWx1ZTogZ2V0TG9jYXRpb25IZWFkZXJWYWx1ZShpbml0aWFsUmVzcG9uc2UpLFxuICAgICAgcmVzb3VyY2U6IHJlc291cmNlLFxuICAgICAgc3RhdGU6IGdldFN0YXR1c0Zyb21SZXNwb25zZShpbml0aWFsUmVzcG9uc2UsIHJlc291cmNlKVxuICAgIH07XG4gICAgcmVzdWx0ID0gY3JlYXRlTFJPUG9sbFN0cmF0ZWd5RnJvbVBvbGxTdGF0ZShhenVyZVNlcnZpY2VDbGllbnQsIGxyb1BvbGxTdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMUk9Qb2xsU3RyYXRlZ3lGcm9tUG9sbFN0YXRlKGF6dXJlU2VydmljZUNsaWVudDogQXp1cmVTZXJ2aWNlQ2xpZW50LCBscm9Qb2xsU3RhdGU6IExST1BvbGxTdGF0ZSk6IExST1BvbGxTdHJhdGVneSB8IHVuZGVmaW5lZCB7XG4gIGxldCByZXN1bHQ6IExST1BvbGxTdHJhdGVneTtcbiAgc3dpdGNoIChscm9Qb2xsU3RhdGUucG9sbFN0cmF0ZWd5VHlwZSkge1xuICAgIGNhc2UgXCJBenVyZUFzeW5jT3BlcmF0aW9uXCI6XG4gICAgICByZXN1bHQgPSBuZXcgQXp1cmVBc3luY09wZXJhdGlvbkxST1BvbGxTdHJhdGVneShhenVyZVNlcnZpY2VDbGllbnQsIGxyb1BvbGxTdGF0ZSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJMb2NhdGlvblwiOlxuICAgICAgcmVzdWx0ID0gbmV3IExvY2F0aW9uTFJPUG9sbFN0cmF0ZWd5KGF6dXJlU2VydmljZUNsaWVudCwgbHJvUG9sbFN0YXRlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIkdldFJlc291cmNlXCI6XG4gICAgICByZXN1bHQgPSBuZXcgR2V0UmVzb3VyY2VMUk9Qb2xsU3RyYXRlZ3koYXp1cmVTZXJ2aWNlQ2xpZW50LCBscm9Qb2xsU3RhdGUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgTFJPIHBvbGwgc3RyYXRlZ3kgdHlwZTogXCIke2xyb1BvbGxTdGF0ZS5wb2xsU3RyYXRlZ3lUeXBlfVwiYCk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbkhlYWRlclZhbHVlKHJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJsb2NhdGlvblwiKTtcbn1cblxuLyoqXG4gKiBBIGxvbmctcnVubmluZyBvcGVyYXRpb24gcG9sbGluZyBzdHJhdGVneSB0aGF0IGlzIGJhc2VkIG9uIHRoZSBsb2NhdGlvbiBoZWFkZXIuXG4gKi9cbmNsYXNzIExvY2F0aW9uTFJPUG9sbFN0cmF0ZWd5IGV4dGVuZHMgTFJPUG9sbFN0cmF0ZWd5IHtcbiAgcHJpdmF0ZSBsb2NhdGlvblN0cmF0ZWd5U2hvdWxkRGVzZXJpYWxpemUocGFyc2VkUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSk6IGJvb2xlYW4ge1xuICAgIGxldCBzaG91bGREZXNlcmlhbGl6ZSA9IGZhbHNlO1xuXG4gICAgY29uc3QgaW5pdGlhbFJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgPSB0aGlzLl9wb2xsU3RhdGUuaW5pdGlhbFJlc3BvbnNlO1xuICAgIGNvbnN0IGluaXRpYWxSZXF1ZXN0TWV0aG9kOiBIdHRwTWV0aG9kcyA9IGluaXRpYWxSZXNwb25zZS5yZXF1ZXN0Lm1ldGhvZDtcbiAgICBjb25zdCBzdGF0dXNDb2RlOiBudW1iZXIgPSBwYXJzZWRSZXNwb25zZS5zdGF0dXM7XG4gICAgaWYgKHN0YXR1c0NvZGUgPT09IDIwMCB8fFxuICAgICAgKHN0YXR1c0NvZGUgPT09IDIwMSAmJiAoaW5pdGlhbFJlcXVlc3RNZXRob2QgPT09IFwiUFVUXCIgfHwgaW5pdGlhbFJlcXVlc3RNZXRob2QgPT09IFwiUEFUQ0hcIikpIHx8XG4gICAgICAoc3RhdHVzQ29kZSA9PT0gMjA0ICYmIChpbml0aWFsUmVxdWVzdE1ldGhvZCA9PT0gXCJERUxFVEVcIiB8fCBpbml0aWFsUmVxdWVzdE1ldGhvZCA9PT0gXCJQT1NUXCIpKSkge1xuICAgICAgc2hvdWxkRGVzZXJpYWxpemUgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBzaG91bGREZXNlcmlhbGl6ZTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlldmUgUFVUIG9wZXJhdGlvbiBzdGF0dXMgYnkgcG9sbGluZyBmcm9tIFwibG9jYXRpb25cIiBoZWFkZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgLSBUaGUgSFRUUCBtZXRob2QuXG4gICAqIEBwYXJhbSB7UG9sbGluZ1N0YXRlfSBwb2xsaW5nU3RhdGUgLSBUaGUgb2JqZWN0IHRvIHBlcnNpc3QgY3VycmVudCBvcGVyYXRpb24gc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgc2VuZFBvbGxSZXF1ZXN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGxyb1BvbGxTdGF0ZTogTFJPUG9sbFN0YXRlID0gdGhpcy5fcG9sbFN0YXRlO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZU9wZXJhdGlvblN0YXR1cyhscm9Qb2xsU3RhdGUubG9jYXRpb25IZWFkZXJWYWx1ZSEsIHRoaXMubG9jYXRpb25TdHJhdGVneVNob3VsZERlc2VyaWFsaXplLmJpbmQodGhpcykpLnRoZW4oKHJlc3VsdDogSHR0cE9wZXJhdGlvblJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCBsb2NhdGlvbkhlYWRlclZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBnZXRMb2NhdGlvbkhlYWRlclZhbHVlKHJlc3VsdCk7XG4gICAgICBpZiAobG9jYXRpb25IZWFkZXJWYWx1ZSkge1xuICAgICAgICBscm9Qb2xsU3RhdGUubG9jYXRpb25IZWFkZXJWYWx1ZSA9IGxvY2F0aW9uSGVhZGVyVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGxyb1BvbGxTdGF0ZS5tb3N0UmVjZW50UmVzcG9uc2UgPSByZXN1bHQ7XG4gICAgICBscm9Qb2xsU3RhdGUubW9zdFJlY2VudFJlcXVlc3QgPSByZXN1bHQucmVxdWVzdDtcblxuICAgICAgY29uc3QgaW5pdGlhbFJlc3BvbnNlOiBIdHRwT3BlcmF0aW9uUmVzcG9uc2UgPSBscm9Qb2xsU3RhdGUuaW5pdGlhbFJlc3BvbnNlO1xuICAgICAgY29uc3QgaW5pdGlhbFJlcXVlc3RNZXRob2Q6IEh0dHBNZXRob2RzID0gaW5pdGlhbFJlc3BvbnNlLnJlcXVlc3QubWV0aG9kO1xuICAgICAgY29uc3QgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZTogbnVtYmVyID0gaW5pdGlhbFJlc3BvbnNlLnN0YXR1cztcbiAgICAgIGNvbnN0IHN0YXR1c0NvZGU6IG51bWJlciA9IHJlc3VsdC5zdGF0dXM7XG4gICAgICBpZiAoc3RhdHVzQ29kZSA9PT0gMjAyKSB7XG4gICAgICAgIGxyb1BvbGxTdGF0ZS5zdGF0ZSA9IFwiSW5Qcm9ncmVzc1wiO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXNDb2RlID09PSAyMDAgfHxcbiAgICAgICAgKHN0YXR1c0NvZGUgPT09IDIwMSAmJiAoaW5pdGlhbFJlcXVlc3RNZXRob2QgPT09IFwiUFVUXCIgfHwgaW5pdGlhbFJlcXVlc3RNZXRob2QgPT09IFwiUEFUQ0hcIikpIHx8XG4gICAgICAgIChzdGF0dXNDb2RlID09PSAyMDQgJiYgKGluaXRpYWxSZXF1ZXN0TWV0aG9kID09PSBcIkRFTEVURVwiIHx8IGluaXRpYWxSZXF1ZXN0TWV0aG9kID09PSBcIlBPU1RcIikpKSB7XG4gICAgICAgIGxyb1BvbGxTdGF0ZS5zdGF0ZSA9IFwiU3VjY2VlZGVkXCI7XG4gICAgICAgIGxyb1BvbGxTdGF0ZS5yZXNvdXJjZSA9IGdldFJlc3BvbnNlQm9keShyZXN1bHQpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXNDb2RlID09PSA0MDQgJiYgaW5pdGlhbFJlcXVlc3RNZXRob2QgPT09IFwiUE9TVFwiICYmXG4gICAgICAgIChpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDAgfHwgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZSA9PT0gMjAxIHx8IGluaXRpYWxSZXNwb25zZVN0YXR1c0NvZGUgPT09IDIwMikpIHtcbiAgICAgICAgbHJvUG9sbFN0YXRlLnN0YXRlID0gXCJGYWlsZWRcIjtcbiAgICAgICAgbHJvUG9sbFN0YXRlLnJlc291cmNlID0gZ2V0UmVzcG9uc2VCb2R5KHJlc3VsdCk7XG4gICAgICB9IGVsc2UgaWYgKDQwMCA8PSBzdGF0dXNDb2RlICYmIHN0YXR1c0NvZGUgPD0gNDk5KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdEJvZHk6IHN0cmluZyA9IHJlc3VsdC5ib2R5QXNUZXh0ITtcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZTogc3RyaW5nID0gcmVzdWx0Qm9keTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXN1bHRPYmplY3QgPSBKU09OLnBhcnNlKHJlc3VsdEJvZHkpO1xuICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHJlc3VsdE9iamVjdC5tZXNzYWdlO1xuICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgICAgLy8gSWdub3JlIHRoZSBleGNlcHRpb24sIHVzZSByZXN1bHRCb2R5IGFzIHRoZSBlcnJvciBtZXNzYWdlXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgUmVzdEVycm9yKGVycm9yTWVzc2FnZSwgdW5kZWZpbmVkLCBzdGF0dXNDb2RlLCBzdHJpcFJlcXVlc3QocmVzdWx0LnJlcXVlc3QpLCByZXN1bHQsIHJlc3VsdEJvZHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgcmVzcG9uc2Ugd2l0aCBzdGF0dXMgY29kZSAke3N0YXR1c0NvZGV9IGZyb20gcG9sbGluZyBmb3IgbG9uZyBydW5uaW5nIG9wZXJhdGlvbiB1cmwgXCIke2xyb1BvbGxTdGF0ZS5sb2NhdGlvbkhlYWRlclZhbHVlfVwiIGlzIG5vdCB2YWxpZC5gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBpc0ZpbmFsU3RhdHVzQWNjZXB0YWJsZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBscm9Qb2xsU3RhdGU6IExST1BvbGxTdGF0ZSA9IHRoaXMuX3BvbGxTdGF0ZTtcbiAgICBjb25zdCBpbml0aWFsUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IGxyb1BvbGxTdGF0ZS5pbml0aWFsUmVzcG9uc2U7XG4gICAgY29uc3QgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZTogbnVtYmVyID0gaW5pdGlhbFJlc3BvbnNlLnN0YXR1cztcbiAgICByZXR1cm4gbG9uZ1J1bm5pbmdPcGVyYXRpb25TdGF0ZXNFcXVhbChscm9Qb2xsU3RhdGUuc3RhdGUsIFwiU3VjY2VlZGVkXCIpIHx8XG4gICAgICAoaW5pdGlhbFJlc3BvbnNlLnJlcXVlc3QubWV0aG9kID09PSBcIlBPU1RcIiAmJiBscm9Qb2xsU3RhdGUubW9zdFJlY2VudFJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0ICYmXG4gICAgICAgIChpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDAgfHxcbiAgICAgICAgICBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDEgfHxcbiAgICAgICAgICBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDIpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzaG91bGREb0ZpbmFsR2V0UmVzb3VyY2VSZXF1ZXN0KCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGxyb1BvbGxTdGF0ZTogTFJPUG9sbFN0YXRlID0gdGhpcy5fcG9sbFN0YXRlO1xuICAgIGNvbnN0IGluaXRpYWxSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gbHJvUG9sbFN0YXRlLmluaXRpYWxSZXNwb25zZTtcbiAgICBsZXQgcmVzdWx0OiBib29sZWFuO1xuICAgIGNvbnN0IGluaXRpYWxSZXF1ZXN0TWV0aG9kOiBIdHRwTWV0aG9kcyA9IGluaXRpYWxSZXNwb25zZS5yZXF1ZXN0Lm1ldGhvZDtcbiAgICBjb25zdCBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlOiBudW1iZXIgPSBpbml0aWFsUmVzcG9uc2Uuc3RhdHVzO1xuICAgIGlmIChpbml0aWFsUmVxdWVzdE1ldGhvZCA9PT0gXCJQT1NUXCIgJiYgbHJvUG9sbFN0YXRlLm1vc3RSZWNlbnRSZXNwb25zZS5zdGF0dXMgPT09IDQwNCAmJlxuICAgICAgKGluaXRpYWxSZXNwb25zZVN0YXR1c0NvZGUgPT09IDIwMCB8fFxuICAgICAgICBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDEgfHxcbiAgICAgICAgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZSA9PT0gMjAyKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHN1cGVyLnNob3VsZERvRmluYWxHZXRSZXNvdXJjZVJlcXVlc3QoKSB8fFxuICAgICAgICAoaW5pdGlhbFJlcXVlc3RNZXRob2QgPT09IFwiUE9TVFwiICYmIGluaXRpYWxSZXNwb25zZVN0YXR1c0NvZGUgPT09IDIwMSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgZG9GaW5hbEdldFJlc291cmNlUmVxdWVzdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBscm9Qb2xsU3RhdGU6IExST1BvbGxTdGF0ZSA9IHRoaXMuX3BvbGxTdGF0ZTtcbiAgICBjb25zdCBpbml0aWFsUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IGxyb1BvbGxTdGF0ZS5pbml0aWFsUmVzcG9uc2U7XG4gICAgbGV0IGdldFJlc291cmNlUmVxdWVzdFVybDogc3RyaW5nO1xuICAgIGNvbnN0IGluaXRpYWxSZXNwb25zZVN0YXR1c0NvZGU6IG51bWJlciA9IGluaXRpYWxSZXNwb25zZS5zdGF0dXM7XG4gICAgY29uc3QgaW5pdGlhbFJlcXVlc3Q6IFdlYlJlc291cmNlID0gaW5pdGlhbFJlc3BvbnNlLnJlcXVlc3Q7XG4gICAgaWYgKGluaXRpYWxSZXF1ZXN0Lm1ldGhvZCA9PT0gXCJQT1NUXCIgJiZcbiAgICAgIChpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDAgfHxcbiAgICAgICAgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZSA9PT0gMjAxIHx8XG4gICAgICAgIGluaXRpYWxSZXNwb25zZVN0YXR1c0NvZGUgPT09IDIwMikpIHtcbiAgICAgIGdldFJlc291cmNlUmVxdWVzdFVybCA9IGxyb1BvbGxTdGF0ZS5sb2NhdGlvbkhlYWRlclZhbHVlITtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0UmVzb3VyY2VSZXF1ZXN0VXJsID0gaW5pdGlhbFJlcXVlc3QudXJsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51cGRhdGVTdGF0ZShnZXRSZXNvdXJjZVJlcXVlc3RVcmwsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEF6dXJlQXN5bmNPcGVyYXRpb25IZWFkZXJWYWx1ZShyZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiYXp1cmUtYXN5bmNvcGVyYXRpb25cIik7XG59XG5cbi8qKlxuICogQSBsb25nLXJ1bm5pbmcgb3BlcmF0aW9uIHBvbGxpbmcgc3RyYXRlZ3kgdGhhdCBpcyBiYXNlZCBvbiB0aGUgYXp1cmUtYXN5bmNvcGVyYXRpb24gaGVhZGVyLlxuICovXG5jbGFzcyBBenVyZUFzeW5jT3BlcmF0aW9uTFJPUG9sbFN0cmF0ZWd5IGV4dGVuZHMgTFJPUG9sbFN0cmF0ZWd5IHtcbiAgLyoqXG4gICAqIFJldHJpZXZlIG9wZXJhdGlvbiBzdGF0dXMgYnkgcG9sbGluZyBmcm9tIFwiYXp1cmUtYXN5bmNvcGVyYXRpb25cIiBoZWFkZXIuXG4gICAqIEBwYXJhbSB7UG9sbGluZ1N0YXRlfSBwb2xsaW5nU3RhdGUgLSBUaGUgb2JqZWN0IHRvIHBlcnNpc3QgY3VycmVudCBvcGVyYXRpb24gc3RhdGUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5Qb3N0T3JEZWxldGUgLSBJbnZva2VkIGJ5IFBvc3QgT3IgRGVsZXRlIG9wZXJhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBzZW5kUG9sbFJlcXVlc3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbHJvUG9sbFN0YXRlOiBMUk9Qb2xsU3RhdGUgPSB0aGlzLl9wb2xsU3RhdGU7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlT3BlcmF0aW9uU3RhdHVzKGxyb1BvbGxTdGF0ZS5henVyZUFzeW5jT3BlcmF0aW9uSGVhZGVyVmFsdWUhLCBmYWxzZSkudGhlbigocmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3Qgc3RhdHVzQ29kZTogbnVtYmVyID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgY29uc3QgcGFyc2VkUmVzcG9uc2U6IGFueSA9IHJlc3BvbnNlLnBhcnNlZEJvZHk7XG4gICAgICBpZiAoc3RhdHVzQ29kZSAhPT0gMjAwICYmIHN0YXR1c0NvZGUgIT09IDIwMSAmJiBzdGF0dXNDb2RlICE9PSAyMDIgJiYgc3RhdHVzQ29kZSAhPT0gMjA0KSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFJlc3RFcnJvcihgSW52YWxpZCBzdGF0dXMgY29kZSAoJHtzdGF0dXNDb2RlfSkgd2l0aCByZXNwb25zZSBib2R5IFwiJHtyZXNwb25zZS5ib2R5QXNUZXh0fVwiIG9jY3VycmVkIHdoZW4gcG9sbGluZyBmb3Igb3BlcmF0aW9uIHN0YXR1cy5gKTtcbiAgICAgICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgICAgIGVycm9yLnJlcXVlc3QgPSBzdHJpcFJlcXVlc3QocmVzcG9uc2UucmVxdWVzdCk7XG4gICAgICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIGVycm9yLmJvZHkgPSBwYXJzZWRSZXNwb25zZTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyc2VkUmVzcG9uc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlc3BvbnNlIGZyb20gbG9uZyBydW5uaW5nIG9wZXJhdGlvbiBkb2VzIG5vdCBjb250YWluIGEgYm9keS5cIik7XG4gICAgICB9IGVsc2UgaWYgKCFwYXJzZWRSZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgcmVzcG9uc2UgXCIke3Jlc3BvbnNlLmJvZHlBc1RleHR9XCIgZnJvbSBsb25nIHJ1bm5pbmcgb3BlcmF0aW9uIGRvZXMgbm90IGNvbnRhaW4gdGhlIHN0YXR1cyBwcm9wZXJ0eS5gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYXp1cmVBc3luY09wZXJhdGlvbkhlYWRlclZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBnZXRBenVyZUFzeW5jT3BlcmF0aW9uSGVhZGVyVmFsdWUocmVzcG9uc2UpO1xuICAgICAgaWYgKGF6dXJlQXN5bmNPcGVyYXRpb25IZWFkZXJWYWx1ZSkge1xuICAgICAgICBscm9Qb2xsU3RhdGUuYXp1cmVBc3luY09wZXJhdGlvbkhlYWRlclZhbHVlID0gYXp1cmVBc3luY09wZXJhdGlvbkhlYWRlclZhbHVlO1xuICAgICAgfVxuXG4gICAgICBscm9Qb2xsU3RhdGUuc3RhdGUgPSBwYXJzZWRSZXNwb25zZS5zdGF0dXM7XG4gICAgICBscm9Qb2xsU3RhdGUubW9zdFJlY2VudFJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICBscm9Qb2xsU3RhdGUubW9zdFJlY2VudFJlcXVlc3QgPSByZXNwb25zZS5yZXF1ZXN0O1xuICAgICAgbHJvUG9sbFN0YXRlLnJlc291cmNlID0gZ2V0UmVzcG9uc2VCb2R5KHJlc3BvbnNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzaG91bGREb0ZpbmFsR2V0UmVzb3VyY2VSZXF1ZXN0KCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGxyb1BvbGxTdGF0ZTogTFJPUG9sbFN0YXRlID0gdGhpcy5fcG9sbFN0YXRlO1xuICAgIGNvbnN0IGluaXRpYWxSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gbHJvUG9sbFN0YXRlLmluaXRpYWxSZXNwb25zZTtcbiAgICBjb25zdCBpbml0aWFsUmVxdWVzdE1ldGhvZDogSHR0cE1ldGhvZHMgPSBpbml0aWFsUmVzcG9uc2UucmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICAgIGlmIChpbml0aWFsUmVxdWVzdE1ldGhvZCA9PT0gXCJQVVRcIiB8fCBpbml0aWFsUmVxdWVzdE1ldGhvZCA9PT0gXCJQQVRDSFwiKSB7XG4gICAgICByZXN1bHQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobHJvUG9sbFN0YXRlLmxvY2F0aW9uSGVhZGVyVmFsdWUpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZTogbnVtYmVyID0gaW5pdGlhbFJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgaWYgKGluaXRpYWxSZXF1ZXN0TWV0aG9kID09PSBcIlBPU1RcIikge1xuICAgICAgICAgIHJlc3VsdCA9IGluaXRpYWxSZXNwb25zZVN0YXR1c0NvZGUgPT09IDIwMCB8fCBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDE7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5pdGlhbFJlcXVlc3RNZXRob2QgPT09IFwiREVMRVRFXCIpIHtcbiAgICAgICAgICByZXN1bHQgPSBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDAgfHwgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZSA9PT0gMjAyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgZG9GaW5hbEdldFJlc291cmNlUmVxdWVzdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBscm9Qb2xsU3RhdGU6IExST1BvbGxTdGF0ZSA9IHRoaXMuX3BvbGxTdGF0ZTtcbiAgICBjb25zdCBsb2NhdGlvbkhlYWRlclZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBscm9Qb2xsU3RhdGUubG9jYXRpb25IZWFkZXJWYWx1ZTtcbiAgICBjb25zdCBpbml0aWFsUmVzcG9uc2U6IEh0dHBPcGVyYXRpb25SZXNwb25zZSA9IGxyb1BvbGxTdGF0ZS5pbml0aWFsUmVzcG9uc2U7XG4gICAgY29uc3QgaW5pdGlhbFJlcXVlc3Q6IFdlYlJlc291cmNlID0gaW5pdGlhbFJlc3BvbnNlLnJlcXVlc3Q7XG4gICAgbGV0IGdldFJlc291cmNlUmVxdWVzdFVybDogc3RyaW5nID0gaW5pdGlhbFJlcXVlc3QudXJsO1xuICAgIGlmIChsb2NhdGlvbkhlYWRlclZhbHVlKSB7XG4gICAgICBjb25zdCBpbml0aWFsUmVxdWVzdE1ldGhvZDogSHR0cE1ldGhvZHMgPSBpbml0aWFsUmVxdWVzdC5tZXRob2Q7XG4gICAgICBjb25zdCBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlOiBudW1iZXIgPSBpbml0aWFsUmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgaWYgKGluaXRpYWxSZXF1ZXN0TWV0aG9kID09PSBcIlBPU1RcIiAmJiAoaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZSA9PT0gMjAwIHx8IGluaXRpYWxSZXNwb25zZVN0YXR1c0NvZGUgPT09IDIwMSB8fCBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDIpKSB7XG4gICAgICAgIGdldFJlc291cmNlUmVxdWVzdFVybCA9IGxvY2F0aW9uSGVhZGVyVmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKGluaXRpYWxSZXF1ZXN0TWV0aG9kID09PSBcIkRFTEVURVwiICYmIChpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDAgfHwgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZSA9PT0gMjAyKSkge1xuICAgICAgICBnZXRSZXNvdXJjZVJlcXVlc3RVcmwgPSBsb2NhdGlvbkhlYWRlclZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy51cGRhdGVTdGF0ZShnZXRSZXNvdXJjZVJlcXVlc3RVcmwsIHRydWUpO1xuICB9XG5cbiAgcHVibGljIGlzRmluYWxTdGF0dXNBY2NlcHRhYmxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGxyb1BvbGxTdGF0ZTogTFJPUG9sbFN0YXRlID0gdGhpcy5fcG9sbFN0YXRlO1xuICAgIGNvbnN0IGluaXRpYWxSZXNwb25zZTogSHR0cE9wZXJhdGlvblJlc3BvbnNlID0gbHJvUG9sbFN0YXRlLmluaXRpYWxSZXNwb25zZTtcbiAgICBjb25zdCBpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlOiBudW1iZXIgPSBpbml0aWFsUmVzcG9uc2Uuc3RhdHVzO1xuICAgIHJldHVybiBsb25nUnVubmluZ09wZXJhdGlvblN0YXRlc0VxdWFsKGxyb1BvbGxTdGF0ZS5zdGF0ZSwgXCJTdWNjZWVkZWRcIikgfHxcbiAgICAgIChpbml0aWFsUmVzcG9uc2UucmVxdWVzdC5tZXRob2QgPT09IFwiUE9TVFwiICYmIChpbml0aWFsUmVzcG9uc2VTdGF0dXNDb2RlID09PSAyMDAgfHwgaW5pdGlhbFJlc3BvbnNlU3RhdHVzQ29kZSA9PT0gMjAxKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGxvbmctcnVubmluZyBvcGVyYXRpb24gcG9sbGluZyBzdHJhdGVneSB0aGF0IGlzIGJhc2VkIG9uIHRoZSByZXNvdXJjZSdzIHByb3Zpc2lvbmluZyBzdGF0ZS5cbiAqL1xuY2xhc3MgR2V0UmVzb3VyY2VMUk9Qb2xsU3RyYXRlZ3kgZXh0ZW5kcyBMUk9Qb2xsU3RyYXRlZ3kge1xuICBwdWJsaWMgc2VuZFBvbGxSZXF1ZXN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGxyb1BvbGxTdGF0ZTogTFJPUG9sbFN0YXRlID0gdGhpcy5fcG9sbFN0YXRlO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZU9wZXJhdGlvblN0YXR1cyhscm9Qb2xsU3RhdGUuaW5pdGlhbFJlc3BvbnNlLnJlcXVlc3QudXJsLCBmYWxzZSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgY29uc3Qgc3RhdHVzQ29kZTogbnVtYmVyID0gcmVzdWx0LnN0YXR1cztcbiAgICAgIGNvbnN0IHJlc3BvbnNlQm9keTogYW55ID0gcmVzdWx0LnBhcnNlZEJvZHk7XG4gICAgICBpZiAoc3RhdHVzQ29kZSAhPT0gMjAwICYmIHN0YXR1c0NvZGUgIT09IDIwMSAmJiBzdGF0dXNDb2RlICE9PSAyMDIgJiYgc3RhdHVzQ29kZSAhPT0gMjA0KSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFJlc3RFcnJvcihgSW52YWxpZCBzdGF0dXMgY29kZSB3aXRoIHJlc3BvbnNlIGJvZHkgXCIke3Jlc3VsdC5ib2R5QXNUZXh0fVwiIG9jY3VycmVkIHdoZW4gcG9sbGluZyBmb3Igb3BlcmF0aW9uIHN0YXR1cy5gKTtcbiAgICAgICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgICAgIGVycm9yLnJlcXVlc3QgPSBzdHJpcFJlcXVlc3QocmVzdWx0LnJlcXVlc3QpO1xuICAgICAgICBlcnJvci5yZXNwb25zZSA9IHJlc3VsdDtcbiAgICAgICAgZXJyb3IuYm9keSA9IHJlc3BvbnNlQm9keTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzdWx0LnBhcnNlZEJvZHkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlc3BvbnNlIGZyb20gbG9uZyBydW5uaW5nIG9wZXJhdGlvbiBkb2VzIG5vdCBjb250YWluIGEgYm9keS5cIik7XG4gICAgICB9XG5cbiAgICAgIGxyb1BvbGxTdGF0ZS5zdGF0ZSA9IGdldFByb3Zpc2lvbmluZ1N0YXRlKHJlc3VsdC5wYXJzZWRCb2R5KSB8fCBcIlN1Y2NlZWRlZFwiO1xuICAgICAgbHJvUG9sbFN0YXRlLm1vc3RSZWNlbnRSZXNwb25zZSA9IHJlc3VsdDtcbiAgICAgIGxyb1BvbGxTdGF0ZS5tb3N0UmVjZW50UmVxdWVzdCA9IHJlc3VsdC5yZXF1ZXN0O1xuICAgICAgbHJvUG9sbFN0YXRlLnJlc291cmNlID0gZ2V0UmVzcG9uc2VCb2R5KHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgaXNGaW5hbFN0YXR1c0FjY2VwdGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGxvbmdSdW5uaW5nT3BlcmF0aW9uU3RhdGVzRXF1YWwodGhpcy5fcG9sbFN0YXRlLnN0YXRlLCBcIlN1Y2NlZWRlZFwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkb0ZpbmFsR2V0UmVzb3VyY2VSZXF1ZXN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnNlbmRQb2xsUmVxdWVzdCgpO1xuICB9XG59XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/lib/util/constants.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/lib/util/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvbGliL3V0aWwvY29uc3RhbnRzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1henVyZS1qcy9saWIvdXRpbC9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQWUvRjs7Ozs7R0FLRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDO0FBRXhDOzs7O0dBSUc7QUFDVSxRQUFBLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuLyoqXG4gKiBEZWZpbmVzIGNvbnN0YW50cyBmb3IgbG9uZyBydW5uaW5nIG9wZXJhdGlvbiBzdGF0ZXMuXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5leHBvcnQgdHlwZSBMb25nUnVubmluZ09wZXJhdGlvblN0YXRlcyA9XG4gIHwgXCJJblByb2dyZXNzXCJcbiAgfCBcIlN1Y2NlZWRlZFwiXG4gIHwgXCJGYWlsZWRcIlxuICB8IFwiQ2FuY2VsZWRcIlxuICB8IFwiQ2FuY2VsbGVkXCI7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbGFuZ3VhZ2UgaW4gdGhlIHJlcXVlc3QgaGVhZGVyLlxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfTEFOR1VBR0UgPSBcImVuLXVzXCI7XG5cbi8qKlxuICogVGhlIG1zLXJlc3QtYXp1cmUgdmVyc2lvbi5cbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IG1zUmVzdEF6dXJlVmVyc2lvbiA9IFwiMi4xLjBcIjtcbiJdfQ==
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-azure-js/lib/util/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvbGliL3V0aWwvY29uc3RhbnRzLnRzIiwic291cmNlcyI6WyIvZGF0YS9qcy12YXJpYW50cy9tdWx0ZWUvT3JpZ2luYWwvbXMtcmVzdC1henVyZS1qcy9saWIvdXRpbC9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrRkFBK0Y7OztBQWUvRjs7Ozs7R0FLRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDO0FBRXhDOzs7O0dBSUc7QUFDVSxRQUFBLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuLyoqXG4gKiBEZWZpbmVzIGNvbnN0YW50cyBmb3IgbG9uZyBydW5uaW5nIG9wZXJhdGlvbiBzdGF0ZXMuXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5leHBvcnQgdHlwZSBMb25nUnVubmluZ09wZXJhdGlvblN0YXRlcyA9XG4gIHwgXCJJblByb2dyZXNzXCJcbiAgfCBcIlN1Y2NlZWRlZFwiXG4gIHwgXCJGYWlsZWRcIlxuICB8IFwiQ2FuY2VsZWRcIlxuICB8IFwiQ2FuY2VsbGVkXCI7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbGFuZ3VhZ2UgaW4gdGhlIHJlcXVlc3QgaGVhZGVyLlxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfTEFOR1VBR0UgPSBcImVuLXVzXCI7XG5cbi8qKlxuICogVGhlIG1zLXJlc3QtYXp1cmUgdmVyc2lvbi5cbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IG1zUmVzdEF6dXJlVmVyc2lvbiA9IFwiMi4xLjBcIjtcbiJdfQ=='
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/test/msAssert.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvdGVzdC9tc0Fzc2VydC50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvdGVzdC9tc0Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiwwREFBNEI7QUFFNUI7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsTUFBTSxDQUFDLFlBQXdCLEVBQUUsYUFBZ0Q7SUFDL0YsSUFBSSxXQUE4QixDQUFDO0lBRW5DLElBQUk7UUFDRixZQUFZLEVBQUUsQ0FBQztLQUNoQjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsV0FBVyxHQUFHLEtBQUssQ0FBQztLQUNyQjtJQUVELElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDaEIsZ0JBQU0sQ0FBQyxNQUFNLENBQUMsY0FBUSxDQUFDLENBQUMsQ0FBQztLQUMxQjtTQUFNLElBQUksYUFBYSxZQUFZLEtBQUssRUFBRTtRQUN6QyxnQkFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDcEQ7U0FBTSxJQUFJLGFBQWEsRUFBRTtRQUN4QixhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLFdBQVksQ0FBQztBQUN0QixDQUFDO0FBbEJELHdCQWtCQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQXNCLFdBQVcsQ0FBSSxhQUE4QyxFQUFFLGFBQWdEOzs7Ozs7O29CQUlqSSxxQkFBTSxDQUFDLE9BQU8sYUFBYSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFBOztvQkFBN0UsU0FBNkUsQ0FBQzs7OztvQkFFOUUsV0FBVyxHQUFHLE9BQUssQ0FBQzs7O29CQUd0QixJQUFJLENBQUMsV0FBVyxFQUFFO3dCQUNoQixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFRLENBQUMsQ0FBQyxDQUFDO3FCQUMxQjt5QkFBTSxJQUFJLGFBQWEsWUFBWSxLQUFLLEVBQUU7d0JBQ3pDLGdCQUFNLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztxQkFDcEQ7eUJBQU0sSUFBSSxhQUFhLEVBQUU7d0JBQ3hCLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztxQkFDNUI7b0JBRUQsc0JBQU8sV0FBWSxFQUFDOzs7O0NBQ3JCO0FBbEJELGtDQWtCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3ZpZGVkIHN5bmNGdW5jdGlvbiB0aHJvd3MgYW4gRXJyb3IuIElmIHRoZSBleHBlY3RlZEVycm9yIGlzIHVuZGVmaW5lZCwgdGhlblxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGp1c3QgYXNzZXJ0IHRoYXQgYW4gRXJyb3Igd2FzIHRocm93bi4gSWYgdGhlIGV4cGVjdGVkRXJyb3IgaXMgZGVmaW5lZCwgdGhlblxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGFzc2VydCB0aGF0IHRoZSBFcnJvciB0aGF0IHdhcyB0aHJvd24gaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGV4cGVjdGVkRXJyb3IuXG4gKiBAcGFyYW0gc3luY0Z1bmN0aW9uIFRoZSBzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHRocm93biBhbiBFcnJvci5cbiAqIEBwYXJhbSBleHBlY3RlZEVycm9yIFRoZSBFcnJvciB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIHRocm93bi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93cyhzeW5jRnVuY3Rpb246ICgpID0+IHZvaWQsIGV4cGVjdGVkRXJyb3I/OiAoKGVycm9yOiBFcnJvcikgPT4gdm9pZCkgfCBFcnJvcik6IEVycm9yIHtcbiAgbGV0IHRocm93bkVycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIHN5bmNGdW5jdGlvbigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93bkVycm9yID0gZXJyb3I7XG4gIH1cblxuICBpZiAoIXRocm93bkVycm9yKSB7XG4gICAgYXNzZXJ0LnRocm93cygoKSA9PiB7IH0pO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwodGhyb3duRXJyb3IsIGV4cGVjdGVkRXJyb3IpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkRXJyb3IpIHtcbiAgICBleHBlY3RlZEVycm9yKHRocm93bkVycm9yKTtcbiAgfVxuXG4gIHJldHVybiB0aHJvd25FcnJvciE7XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3ZpZGVkIGFzeW5jRnVuY3Rpb24gdGhyb3dzIGFuIEVycm9yLiBJZiB0aGUgZXhwZWN0ZWRFcnJvciBpcyB1bmRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBqdXN0IGFzc2VydCB0aGF0IGFuIEVycm9yIHdhcyB0aHJvd24uIElmIHRoZSBleHBlY3RlZEVycm9yIGlzIGRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBhc3NlcnQgdGhhdCB0aGUgRXJyb3IgdGhhdCB3YXMgdGhyb3duIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBleHBlY3RlZEVycm9yLlxuICogQHBhcmFtIGFzeW5jRnVuY3Rpb24gVGhlIGFzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHRocm93biBhbiBFcnJvci5cbiAqIEBwYXJhbSBleHBlY3RlZEVycm9yIFRoZSBFcnJvciB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIHRocm93bi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRocm93c0FzeW5jPFQ+KGFzeW5jRnVuY3Rpb246ICgoKSA9PiBQcm9taXNlPFQ+KSB8IFByb21pc2U8VD4sIGV4cGVjdGVkRXJyb3I/OiAoKGVycm9yOiBFcnJvcikgPT4gdm9pZCkgfCBFcnJvcik6IFByb21pc2U8RXJyb3I+IHtcbiAgbGV0IHRocm93bkVycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGF3YWl0ICh0eXBlb2YgYXN5bmNGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gYXN5bmNGdW5jdGlvbigpIDogYXN5bmNGdW5jdGlvbik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3duRXJyb3IgPSBlcnJvcjtcbiAgfVxuXG4gIGlmICghdGhyb3duRXJyb3IpIHtcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHsgfSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRFcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCh0aHJvd25FcnJvciwgZXhwZWN0ZWRFcnJvcik7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRFcnJvcikge1xuICAgIGV4cGVjdGVkRXJyb3IodGhyb3duRXJyb3IpO1xuICB9XG5cbiAgcmV0dXJuIHRocm93bkVycm9yITtcbn0iXX0=
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/test/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvdGVzdC9tc0Fzc2VydC50cyIsInNvdXJjZXMiOlsiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvdGVzdC9tc0Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREO0FBQzVELCtGQUErRjs7OztBQUUvRiwwREFBNEI7QUFFNUI7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsTUFBTSxDQUFDLFlBQXdCLEVBQUUsYUFBZ0Q7SUFDL0YsSUFBSSxXQUE4QixDQUFDO0lBRW5DLElBQUk7UUFDRixZQUFZLEVBQUUsQ0FBQztLQUNoQjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsV0FBVyxHQUFHLEtBQUssQ0FBQztLQUNyQjtJQUVELElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDaEIsZ0JBQU0sQ0FBQyxNQUFNLENBQUMsY0FBUSxDQUFDLENBQUMsQ0FBQztLQUMxQjtTQUFNLElBQUksYUFBYSxZQUFZLEtBQUssRUFBRTtRQUN6QyxnQkFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDcEQ7U0FBTSxJQUFJLGFBQWEsRUFBRTtRQUN4QixhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLFdBQVksQ0FBQztBQUN0QixDQUFDO0FBbEJELHdCQWtCQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQXNCLFdBQVcsQ0FBSSxhQUE4QyxFQUFFLGFBQWdEOzs7Ozs7O29CQUlqSSxxQkFBTSxDQUFDLE9BQU8sYUFBYSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFBOztvQkFBN0UsU0FBNkUsQ0FBQzs7OztvQkFFOUUsV0FBVyxHQUFHLE9BQUssQ0FBQzs7O29CQUd0QixJQUFJLENBQUMsV0FBVyxFQUFFO3dCQUNoQixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFRLENBQUMsQ0FBQyxDQUFDO3FCQUMxQjt5QkFBTSxJQUFJLGFBQWEsWUFBWSxLQUFLLEVBQUU7d0JBQ3pDLGdCQUFNLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztxQkFDcEQ7eUJBQU0sSUFBSSxhQUFhLEVBQUU7d0JBQ3hCLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztxQkFDNUI7b0JBRUQsc0JBQU8sV0FBWSxFQUFDOzs7O0NBQ3JCO0FBbEJELGtDQWtCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3ZpZGVkIHN5bmNGdW5jdGlvbiB0aHJvd3MgYW4gRXJyb3IuIElmIHRoZSBleHBlY3RlZEVycm9yIGlzIHVuZGVmaW5lZCwgdGhlblxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGp1c3QgYXNzZXJ0IHRoYXQgYW4gRXJyb3Igd2FzIHRocm93bi4gSWYgdGhlIGV4cGVjdGVkRXJyb3IgaXMgZGVmaW5lZCwgdGhlblxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGFzc2VydCB0aGF0IHRoZSBFcnJvciB0aGF0IHdhcyB0aHJvd24gaXMgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGV4cGVjdGVkRXJyb3IuXG4gKiBAcGFyYW0gc3luY0Z1bmN0aW9uIFRoZSBzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHRocm93biBhbiBFcnJvci5cbiAqIEBwYXJhbSBleHBlY3RlZEVycm9yIFRoZSBFcnJvciB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIHRocm93bi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93cyhzeW5jRnVuY3Rpb246ICgpID0+IHZvaWQsIGV4cGVjdGVkRXJyb3I/OiAoKGVycm9yOiBFcnJvcikgPT4gdm9pZCkgfCBFcnJvcik6IEVycm9yIHtcbiAgbGV0IHRocm93bkVycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIHN5bmNGdW5jdGlvbigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93bkVycm9yID0gZXJyb3I7XG4gIH1cblxuICBpZiAoIXRocm93bkVycm9yKSB7XG4gICAgYXNzZXJ0LnRocm93cygoKSA9PiB7IH0pO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwodGhyb3duRXJyb3IsIGV4cGVjdGVkRXJyb3IpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkRXJyb3IpIHtcbiAgICBleHBlY3RlZEVycm9yKHRocm93bkVycm9yKTtcbiAgfVxuXG4gIHJldHVybiB0aHJvd25FcnJvciE7XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3ZpZGVkIGFzeW5jRnVuY3Rpb24gdGhyb3dzIGFuIEVycm9yLiBJZiB0aGUgZXhwZWN0ZWRFcnJvciBpcyB1bmRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBqdXN0IGFzc2VydCB0aGF0IGFuIEVycm9yIHdhcyB0aHJvd24uIElmIHRoZSBleHBlY3RlZEVycm9yIGlzIGRlZmluZWQsIHRoZW5cbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBhc3NlcnQgdGhhdCB0aGUgRXJyb3IgdGhhdCB3YXMgdGhyb3duIGlzIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBleHBlY3RlZEVycm9yLlxuICogQHBhcmFtIGFzeW5jRnVuY3Rpb24gVGhlIGFzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHRocm93biBhbiBFcnJvci5cbiAqIEBwYXJhbSBleHBlY3RlZEVycm9yIFRoZSBFcnJvciB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIHRocm93bi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRocm93c0FzeW5jPFQ+KGFzeW5jRnVuY3Rpb246ICgoKSA9PiBQcm9taXNlPFQ+KSB8IFByb21pc2U8VD4sIGV4cGVjdGVkRXJyb3I/OiAoKGVycm9yOiBFcnJvcikgPT4gdm9pZCkgfCBFcnJvcik6IFByb21pc2U8RXJyb3I+IHtcbiAgbGV0IHRocm93bkVycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGF3YWl0ICh0eXBlb2YgYXN5bmNGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gYXN5bmNGdW5jdGlvbigpIDogYXN5bmNGdW5jdGlvbik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3duRXJyb3IgPSBlcnJvcjtcbiAgfVxuXG4gIGlmICghdGhyb3duRXJyb3IpIHtcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHsgfSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRFcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCh0aHJvd25FcnJvciwgZXhwZWN0ZWRFcnJvcik7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRFcnJvcikge1xuICAgIGV4cGVjdGVkRXJyb3IodGhyb3duRXJyb3IpO1xuICB9XG5cbiAgcmV0dXJuIHRocm93bkVycm9yITtcbn0iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/lib/cloudError.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvbGliL2Nsb3VkRXJyb3IudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWF6dXJlLWpzL2xpYi9jbG91ZEVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFtRGxGLFFBQUEsZ0JBQWdCLEdBQW9CO0lBQy9DLGNBQWMsRUFBRSxZQUFZO0lBQzVCLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxXQUFXO1FBQ2pCLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLGVBQWUsRUFBRTtZQUNmLElBQUksRUFBRTtnQkFDSixRQUFRLEVBQUUsSUFBSTtnQkFDZCxjQUFjLEVBQUUsTUFBTTtnQkFDdEIsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxRQUFRO2lCQUNmO2FBQ0Y7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsUUFBUSxFQUFFLElBQUk7Z0JBQ2QsY0FBYyxFQUFFLFNBQVM7Z0JBQ3pCLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsUUFBUTtpQkFDZjthQUNGO1lBQ0QsTUFBTSxFQUFFO2dCQUNOLGNBQWMsRUFBRSxRQUFRO2dCQUN4QixJQUFJLEVBQUU7b0JBQ0osSUFBSSxFQUFFLFFBQVE7aUJBQ2Y7YUFDRjtZQUNELE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsU0FBUztnQkFDekIsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxVQUFVO29CQUNoQixPQUFPLEVBQUU7d0JBQ1AsY0FBYyxFQUFFLHVCQUF1Qjt3QkFDdkMsSUFBSSxFQUFFOzRCQUNKLElBQUksRUFBRSxXQUFXOzRCQUNqQixTQUFTLEVBQUUsWUFBWTt5QkFDeEI7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELFVBQVUsRUFBRTtnQkFDVixRQUFRLEVBQUUsS0FBSztnQkFDZixjQUFjLEVBQUUsWUFBWTtnQkFDNUIsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxRQUFRO2lCQUNmO2FBQ0Y7WUFDRCxjQUFjLEVBQUU7Z0JBQ2QsUUFBUSxFQUFFLEtBQUs7Z0JBQ2YsY0FBYyxFQUFFLGdCQUFnQjtnQkFDaEMsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxXQUFXO29CQUNqQixTQUFTLEVBQUUsdUJBQXVCO29CQUNsQyxlQUFlLEVBQUU7d0JBQ2YsSUFBSSxFQUFFOzRCQUNKLFFBQVEsRUFBRSxJQUFJOzRCQUNkLGNBQWMsRUFBRSxNQUFNOzRCQUN0QixJQUFJLEVBQUU7Z0NBQ0osSUFBSSxFQUFFLFFBQVE7NkJBQ2Y7eUJBQ0Y7d0JBQ0QsSUFBSSxFQUFFOzRCQUNKLFFBQVEsRUFBRSxLQUFLOzRCQUNmLGNBQWMsRUFBRSxNQUFNOzRCQUN0QixJQUFJLEVBQUU7Z0NBQ0osSUFBSSxFQUFFLFFBQVE7NkJBQ2Y7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBDb21wb3NpdGVNYXBwZXIgfSBmcm9tIFwiQGF6dXJlL21zLXJlc3QtanNcIjtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIFByb3ZpZGVzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgYW4gaHR0cCBlcnJvciByZXNwb25zZSByZXR1cm5lZCBmcm9tIGEgTWljcm9zb2Z0IEF6dXJlIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvdWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb2RlIFRoZSBlcnJvciBjb2RlIHBhcnNlZCBmcm9tIHRoZSBib2R5IG9mIHRoZSBodHRwIGVycm9yIHJlc3BvbnNlLlxuICAgKi9cbiAgY29kZTogc3RyaW5nO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UgcGFyc2VkIGZyb20gdGhlIGJvZHkgb2YgdGhlIGh0dHAgZXJyb3IgcmVzcG9uc2UuXG4gICAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3RhcmdldF0gVGhlIHRhcmdldCBvZiB0aGUgZXJyb3IuXG4gICAqL1xuICB0YXJnZXQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge0FycmF5PENsb3VkRXJyb3I+fSBbZGV0YWlsc10gQW4gYXJyYXkgb2YgQ2xvdWRFcnJvciBvYmplY3RzIHNwZWNpZnlpbmcgdGhlIGRldGFpbHMuXG4gICAqL1xuICBkZXRhaWxzPzogQXJyYXk8Q2xvdWRFcnJvcj47XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge2FueX0gW2lubmVyRXJyb3JdIFRoZSBpbm5lciBlcnJvciBwYXJzZWQgZnJvbSB0aGUgYm9keSBvZiB0aGUgaHR0cCBlcnJvciByZXNwb25zZVxuICAgKi9cbiAgaW5uZXJFcnJvcj86IGFueTtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7QWRkaXRpb25hbEluZm9FbGVtZW50fSBbaW5uZXJFcnJvcl0gVGhlIGFkZGl0aW9uYWwgZXJyb3IgaW5mb3JtYXRpb25cbiAgICovXG4gIGFkZGl0aW9uYWxJbmZvPzogQWRkaXRpb25hbEluZm9FbGVtZW50O1xufVxuXG4vKipcbiAqIEBpbnRlcmZhY2VcbiAqIEFkZGl0aW9uYWwgZGF0YSBmb3IgYW4gaW5zdGFuY2Ugb2YgQ2xvdWRFcnJvci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZGRpdGlvbmFsSW5mb0VsZW1lbnQge1xuICAvKipcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0eXBlXSBUeXBlIG9mIHRoZSBkYXRhLlxuICAgKi9cbiAgdHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpbmZvXSBBZGRpdGlvbmFsIGluZm8uXG4gICAqL1xuICBpbmZvPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgQ2xvdWRFcnJvck1hcHBlcjogQ29tcG9zaXRlTWFwcGVyID0ge1xuICBzZXJpYWxpemVkTmFtZTogXCJDbG91ZEVycm9yXCIsXG4gIHR5cGU6IHtcbiAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgIGNsYXNzTmFtZTogXCJDbG91ZEVycm9yXCIsXG4gICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICBjb2RlOiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb2RlXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJtZXNzYWdlXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwidGFyZ2V0XCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXRhaWxzOiB7XG4gICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRldGFpbHNcIixcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgIG5hbWU6IFwiU2VxdWVuY2VcIixcbiAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDbG91ZEVycm9yRWxlbWVudFR5cGVcIixcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkNsb3VkRXJyb3JcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGlubmVyRXJyb3I6IHtcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJpbm5lcmVycm9yXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIk9iamVjdFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhZGRpdGlvbmFsSW5mbzoge1xuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImFkZGl0aW9uYWxJbmZvXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJBZGRpdGlvbmFsSW5mb0VsZW1lbnRcIixcbiAgICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcInR5cGVcIixcbiAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJpbmZvXCIsXG4gICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk9iamVjdFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iXX0=
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/lib/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvbGliL2Nsb3VkRXJyb3IudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWF6dXJlLWpzL2xpYi9jbG91ZEVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFtRGxGLFFBQUEsZ0JBQWdCLEdBQW9CO0lBQy9DLGNBQWMsRUFBRSxZQUFZO0lBQzVCLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxXQUFXO1FBQ2pCLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLGVBQWUsRUFBRTtZQUNmLElBQUksRUFBRTtnQkFDSixRQUFRLEVBQUUsSUFBSTtnQkFDZCxjQUFjLEVBQUUsTUFBTTtnQkFDdEIsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxRQUFRO2lCQUNmO2FBQ0Y7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsUUFBUSxFQUFFLElBQUk7Z0JBQ2QsY0FBYyxFQUFFLFNBQVM7Z0JBQ3pCLElBQUksRUFBRTtvQkFDSixJQUFJLEVBQUUsUUFBUTtpQkFDZjthQUNGO1lBQ0QsTUFBTSxFQUFFO2dCQUNOLGNBQWMsRUFBRSxRQUFRO2dCQUN4QixJQUFJLEVBQUU7b0JBQ0osSUFBSSxFQUFFLFFBQVE7aUJBQ2Y7YUFDRjtZQUNELE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsU0FBUztnQkFDekIsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxVQUFVO29CQUNoQixPQUFPLEVBQUU7d0JBQ1AsY0FBYyxFQUFFLHVCQUF1Qjt3QkFDdkMsSUFBSSxFQUFFOzRCQUNKLElBQUksRUFBRSxXQUFXOzRCQUNqQixTQUFTLEVBQUUsWUFBWTt5QkFDeEI7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELFVBQVUsRUFBRTtnQkFDVixRQUFRLEVBQUUsS0FBSztnQkFDZixjQUFjLEVBQUUsWUFBWTtnQkFDNUIsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxRQUFRO2lCQUNmO2FBQ0Y7WUFDRCxjQUFjLEVBQUU7Z0JBQ2QsUUFBUSxFQUFFLEtBQUs7Z0JBQ2YsY0FBYyxFQUFFLGdCQUFnQjtnQkFDaEMsSUFBSSxFQUFFO29CQUNKLElBQUksRUFBRSxXQUFXO29CQUNqQixTQUFTLEVBQUUsdUJBQXVCO29CQUNsQyxlQUFlLEVBQUU7d0JBQ2YsSUFBSSxFQUFFOzRCQUNKLFFBQVEsRUFBRSxJQUFJOzRCQUNkLGNBQWMsRUFBRSxNQUFNOzRCQUN0QixJQUFJLEVBQUU7Z0NBQ0osSUFBSSxFQUFFLFFBQVE7NkJBQ2Y7eUJBQ0Y7d0JBQ0QsSUFBSSxFQUFFOzRCQUNKLFFBQVEsRUFBRSxLQUFLOzRCQUNmLGNBQWMsRUFBRSxNQUFNOzRCQUN0QixJQUFJLEVBQUU7Z0NBQ0osSUFBSSxFQUFFLFFBQVE7NkJBQ2Y7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBDb21wb3NpdGVNYXBwZXIgfSBmcm9tIFwiQGF6dXJlL21zLXJlc3QtanNcIjtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIFByb3ZpZGVzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgYW4gaHR0cCBlcnJvciByZXNwb25zZSByZXR1cm5lZCBmcm9tIGEgTWljcm9zb2Z0IEF6dXJlIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvdWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb2RlIFRoZSBlcnJvciBjb2RlIHBhcnNlZCBmcm9tIHRoZSBib2R5IG9mIHRoZSBodHRwIGVycm9yIHJlc3BvbnNlLlxuICAgKi9cbiAgY29kZTogc3RyaW5nO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UgcGFyc2VkIGZyb20gdGhlIGJvZHkgb2YgdGhlIGh0dHAgZXJyb3IgcmVzcG9uc2UuXG4gICAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3RhcmdldF0gVGhlIHRhcmdldCBvZiB0aGUgZXJyb3IuXG4gICAqL1xuICB0YXJnZXQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge0FycmF5PENsb3VkRXJyb3I+fSBbZGV0YWlsc10gQW4gYXJyYXkgb2YgQ2xvdWRFcnJvciBvYmplY3RzIHNwZWNpZnlpbmcgdGhlIGRldGFpbHMuXG4gICAqL1xuICBkZXRhaWxzPzogQXJyYXk8Q2xvdWRFcnJvcj47XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge2FueX0gW2lubmVyRXJyb3JdIFRoZSBpbm5lciBlcnJvciBwYXJzZWQgZnJvbSB0aGUgYm9keSBvZiB0aGUgaHR0cCBlcnJvciByZXNwb25zZVxuICAgKi9cbiAgaW5uZXJFcnJvcj86IGFueTtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7QWRkaXRpb25hbEluZm9FbGVtZW50fSBbaW5uZXJFcnJvcl0gVGhlIGFkZGl0aW9uYWwgZXJyb3IgaW5mb3JtYXRpb25cbiAgICovXG4gIGFkZGl0aW9uYWxJbmZvPzogQWRkaXRpb25hbEluZm9FbGVtZW50O1xufVxuXG4vKipcbiAqIEBpbnRlcmZhY2VcbiAqIEFkZGl0aW9uYWwgZGF0YSBmb3IgYW4gaW5zdGFuY2Ugb2YgQ2xvdWRFcnJvci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZGRpdGlvbmFsSW5mb0VsZW1lbnQge1xuICAvKipcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0eXBlXSBUeXBlIG9mIHRoZSBkYXRhLlxuICAgKi9cbiAgdHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtpbmZvXSBBZGRpdGlvbmFsIGluZm8uXG4gICAqL1xuICBpbmZvPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgQ2xvdWRFcnJvck1hcHBlcjogQ29tcG9zaXRlTWFwcGVyID0ge1xuICBzZXJpYWxpemVkTmFtZTogXCJDbG91ZEVycm9yXCIsXG4gIHR5cGU6IHtcbiAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgIGNsYXNzTmFtZTogXCJDbG91ZEVycm9yXCIsXG4gICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICBjb2RlOiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb2RlXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJtZXNzYWdlXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwidGFyZ2V0XCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXRhaWxzOiB7XG4gICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRldGFpbHNcIixcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgIG5hbWU6IFwiU2VxdWVuY2VcIixcbiAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDbG91ZEVycm9yRWxlbWVudFR5cGVcIixcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkNsb3VkRXJyb3JcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGlubmVyRXJyb3I6IHtcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJpbm5lcmVycm9yXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIk9iamVjdFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhZGRpdGlvbmFsSW5mbzoge1xuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImFkZGl0aW9uYWxJbmZvXCIsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJBZGRpdGlvbmFsSW5mb0VsZW1lbnRcIixcbiAgICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcInR5cGVcIixcbiAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJpbmZvXCIsXG4gICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk9iamVjdFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/test/cloudErrorTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/test/data:application/json;charset=utf-8;base64,'
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/test/credentials/cognitiveServicesCredentialsTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/test/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvdGVzdC9jcmVkZW50aWFscy9jb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzVGVzdHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWF6dXJlLWpzL3Rlc3QvY3JlZGVudGlhbHMvY29nbml0aXZlU2VydmljZXNDcmVkZW50aWFsc1Rlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFFL0YsMERBQTRCO0FBQzVCLGdEQUFnRDtBQUNoRCxtR0FBa0c7QUFDbEcsNERBQXdDO0FBRXhDLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRTtJQUN2QyxRQUFRLENBQUMsZUFBZSxFQUFFO1FBQ3hCLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtZQUNwQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxJQUFJLDJEQUE0QixDQUFDLFNBQWdCLENBQUMsRUFBbEQsQ0FBa0QsRUFDdEUsSUFBSSxLQUFLLENBQUMseUVBQXlFLENBQUMsQ0FBQyxDQUFDO1FBQzFGLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1lBQy9CLDJDQUEyQztZQUMzQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxJQUFJLDJEQUE0QixDQUFDLElBQVcsQ0FBQyxFQUE3QyxDQUE2QyxFQUNqRSxJQUFJLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDLENBQUM7UUFDMUYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOEJBQThCLEVBQUU7WUFDakMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsSUFBSSwyREFBNEIsQ0FBQyxFQUFTLENBQUMsRUFBM0MsQ0FBMkMsRUFDL0QsSUFBSSxLQUFLLENBQUMseUVBQXlFLENBQUMsQ0FBQyxDQUFDO1FBQzFGLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1lBQ2hDLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBTSxPQUFBLElBQUksMkRBQTRCLENBQUMsRUFBRSxDQUFDLEVBQXBDLENBQW9DLEVBQ3hELElBQUksS0FBSyxDQUFDLHlFQUF5RSxDQUFDLENBQUMsQ0FBQztRQUMxRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTs7Ozs7d0JBQzlCLFdBQVcsR0FBRyxJQUFJLDJEQUE0QixDQUFDLHVCQUF1QixDQUFDLENBQUM7d0JBQ3hFLFdBQVcsR0FBRyxJQUFJLHdCQUFXLEVBQUUsQ0FBQzt3QkFDQyxxQkFBTSxXQUFXLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxFQUFBOzt3QkFBM0UsaUJBQWlCLEdBQWdCLFNBQTBDO3dCQUNqRixnQkFBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxXQUFXLENBQUMsQ0FBQzt3QkFDbkQsZ0JBQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFOzRCQUN2RCwyQkFBMkIsRUFBRSx1QkFBdUI7NEJBQ3BELHVCQUF1QixFQUFFLFVBQVU7eUJBQ3BDLENBQUMsQ0FBQzs7OzthQUNKLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2UgfSBmcm9tIFwiQGF6dXJlL21zLXJlc3QtanNcIjtcbmltcG9ydCB7IENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi4vLi4vbGliL2NyZWRlbnRpYWxzL2NvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHNcIjtcbmltcG9ydCAqIGFzIG1zQXNzZXJ0IGZyb20gXCIuLi9tc0Fzc2VydFwiO1xuXG5kZXNjcmliZShcIkNvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHNcIiwgKCkgPT4ge1xuICBkZXNjcmliZShcImNvbnN0cnVjdG9yKClcIiwgKCkgPT4ge1xuICAgIGl0KFwid2l0aCB1bmRlZmluZWQgc3Vic2NyaXB0aW9uIGtleVwiLCAoKSA9PiB7XG4gICAgICBtc0Fzc2VydC50aHJvd3MoKCkgPT4gbmV3IENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHModW5kZWZpbmVkIGFzIGFueSksXG4gICAgICAgIG5ldyBFcnJvcihcInN1YnNjcmlwdGlvbktleSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpKTtcbiAgICB9KTtcblxuICAgIGl0KFwid2l0aCBudWxsIHN1YnNjcmlwdGlvbiBrZXlcIiwgKCkgPT4ge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW51bGwta2V5d29yZFxuICAgICAgbXNBc3NlcnQudGhyb3dzKCgpID0+IG5ldyBDb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzKG51bGwgYXMgYW55KSxcbiAgICAgICAgbmV3IEVycm9yKFwic3Vic2NyaXB0aW9uS2V5IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5cIikpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJ3aXRoIG51bWJlciBzdWJzY3JpcHRpb24ga2V5XCIsICgpID0+IHtcbiAgICAgIG1zQXNzZXJ0LnRocm93cygoKSA9PiBuZXcgQ29nbml0aXZlU2VydmljZXNDcmVkZW50aWFscyg1MCBhcyBhbnkpLFxuICAgICAgICBuZXcgRXJyb3IoXCJzdWJzY3JpcHRpb25LZXkgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGFuZCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLlwiKSk7XG4gICAgfSk7XG5cbiAgICBpdChcIndpdGggZW1wdHkgc3Vic2NyaXB0aW9uIGtleVwiLCAoKSA9PiB7XG4gICAgICBtc0Fzc2VydC50aHJvd3MoKCkgPT4gbmV3IENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMoXCJcIiksXG4gICAgICAgIG5ldyBFcnJvcihcInN1YnNjcmlwdGlvbktleSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpKTtcbiAgICB9KTtcblxuICAgIGl0KFwid2l0aCBub24tZW1wdHkgc3Vic2NyaXB0aW9uIGtleVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjcmVkZW50aWFscyA9IG5ldyBDb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzKFwiZmFrZS1zdWJzY3JpcHRpb24ta2V5XCIpO1xuICAgICAgY29uc3QgaHR0cFJlcXVlc3QgPSBuZXcgV2ViUmVzb3VyY2UoKTtcbiAgICAgIGNvbnN0IHNpZ25lZEh0dHBSZXF1ZXN0OiBXZWJSZXNvdXJjZSA9IGF3YWl0IGNyZWRlbnRpYWxzLnNpZ25SZXF1ZXN0KGh0dHBSZXF1ZXN0KTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChzaWduZWRIdHRwUmVxdWVzdCwgaHR0cFJlcXVlc3QpO1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChzaWduZWRIdHRwUmVxdWVzdC5oZWFkZXJzLnJhd0hlYWRlcnMoKSwge1xuICAgICAgICBcIm9jcC1hcGltLXN1YnNjcmlwdGlvbi1rZXlcIjogXCJmYWtlLXN1YnNjcmlwdGlvbi1rZXlcIixcbiAgICAgICAgXCJ4LWJpbmdhcGlzLXNkay1jbGllbnRcIjogXCJub2RlLVNES1wiXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXX0=
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/test/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvdGVzdC9jcmVkZW50aWFscy9jb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzVGVzdHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWF6dXJlLWpzL3Rlc3QvY3JlZGVudGlhbHMvY29nbml0aXZlU2VydmljZXNDcmVkZW50aWFsc1Rlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7QUFFL0YsMERBQTRCO0FBQzVCLGdEQUFnRDtBQUNoRCxtR0FBa0c7QUFDbEcsNERBQXdDO0FBRXhDLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRTtJQUN2QyxRQUFRLENBQUMsZUFBZSxFQUFFO1FBQ3hCLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtZQUNwQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxJQUFJLDJEQUE0QixDQUFDLFNBQWdCLENBQUMsRUFBbEQsQ0FBa0QsRUFDdEUsSUFBSSxLQUFLLENBQUMseUVBQXlFLENBQUMsQ0FBQyxDQUFDO1FBQzFGLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1lBQy9CLDJDQUEyQztZQUMzQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxJQUFJLDJEQUE0QixDQUFDLElBQVcsQ0FBQyxFQUE3QyxDQUE2QyxFQUNqRSxJQUFJLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDLENBQUM7UUFDMUYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOEJBQThCLEVBQUU7WUFDakMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsSUFBSSwyREFBNEIsQ0FBQyxFQUFTLENBQUMsRUFBM0MsQ0FBMkMsRUFDL0QsSUFBSSxLQUFLLENBQUMseUVBQXlFLENBQUMsQ0FBQyxDQUFDO1FBQzFGLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1lBQ2hDLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBTSxPQUFBLElBQUksMkRBQTRCLENBQUMsRUFBRSxDQUFDLEVBQXBDLENBQW9DLEVBQ3hELElBQUksS0FBSyxDQUFDLHlFQUF5RSxDQUFDLENBQUMsQ0FBQztRQUMxRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTs7Ozs7d0JBQzlCLFdBQVcsR0FBRyxJQUFJLDJEQUE0QixDQUFDLHVCQUF1QixDQUFDLENBQUM7d0JBQ3hFLFdBQVcsR0FBRyxJQUFJLHdCQUFXLEVBQUUsQ0FBQzt3QkFDQyxxQkFBTSxXQUFXLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxFQUFBOzt3QkFBM0UsaUJBQWlCLEdBQWdCLFNBQTBDO3dCQUNqRixnQkFBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxXQUFXLENBQUMsQ0FBQzt3QkFDbkQsZ0JBQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFOzRCQUN2RCwyQkFBMkIsRUFBRSx1QkFBdUI7NEJBQ3BELHVCQUF1QixFQUFFLFVBQVU7eUJBQ3BDLENBQUMsQ0FBQzs7OzthQUNKLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuaW1wb3J0IHsgV2ViUmVzb3VyY2UgfSBmcm9tIFwiQGF6dXJlL21zLXJlc3QtanNcIjtcbmltcG9ydCB7IENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi4vLi4vbGliL2NyZWRlbnRpYWxzL2NvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHNcIjtcbmltcG9ydCAqIGFzIG1zQXNzZXJ0IGZyb20gXCIuLi9tc0Fzc2VydFwiO1xuXG5kZXNjcmliZShcIkNvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHNcIiwgKCkgPT4ge1xuICBkZXNjcmliZShcImNvbnN0cnVjdG9yKClcIiwgKCkgPT4ge1xuICAgIGl0KFwid2l0aCB1bmRlZmluZWQgc3Vic2NyaXB0aW9uIGtleVwiLCAoKSA9PiB7XG4gICAgICBtc0Fzc2VydC50aHJvd3MoKCkgPT4gbmV3IENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHModW5kZWZpbmVkIGFzIGFueSksXG4gICAgICAgIG5ldyBFcnJvcihcInN1YnNjcmlwdGlvbktleSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpKTtcbiAgICB9KTtcblxuICAgIGl0KFwid2l0aCBudWxsIHN1YnNjcmlwdGlvbiBrZXlcIiwgKCkgPT4ge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW51bGwta2V5d29yZFxuICAgICAgbXNBc3NlcnQudGhyb3dzKCgpID0+IG5ldyBDb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzKG51bGwgYXMgYW55KSxcbiAgICAgICAgbmV3IEVycm9yKFwic3Vic2NyaXB0aW9uS2V5IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBhbmQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy5cIikpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJ3aXRoIG51bWJlciBzdWJzY3JpcHRpb24ga2V5XCIsICgpID0+IHtcbiAgICAgIG1zQXNzZXJ0LnRocm93cygoKSA9PiBuZXcgQ29nbml0aXZlU2VydmljZXNDcmVkZW50aWFscyg1MCBhcyBhbnkpLFxuICAgICAgICBuZXcgRXJyb3IoXCJzdWJzY3JpcHRpb25LZXkgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGFuZCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLlwiKSk7XG4gICAgfSk7XG5cbiAgICBpdChcIndpdGggZW1wdHkgc3Vic2NyaXB0aW9uIGtleVwiLCAoKSA9PiB7XG4gICAgICBtc0Fzc2VydC50aHJvd3MoKCkgPT4gbmV3IENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMoXCJcIiksXG4gICAgICAgIG5ldyBFcnJvcihcInN1YnNjcmlwdGlvbktleSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpKTtcbiAgICB9KTtcblxuICAgIGl0KFwid2l0aCBub24tZW1wdHkgc3Vic2NyaXB0aW9uIGtleVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjcmVkZW50aWFscyA9IG5ldyBDb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzKFwiZmFrZS1zdWJzY3JpcHRpb24ta2V5XCIpO1xuICAgICAgY29uc3QgaHR0cFJlcXVlc3QgPSBuZXcgV2ViUmVzb3VyY2UoKTtcbiAgICAgIGNvbnN0IHNpZ25lZEh0dHBSZXF1ZXN0OiBXZWJSZXNvdXJjZSA9IGF3YWl0IGNyZWRlbnRpYWxzLnNpZ25SZXF1ZXN0KGh0dHBSZXF1ZXN0KTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChzaWduZWRIdHRwUmVxdWVzdCwgaHR0cFJlcXVlc3QpO1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChzaWduZWRIdHRwUmVxdWVzdC5oZWFkZXJzLnJhd0hlYWRlcnMoKSwge1xuICAgICAgICBcIm9jcC1hcGltLXN1YnNjcmlwdGlvbi1rZXlcIjogXCJmYWtlLXN1YnNjcmlwdGlvbi1rZXlcIixcbiAgICAgICAgXCJ4LWJpbmdhcGlzLXNkay1jbGllbnRcIjogXCJub2RlLVNES1wiXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/lib/credentials/cognitiveServicesCredentials.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvbGliL2NyZWRlbnRpYWxzL2NvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWF6dXJlLWpzL2xpYi9jcmVkZW50aWFscy9jb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRS9GLGdEQUFzRDtBQUV0RDs7Ozs7R0FLRztBQUNIO0lBQWtELHdEQUFpQjtJQUNqRSxzQ0FBWSxlQUF1QjtRQUFuQyxpQkFZQztRQVhDLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxlQUFlLElBQUksT0FBTyxlQUFlLENBQUMsT0FBTyxFQUFFLEtBQUssUUFBUSxDQUFDLEVBQUU7WUFDMUYsTUFBTSxJQUFJLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDO1NBQzVGO1FBRUQsSUFBTSxPQUFPLEdBQUc7WUFDZCxRQUFRLEVBQUU7Z0JBQ1IsMkJBQTJCLEVBQUUsZUFBZTtnQkFDNUMsdUJBQXVCLEVBQUUsVUFBVTthQUNwQztTQUNGLENBQUM7UUFDRixRQUFBLGtCQUFNLE9BQU8sQ0FBQyxTQUFDOztJQUNqQixDQUFDO0lBQ0gsbUNBQUM7QUFBRCxDQUFDLEFBZEQsQ0FBa0QsOEJBQWlCLEdBY2xFO0FBZFksb0VBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBBcGlLZXlDcmVkZW50aWFscyB9IGZyb20gXCJAYXp1cmUvbXMtcmVzdC1qc1wiO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgQ29nbml0aXZlU2VydmljZXNDcmVkZW50aWFscyBvYmplY3QuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5ICAgVGhlIENvZ25pdGl2ZVNlcnZpY2VzIHN1YnNjcmlwdGlvbiBrZXlcbiAqL1xuZXhwb3J0IGNsYXNzIENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMgZXh0ZW5kcyBBcGlLZXlDcmVkZW50aWFscyB7XG4gIGNvbnN0cnVjdG9yKHN1YnNjcmlwdGlvbktleTogc3RyaW5nKSB7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25LZXkgfHwgKHN1YnNjcmlwdGlvbktleSAmJiB0eXBlb2Ygc3Vic2NyaXB0aW9uS2V5LnZhbHVlT2YoKSAhPT0gXCJzdHJpbmdcIikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInN1YnNjcmlwdGlvbktleSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBpbkhlYWRlcjoge1xuICAgICAgICBcIk9jcC1BcGltLVN1YnNjcmlwdGlvbi1LZXlcIjogc3Vic2NyaXB0aW9uS2V5LFxuICAgICAgICBcIlgtQmluZ0FwaXMtU0RLLUNsaWVudFwiOiBcIm5vZGUtU0RLXCJcbiAgICAgIH1cbiAgICB9O1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICB9XG59XG4iXX0=
Error: ENOENT: no such file or directory, open '/data/js-variants/multee/Original/ms-rest-azure-js/lib/credentials/data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2RhdGEvanMtdmFyaWFudHMvbXVsdGVlL09yaWdpbmFsL21zLXJlc3QtYXp1cmUtanMvbGliL2NyZWRlbnRpYWxzL2NvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMudHMiLCJzb3VyY2VzIjpbIi9kYXRhL2pzLXZhcmlhbnRzL211bHRlZS9PcmlnaW5hbC9tcy1yZXN0LWF6dXJlLWpzL2xpYi9jcmVkZW50aWFscy9jb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7QUFDNUQsK0ZBQStGOzs7O0FBRS9GLGdEQUFzRDtBQUV0RDs7Ozs7R0FLRztBQUNIO0lBQWtELHdEQUFpQjtJQUNqRSxzQ0FBWSxlQUF1QjtRQUFuQyxpQkFZQztRQVhDLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxlQUFlLElBQUksT0FBTyxlQUFlLENBQUMsT0FBTyxFQUFFLEtBQUssUUFBUSxDQUFDLEVBQUU7WUFDMUYsTUFBTSxJQUFJLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDO1NBQzVGO1FBRUQsSUFBTSxPQUFPLEdBQUc7WUFDZCxRQUFRLEVBQUU7Z0JBQ1IsMkJBQTJCLEVBQUUsZUFBZTtnQkFDNUMsdUJBQXVCLEVBQUUsVUFBVTthQUNwQztTQUNGLENBQUM7UUFDRixRQUFBLGtCQUFNLE9BQU8sQ0FBQyxTQUFDOztJQUNqQixDQUFDO0lBQ0gsbUNBQUM7QUFBRCxDQUFDLEFBZEQsQ0FBa0QsOEJBQWlCLEdBY2xFO0FBZFksb0VBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBBcGlLZXlDcmVkZW50aWFscyB9IGZyb20gXCJAYXp1cmUvbXMtcmVzdC1qc1wiO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgQ29nbml0aXZlU2VydmljZXNDcmVkZW50aWFscyBvYmplY3QuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5ICAgVGhlIENvZ25pdGl2ZVNlcnZpY2VzIHN1YnNjcmlwdGlvbiBrZXlcbiAqL1xuZXhwb3J0IGNsYXNzIENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMgZXh0ZW5kcyBBcGlLZXlDcmVkZW50aWFscyB7XG4gIGNvbnN0cnVjdG9yKHN1YnNjcmlwdGlvbktleTogc3RyaW5nKSB7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25LZXkgfHwgKHN1YnNjcmlwdGlvbktleSAmJiB0eXBlb2Ygc3Vic2NyaXB0aW9uS2V5LnZhbHVlT2YoKSAhPT0gXCJzdHJpbmdcIikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInN1YnNjcmlwdGlvbktleSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgYW5kIG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBpbkhlYWRlcjoge1xuICAgICAgICBcIk9jcC1BcGltLVN1YnNjcmlwdGlvbi1LZXlcIjogc3Vic2NyaXB0aW9uS2V5LFxuICAgICAgICBcIlgtQmluZ0FwaXMtU0RLLUNsaWVudFwiOiBcIm5vZGUtU0RLXCJcbiAgICAgIH1cbiAgICB9O1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICB9XG59XG4iXX0='
Transformation error for /data/js-variants/multee/Original/ms-rest-azure-js/test/lroPollStrategyTests.ts ; return original code
An error occurred while trying to read the map file at /data/js-variants/multee/Original/ms-rest-azure-js/test/data:application/json;charset=utf-8;base64,
Error: ENAMETOOLONG: name too long, open '/data/js-variants/multee/Original/ms-rest-azure-js/test/data:application/json;charset=utf-8;base64,'
I am package node-sdk
I am package node-7z
I am package mem
I am package rsmq
(node:78379) DeprecationWarning: Configuration via mocha.opts is DEPRECATED and will be removed from a future version of Mocha. Use RC files or package.json instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
I am package syncpack
PASS src/lib/get-input/get-input.spec.ts (9.409 s)
PASS src/bin-format/format.spec.ts
PASS src/bin-fix-mismatches/fix-mismatches.spec.ts
PASS src/bin-list-mismatches/list-mismatches.spec.ts
PASS src/bin-fix-mismatches/get-expected-version/get-highest-version.spec.ts
PASS src/lib/set-semver-range.spec.ts
PASS src/bin-list/list.spec.ts
PASS src/bin-fix-mismatches/get-expected-version/get-expected-version.spec.ts
PASS src/lib/disk.spec.ts
PASS src/bin-set-semver-ranges/set-semver-ranges.spec.ts
PASS src/bin-lint-semver-ranges/list-semver-group-mismatches.spec.ts
PASS src/bin-lint-semver-ranges/lint-semver-ranges.spec.ts
PASS src/bin-list/list-version-groups.spec.ts
PASS src/lib/is-semver.spec.ts
PASS src/lib/sort-by-name.spec.ts
PASS src/lib/collect.spec.ts

Test Suites: 16 passed, 16 total
Tests:       71 passed, 71 total
Snapshots:   0 total
Time:        21.386 s
Ran all test suites matching /src/i.
I am package mediasoup
PASS node/src/tests/test-PipeTransport.ts (6.721 s)
  ✓ router.pipeToRouter() succeeds with audio (33 ms)
  ✓ router.pipeToRouter() succeeds with video (37 ms)
  ✓ router.pipeToRouter() fails if both Routers belong to the same Worker (35 ms)
  ✓ router.createPipeTransport() with enableRtx succeeds (4 ms)
  ✓ router.createPipeTransport() with invalid srtpParameters must fail (3 ms)
  ✓ router.createPipeTransport() with enableSrtp succeeds (6 ms)
  ✓ router.createPipeTransport() with fixed port succeeds (4 ms)
  ✓ transport.consume() for a pipe Producer succeeds (5 ms)
  ✓ producer.pause() and producer.resume() are transmitted to pipe Consumer (2 ms)
  ✓ producer.close() is transmitted to pipe Consumer (1 ms)
  ✓ router.pipeToRouter() succeeds with data (4 ms)
  ✓ transport.dataConsume() for a pipe DataProducer succeeds (8 ms)
  ✓ dataProducer.close() is transmitted to pipe DataConsumer (2 ms)
  ✓ router.pipeToRouter() called twice generates a single PipeTransport pair (11 ms)
  ✓ router.pipeToRouter() called in two Routers passing one to each other as argument generates a single a single PipeTransport pair (12 ms)

PASS node/src/tests/test-Consumer.ts
  ✓ transport.consume() succeeds (33 ms)
  ✓ transport.consume() can be created with user provided mid (5 ms)
  ✓ transport.consume() with incompatible rtpCapabilities rejects with UnsupportedError (109 ms)
  ✓ consumer.dump() succeeds (22 ms)
  ✓ consumer.getStats() succeeds (2 ms)
  ✓ consumer.pause() and resume() succeed (2 ms)
  ✓ consumer.setPreferredLayers() succeed (1 ms)
  ✓ consumer.setPreferredLayers() with wrong arguments rejects with TypeError (6 ms)
  ✓ consumer.setPriority() succeed
  ✓ consumer.setPriority() with wrong arguments rejects with TypeError (2 ms)
  ✓ consumer.unsetPriority() succeed (1 ms)
  ✓ consumer.enableTraceEvent() succeed (3 ms)
  ✓ consumer.enableTraceEvent() with wrong arguments rejects with TypeError (3 ms)
  ✓ Consumer emits "producerpause" and "producerresume" (2 ms)
  ✓ Consumer emits "score" (1 ms)
  ✓ consumer.close() succeeds (2 ms)
  ✓ Consumer methods reject if closed (7 ms)
  ✓ Consumer emits "producerclose" if Producer is closed (2 ms)
  ✓ Consumer emits "transportclose" if Transport is closed (3 ms)

PASS node/src/tests/test-Producer.ts
  ✓ transport1.produce() succeeds (9 ms)
  ✓ transport2.produce() succeeds (22 ms)
  ✓ transport1.produce() with wrong arguments rejects with TypeError (95 ms)
  ✓ transport1.produce() with unsupported codecs rejects with UnsupportedError (3 ms)
  ✓ transport.produce() with already used MID or SSRC rejects with Error (3 ms)
  ✓ transport.produce() with no MID and with single encoding without RID or SSRC rejects with Error (1 ms)
  ✓ producer.dump() succeeds (10 ms)
  ✓ producer.getStats() succeeds (2 ms)
  ✓ producer.pause() and resume() succeed (2 ms)
  ✓ producer.enableTraceEvent() succeed (3 ms)
  ✓ producer.enableTraceEvent() with wrong arguments rejects with TypeError (10 ms)
  ✓ Producer emits "score" (1 ms)
  ✓ producer.close() succeeds (2 ms)
  ✓ Producer methods reject if closed (4 ms)
  ✓ Producer emits "transportclose" if Transport is closed (1 ms)

PASS node/src/tests/test-WebRtcTransport.ts
  ✓ router.createWebRtcTransport() succeeds (35 ms)
  ✓ router.createWebRtcTransport() with wrong arguments rejects with TypeError (102 ms)
  ✓ router.createWebRtcTransport() with non bindable IP rejects with Error (3 ms)
  ✓ webRtcTransport.getStats() succeeds (6 ms)
  ✓ webRtcTransport.connect() succeeds (3 ms)
  ✓ webRtcTransport.connect() with wrong arguments rejects with TypeError (5 ms)
  ✓ webRtcTransport.setMaxIncomingBitrate() succeeds (1 ms)
  ✓ webRtcTransport.setMaxOutgoingBitrate() succeeds (1 ms)
  ✓ webRtcTransport.restartIce() succeeds (2 ms)
  ✓ transport.enableTraceEvent() succeed (4 ms)
  ✓ transport.enableTraceEvent() with wrong arguments rejects with TypeError (4 ms)
  ✓ WebRtcTransport events succeed (4 ms)
  ✓ WebRtcTransport methods reject if closed (8 ms)
  ✓ router.createWebRtcTransport() with fixed port succeeds (3 ms)
  ✓ WebRtcTransport emits "routerclose" if Router is closed (5 ms)
  ✓ WebRtcTransport emits "routerclose" if Worker is closed (2 ms)

PASS node/src/tests/test-ortc.ts
  ✓ generateRouterRtpCapabilities() succeeds (7 ms)
  ✓ generateRouterRtpCapabilities() with unsupported codecs throws UnsupportedError (53 ms)
  ✓ generateRouterRtpCapabilities() with too many codecs throws (2 ms)
  ✓ getProducerRtpParametersMapping(), getConsumableRtpParameters(), getConsumerRtpParameters() and getPipeConsumerRtpParameters() succeed (29 ms)
  ✓ getProducerRtpParametersMapping() with incompatible params throws UnsupportedError (2 ms)

PASS node/src/tests/test-WebRtcServer.ts
  ✓ worker.createWebRtcServer() succeeds (51 ms)
  ✓ worker.createWebRtcServer() without specifying port succeeds (46 ms)
  ✓ worker.createWebRtcServer() with wrong arguments rejects with TypeError (71 ms)
  ✓ worker.createWebRtcServer() with unavailable listenInfos rejects with Error (75 ms)
  ✓ worker.createWebRtcServer() rejects with InvalidStateError if Worker is closed (79 ms)
  ✓ webRtcServer.close() succeeds (47 ms)
  ✓ WebRtcServer emits "workerclose" if Worker is closed (44 ms)
  ✓ router.createWebRtcTransport() with webRtcServer succeeds and transport is closed (51 ms)
  ✓ router.createWebRtcTransport() with webRtcServer succeeds and webRtcServer is closed (87 ms)

PASS node/src/tests/test-PlainTransport.ts
  ✓ router.createPlainTransport() succeeds (26 ms)
  ✓ router.createPlainTransport() with wrong arguments rejects with TypeError (76 ms)
  ✓ router.createPlainTransport() with enableSrtp succeeds (11 ms)
  ✓ router.createPlainTransport() with non bindable IP rejects with Error (2 ms)
  ✓ plainTransport.getStats() succeeds (5 ms)
  ✓ plainTransport.connect() succeeds (13 ms)
  ✓ plainTransport.connect() with wrong arguments rejects with TypeError (8 ms)
  ✓ PlainTransport methods reject if closed (5 ms)
  ✓ router.createPlainTransport() with fixed port succeeds (3 ms)
  ✓ PlainTransport emits "routerclose" if Router is closed (3 ms)
  ✓ PlainTransport emits "routerclose" if Worker is closed (1 ms)

PASS node/src/tests/test-DataConsumer.ts
  ✓ transport.consumeData() succeeds (12 ms)
  ✓ dataConsumer.dump() succeeds (3 ms)
  ✓ dataConsumer.getStats() succeeds (2 ms)
  ✓ transport.consumeData() on a DirectTransport succeeds (5 ms)
  ✓ dataConsumer.dump() on a DirectTransport succeeds (2 ms)
  ✓ dataConsumer.getStats() on a DirectTransport succeeds (1 ms)
  ✓ dataConsumer.close() succeeds (3 ms)
  ✓ Consumer methods reject if closed (21 ms)
  ✓ DataConsumer emits "dataproducerclose" if DataProducer is closed (3 ms)
  ✓ DataConsumer emits "transportclose" if Transport is closed (4 ms)

PASS node/src/tests/test-Worker.ts
  ✓ createWorker() succeeds (82 ms)
  ✓ createWorker() with wrong settings rejects with TypeError (206 ms)
  ✓ worker.updateSettings() succeeds (37 ms)
  ✓ worker.updateSettings() with wrong settings rejects with TypeError (47 ms)
  ✓ worker.updateSettings() rejects with InvalidStateError if closed (51 ms)
  ✓ worker.dump() succeeds (32 ms)
  ✓ worker.dump() rejects with InvalidStateError if closed (42 ms)
  ✓ worker.getResourceUsage() succeeds (37 ms)
  ✓ worker.close() succeeds (36 ms)
  ✓ Worker emits "died" if worker process died unexpectedly (546 ms)
  ✓ worker process ignores PIPE, HUP, ALRM, USR1 and USR2 signals (2037 ms)

PASS node/src/tests/test-DataProducer.ts
  ✓ transport1.produceData() succeeds (11 ms)
  ✓ transport2.produceData() succeeds (13 ms)
  ✓ transport1.produceData() with wrong arguments rejects with TypeError (94 ms)
  ✓ transport.produceData() with already used streamId rejects with Error (22 ms)
  ✓ transport.produceData() with ordered and maxPacketLifeTime rejects with TypeError (1 ms)
  ✓ dataProducer.dump() succeeds (2 ms)
  ✓ dataProducer.getStats() succeeds (2 ms)
  ✓ dataProducer.close() succeeds (2 ms)
  ✓ DataProducer methods reject if closed (2 ms)
  ✓ DataProducer emits "transportclose" if Transport is closed (1 ms)

PASS node/src/tests/test-DirectTransport.ts
  ✓ router.createDirectTransport() succeeds (13 ms)
  ✓ router.createDirectTransport() with wrong arguments rejects with TypeError (23 ms)
  ✓ directTransport.getStats() succeeds (7 ms)
  ✓ directTransport.connect() succeeds (5 ms)
  ✓ dataProducer.send() succeeds (240 ms)
  ✓ DirectTransport methods reject if closed (4 ms)
  ✓ DirectTransport emits "routerclose" if Router is closed (5 ms)
  ✓ DirectTransport emits "routerclose" if Worker is closed (2 ms)

PASS node/src/tests/test-node-sctp.ts
  ✓ ordered DataProducer delivers all SCTP messages to the DataConsumer (2073 ms)

PASS node/src/tests/test-multiopus.ts
  ✓ produce/consume succeeds (9 ms)
  ✓ fails to produce wrong parameters (87 ms)
  ✓ fails to consume wrong channels (2 ms)

PASS node/src/tests/test-Router.ts
  ✓ worker.createRouter() succeeds (70 ms)
  ✓ worker.createRouter() with wrong arguments rejects with TypeError (114 ms)
  ✓ worker.createRouter() rejects with InvalidStateError if Worker is closed (50 ms)
  ✓ router.close() succeeds (42 ms)
  ✓ Router emits "workerclose" if Worker is closed (41 ms)

PASS node/src/tests/test-AudioLevelObserver.ts
  ✓ router.createAudioLevelObserver() succeeds (8 ms)
  ✓ router.createAudioLevelObserver() with wrong arguments rejects with TypeError (59 ms)
  ✓ audioLevelObserver.pause() and resume() succeed (2 ms)
  ✓ audioLevelObserver.close() succeeds (2 ms)
  ✓ AudioLevelObserver emits "routerclose" if Router is closed (1 ms)
  ✓ AudioLevelObserver emits "routerclose" if Worker is closed (1 ms)

PASS node/src/tests/test-ActiveSpeakerObserver.ts
  ✓ router.createActiveSpeakerObserver() succeeds (7 ms)
  ✓ router.createActiveSpeakerObserver() with wrong arguments rejects with TypeError (78 ms)
  ✓ activeSpeakerObserver.pause() and resume() succeed (2 ms)
  ✓ activeSpeakerObserver.close() succeeds (3 ms)
  ✓ ActiveSpeakerObserver emits "routerclose" if Router is closed (2 ms)
  ✓ ActiveSpeakerObserver emits "routerclose" if Worker is closed (2 ms)

PASS node/src/tests/test-mediasoup.ts
  ✓ mediasoup.getSupportedRtpCapabilities() returns the mediasoup RTP capabilities (4 ms)
  ✓ parseScalabilityMode() works (2 ms)

Test Suites: 17 passed, 17 total
Tests:       152 passed, 152 total
Snapshots:   0 total
Time:        22.889 s
Ran all test suites.

Usage:   
  /home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9 -m pip install [options] <requirement specifier> [package-index-options] ...
  /home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9 -m pip install [options] -r <requirements file> [package-index-options] ...
  /home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9 -m pip install [options] [-e] <vcs project url> ...
  /home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9 -m pip install [options] [-e] <local project path> ...
  /home/liu-yuxin/.linuxbrew/opt/python@3.9/bin/python3.9 -m pip install [options] <archive url/path> ...

no such option: --system
WARNING: There was an error checking the latest version of pip.
Directory does not contain a valid build tree:
/data/js-variants/multee/Original/mediasoup/worker/out/Release/build
I am package tencentcloud-sdk-nodejs
I am package get-it
(node:92079) Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to '0' makes TLS connections and HTTPS requests insecure by disabling certificate verification.
(Use `node --trace-warnings ...` to show where the warning was created)
