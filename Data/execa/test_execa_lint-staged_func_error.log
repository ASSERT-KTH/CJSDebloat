13
PASS test/integration/partially-staged-changes.test.js
PASS test/integration/git-amend.test.js
PASS test/integration/diff-options.test.js
PASS test/integration/gitWorkFlow.test.js
PASS test/integration/merge-conflict.test.js
PASS test/integration/git-worktree.test.js
PASS test/unit/index2.spec.js
PASS test/integration/git-submodules.test.js
PASS test/integration/git-lock-file.test.js
PASS test/integration/basic-functionality.test.js (5.923 s)
PASS test/integration/allow-empty.test.js
PASS test/unit/resolveTaskFn.unmocked.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/integration/untracked-files.test.js
PASS test/integration/no-initial-commit.test.js
PASS test/integration/file-resurrection.test.js
PASS test/integration/no-stash.test.js
PASS test/integration/multiple-config-files.test.js
PASS test/unit/runAll.spec.js
PASS test/unit/resolveGitRepo.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/searchConfigs.spec.js
PASS test/integration/non-ascii.test.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/integration/symlinked-config.test.js
PASS test/integration/binary-files.test.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/index.spec.js
PASS test/integration/files-outside-cwd.test.js
PASS test/integration/parent-globs.test.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/state.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/file.spec.js
PASS test/unit/dynamicImport.spec.js

Test Suites: 46 passed, 46 total
Tests:       1 skipped, 230 passed, 231 total
Snapshots:   90 passed, 90 total
Time:        44.909 s, estimated 622 s
Ran all test suites.
FAIL test/integration/basic-functionality.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/merge-conflict.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/partially-staged-changes.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/file-resurrection.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/no-stash.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/non-ascii.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/multiple-config-files.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/allow-empty.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/files-outside-cwd.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/untracked-files.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/git-submodules.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/symlinked-config.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/git-lock-file.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/parent-globs.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/gitWorkFlow.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/git-worktree.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/no-initial-commit.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/diff-options.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/binary-files.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/git-amend.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/unit/index.spec.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

PASS test/unit/getBackupStash.spec.js
FAIL test/integration/not-inside-git-repo.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

PASS test/unit/runAll.spec.js
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveTaskFn.spec.js
FAIL test/unit/resolveGitRepo.spec.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/state.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/execGit.spec.js
FAIL test/unit/getStagedFiles.spec.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

PASS test/unit/printTaskOutput.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/file.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/parseGitZOutput.spec.js

Summary of all failing tests
FAIL test/integration/basic-functionality.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/merge-conflict.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/partially-staged-changes.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/file-resurrection.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/no-stash.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/non-ascii.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/multiple-config-files.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/allow-empty.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/files-outside-cwd.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/untracked-files.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/git-submodules.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/symlinked-config.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/git-lock-file.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/parent-globs.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/gitWorkFlow.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/git-worktree.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/no-initial-commit.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/diff-options.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/binary-files.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/git-amend.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/unit/index.spec.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/integration/not-inside-git-repo.test.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/unit/resolveGitRepo.spec.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)

FAIL test/unit/getStagedFiles.spec.js
  ● Test suite failed to run

    TypeError: signals.forEach is not a function

      1 | import os from 'node:os';
    > 2 | import onExit from 'signal-exit';
        | ^
      3 |
      4 | const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
      5 |

      at Object.forEach (../../../VariantsDeps/execa/variant12/execa/node_modules/signal-exit/index.js:110:11)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant12/execa/lib/kill.js:2:1)


Test Suites: 25 failed, 21 passed, 46 total
Tests:       1 skipped, 159 passed, 160 total
Snapshots:   65 passed, 65 total
Time:        8.987 s, estimated 44 s
Ran all test suites.
PASS test/unit/runAll.spec.js
PASS test/unit/index2.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/state.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/file.spec.js
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "Cannot read properties of undefined (reading 'SIGTERM')"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

 › 1 snapshot failed.
PASS test/unit/resolveGitRepo.spec.js
PASS test/unit/index.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/integration/untracked-files.test.js
PASS test/integration/symlinked-config.test.js
PASS test/integration/partially-staged-changes.test.js
PASS test/integration/parent-globs.test.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/integration/non-ascii.test.js
PASS test/integration/no-stash.test.js
PASS test/integration/no-initial-commit.test.js
PASS test/integration/multiple-config-files.test.js
PASS test/integration/merge-conflict.test.js (6.016 s)
PASS test/integration/gitWorkFlow.test.js
PASS test/integration/git-worktree.test.js
PASS test/integration/git-submodules.test.js
PASS test/integration/git-lock-file.test.js
PASS test/integration/git-amend.test.js
PASS test/integration/files-outside-cwd.test.js
PASS test/integration/file-resurrection.test.js
PASS test/integration/diff-options.test.js
PASS test/integration/binary-files.test.js
PASS test/integration/basic-functionality.test.js (10.741 s)
PASS test/integration/allow-empty.test.js

Summary of all failing tests
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "Cannot read properties of undefined (reading 'SIGTERM')"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)


Snapshot Summary
 › 1 snapshot failed from 1 test suite. Inspect your code changes or run `npm test -- -u` to update them.

Test Suites: 1 failed, 45 passed, 46 total
Tests:       1 failed, 1 skipped, 229 passed, 231 total
Snapshots:   1 failed, 89 passed, 90 total
Time:        57.563 s
Ran all test suites.
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _mimicFn.default) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _mimicFn.default) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "(0 , _mimicFn.default) is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

 › 2 snapshots failed.
FAIL test/integration/basic-functionality.test.js
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks pass



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files in complex case



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files due to git bug when tasks fail



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports multiple configuration files with --relative



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ignores multiple configs files outside cwd



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ignores untracked files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ingores untracked files when task fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › not care about staged file outside current cwd without any other staged files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-submodules.test.js
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-worktree.test.js
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

PASS test/unit/runAll.spec.js
FAIL test/integration/no-initial-commit.test.js
  ● lint-staged › skips backup when run on an empty git repo without an initial commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/binary-files.test.js
  ● lint-staged › handles binary files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/index.spec.js
  ● lintStaged › should use lilconfig if no params are passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use lilconfig if no params are passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      61 |     await lintStaged(undefined, logger)
      62 |
    > 63 |     expect(logger.printHistory()).toMatchInlineSnapshot(`
         |                                   ^
      64 |       "
      65 |       ERROR ✖ Failed to get staged files!"
      66 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:63:35)

  ● lintStaged › should return true when passed

    expect(received).resolves.toEqual(expected) // deep equality

    Expected: true
    Received: false

      74 |     const config = { '*': 'node -e "process.exit(0)"' }
      75 |
    > 76 |     await expect(lintStaged({ config, quiet: true }, logger)).resolves.toEqual(true)
         |                                                                        ^
      77 |   })
      78 |
      79 |   it('should use use the console if no logger is passed', async () => {

      at Object.toEqual (node_modules/expect/build/index.js:194:22)
      at Object.toEqual (test/unit/index.spec.js:76:72)

  ● lintStaged › should use use the console if no logger is passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use use the console if no logger is passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      88 |     await lintStaged()
      89 |
    > 90 |     expect(mockedConsole.printHistory()).toMatchInlineSnapshot(`
         |                                          ^
      91 |       "
      92 |       ERROR ✖ Failed to get staged files!"
      93 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:90:42)

 › 2 snapshots failed.
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/validateBraces.spec.js
FAIL test/unit/resolveGitRepo.spec.js
  ● resolveGitRepo › should resolve to current working dir when .git is in the same dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      14 |     const cwd = normalize(process.cwd())
      15 |     const { gitDir } = await resolveGitRepo()
    > 16 |     expect(gitDir).toEqual(cwd)
         |                    ^
      17 |   })
      18 |
      19 |   const expected = normalize(path.join(path.dirname(__dirname), '../'))

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:16:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      23 |     process.cwd = () => __dirname
      24 |     const { gitDir } = await resolveGitRepo()
    > 25 |     expect(gitDir).toEqual(expected)
         |                    ^
      26 |     process.cwd = processCwdBkp
      27 |   })
      28 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:25:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_DIR environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      32 |     process.env.GIT_DIR = 'wrong/path/.git' // refer to https://github.com/DonJayamanne/gitHistoryVSCode/issues/233#issuecomment-375769718
      33 |     const { gitDir } = await resolveGitRepo()
    > 34 |     expect(gitDir).toEqual(expected)
         |                    ^
      35 |     process.cwd = processCwdBkp
      36 |   })
      37 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:34:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_WORK_TREE environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      41 |     process.env.GIT_WORK_TREE = './wrong/path/'
      42 |     const { gitDir } = await resolveGitRepo()
    > 43 |     expect(gitDir).toEqual(expected)
         |                    ^
      44 |     process.cwd = processCwdBkp
      45 |   })
      46 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:43:20)

PASS test/unit/state.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/file.spec.js
PASS test/unit/getDiffCommand.spec.js

Summary of all failing tests
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _mimicFn.default) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _mimicFn.default) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "(0 , _mimicFn.default) is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

FAIL test/integration/basic-functionality.test.js
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks pass



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files in complex case



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files due to git bug when tasks fail



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports multiple configuration files with --relative



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ignores multiple configs files outside cwd



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ignores untracked files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ingores untracked files when task fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › not care about staged file outside current cwd without any other staged files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-submodules.test.js
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-worktree.test.js
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-initial-commit.test.js
  ● lint-staged › skips backup when run on an empty git repo without an initial commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/binary-files.test.js
  ● lint-staged › handles binary files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/index.spec.js
  ● lintStaged › should use lilconfig if no params are passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use lilconfig if no params are passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      61 |     await lintStaged(undefined, logger)
      62 |
    > 63 |     expect(logger.printHistory()).toMatchInlineSnapshot(`
         |                                   ^
      64 |       "
      65 |       ERROR ✖ Failed to get staged files!"
      66 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:63:35)

  ● lintStaged › should return true when passed

    expect(received).resolves.toEqual(expected) // deep equality

    Expected: true
    Received: false

      74 |     const config = { '*': 'node -e "process.exit(0)"' }
      75 |
    > 76 |     await expect(lintStaged({ config, quiet: true }, logger)).resolves.toEqual(true)
         |                                                                        ^
      77 |   })
      78 |
      79 |   it('should use use the console if no logger is passed', async () => {

      at Object.toEqual (node_modules/expect/build/index.js:194:22)
      at Object.toEqual (test/unit/index.spec.js:76:72)

  ● lintStaged › should use use the console if no logger is passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use use the console if no logger is passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      88 |     await lintStaged()
      89 |
    > 90 |     expect(mockedConsole.printHistory()).toMatchInlineSnapshot(`
         |                                          ^
      91 |       "
      92 |       ERROR ✖ Failed to get staged files!"
      93 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:90:42)

FAIL test/unit/resolveGitRepo.spec.js
  ● resolveGitRepo › should resolve to current working dir when .git is in the same dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      14 |     const cwd = normalize(process.cwd())
      15 |     const { gitDir } = await resolveGitRepo()
    > 16 |     expect(gitDir).toEqual(cwd)
         |                    ^
      17 |   })
      18 |
      19 |   const expected = normalize(path.join(path.dirname(__dirname), '../'))

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:16:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      23 |     process.cwd = () => __dirname
      24 |     const { gitDir } = await resolveGitRepo()
    > 25 |     expect(gitDir).toEqual(expected)
         |                    ^
      26 |     process.cwd = processCwdBkp
      27 |   })
      28 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:25:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_DIR environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      32 |     process.env.GIT_DIR = 'wrong/path/.git' // refer to https://github.com/DonJayamanne/gitHistoryVSCode/issues/233#issuecomment-375769718
      33 |     const { gitDir } = await resolveGitRepo()
    > 34 |     expect(gitDir).toEqual(expected)
         |                    ^
      35 |     process.cwd = processCwdBkp
      36 |   })
      37 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:34:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_WORK_TREE environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      41 |     process.env.GIT_WORK_TREE = './wrong/path/'
      42 |     const { gitDir } = await resolveGitRepo()
    > 43 |     expect(gitDir).toEqual(expected)
         |                    ^
      44 |     process.cwd = processCwdBkp
      45 |   })
      46 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:43:20)


Snapshot Summary
 › 4 snapshots failed from 2 test suites. Inspect your code changes or run `npm test -- -u` to update them.

Test Suites: 23 failed, 23 passed, 46 total
Tests:       59 failed, 1 skipped, 171 passed, 231 total
Snapshots:   4 failed, 65 passed, 69 total
Time:        16.629 s, estimated 57 s
Ran all test suites.
Jest did not exit one second after the test run has completed.

This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _onetime.default) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _onetime.default) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "(0 , _onetime.default) is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

 › 2 snapshots failed.
FAIL test/integration/basic-functionality.test.js
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports multiple configuration files with --relative



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ignores multiple configs files outside cwd



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks pass



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files in complex case



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files due to git bug when tasks fail



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-initial-commit.test.js
  ● lint-staged › skips backup when run on an empty git repo without an initial commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › not care about staged file outside current cwd without any other staged files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ignores untracked files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ingores untracked files when task fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/binary-files.test.js
  ● lint-staged › handles binary files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/index.spec.js
  ● lintStaged › should use lilconfig if no params are passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use lilconfig if no params are passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      61 |     await lintStaged(undefined, logger)
      62 |
    > 63 |     expect(logger.printHistory()).toMatchInlineSnapshot(`
         |                                   ^
      64 |       "
      65 |       ERROR ✖ Failed to get staged files!"
      66 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:63:35)

  ● lintStaged › should return true when passed

    expect(received).resolves.toEqual(expected) // deep equality

    Expected: true
    Received: false

      74 |     const config = { '*': 'node -e "process.exit(0)"' }
      75 |
    > 76 |     await expect(lintStaged({ config, quiet: true }, logger)).resolves.toEqual(true)
         |                                                                        ^
      77 |   })
      78 |
      79 |   it('should use use the console if no logger is passed', async () => {

      at Object.toEqual (node_modules/expect/build/index.js:194:22)
      at Object.toEqual (test/unit/index.spec.js:76:72)

  ● lintStaged › should use use the console if no logger is passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use use the console if no logger is passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      88 |     await lintStaged()
      89 |
    > 90 |     expect(mockedConsole.printHistory()).toMatchInlineSnapshot(`
         |                                          ^
      91 |       "
      92 |       ERROR ✖ Failed to get staged files!"
      93 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:90:42)

 › 2 snapshots failed.
FAIL test/integration/git-submodules.test.js
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-worktree.test.js
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/resolveGitRepo.spec.js
  ● resolveGitRepo › should resolve to current working dir when .git is in the same dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      14 |     const cwd = normalize(process.cwd())
      15 |     const { gitDir } = await resolveGitRepo()
    > 16 |     expect(gitDir).toEqual(cwd)
         |                    ^
      17 |   })
      18 |
      19 |   const expected = normalize(path.join(path.dirname(__dirname), '../'))

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:16:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      23 |     process.cwd = () => __dirname
      24 |     const { gitDir } = await resolveGitRepo()
    > 25 |     expect(gitDir).toEqual(expected)
         |                    ^
      26 |     process.cwd = processCwdBkp
      27 |   })
      28 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:25:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_DIR environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      32 |     process.env.GIT_DIR = 'wrong/path/.git' // refer to https://github.com/DonJayamanne/gitHistoryVSCode/issues/233#issuecomment-375769718
      33 |     const { gitDir } = await resolveGitRepo()
    > 34 |     expect(gitDir).toEqual(expected)
         |                    ^
      35 |     process.cwd = processCwdBkp
      36 |   })
      37 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:34:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_WORK_TREE environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      41 |     process.env.GIT_WORK_TREE = './wrong/path/'
      42 |     const { gitDir } = await resolveGitRepo()
    > 43 |     expect(gitDir).toEqual(expected)
         |                    ^
      44 |     process.cwd = processCwdBkp
      45 |   })
      46 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:43:20)

PASS test/unit/runAll.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/state.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/file.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/getRenderer.spec.js

Summary of all failing tests
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _onetime.default) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _onetime.default) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "(0 , _onetime.default) is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

FAIL test/integration/basic-functionality.test.js
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports multiple configuration files with --relative



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ignores multiple configs files outside cwd



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks pass



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files in complex case



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files due to git bug when tasks fail



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-initial-commit.test.js
  ● lint-staged › skips backup when run on an empty git repo without an initial commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › not care about staged file outside current cwd without any other staged files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ignores untracked files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ingores untracked files when task fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/binary-files.test.js
  ● lint-staged › handles binary files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/index.spec.js
  ● lintStaged › should use lilconfig if no params are passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use lilconfig if no params are passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      61 |     await lintStaged(undefined, logger)
      62 |
    > 63 |     expect(logger.printHistory()).toMatchInlineSnapshot(`
         |                                   ^
      64 |       "
      65 |       ERROR ✖ Failed to get staged files!"
      66 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:63:35)

  ● lintStaged › should return true when passed

    expect(received).resolves.toEqual(expected) // deep equality

    Expected: true
    Received: false

      74 |     const config = { '*': 'node -e "process.exit(0)"' }
      75 |
    > 76 |     await expect(lintStaged({ config, quiet: true }, logger)).resolves.toEqual(true)
         |                                                                        ^
      77 |   })
      78 |
      79 |   it('should use use the console if no logger is passed', async () => {

      at Object.toEqual (node_modules/expect/build/index.js:194:22)
      at Object.toEqual (test/unit/index.spec.js:76:72)

  ● lintStaged › should use use the console if no logger is passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use use the console if no logger is passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      88 |     await lintStaged()
      89 |
    > 90 |     expect(mockedConsole.printHistory()).toMatchInlineSnapshot(`
         |                                          ^
      91 |       "
      92 |       ERROR ✖ Failed to get staged files!"
      93 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:90:42)

FAIL test/integration/git-submodules.test.js
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-worktree.test.js
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/resolveGitRepo.spec.js
  ● resolveGitRepo › should resolve to current working dir when .git is in the same dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      14 |     const cwd = normalize(process.cwd())
      15 |     const { gitDir } = await resolveGitRepo()
    > 16 |     expect(gitDir).toEqual(cwd)
         |                    ^
      17 |   })
      18 |
      19 |   const expected = normalize(path.join(path.dirname(__dirname), '../'))

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:16:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      23 |     process.cwd = () => __dirname
      24 |     const { gitDir } = await resolveGitRepo()
    > 25 |     expect(gitDir).toEqual(expected)
         |                    ^
      26 |     process.cwd = processCwdBkp
      27 |   })
      28 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:25:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_DIR environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      32 |     process.env.GIT_DIR = 'wrong/path/.git' // refer to https://github.com/DonJayamanne/gitHistoryVSCode/issues/233#issuecomment-375769718
      33 |     const { gitDir } = await resolveGitRepo()
    > 34 |     expect(gitDir).toEqual(expected)
         |                    ^
      35 |     process.cwd = processCwdBkp
      36 |   })
      37 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:34:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_WORK_TREE environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      41 |     process.env.GIT_WORK_TREE = './wrong/path/'
      42 |     const { gitDir } = await resolveGitRepo()
    > 43 |     expect(gitDir).toEqual(expected)
         |                    ^
      44 |     process.cwd = processCwdBkp
      45 |   })
      46 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:43:20)


Snapshot Summary
 › 4 snapshots failed from 2 test suites. Inspect your code changes or run `npm test -- -u` to update them.

Test Suites: 23 failed, 23 passed, 46 total
Tests:       59 failed, 1 skipped, 171 passed, 231 total
Snapshots:   4 failed, 65 passed, 69 total
Time:        16.814 s
Ran all test suites.
Jest did not exit one second after the test run has completed.

This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _npmRunPath.npmRunPathEnv) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _npmRunPath.npmRunPathEnv) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "(0 , _npmRunPath.npmRunPathEnv) is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

 › 2 snapshots failed.
FAIL test/integration/basic-functionality.test.js (5.276 s)
  ● lint-staged › commits entire staged file when no errors and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      54 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      55 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 56 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      57 |       expect(await readFile('test2.js')).toEqual(fileFixtures.prettyJS)
      58 |     })
      59 |   )

      at toEqual (test/integration/basic-functionality.test.js:56:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      70 |
      71 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 72 |       await expect(gitCommit()).rejects.toThrowError(
         |             ^
      73 |         'Reverting to original state because of errors'
      74 |       )
      75 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:72:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      93 |
      94 |       // Run lint-staged with `prettier --write` to break the linter
    > 95 |       await expect(gitCommit()).rejects.toThrowError(
         |             ^
      96 |         'Reverting to original state because of errors'
      97 |       )
      98 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:95:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › clears unstaged changes when linter applies same changes

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      127 |       // Latest commit contains pretty file
      128 |       // `git show` strips empty line from here here
    > 129 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
          |                                                       ^
      130 |
      131 |       // Nothing is staged
      132 |       expect(await execGit(['status'])).toMatch('nothing added to commit')

      at toEqual (test/integration/basic-functionality.test.js:129:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails when backup stash is missing

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] git stash drop
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      166 |       await execGit(['add', 'test.js'])
      167 |
    > 168 |       await expect(
          |             ^
      169 |         gitCommit({
      170 |           lintStaged: {
      171 |             // Remove backup stash during run

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:168:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles files that begin with dash

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      188 |
      189 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
    > 190 |       expect(await readFile('--looks-like-flag.js')).toEqual(fileFixtures.prettyJS)
          |                                                      ^
      191 |     })
      192 |   )
      193 |

      at toEqual (test/integration/basic-functionality.test.js:190:54)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/gitWorkFlow.test.js
FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      31 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      32 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 33 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      34 |     })
      35 |   )
      36 |

      at toEqual (test/integration/no-stash.test.js:33:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    WARN ⚠ Skipping backup because `--no-stash` was used.·
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-a22fc5f084354311fe011109d0b37955/te…
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files..."

      43 |
      44 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 45 |       await expect(
         |             ^
      46 |         gitCommit({
      47 |           lintStaged: {
      48 |             stash: false,

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/no-stash.test.js:45:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    WARN ⚠ Skipping backup because `--no-stash` was used.·
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 2 files
    LOG [STARTED] *.js — 2 files
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks..."

      89 |
      90 |       // Run lint-staged with --no-stash
    > 91 |       await expect(gitCommit({ lintStaged: { stash: false } })).rejects.toThrowError(
         |             ^
      92 |         'SyntaxError: Unexpected token'
      93 |       )
      94 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/no-stash.test.js:91:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files

    expect(received).toMatch(expected)

    Expected substring: "level-0"
    Received string:    ""

      37 |
      38 |       // 'file.js' matched '.lintstagedrc.json'
    > 39 |       expect(await readFile('file.js')).toMatch('level-0')
         |                                         ^
      40 |
      41 |       // 'deeper/file.js' matched 'deeper/.lintstagedrc.json'
      42 |       expect(await readFile('deeper/file.js')).toMatch('level-1')

      at toMatch (test/integration/multiple-config-files.test.js:39:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › supports multiple configuration files with --relative

    expect(received).toMatch(expected)

    Expected substring: "file.js"
    Received string:    ""

      76 |
      77 |       // 'file.js' is relative to '.'
    > 78 |       expect(await readFile('file.js')).toMatch('file.js')
         |                                         ^
      79 |
      80 |       // 'deeper/file.js' is relative to 'deeper/'
      81 |       expect(await readFile('deeper/file.js')).toMatch('file.js')

      at toMatch (test/integration/multiple-config-files.test.js:78:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › ignores multiple configs files outside cwd

    expect(received).toMatch(expected)

    Expected substring: "level-1"
    Received string:    ""

      122 |
      123 |       // 'deeper/file.js' matched 'deeper/.lintstagedrc.json'
    > 124 |       expect(await readFile('deeper/file.js')).toMatch('level-1')
          |                                                ^
      125 |
      126 |       // 'deeper/even/file.js' matched 'deeper/even/.lintstagedrc.json'
      127 |       expect(await readFile('deeper/even/file.js')).toMatch('level-2')

      at toMatch (test/integration/multiple-config-files.test.js:124:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks fail

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      81 |       `)
      82 |
    > 83 |       await expect(gitCommit({ lintStaged: { allowEmpty: true } })).rejects.toThrowError(
         |             ^
      84 |         'Reverting to original state because of errors...'
      85 |       )
      86 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/file-resurrection.test.js:83:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      75 |       // Latest commit contains pretty file
      76 |       // `git show` strips empty line from here here
    > 77 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
         |                                                       ^
      78 |
      79 |       // Nothing is staged
      80 |       const status = await execGit(['status'])

      at toEqual (test/integration/partially-staged-changes.test.js:77:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      102 |
      103 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 104 |       await expect(gitCommit(configFixtures.prettierListDifferent)).rejects.toThrowError(
          |             ^
      105 |         'Reverting to original state because of errors'
      106 |       )
      107 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:104:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      128 |       const status = await execGit(['status'])
      129 |
    > 130 |       await expect(gitCommit()).rejects.toThrowError(
          |             ^
      131 |         'Reverting to original state because of errors'
      132 |       )
      133 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:130:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      29 |       // Run lint-staged with prettier --write to automatically fix the file
      30 |       // Since prettier reverts all changes, the commit should fail
    > 31 |       await expect(gitCommit()).rejects.toThrowError('lint-staged prevented an empty git commit.')
         |             ^
      32 |
      33 |       // Something was wrong so the repo is returned to original state
      34 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/allow-empty.test.js:31:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      61 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
      62 |       expect(await execGit(['diff', '-1'])).toEqual('')
    > 63 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      64 |     })
      65 |   )
      66 | })

      at toEqual (test/integration/allow-empty.test.js:63:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/merge-conflict.test.js (5.034 s)
  ● lint-staged › handles merge conflicts

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      39 |       await execGit(['add', '.'])
      40 |       await gitCommit({ gitCommit: ['-m commit b'] })
    > 41 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
         |                                         ^
      42 |
      43 |       // Merge first branch
      44 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:41:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles merge conflict when task errors

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      103 |       await gitCommit({ gitCommit: ['-m commit b'] })
      104 |
    > 105 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
          |                                         ^
      106 |
      107 |       // Merge first branch
      108 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:105:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-5420dc3d7321dd8b974c764007e85ca4/te…
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      149 |
      150 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 151 |       await expect(
          |             ^
      152 |         gitCommit({
      153 |           lintStaged: {
      154 |             config: {

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/merge-conflict.test.js:151:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      33 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      34 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 35 |       expect(await readFile('привет.js')).toEqual(fileFixtures.prettyJS)
         |                                           ^
      36 |       expect(await readFile('你好.js')).toEqual(fileFixtures.prettyJS)
      37 |       expect(await readFile('👋.js')).toEqual(fileFixtures.prettyJS)
      38 |     })

      at toEqual (test/integration/non-ascii.test.js:35:43)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      33 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      34 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 35 |       expect(await readFile('привет.js')).toEqual(fileFixtures.prettyJS)
         |                                           ^
      36 |       expect(await readFile('你好.js')).toEqual(fileFixtures.prettyJS)
      37 |       expect(await readFile('👋.js')).toEqual(fileFixtures.prettyJS)
      38 |     })

      at toEqual (test/integration/non-ascii.test.js:35:43)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ingores untracked files when task fails

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      52 |
      53 |       // Run lint-staged with `prettier --list-different` and commit pretty file
    > 54 |       await expect(gitCommit()).rejects.toThrowError()
         |             ^
      55 |
      56 |       // Something was wrong so the repo is returned to original state
      57 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('1')

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/untracked-files.test.js:54:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] touch /tmp/lint-staged-4404b49c1de1a04fcafbe83903f4790e/.git/index.lo…
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      26 |       // Run lint-staged with `prettier --write` and commit pretty file
      27 |       // The task creates a git lock file and runs `git add` to simulate failure
    > 28 |       await expect(
         |             ^
      29 |         gitCommit({
      30 |           lintStaged: {
      31 |             shell: isWindows,

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/git-lock-file.test.js:28:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff

    expect(received).toEqual(expected) // deep equality

    Expected: false
    Received: true

      38 |
      39 |       // Lint-staged failed because commit diff contains ugly file
    > 40 |       expect(passed).toEqual(false)
         |                      ^
      41 |
      42 |       expect(console.printHistory()).toMatch('prettier --list-different:')
      43 |       expect(console.printHistory()).toMatch('test.js')

      at toEqual (test/integration/diff-options.test.js:40:22)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      25 |
      26 |       // File inside deeper/ was fixed
    > 27 |       expect(await readFile('deeper/file.js')).toEqual(prettyJS)
         |                                                ^
      28 |       // ...but file outside was not
      29 |       expect(await readFile('file.js')).toEqual(uglyJS)
      30 |     })

      at toEqual (test/integration/files-outside-cwd.test.js:27:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/binary-files.test.js
FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"

    expect(received).toMatch(expected)

    Expected substring: "level-2"
    Received string:    ""

      39 |
      40 |       // One level above, match
    > 41 |       expect(await readFile('deeper/file.js')).toMatch('level-2')
         |                                                ^
      42 |
      43 |       // Not directly in the above-level, no match
      44 |       expect(await readFile('deeper/even/file.js')).toEqual('')

      at toMatch (test/integration/parent-globs.test.js:41:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/unit/index.spec.js
PASS test/integration/no-initial-commit.test.js
FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      29 |       await gitCommit()
      30 |
    > 31 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS) // file was fixed
         |                                         ^
      32 |     })
      33 |   )
      34 | })

      at toEqual (test/integration/symlinked-config.test.js:31:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/git-submodules.test.js
PASS test/integration/git-amend.test.js
PASS test/integration/git-worktree.test.js
PASS test/unit/resolveGitRepo.spec.js
PASS test/unit/runAll.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/state.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/file.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/dynamicImport.spec.js

Summary of all failing tests
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _npmRunPath.npmRunPathEnv) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _npmRunPath.npmRunPathEnv) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "(0 , _npmRunPath.npmRunPathEnv) is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

FAIL test/integration/basic-functionality.test.js (5.276 s)
  ● lint-staged › commits entire staged file when no errors and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      54 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      55 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 56 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      57 |       expect(await readFile('test2.js')).toEqual(fileFixtures.prettyJS)
      58 |     })
      59 |   )

      at toEqual (test/integration/basic-functionality.test.js:56:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      70 |
      71 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 72 |       await expect(gitCommit()).rejects.toThrowError(
         |             ^
      73 |         'Reverting to original state because of errors'
      74 |       )
      75 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:72:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      93 |
      94 |       // Run lint-staged with `prettier --write` to break the linter
    > 95 |       await expect(gitCommit()).rejects.toThrowError(
         |             ^
      96 |         'Reverting to original state because of errors'
      97 |       )
      98 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:95:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › clears unstaged changes when linter applies same changes

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      127 |       // Latest commit contains pretty file
      128 |       // `git show` strips empty line from here here
    > 129 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
          |                                                       ^
      130 |
      131 |       // Nothing is staged
      132 |       expect(await execGit(['status'])).toMatch('nothing added to commit')

      at toEqual (test/integration/basic-functionality.test.js:129:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails when backup stash is missing

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] git stash drop
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      166 |       await execGit(['add', 'test.js'])
      167 |
    > 168 |       await expect(
          |             ^
      169 |         gitCommit({
      170 |           lintStaged: {
      171 |             // Remove backup stash during run

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:168:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles files that begin with dash

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      188 |
      189 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
    > 190 |       expect(await readFile('--looks-like-flag.js')).toEqual(fileFixtures.prettyJS)
          |                                                      ^
      191 |     })
      192 |   )
      193 |

      at toEqual (test/integration/basic-functionality.test.js:190:54)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      31 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      32 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 33 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      34 |     })
      35 |   )
      36 |

      at toEqual (test/integration/no-stash.test.js:33:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    WARN ⚠ Skipping backup because `--no-stash` was used.·
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-a22fc5f084354311fe011109d0b37955/te…
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files..."

      43 |
      44 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 45 |       await expect(
         |             ^
      46 |         gitCommit({
      47 |           lintStaged: {
      48 |             stash: false,

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/no-stash.test.js:45:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    WARN ⚠ Skipping backup because `--no-stash` was used.·
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 2 files
    LOG [STARTED] *.js — 2 files
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks..."

      89 |
      90 |       // Run lint-staged with --no-stash
    > 91 |       await expect(gitCommit({ lintStaged: { stash: false } })).rejects.toThrowError(
         |             ^
      92 |         'SyntaxError: Unexpected token'
      93 |       )
      94 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/no-stash.test.js:91:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files

    expect(received).toMatch(expected)

    Expected substring: "level-0"
    Received string:    ""

      37 |
      38 |       // 'file.js' matched '.lintstagedrc.json'
    > 39 |       expect(await readFile('file.js')).toMatch('level-0')
         |                                         ^
      40 |
      41 |       // 'deeper/file.js' matched 'deeper/.lintstagedrc.json'
      42 |       expect(await readFile('deeper/file.js')).toMatch('level-1')

      at toMatch (test/integration/multiple-config-files.test.js:39:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › supports multiple configuration files with --relative

    expect(received).toMatch(expected)

    Expected substring: "file.js"
    Received string:    ""

      76 |
      77 |       // 'file.js' is relative to '.'
    > 78 |       expect(await readFile('file.js')).toMatch('file.js')
         |                                         ^
      79 |
      80 |       // 'deeper/file.js' is relative to 'deeper/'
      81 |       expect(await readFile('deeper/file.js')).toMatch('file.js')

      at toMatch (test/integration/multiple-config-files.test.js:78:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › ignores multiple configs files outside cwd

    expect(received).toMatch(expected)

    Expected substring: "level-1"
    Received string:    ""

      122 |
      123 |       // 'deeper/file.js' matched 'deeper/.lintstagedrc.json'
    > 124 |       expect(await readFile('deeper/file.js')).toMatch('level-1')
          |                                                ^
      125 |
      126 |       // 'deeper/even/file.js' matched 'deeper/even/.lintstagedrc.json'
      127 |       expect(await readFile('deeper/even/file.js')).toMatch('level-2')

      at toMatch (test/integration/multiple-config-files.test.js:124:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks fail

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      81 |       `)
      82 |
    > 83 |       await expect(gitCommit({ lintStaged: { allowEmpty: true } })).rejects.toThrowError(
         |             ^
      84 |         'Reverting to original state because of errors...'
      85 |       )
      86 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/file-resurrection.test.js:83:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      75 |       // Latest commit contains pretty file
      76 |       // `git show` strips empty line from here here
    > 77 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
         |                                                       ^
      78 |
      79 |       // Nothing is staged
      80 |       const status = await execGit(['status'])

      at toEqual (test/integration/partially-staged-changes.test.js:77:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      102 |
      103 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 104 |       await expect(gitCommit(configFixtures.prettierListDifferent)).rejects.toThrowError(
          |             ^
      105 |         'Reverting to original state because of errors'
      106 |       )
      107 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:104:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      128 |       const status = await execGit(['status'])
      129 |
    > 130 |       await expect(gitCommit()).rejects.toThrowError(
          |             ^
      131 |         'Reverting to original state because of errors'
      132 |       )
      133 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:130:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      29 |       // Run lint-staged with prettier --write to automatically fix the file
      30 |       // Since prettier reverts all changes, the commit should fail
    > 31 |       await expect(gitCommit()).rejects.toThrowError('lint-staged prevented an empty git commit.')
         |             ^
      32 |
      33 |       // Something was wrong so the repo is returned to original state
      34 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/allow-empty.test.js:31:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      61 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
      62 |       expect(await execGit(['diff', '-1'])).toEqual('')
    > 63 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      64 |     })
      65 |   )
      66 | })

      at toEqual (test/integration/allow-empty.test.js:63:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/merge-conflict.test.js (5.034 s)
  ● lint-staged › handles merge conflicts

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      39 |       await execGit(['add', '.'])
      40 |       await gitCommit({ gitCommit: ['-m commit b'] })
    > 41 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
         |                                         ^
      42 |
      43 |       // Merge first branch
      44 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:41:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles merge conflict when task errors

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      103 |       await gitCommit({ gitCommit: ['-m commit b'] })
      104 |
    > 105 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
          |                                         ^
      106 |
      107 |       // Merge first branch
      108 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:105:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-5420dc3d7321dd8b974c764007e85ca4/te…
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      149 |
      150 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 151 |       await expect(
          |             ^
      152 |         gitCommit({
      153 |           lintStaged: {
      154 |             config: {

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/merge-conflict.test.js:151:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      33 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      34 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 35 |       expect(await readFile('привет.js')).toEqual(fileFixtures.prettyJS)
         |                                           ^
      36 |       expect(await readFile('你好.js')).toEqual(fileFixtures.prettyJS)
      37 |       expect(await readFile('��.js')).toEqual(fileFixtures.prettyJS)
      38 |     })

      at toEqual (test/integration/non-ascii.test.js:35:43)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      33 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      34 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 35 |       expect(await readFile('привет.js')).toEqual(fileFixtures.prettyJS)
         |                                           ^
      36 |       expect(await readFile('你好.js')).toEqual(fileFixtures.prettyJS)
      37 |       expect(await readFile('��.js')).toEqual(fileFixtures.prettyJS)
      38 |     })

      at toEqual (test/integration/non-ascii.test.js:35:43)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ingores untracked files when task fails

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      52 |
      53 |       // Run lint-staged with `prettier --list-different` and commit pretty file
    > 54 |       await expect(gitCommit()).rejects.toThrowError()
         |             ^
      55 |
      56 |       // Something was wrong so the repo is returned to original state
      57 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('1')

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/untracked-files.test.js:54:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] touch /tmp/lint-staged-4404b49c1de1a04fcafbe83903f4790e/.git/index.lo…
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    ERROR [FAILED] (0 , _npmRunPath.npmRunPathEnv) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      26 |       // Run lint-staged with `prettier --write` and commit pretty file
      27 |       // The task creates a git lock file and runs `git add` to simulate failure
    > 28 |       await expect(
         |             ^
      29 |         gitCommit({
      30 |           lintStaged: {
      31 |             shell: isWindows,

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/git-lock-file.test.js:28:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff

    expect(received).toEqual(expected) // deep equality

    Expected: false
    Received: true

      38 |
      39 |       // Lint-staged failed because commit diff contains ugly file
    > 40 |       expect(passed).toEqual(false)
         |                      ^
      41 |
      42 |       expect(console.printHistory()).toMatch('prettier --list-different:')
      43 |       expect(console.printHistory()).toMatch('test.js')

      at toEqual (test/integration/diff-options.test.js:40:22)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      25 |
      26 |       // File inside deeper/ was fixed
    > 27 |       expect(await readFile('deeper/file.js')).toEqual(prettyJS)
         |                                                ^
      28 |       // ...but file outside was not
      29 |       expect(await readFile('file.js')).toEqual(uglyJS)
      30 |     })

      at toEqual (test/integration/files-outside-cwd.test.js:27:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"

    expect(received).toMatch(expected)

    Expected substring: "level-2"
    Received string:    ""

      39 |
      40 |       // One level above, match
    > 41 |       expect(await readFile('deeper/file.js')).toMatch('level-2')
         |                                                ^
      42 |
      43 |       // Not directly in the above-level, no match
      44 |       expect(await readFile('deeper/even/file.js')).toEqual('')

      at toMatch (test/integration/parent-globs.test.js:41:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      29 |       await gitCommit()
      30 |
    > 31 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS) // file was fixed
         |                                         ^
      32 |     })
      33 |   )
      34 | })

      at toEqual (test/integration/symlinked-config.test.js:31:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)


Snapshot Summary
 › 2 snapshots failed from 1 test suite. Inspect your code changes or run `npm test -- -u` to update them.

Test Suites: 15 failed, 31 passed, 46 total
Tests:       31 failed, 1 skipped, 199 passed, 231 total
Snapshots:   2 failed, 77 passed, 79 total
Time:        50.547 s
Ran all test suites.
FAIL test/integration/basic-functionality.test.js
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › supports multiple configuration files with --relative



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › ignores multiple configs files outside cwd



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › not care about staged file outside current cwd without any other staged files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ignores untracked files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › ingores untracked files when task fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks pass



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › does not resurrect removed files in complex case



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › does not resurrect removed files due to git bug when tasks fail



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/unit/resolveTaskFn.unmocked.spec.js (5.301 s)
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _stripFinalNewline.default) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      16 |   })
      17 |
    > 18 |   it('should kill a long running task when another fails', async () => {
         |   ^
      19 |     const context = getInitialState()
      20 |
      21 |     const taskFn = resolveTaskFn({

      at it (test/unit/resolveTaskFn.unmocked.spec.js:18:3)
      at Object.describe (test/unit/resolveTaskFn.unmocked.spec.js:6:1)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _stripFinalNewline.default) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

 › 1 snapshot failed.
FAIL test/integration/git-submodules.test.js
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-worktree.test.js
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/no-initial-commit.test.js
  ● lint-staged › skips backup when run on an empty git repo without an initial commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/binary-files.test.js
  ● lint-staged › handles binary files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/unit/index.spec.js
  ● lintStaged › should use lilconfig if no params are passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use lilconfig if no params are passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      61 |     await lintStaged(undefined, logger)
      62 |
    > 63 |     expect(logger.printHistory()).toMatchInlineSnapshot(`
         |                                   ^
      64 |       "
      65 |       ERROR ✖ Failed to get staged files!"
      66 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:63:35)

  ● lintStaged › should return true when passed

    expect(received).resolves.toEqual(expected) // deep equality

    Expected: true
    Received: false

      74 |     const config = { '*': 'node -e "process.exit(0)"' }
      75 |
    > 76 |     await expect(lintStaged({ config, quiet: true }, logger)).resolves.toEqual(true)
         |                                                                        ^
      77 |   })
      78 |
      79 |   it('should use use the console if no logger is passed', async () => {

      at Object.toEqual (node_modules/expect/build/index.js:194:22)
      at Object.toEqual (test/unit/index.spec.js:76:72)

  ● lintStaged › should use use the console if no logger is passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use use the console if no logger is passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      88 |     await lintStaged()
      89 |
    > 90 |     expect(mockedConsole.printHistory()).toMatchInlineSnapshot(`
         |                                          ^
      91 |       "
      92 |       ERROR ✖ Failed to get staged files!"
      93 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:90:42)

 › 2 snapshots failed.
PASS test/unit/runAll.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/index2.spec.js
PASS test/unit/state.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveTaskFn.spec.js
FAIL test/unit/resolveGitRepo.spec.js
  ● resolveGitRepo › should resolve to current working dir when .git is in the same dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      14 |     const cwd = normalize(process.cwd())
      15 |     const { gitDir } = await resolveGitRepo()
    > 16 |     expect(gitDir).toEqual(cwd)
         |                    ^
      17 |   })
      18 |
      19 |   const expected = normalize(path.join(path.dirname(__dirname), '../'))

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:16:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      23 |     process.cwd = () => __dirname
      24 |     const { gitDir } = await resolveGitRepo()
    > 25 |     expect(gitDir).toEqual(expected)
         |                    ^
      26 |     process.cwd = processCwdBkp
      27 |   })
      28 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:25:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_DIR environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      32 |     process.env.GIT_DIR = 'wrong/path/.git' // refer to https://github.com/DonJayamanne/gitHistoryVSCode/issues/233#issuecomment-375769718
      33 |     const { gitDir } = await resolveGitRepo()
    > 34 |     expect(gitDir).toEqual(expected)
         |                    ^
      35 |     process.cwd = processCwdBkp
      36 |   })
      37 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:34:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_WORK_TREE environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      41 |     process.env.GIT_WORK_TREE = './wrong/path/'
      42 |     const { gitDir } = await resolveGitRepo()
    > 43 |     expect(gitDir).toEqual(expected)
         |                    ^
      44 |     process.cwd = processCwdBkp
      45 |   })
      46 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:43:20)

PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/file.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/parseGitZOutput.spec.js

Summary of all failing tests
FAIL test/integration/basic-functionality.test.js
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › supports multiple configuration files with --relative



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › ignores multiple configs files outside cwd



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › not care about staged file outside current cwd without any other staged files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ignores untracked files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › ingores untracked files when task fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks pass



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › does not resurrect removed files in complex case



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › does not resurrect removed files due to git bug when tasks fail



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/unit/resolveTaskFn.unmocked.spec.js (5.301 s)
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _stripFinalNewline.default) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    thrown: "Exceeded timeout of 5000 ms for a test.
    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test."

      16 |   })
      17 |
    > 18 |   it('should kill a long running task when another fails', async () => {
         |   ^
      19 |     const context = getInitialState()
      20 |
      21 |     const taskFn = resolveTaskFn({

      at it (test/unit/resolveTaskFn.unmocked.spec.js:18:3)
      at Object.describe (test/unit/resolveTaskFn.unmocked.spec.js:6:1)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _stripFinalNewline.default) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

FAIL test/integration/git-submodules.test.js
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-worktree.test.js
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/no-initial-commit.test.js
  ● lint-staged › skips backup when run on an empty git repo without an initial commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/binary-files.test.js
  ● lint-staged › handles binary files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/unit/index.spec.js
  ● lintStaged › should use lilconfig if no params are passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use lilconfig if no params are passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      61 |     await lintStaged(undefined, logger)
      62 |
    > 63 |     expect(logger.printHistory()).toMatchInlineSnapshot(`
         |                                   ^
      64 |       "
      65 |       ERROR ✖ Failed to get staged files!"
      66 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:63:35)

  ● lintStaged › should return true when passed

    expect(received).resolves.toEqual(expected) // deep equality

    Expected: true
    Received: false

      74 |     const config = { '*': 'node -e "process.exit(0)"' }
      75 |
    > 76 |     await expect(lintStaged({ config, quiet: true }, logger)).resolves.toEqual(true)
         |                                                                        ^
      77 |   })
      78 |
      79 |   it('should use use the console if no logger is passed', async () => {

      at Object.toEqual (node_modules/expect/build/index.js:194:22)
      at Object.toEqual (test/unit/index.spec.js:76:72)

  ● lintStaged › should use use the console if no logger is passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use use the console if no logger is passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      88 |     await lintStaged()
      89 |
    > 90 |     expect(mockedConsole.printHistory()).toMatchInlineSnapshot(`
         |                                          ^
      91 |       "
      92 |       ERROR ✖ Failed to get staged files!"
      93 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:90:42)

FAIL test/unit/resolveGitRepo.spec.js
  ● resolveGitRepo › should resolve to current working dir when .git is in the same dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      14 |     const cwd = normalize(process.cwd())
      15 |     const { gitDir } = await resolveGitRepo()
    > 16 |     expect(gitDir).toEqual(cwd)
         |                    ^
      17 |   })
      18 |
      19 |   const expected = normalize(path.join(path.dirname(__dirname), '../'))

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:16:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      23 |     process.cwd = () => __dirname
      24 |     const { gitDir } = await resolveGitRepo()
    > 25 |     expect(gitDir).toEqual(expected)
         |                    ^
      26 |     process.cwd = processCwdBkp
      27 |   })
      28 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:25:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_DIR environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      32 |     process.env.GIT_DIR = 'wrong/path/.git' // refer to https://github.com/DonJayamanne/gitHistoryVSCode/issues/233#issuecomment-375769718
      33 |     const { gitDir } = await resolveGitRepo()
    > 34 |     expect(gitDir).toEqual(expected)
         |                    ^
      35 |     process.cwd = processCwdBkp
      36 |   })
      37 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:34:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_WORK_TREE environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      41 |     process.env.GIT_WORK_TREE = './wrong/path/'
      42 |     const { gitDir } = await resolveGitRepo()
    > 43 |     expect(gitDir).toEqual(expected)
         |                    ^
      44 |     process.cwd = processCwdBkp
      45 |   })
      46 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:43:20)


Snapshot Summary
 › 3 snapshots failed from 2 test suites. Inspect your code changes or run `npm test -- -u` to update them.

Test Suites: 23 failed, 23 passed, 46 total
Tests:       59 failed, 1 skipped, 171 passed, 231 total
Snapshots:   3 failed, 65 passed, 68 total
Time:        21.85 s, estimated 50 s
Ran all test suites.
Jest did not exit one second after the test run has completed.

This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.
PASS test/unit/resolveTaskFn.unmocked.spec.js
PASS test/integration/basic-functionality.test.js (5.105 s)
PASS test/integration/gitWorkFlow.test.js
PASS test/integration/files-outside-cwd.test.js
PASS test/integration/partially-staged-changes.test.js
PASS test/integration/merge-conflict.test.js
PASS test/integration/multiple-config-files.test.js
PASS test/integration/file-resurrection.test.js
PASS test/integration/no-stash.test.js
PASS test/integration/untracked-files.test.js
PASS test/integration/non-ascii.test.js
PASS test/integration/diff-options.test.js
PASS test/unit/index.spec.js
PASS test/integration/git-lock-file.test.js
PASS test/integration/allow-empty.test.js
PASS test/integration/git-submodules.test.js
PASS test/integration/git-amend.test.js
PASS test/integration/git-worktree.test.js
PASS test/integration/binary-files.test.js
PASS test/integration/no-initial-commit.test.js
PASS test/integration/symlinked-config.test.js
PASS test/integration/parent-globs.test.js
PASS test/unit/resolveGitRepo.spec.js
PASS test/unit/runAll.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/state.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/file.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/printTaskOutput.spec.js

Test Suites: 46 passed, 46 total
Tests:       1 skipped, 230 passed, 231 total
Snapshots:   90 passed, 90 total
Time:        41.868 s
Ran all test suites.
PASS test/integration/basic-functionality.test.js (5.597 s)
PASS test/integration/merge-conflict.test.js
PASS test/integration/partially-staged-changes.test.js
PASS test/integration/file-resurrection.test.js
PASS test/integration/no-stash.test.js
PASS test/integration/allow-empty.test.js
PASS test/integration/non-ascii.test.js
PASS test/integration/untracked-files.test.js
PASS test/integration/multiple-config-files.test.js
PASS test/integration/git-submodules.test.js
PASS test/integration/git-worktree.test.js
PASS test/integration/git-lock-file.test.js
PASS test/integration/symlinked-config.test.js
PASS test/integration/files-outside-cwd.test.js
PASS test/integration/no-initial-commit.test.js
PASS test/integration/diff-options.test.js
PASS test/unit/resolveTaskFn.unmocked.spec.js
PASS test/integration/gitWorkFlow.test.js
PASS test/integration/parent-globs.test.js
PASS test/integration/binary-files.test.js
PASS test/integration/git-amend.test.js
PASS test/unit/index.spec.js
PASS test/unit/resolveGitRepo.spec.js
PASS test/unit/runAll.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/state.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/file.spec.js
PASS test/unit/dynamicImport.spec.js

Test Suites: 46 passed, 46 total
Tests:       1 skipped, 230 passed, 231 total
Snapshots:   90 passed, 90 total
Time:        41.764 s
Ran all test suites.
FAIL test/integration/basic-functionality.test.js (5.634 s)
  ● lint-staged › commits entire staged file when no errors and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      54 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      55 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 56 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      57 |       expect(await readFile('test2.js')).toEqual(fileFixtures.prettyJS)
      58 |     })
      59 |   )

      at toEqual (test/integration/basic-functionality.test.js:56:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      70 |
      71 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 72 |       await expect(gitCommit()).rejects.toThrowError(
         |             ^
      73 |         'Reverting to original state because of errors'
      74 |       )
      75 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:72:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      93 |
      94 |       // Run lint-staged with `prettier --write` to break the linter
    > 95 |       await expect(gitCommit()).rejects.toThrowError(
         |             ^
      96 |         'Reverting to original state because of errors'
      97 |       )
      98 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:95:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › clears unstaged changes when linter applies same changes

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      127 |       // Latest commit contains pretty file
      128 |       // `git show` strips empty line from here here
    > 129 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
          |                                                       ^
      130 |
      131 |       // Nothing is staged
      132 |       expect(await execGit(['status'])).toMatch('nothing added to commit')

      at toEqual (test/integration/basic-functionality.test.js:129:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails when backup stash is missing

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] git stash drop
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      166 |       await execGit(['add', 'test.js'])
      167 |
    > 168 |       await expect(
          |             ^
      169 |         gitCommit({
      170 |           lintStaged: {
      171 |             // Remove backup stash during run

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:168:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles files that begin with dash

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      188 |
      189 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
    > 190 |       expect(await readFile('--looks-like-flag.js')).toEqual(fileFixtures.prettyJS)
          |                                                      ^
      191 |     })
      192 |   )
      193 |

      at toEqual (test/integration/basic-functionality.test.js:190:54)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      39 |       await execGit(['add', '.'])
      40 |       await gitCommit({ gitCommit: ['-m commit b'] })
    > 41 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
         |                                         ^
      42 |
      43 |       // Merge first branch
      44 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:41:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles merge conflict when task errors

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      103 |       await gitCommit({ gitCommit: ['-m commit b'] })
      104 |
    > 105 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
          |                                         ^
      106 |
      107 |       // Merge first branch
      108 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:105:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-d2c23542a77f4da5a69011a3823d5102/te…
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      149 |
      150 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 151 |       await expect(
          |             ^
      152 |         gitCommit({
      153 |           lintStaged: {
      154 |             config: {

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/merge-conflict.test.js:151:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      75 |       // Latest commit contains pretty file
      76 |       // `git show` strips empty line from here here
    > 77 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
         |                                                       ^
      78 |
      79 |       // Nothing is staged
      80 |       const status = await execGit(['status'])

      at toEqual (test/integration/partially-staged-changes.test.js:77:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      102 |
      103 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 104 |       await expect(gitCommit(configFixtures.prettierListDifferent)).rejects.toThrowError(
          |             ^
      105 |         'Reverting to original state because of errors'
      106 |       )
      107 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:104:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      128 |       const status = await execGit(['status'])
      129 |
    > 130 |       await expect(gitCommit()).rejects.toThrowError(
          |             ^
      131 |         'Reverting to original state because of errors'
      132 |       )
      133 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:130:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks fail

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      81 |       `)
      82 |
    > 83 |       await expect(gitCommit({ lintStaged: { allowEmpty: true } })).rejects.toThrowError(
         |             ^
      84 |         'Reverting to original state because of errors...'
      85 |       )
      86 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/file-resurrection.test.js:83:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      31 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      32 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 33 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      34 |     })
      35 |   )
      36 |

      at toEqual (test/integration/no-stash.test.js:33:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    WARN ⚠ Skipping backup because `--no-stash` was used.·
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-096aa5a87e59c7f35da7acc3be134c11/te…
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files..."

      43 |
      44 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 45 |       await expect(
         |             ^
      46 |         gitCommit({
      47 |           lintStaged: {
      48 |             stash: false,

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/no-stash.test.js:45:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    WARN ⚠ Skipping backup because `--no-stash` was used.·
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 2 files
    LOG [STARTED] *.js — 2 files
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks..."

      89 |
      90 |       // Run lint-staged with --no-stash
    > 91 |       await expect(gitCommit({ lintStaged: { stash: false } })).rejects.toThrowError(
         |             ^
      92 |         'SyntaxError: Unexpected token'
      93 |       )
      94 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/no-stash.test.js:91:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ingores untracked files when task fails

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      52 |
      53 |       // Run lint-staged with `prettier --list-different` and commit pretty file
    > 54 |       await expect(gitCommit()).rejects.toThrowError()
         |             ^
      55 |
      56 |       // Something was wrong so the repo is returned to original state
      57 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('1')

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/untracked-files.test.js:54:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files

    expect(received).toMatch(expected)

    Expected substring: "level-0"
    Received string:    ""

      37 |
      38 |       // 'file.js' matched '.lintstagedrc.json'
    > 39 |       expect(await readFile('file.js')).toMatch('level-0')
         |                                         ^
      40 |
      41 |       // 'deeper/file.js' matched 'deeper/.lintstagedrc.json'
      42 |       expect(await readFile('deeper/file.js')).toMatch('level-1')

      at toMatch (test/integration/multiple-config-files.test.js:39:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › supports multiple configuration files with --relative

    expect(received).toMatch(expected)

    Expected substring: "file.js"
    Received string:    ""

      76 |
      77 |       // 'file.js' is relative to '.'
    > 78 |       expect(await readFile('file.js')).toMatch('file.js')
         |                                         ^
      79 |
      80 |       // 'deeper/file.js' is relative to 'deeper/'
      81 |       expect(await readFile('deeper/file.js')).toMatch('file.js')

      at toMatch (test/integration/multiple-config-files.test.js:78:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › ignores multiple configs files outside cwd

    expect(received).toMatch(expected)

    Expected substring: "level-1"
    Received string:    ""

      122 |
      123 |       // 'deeper/file.js' matched 'deeper/.lintstagedrc.json'
    > 124 |       expect(await readFile('deeper/file.js')).toMatch('level-1')
          |                                                ^
      125 |
      126 |       // 'deeper/even/file.js' matched 'deeper/even/.lintstagedrc.json'
      127 |       expect(await readFile('deeper/even/file.js')).toMatch('level-2')

      at toMatch (test/integration/multiple-config-files.test.js:124:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      29 |       // Run lint-staged with prettier --write to automatically fix the file
      30 |       // Since prettier reverts all changes, the commit should fail
    > 31 |       await expect(gitCommit()).rejects.toThrowError('lint-staged prevented an empty git commit.')
         |             ^
      32 |
      33 |       // Something was wrong so the repo is returned to original state
      34 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/allow-empty.test.js:31:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      61 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
      62 |       expect(await execGit(['diff', '-1'])).toEqual('')
    > 63 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      64 |     })
      65 |   )
      66 | })

      at toEqual (test/integration/allow-empty.test.js:63:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      33 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      34 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 35 |       expect(await readFile('привет.js')).toEqual(fileFixtures.prettyJS)
         |                                           ^
      36 |       expect(await readFile('你好.js')).toEqual(fileFixtures.prettyJS)
      37 |       expect(await readFile('👋.js')).toEqual(fileFixtures.prettyJS)
      38 |     })

      at toEqual (test/integration/non-ascii.test.js:35:43)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      33 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      34 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 35 |       expect(await readFile('привет.js')).toEqual(fileFixtures.prettyJS)
         |                                           ^
      36 |       expect(await readFile('你好.js')).toEqual(fileFixtures.prettyJS)
      37 |       expect(await readFile('👋.js')).toEqual(fileFixtures.prettyJS)
      38 |     })

      at toEqual (test/integration/non-ascii.test.js:35:43)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/gitWorkFlow.test.js
FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      25 |
      26 |       // File inside deeper/ was fixed
    > 27 |       expect(await readFile('deeper/file.js')).toEqual(prettyJS)
         |                                                ^
      28 |       // ...but file outside was not
      29 |       expect(await readFile('file.js')).toEqual(uglyJS)
      30 |     })

      at toEqual (test/integration/files-outside-cwd.test.js:27:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/git-submodules.test.js
FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] touch /tmp/lint-staged-0592097c891af2a544acb494f8b90bcf/.git/index.lo…
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      26 |       // Run lint-staged with `prettier --write` and commit pretty file
      27 |       // The task creates a git lock file and runs `git add` to simulate failure
    > 28 |       await expect(
         |             ^
      29 |         gitCommit({
      30 |           lintStaged: {
      31 |             shell: isWindows,

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/git-lock-file.test.js:28:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff

    expect(received).toEqual(expected) // deep equality

    Expected: false
    Received: true

      38 |
      39 |       // Lint-staged failed because commit diff contains ugly file
    > 40 |       expect(passed).toEqual(false)
         |                      ^
      41 |
      42 |       expect(console.printHistory()).toMatch('prettier --list-different:')
      43 |       expect(console.printHistory()).toMatch('test.js')

      at toEqual (test/integration/diff-options.test.js:40:22)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/git-worktree.test.js
FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      29 |       await gitCommit()
      30 |
    > 31 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS) // file was fixed
         |                                         ^
      32 |     })
      33 |   )
      34 | })

      at toEqual (test/integration/symlinked-config.test.js:31:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/no-initial-commit.test.js
FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"

    expect(received).toMatch(expected)

    Expected substring: "level-2"
    Received string:    ""

      39 |
      40 |       // One level above, match
    > 41 |       expect(await readFile('deeper/file.js')).toMatch('level-2')
         |                                                ^
      42 |
      43 |       // Not directly in the above-level, no match
      44 |       expect(await readFile('deeper/even/file.js')).toEqual('')

      at toMatch (test/integration/parent-globs.test.js:41:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/git-amend.test.js
PASS test/integration/binary-files.test.js
PASS test/unit/index.spec.js
PASS test/unit/runAll.spec.js
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _pathKey.default) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _pathKey.default) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "(0 , _pathKey.default) is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

 › 2 snapshots failed.
PASS test/unit/generateTasks.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveGitRepo.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/state.spec.js
PASS test/unit/file.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/getRenderer.spec.js

Summary of all failing tests
FAIL test/integration/basic-functionality.test.js (5.634 s)
  ● lint-staged › commits entire staged file when no errors and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      54 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      55 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 56 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      57 |       expect(await readFile('test2.js')).toEqual(fileFixtures.prettyJS)
      58 |     })
      59 |   )

      at toEqual (test/integration/basic-functionality.test.js:56:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      70 |
      71 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 72 |       await expect(gitCommit()).rejects.toThrowError(
         |             ^
      73 |         'Reverting to original state because of errors'
      74 |       )
      75 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:72:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      93 |
      94 |       // Run lint-staged with `prettier --write` to break the linter
    > 95 |       await expect(gitCommit()).rejects.toThrowError(
         |             ^
      96 |         'Reverting to original state because of errors'
      97 |       )
      98 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:95:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › clears unstaged changes when linter applies same changes

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      127 |       // Latest commit contains pretty file
      128 |       // `git show` strips empty line from here here
    > 129 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
          |                                                       ^
      130 |
      131 |       // Nothing is staged
      132 |       expect(await execGit(['status'])).toMatch('nothing added to commit')

      at toEqual (test/integration/basic-functionality.test.js:129:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails when backup stash is missing

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] git stash drop
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      166 |       await execGit(['add', 'test.js'])
      167 |
    > 168 |       await expect(
          |             ^
      169 |         gitCommit({
      170 |           lintStaged: {
      171 |             // Remove backup stash during run

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/basic-functionality.test.js:168:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles files that begin with dash

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      188 |
      189 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
    > 190 |       expect(await readFile('--looks-like-flag.js')).toEqual(fileFixtures.prettyJS)
          |                                                      ^
      191 |     })
      192 |   )
      193 |

      at toEqual (test/integration/basic-functionality.test.js:190:54)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      39 |       await execGit(['add', '.'])
      40 |       await gitCommit({ gitCommit: ['-m commit b'] })
    > 41 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
         |                                         ^
      42 |
      43 |       // Merge first branch
      44 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:41:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles merge conflict when task errors

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      103 |       await gitCommit({ gitCommit: ['-m commit b'] })
      104 |
    > 105 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
          |                                         ^
      106 |
      107 |       // Merge first branch
      108 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:105:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-d2c23542a77f4da5a69011a3823d5102/te…
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      149 |
      150 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 151 |       await expect(
          |             ^
      152 |         gitCommit({
      153 |           lintStaged: {
      154 |             config: {

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/merge-conflict.test.js:151:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      75 |       // Latest commit contains pretty file
      76 |       // `git show` strips empty line from here here
    > 77 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
         |                                                       ^
      78 |
      79 |       // Nothing is staged
      80 |       const status = await execGit(['status'])

      at toEqual (test/integration/partially-staged-changes.test.js:77:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      102 |
      103 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 104 |       await expect(gitCommit(configFixtures.prettierListDifferent)).rejects.toThrowError(
          |             ^
      105 |         'Reverting to original state because of errors'
      106 |       )
      107 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:104:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      128 |       const status = await execGit(['status'])
      129 |
    > 130 |       await expect(gitCommit()).rejects.toThrowError(
          |             ^
      131 |         'Reverting to original state because of errors'
      132 |       )
      133 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:130:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks fail

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      81 |       `)
      82 |
    > 83 |       await expect(gitCommit({ lintStaged: { allowEmpty: true } })).rejects.toThrowError(
         |             ^
      84 |         'Reverting to original state because of errors...'
      85 |       )
      86 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/file-resurrection.test.js:83:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      31 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      32 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 33 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      34 |     })
      35 |   )
      36 |

      at toEqual (test/integration/no-stash.test.js:33:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    WARN ⚠ Skipping backup because `--no-stash` was used.·
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-096aa5a87e59c7f35da7acc3be134c11/te…
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files..."

      43 |
      44 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 45 |       await expect(
         |             ^
      46 |         gitCommit({
      47 |           lintStaged: {
      48 |             stash: false,

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/no-stash.test.js:45:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    WARN ⚠ Skipping backup because `--no-stash` was used.·
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 2 files
    LOG [STARTED] *.js — 2 files
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks..."

      89 |
      90 |       // Run lint-staged with --no-stash
    > 91 |       await expect(gitCommit({ lintStaged: { stash: false } })).rejects.toThrowError(
         |             ^
      92 |         'SyntaxError: Unexpected token'
      93 |       )
      94 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/no-stash.test.js:91:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ingores untracked files when task fails

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      52 |
      53 |       // Run lint-staged with `prettier --list-different` and commit pretty file
    > 54 |       await expect(gitCommit()).rejects.toThrowError()
         |             ^
      55 |
      56 |       // Something was wrong so the repo is returned to original state
      57 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('1')

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/untracked-files.test.js:54:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files

    expect(received).toMatch(expected)

    Expected substring: "level-0"
    Received string:    ""

      37 |
      38 |       // 'file.js' matched '.lintstagedrc.json'
    > 39 |       expect(await readFile('file.js')).toMatch('level-0')
         |                                         ^
      40 |
      41 |       // 'deeper/file.js' matched 'deeper/.lintstagedrc.json'
      42 |       expect(await readFile('deeper/file.js')).toMatch('level-1')

      at toMatch (test/integration/multiple-config-files.test.js:39:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › supports multiple configuration files with --relative

    expect(received).toMatch(expected)

    Expected substring: "file.js"
    Received string:    ""

      76 |
      77 |       // 'file.js' is relative to '.'
    > 78 |       expect(await readFile('file.js')).toMatch('file.js')
         |                                         ^
      79 |
      80 |       // 'deeper/file.js' is relative to 'deeper/'
      81 |       expect(await readFile('deeper/file.js')).toMatch('file.js')

      at toMatch (test/integration/multiple-config-files.test.js:78:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › ignores multiple configs files outside cwd

    expect(received).toMatch(expected)

    Expected substring: "level-1"
    Received string:    ""

      122 |
      123 |       // 'deeper/file.js' matched 'deeper/.lintstagedrc.json'
    > 124 |       expect(await readFile('deeper/file.js')).toMatch('level-1')
          |                                                ^
      125 |
      126 |       // 'deeper/even/file.js' matched 'deeper/even/.lintstagedrc.json'
      127 |       expect(await readFile('deeper/even/file.js')).toMatch('level-2')

      at toMatch (test/integration/multiple-config-files.test.js:124:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      29 |       // Run lint-staged with prettier --write to automatically fix the file
      30 |       // Since prettier reverts all changes, the commit should fail
    > 31 |       await expect(gitCommit()).rejects.toThrowError('lint-staged prevented an empty git commit.')
         |             ^
      32 |
      33 |       // Something was wrong so the repo is returned to original state
      34 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/allow-empty.test.js:31:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      61 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
      62 |       expect(await execGit(['diff', '-1'])).toEqual('')
    > 63 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS)
         |                                         ^
      64 |     })
      65 |   )
      66 | })

      at toEqual (test/integration/allow-empty.test.js:63:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      33 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      34 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 35 |       expect(await readFile('привет.js')).toEqual(fileFixtures.prettyJS)
         |                                           ^
      36 |       expect(await readFile('你好.js')).toEqual(fileFixtures.prettyJS)
      37 |       expect(await readFile('��.js')).toEqual(fileFixtures.prettyJS)
      38 |     })

      at toEqual (test/integration/non-ascii.test.js:35:43)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      33 |       expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      34 |       expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
    > 35 |       expect(await readFile('привет.js')).toEqual(fileFixtures.prettyJS)
         |                                           ^
      36 |       expect(await readFile('你好.js')).toEqual(fileFixtures.prettyJS)
      37 |       expect(await readFile('��.js')).toEqual(fileFixtures.prettyJS)
      38 |     })

      at toEqual (test/integration/non-ascii.test.js:35:43)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      25 |
      26 |       // File inside deeper/ was fixed
    > 27 |       expect(await readFile('deeper/file.js')).toEqual(prettyJS)
         |                                                ^
      28 |       // ...but file outside was not
      29 |       expect(await readFile('file.js')).toEqual(uglyJS)
      30 |     })

      at toEqual (test/integration/files-outside-cwd.test.js:27:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] touch /tmp/lint-staged-0592097c891af2a544acb494f8b90bcf/.git/index.lo…
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    ERROR [FAILED] (0 , _pathKey.default) is not a function
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      26 |       // Run lint-staged with `prettier --write` and commit pretty file
      27 |       // The task creates a git lock file and runs `git add` to simulate failure
    > 28 |       await expect(
         |             ^
      29 |         gitCommit({
      30 |           lintStaged: {
      31 |             shell: isWindows,

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/git-lock-file.test.js:28:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff

    expect(received).toEqual(expected) // deep equality

    Expected: false
    Received: true

      38 |
      39 |       // Lint-staged failed because commit diff contains ugly file
    > 40 |       expect(passed).toEqual(false)
         |                      ^
      41 |
      42 |       expect(console.printHistory()).toMatch('prettier --list-different:')
      43 |       expect(console.printHistory()).toMatch('test.js')

      at toEqual (test/integration/diff-options.test.js:40:22)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }
      ↵

      29 |       await gitCommit()
      30 |
    > 31 |       expect(await readFile('test.js')).toEqual(fileFixtures.prettyJS) // file was fixed
         |                                         ^
      32 |     })
      33 |   )
      34 | })

      at toEqual (test/integration/symlinked-config.test.js:31:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"

    expect(received).toMatch(expected)

    Expected substring: "level-2"
    Received string:    ""

      39 |
      40 |       // One level above, match
    > 41 |       expect(await readFile('deeper/file.js')).toMatch('level-2')
         |                                                ^
      42 |
      43 |       // Not directly in the above-level, no match
      44 |       expect(await readFile('deeper/even/file.js')).toEqual('')

      at toMatch (test/integration/parent-globs.test.js:41:48)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: (0 , _pathKey.default) is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "(0 , _pathKey.default) is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "(0 , _pathKey.default) is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)


Snapshot Summary
 › 2 snapshots failed from 1 test suite. Inspect your code changes or run `npm test -- -u` to update them.

Test Suites: 15 failed, 31 passed, 46 total
Tests:       31 failed, 1 skipped, 199 passed, 231 total
Snapshots:   2 failed, 77 passed, 79 total
Time:        48.106 s
Ran all test suites.
PASS test/integration/basic-functionality.test.js (5.588 s)
PASS test/integration/merge-conflict.test.js
PASS test/integration/multiple-config-files.test.js
PASS test/integration/partially-staged-changes.test.js
PASS test/integration/non-ascii.test.js
PASS test/integration/no-stash.test.js
PASS test/integration/allow-empty.test.js
PASS test/integration/parent-globs.test.js
PASS test/integration/file-resurrection.test.js
PASS test/integration/untracked-files.test.js
PASS test/integration/symlinked-config.test.js
PASS test/integration/files-outside-cwd.test.js
PASS test/integration/git-lock-file.test.js
PASS test/integration/diff-options.test.js
PASS test/unit/resolveTaskFn.unmocked.spec.js
PASS test/integration/gitWorkFlow.test.js
PASS test/integration/git-submodules.test.js
PASS test/integration/git-worktree.test.js
PASS test/integration/no-initial-commit.test.js
PASS test/integration/git-amend.test.js
PASS test/integration/binary-files.test.js
PASS test/unit/index.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/runAll.spec.js
PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveGitRepo.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/state.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/file.spec.js

Test Suites: 46 passed, 46 total
Tests:       1 skipped, 230 passed, 231 total
Snapshots:   90 passed, 90 total
Time:        41.395 s, estimated 47 s
Ran all test suites.
PASS test/integration/basic-functionality.test.js (5.624 s)
PASS test/integration/merge-conflict.test.js
PASS test/integration/partially-staged-changes.test.js
PASS test/integration/file-resurrection.test.js
PASS test/integration/no-stash.test.js
PASS test/integration/allow-empty.test.js
PASS test/integration/untracked-files.test.js
PASS test/integration/non-ascii.test.js
PASS test/integration/gitWorkFlow.test.js
PASS test/integration/multiple-config-files.test.js
PASS test/integration/git-submodules.test.js
PASS test/integration/files-outside-cwd.test.js
PASS test/integration/git-worktree.test.js
PASS test/integration/git-lock-file.test.js
PASS test/integration/diff-options.test.js
PASS test/integration/no-initial-commit.test.js
PASS test/integration/parent-globs.test.js
PASS test/integration/symlinked-config.test.js
PASS test/integration/git-amend.test.js
PASS test/integration/binary-files.test.js
PASS test/unit/index.spec.js
PASS test/unit/runAll.spec.js
PASS test/unit/resolveTaskFn.unmocked.spec.js
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/index2.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/resolveGitRepo.spec.js
PASS test/unit/getBackupStash.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/state.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/file.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/parseGitZOutput.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/getDiffCommand.spec.js

Test Suites: 46 passed, 46 total
Tests:       1 skipped, 230 passed, 231 total
Snapshots:   90 passed, 90 total
Time:        41.29 s
Ran all test suites.
FAIL test/integration/basic-functionality.test.js
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks pass



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files in complex case



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files due to git bug when tasks fail



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports multiple configuration files with --relative



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ignores multiple configs files outside cwd



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ignores untracked files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ingores untracked files when task fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-submodules.test.js
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › not care about staged file outside current cwd without any other staged files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-worktree.test.js
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-initial-commit.test.js
  ● lint-staged › skips backup when run on an empty git repo without an initial commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/binary-files.test.js
  ● lint-staged › handles binary files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/index.spec.js
  ● lintStaged › should use lilconfig if no params are passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use lilconfig if no params are passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      61 |     await lintStaged(undefined, logger)
      62 |
    > 63 |     expect(logger.printHistory()).toMatchInlineSnapshot(`
         |                                   ^
      64 |       "
      65 |       ERROR ✖ Failed to get staged files!"
      66 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:63:35)

  ● lintStaged › should return true when passed

    expect(received).resolves.toEqual(expected) // deep equality

    Expected: true
    Received: false

      74 |     const config = { '*': 'node -e "process.exit(0)"' }
      75 |
    > 76 |     await expect(lintStaged({ config, quiet: true }, logger)).resolves.toEqual(true)
         |                                                                        ^
      77 |   })
      78 |
      79 |   it('should use use the console if no logger is passed', async () => {

      at Object.toEqual (node_modules/expect/build/index.js:194:22)
      at Object.toEqual (test/unit/index.spec.js:76:72)

  ● lintStaged › should use use the console if no logger is passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use use the console if no logger is passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      88 |     await lintStaged()
      89 |
    > 90 |     expect(mockedConsole.printHistory()).toMatchInlineSnapshot(`
         |                                          ^
      91 |       "
      92 |       ERROR ✖ Failed to get staged files!"
      93 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:90:42)

 › 2 snapshots failed.
PASS test/unit/runAll.spec.js
FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: _crossSpawn.default._parse is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "_crossSpawn.default._parse is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "_crossSpawn.default._parse is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

 › 2 snapshots failed.
PASS test/integration/not-inside-git-repo.test.js
PASS test/unit/generateTasks.spec.js
PASS test/unit/loadConfig.spec.js
PASS test/unit/index2.spec.js
FAIL test/unit/resolveGitRepo.spec.js
  ● resolveGitRepo › should resolve to current working dir when .git is in the same dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      14 |     const cwd = normalize(process.cwd())
      15 |     const { gitDir } = await resolveGitRepo()
    > 16 |     expect(gitDir).toEqual(cwd)
         |                    ^
      17 |   })
      18 |
      19 |   const expected = normalize(path.join(path.dirname(__dirname), '../'))

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:16:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      23 |     process.cwd = () => __dirname
      24 |     const { gitDir } = await resolveGitRepo()
    > 25 |     expect(gitDir).toEqual(expected)
         |                    ^
      26 |     process.cwd = processCwdBkp
      27 |   })
      28 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:25:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_DIR environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      32 |     process.env.GIT_DIR = 'wrong/path/.git' // refer to https://github.com/DonJayamanne/gitHistoryVSCode/issues/233#issuecomment-375769718
      33 |     const { gitDir } = await resolveGitRepo()
    > 34 |     expect(gitDir).toEqual(expected)
         |                    ^
      35 |     process.cwd = processCwdBkp
      36 |   })
      37 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:34:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_WORK_TREE environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      41 |     process.env.GIT_WORK_TREE = './wrong/path/'
      42 |     const { gitDir } = await resolveGitRepo()
    > 43 |     expect(gitDir).toEqual(expected)
         |                    ^
      44 |     process.cwd = processCwdBkp
      45 |   })
      46 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:43:20)

PASS test/unit/getBackupStash.spec.js
PASS test/unit/searchConfigs.spec.js
PASS test/unit/makeCmdTasks.spec.js
PASS test/unit/resolveTaskFn.spec.js
PASS test/unit/validateOptions.spec.js
PASS test/unit/validateBraces.spec.js
PASS test/unit/index3.spec.js
PASS test/unit/validateConfig.spec.js
PASS test/unit/state.spec.js
PASS test/unit/getStagedFiles.spec.js
PASS test/unit/chunkFiles.spec.js
PASS test/unit/file.spec.js
PASS test/unit/execGit.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/getRenderer.spec.js
PASS test/unit/getDiffCommand.spec.js
PASS test/unit/parseGitZOutput.spec.js

Summary of all failing tests
FAIL test/integration/basic-functionality.test.js
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/merge-conflict.test.js
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/partially-staged-changes.test.js
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/file-resurrection.test.js
  ● lint-staged › does not resurrect removed files due to git bug when tasks pass



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files in complex case



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › does not resurrect removed files due to git bug when tasks fail



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-stash.test.js
  ● lint-staged › skips backup and revert with --no-stash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when merge conflict



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › aborts commit without reverting with --no-stash, when  invalid syntax in file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/non-ascii.test.js
  ● lint-staged › handles files with non-ascii characters when core.quotepath is on



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files with non-ascii characters when core.quotepath is off



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/allow-empty.test.js
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/multiple-config-files.test.js
  ● lint-staged › supports multiple configuration files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports multiple configuration files with --relative



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ignores multiple configs files outside cwd



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/untracked-files.test.js
  ● lint-staged › ignores untracked files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › ingores untracked files when task fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-submodules.test.js
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/files-outside-cwd.test.js
  ● lint-staged › does not care about staged file outside current cwd with another staged file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › not care about staged file outside current cwd without any other staged files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-lock-file.test.js
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-worktree.test.js
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/symlinked-config.test.js
  ● lint-staged › works with symlinked config file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/no-initial-commit.test.js
  ● lint-staged › skips backup when run on an empty git repo without an initial commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/parent-globs.test.js
  ● lint-staged › works with parent glob "../*.js"



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/binary-files.test.js
  ● lint-staged › handles binary files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/index.spec.js
  ● lintStaged › should use lilconfig if no params are passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use lilconfig if no params are passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      61 |     await lintStaged(undefined, logger)
      62 |
    > 63 |     expect(logger.printHistory()).toMatchInlineSnapshot(`
         |                                   ^
      64 |       "
      65 |       ERROR ✖ Failed to get staged files!"
      66 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:63:35)

  ● lintStaged › should return true when passed

    expect(received).resolves.toEqual(expected) // deep equality

    Expected: true
    Received: false

      74 |     const config = { '*': 'node -e "process.exit(0)"' }
      75 |
    > 76 |     await expect(lintStaged({ config, quiet: true }, logger)).resolves.toEqual(true)
         |                                                                        ^
      77 |   })
      78 |
      79 |   it('should use use the console if no logger is passed', async () => {

      at Object.toEqual (node_modules/expect/build/index.js:194:22)
      at Object.toEqual (test/unit/index.spec.js:76:72)

  ● lintStaged › should use use the console if no logger is passed

    expect(received).toMatchInlineSnapshot(snapshot)

    Snapshot name: `lintStaged should use use the console if no logger is passed 1`

    - Snapshot  - 1
    + Received  + 1

      ↵
    - ERROR ✖ Failed to get staged files!
    + ERROR ✖ Current directory is not a git directory!

      88 |     await lintStaged()
      89 |
    > 90 |     expect(mockedConsole.printHistory()).toMatchInlineSnapshot(`
         |                                          ^
      91 |       "
      92 |       ERROR ✖ Failed to get staged files!"
      93 |     `)

      at Object.toMatchInlineSnapshot (test/unit/index.spec.js:90:42)

FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: _crossSpawn.default._parse is not a function]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "_crossSpawn.default._parse is not a function"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "_crossSpawn.default._parse is not a function"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

FAIL test/unit/resolveGitRepo.spec.js
  ● resolveGitRepo › should resolve to current working dir when .git is in the same dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      14 |     const cwd = normalize(process.cwd())
      15 |     const { gitDir } = await resolveGitRepo()
    > 16 |     expect(gitDir).toEqual(cwd)
         |                    ^
      17 |   })
      18 |
      19 |   const expected = normalize(path.join(path.dirname(__dirname), '../'))

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:16:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      23 |     process.cwd = () => __dirname
      24 |     const { gitDir } = await resolveGitRepo()
    > 25 |     expect(gitDir).toEqual(expected)
         |                    ^
      26 |     process.cwd = processCwdBkp
      27 |   })
      28 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:25:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_DIR environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      32 |     process.env.GIT_DIR = 'wrong/path/.git' // refer to https://github.com/DonJayamanne/gitHistoryVSCode/issues/233#issuecomment-375769718
      33 |     const { gitDir } = await resolveGitRepo()
    > 34 |     expect(gitDir).toEqual(expected)
         |                    ^
      35 |     process.cwd = processCwdBkp
      36 |   })
      37 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:34:20)

  ● resolveGitRepo › should resolve to the parent dir when .git is in the parent dir even when the GIT_WORK_TREE environment variable is set

    expect(received).toEqual(expected) // deep equality

    Expected: "/data/js-variants/multee/Clients/execa/lint-staged"
    Received: null

      41 |     process.env.GIT_WORK_TREE = './wrong/path/'
      42 |     const { gitDir } = await resolveGitRepo()
    > 43 |     expect(gitDir).toEqual(expected)
         |                    ^
      44 |     process.cwd = processCwdBkp
      45 |   })
      46 |

      at Object.toEqual (test/unit/resolveGitRepo.spec.js:43:20)


Snapshot Summary
 › 4 snapshots failed from 2 test suites. Inspect your code changes or run `npm test -- -u` to update them.

Test Suites: 23 failed, 23 passed, 46 total
Tests:       59 failed, 1 skipped, 171 passed, 231 total
Snapshots:   4 failed, 65 passed, 69 total
Time:        13.429 s, estimated 41 s
Ran all test suites.
