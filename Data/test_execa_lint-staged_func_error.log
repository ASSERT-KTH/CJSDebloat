13
PASS test/integration/untracked-files.test.js (15.239 s)
PASS test/integration/partially-staged-changes.test.js (39.412 s)
PASS test/integration/file-resurrection.test.js (14.548 s)
PASS test/integration/multiple-config-files.test.js (13.993 s)
PASS test/integration/allow-empty.test.js (17.345 s)
PASS test/integration/git-lock-file.test.js (19.545 s)
PASS test/unit/resolveTaskFn.unmocked.spec.js (17.284 s)
PASS test/integration/diff-options.test.js (34.16 s)
PASS test/integration/gitWorkFlow.test.js (28.893 s)
PASS test/integration/not-inside-git-repo.test.js (12.67 s)
PASS test/integration/git-submodules.test.js (21.242 s)
PASS test/unit/runAll.spec.js (13.99 s)
PASS test/unit/index.spec.js (10.072 s)
PASS test/integration/no-initial-commit.test.js (14.725 s)
PASS test/integration/binary-files.test.js (10.906 s)
PASS test/integration/git-worktree.test.js (21.653 s)
PASS test/unit/searchConfigs.spec.js (12.152 s)
PASS test/unit/validateConfig.spec.js (10.776 s)
PASS test/unit/resolveTaskFn.spec.js (15.955 s)
PASS test/integration/git-amend.test.js (35.65 s)
PASS test/unit/makeCmdTasks.spec.js (10.997 s)
PASS test/unit/validateBraces.spec.js (7.609 s)
PASS test/unit/index3.spec.js (8.067 s)
PASS test/unit/getBackupStash.spec.js (6.688 s)
PASS test/unit/generateTasks.spec.js
PASS test/unit/validateOptions.spec.js (8.148 s)
PASS test/unit/chunkFiles.spec.js
PASS test/unit/loadConfig.spec.js (5.413 s)
PASS test/unit/file.spec.js
PASS test/unit/dynamicImport.spec.js
PASS test/unit/state.spec.js (7.297 s)
PASS test/unit/index2.spec.js (21.308 s)
PASS test/unit/printTaskOutput.spec.js
PASS test/unit/execGit.spec.js (5.152 s)
PASS test/unit/parseGitZOutput.spec.js (6.457 s)
PASS test/unit/getStagedFiles.spec.js (10.198 s)
PASS test/unit/getDiffCommand.spec.js (6.652 s)
PASS test/unit/resolveGitRepo.spec.js (13.945 s)
PASS test/unit/getRenderer.spec.js (5.009 s)

Test Suites: 46 passed, 46 total
Tests:       1 skipped, 230 passed, 231 total
Snapshots:   90 passed, 90 total
Time:        649.567 s
Ran all test suites.
FAIL test/integration/merge-conflict.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/basic-functionality.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/non-ascii.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/files-outside-cwd.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/no-stash.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/parent-globs.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/symlinked-config.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/untracked-files.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/partially-staged-changes.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/file-resurrection.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/multiple-config-files.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/allow-empty.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/git-lock-file.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/unit/resolveTaskFn.unmocked.spec.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/diff-options.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/gitWorkFlow.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/not-inside-git-repo.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/git-submodules.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

PASS test/unit/runAll.spec.js (10.296 s)
FAIL test/unit/index.spec.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/no-initial-commit.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/binary-files.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

FAIL test/integration/git-worktree.test.js
  ● Test suite failed to run

    ReferenceError: lyx is not defined

    > 1 | import {signalsByName} from 'human-signals';
        | ^
      2 |
      3 | const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
      4 | 	if (timedOut) {

      at lyx (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:9:3)
      at Object.supported (../../../VariantsDeps/execa/variant11/execa/node_modules/human-signals/src/main.js:24:34)
      at Object.<anonymous> (../../../VariantsDeps/execa/variant11/execa/lib/error.js:1:1)

PASS test/integration/partially-staged-changes.test.js (19.6 s)
PASS test/integration/git-amend.test.js (7.006 s)
PASS test/integration/diff-options.test.js (10.711 s)
PASS test/integration/gitWorkFlow.test.js (7.952 s)
PASS test/integration/merge-conflict.test.js (18.841 s)
PASS test/integration/git-worktree.test.js (12.595 s)
PASS test/unit/index2.spec.js (6.894 s)
PASS test/integration/git-submodules.test.js (18.811 s)
FAIL test/integration/partially-staged-changes.test.js (13.473 s)
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-amend.test.js
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/gitWorkFlow.test.js
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/merge-conflict.test.js (5.806 s)
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-worktree.test.js (5.998 s)
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

PASS test/unit/index2.spec.js (5.739 s)
FAIL test/integration/git-submodules.test.js (7.444 s)
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/git-lock-file.test.js (9.096 s)
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/basic-functionality.test.js (12.848 s)
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/integration/allow-empty.test.js (15.29 s)
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:48:49)
      at Object.execGit (test/integration/__utils__/withGitIntegration.js:82:17)

FAIL test/unit/resolveTaskFn.unmocked.spec.js (14.05 s)
  ● resolveTaskFn › should call execa with shell when configured so

    expect(received).resolves.toMatchInlineSnapshot()

    Received promise rejected instead of resolved
    Rejected to value: [ReferenceError: lyx is not defined]

      13 |     })
      14 |
    > 15 |     await expect(taskFn()).resolves.toMatchInlineSnapshot(`undefined`)
         |           ^
      16 |   })
      17 |
      18 |   it('should kill a long running task when another fails', async () => {

      at expect (node_modules/expect/build/index.js:128:15)
      at Object.expect (test/unit/resolveTaskFn.unmocked.spec.js:15:11)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 1`

    Snapshot: "node -e \"process.exit(1)\" [FAILED]"
    Received: "lyx is not defined"

      31 |     const task2Promise = taskFn2(context)
      32 |
    > 33 |     await expect(task2Promise).rejects.toThrowErrorMatchingInlineSnapshot(
         |                                        ^
      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
      36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:33:40)

  ● resolveTaskFn › should kill a long running task when another fails

    expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

    Snapshot name: `resolveTaskFn should kill a long running task when another fails 2`

    Snapshot: "node [KILLED]"
    Received: "lyx is not defined"

      34 |       `"node -e \\"process.exit(1)\\" [FAILED]"`
      35 |     )
    > 36 |     await expect(taskPromise).rejects.toThrowErrorMatchingInlineSnapshot(`"node [KILLED]"`)
         |                                       ^
      37 |   })
      38 | })
      39 |

      at Object.toThrowErrorMatchingInlineSnapshot (node_modules/expect/build/index.js:241:22)
      at Object.toThrowErrorMatchingInlineSnapshot (test/unit/resolveTaskFn.unmocked.spec.js:36:39)

PASS test/integration/partially-staged-changes.test.js (23.443 s)
PASS test/integration/git-amend.test.js (6.195 s)
PASS test/integration/diff-options.test.js (8.705 s)
PASS test/integration/gitWorkFlow.test.js (6.602 s)
PASS test/integration/merge-conflict.test.js (17.682 s)
PASS test/integration/git-worktree.test.js (12.145 s)
PASS test/unit/index2.spec.js (6.5 s)
PASS test/integration/git-submodules.test.js (16.004 s)
FAIL test/integration/partially-staged-changes.test.js (18.064 s)
  ● lint-staged › commits partial change from partially staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-amend.test.js (5.897 s)
  ● lint-staged › works when amending previous commit with unstaged changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/diff-options.test.js
  ● lint-staged › supports overriding file list using --diff



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › supports overriding default --diff-filter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/gitWorkFlow.test.js (6.657 s)
  ● gitWorkflow › prepare › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › cleanup › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › getPartiallyStagedFiles › should return unquoted files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › getPartiallyStagedFiles › should include to and from for renamed files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › hideUnstagedChanges › should handle errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › hideUnstagedChanges › should checkout renamed file when hiding changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● gitWorkflow › restoreMergeStatus › should handle error when restoring merge state fails



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/merge-conflict.test.js (6.299 s)
  ● lint-staged › handles merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › handles merge conflict when task errors



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-worktree.test.js (6.107 s)
  ● lint-staged › handles git worktrees



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

PASS test/unit/index2.spec.js (5.343 s)
FAIL test/integration/git-submodules.test.js (6.738 s)
  ● lint-staged › handles git submodules



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/git-lock-file.test.js (9.444 s)
  ● lint-staged › fails when linter creates a .git/index.lock



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/basic-functionality.test.js (11.855 s)
  ● lint-staged › commits entire staged file when no errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › commits entire staged file when no errors and linter modifies file



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when errors from linter



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails to commit entire staged file when errors from linter and linter modifies files



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › clears unstaged changes when linter applies same changes



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › runs chunked tasks when necessary



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › fails when backup stash is missing



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › handles files that begin with dash



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › works when a branch named stash exists



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

FAIL test/integration/allow-empty.test.js (12.649 s)
  ● lint-staged › fails when task reverts staged changes without `--allow-empty`, to prevent an empty git commit



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

  ● lint-staged › creates commit when task reverts staged changed and --allow-empty is used



      23 |     return stdout
      24 |   } catch ({ all }) {
    > 25 |     throw new Error(all)
         |           ^
      26 |   }
      27 | }
      28 |

      at execGit (lib/execGit.js:25:11)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:82:5)

PASS test/integration/partially-staged-changes.test.js (25.35 s)
PASS test/integration/git-amend.test.js (7.154 s)
PASS test/integration/diff-options.test.js (10.994 s)
PASS test/integration/gitWorkFlow.test.js (8.398 s)
PASS test/integration/merge-conflict.test.js (18.197 s)
PASS test/integration/git-worktree.test.js (14.116 s)
PASS test/unit/index2.spec.js (7.2 s)
PASS test/integration/partially-staged-changes.test.js (23.808 s)
PASS test/integration/git-amend.test.js (6.096 s)
PASS test/integration/diff-options.test.js (10.254 s)
PASS test/integration/gitWorkFlow.test.js (8.152 s)
PASS test/integration/merge-conflict.test.js (20.564 s)
PASS test/integration/git-worktree.test.js (12.559 s)
PASS test/unit/index2.spec.js (7.1 s)
FAIL test/integration/partially-staged-changes.test.js (19.506 s)
  ● lint-staged › commits partial change from partially staged file when no errors from linter and linter modifies file

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      module.exports = {
    -   foo: "bar",
    +     'foo': 'bar'
    - };
    + }

      75 |       // Latest commit contains pretty file
      76 |       // `git show` strips empty line from here here
    > 77 |       expect(await execGit(['show', 'HEAD:test.js'])).toEqual(fileFixtures.prettyJS.trim())
         |                                                       ^
      78 |
      79 |       // Nothing is staged
      80 |       const status = await execGit(['status'])

      at toEqual (test/integration/partially-staged-changes.test.js:77:55)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --list-different
    ERROR [FAILED] lyx is not defined
    ERROR [FAILED] lyx is not defined
    ERROR [FAILED] lyx is not defined
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      102 |
      103 |       // Run lint-staged with `prettier --list-different` to break the linter
    > 104 |       await expect(gitCommit(configFixtures.prettierListDifferent)).rejects.toThrowError(
          |             ^
      105 |         'Reverting to original state because of errors'
      106 |       )
      107 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:104:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit partial change from partially staged file when errors from linter and linter modifies files

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] .lintstagedrc.json — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write
    ERROR [FAILED] lyx is not defined
    ERROR [FAILED] lyx is not defined
    ERROR [FAILED] lyx is not defined
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      128 |       const status = await execGit(['status'])
      129 |
    > 130 |       await expect(gitCommit()).rejects.toThrowError(
          |             ^
      131 |         'Reverting to original state because of errors'
      132 |       )
      133 |

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/partially-staged-changes.test.js:130:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/git-amend.test.js (5.891 s)
FAIL test/integration/diff-options.test.js (7.562 s)
  ● lint-staged › supports overriding file list using --diff

    expect(received).toEqual(expected) // deep equality

    Expected: false
    Received: true

      38 |
      39 |       // Lint-staged failed because commit diff contains ugly file
    > 40 |       expect(passed).toEqual(false)
         |                      ^
      41 |
      42 |       expect(console.printHistory()).toMatch('prettier --list-different:')
      43 |       expect(console.printHistory()).toMatch('test.js')

      at toEqual (test/integration/diff-options.test.js:40:22)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/gitWorkFlow.test.js (7.523 s)
FAIL test/integration/merge-conflict.test.js (13.956 s)
  ● lint-staged › handles merge conflicts

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      39 |       await execGit(['add', '.'])
      40 |       await gitCommit({ gitCommit: ['-m commit b'] })
    > 41 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
         |                                         ^
      42 |
      43 |       // Merge first branch
      44 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:41:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › handles merge conflict when task errors

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

    - module.exports = "bar";
    + module.exports = 'bar'
      ↵

      103 |       await gitCommit({ gitCommit: ['-m commit b'] })
      104 |
    > 105 |       expect(await readFile('test.js')).toEqual(fileInBranchBFixed)
          |                                         ^
      106 |
      107 |       // Merge first branch
      108 |       await execGit(['checkout', 'master'])

      at toEqual (test/integration/merge-conflict.test.js:105:41)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

  ● lint-staged › fails to commit entire staged file when there are unrecoverable merge conflicts

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: "
    LOG [STARTED] Preparing lint-staged...
    LOG [SUCCESS] Preparing lint-staged...
    LOG [STARTED] Hiding unstaged changes to partially staged files...
    LOG [SUCCESS] Hiding unstaged changes to partially staged files...
    LOG [STARTED] Running tasks for staged files...
    LOG [STARTED] Config object — 1 file
    LOG [STARTED] *.js — 1 file
    LOG [STARTED] prettier --write /tmp/lint-staged-05dd536d3e1998c23288366b380ee059/te…
    ERROR [FAILED] lyx is not defined
    ERROR [FAILED] lyx is not defined
    ERROR [FAILED] lyx is not defined
    LOG [STARTED] Applying modifications from tasks...
    LOG [SUCCESS] Applying modifications from tasks...
    LOG [STARTED] Restoring unstaged changes to partially staged files...
    LOG [SUCCESS] Restoring unstaged changes to partially staged files...
    LOG [STARTED] Cleaning up temporary files...
    LOG [SUCCESS] Cleaning up temporary files..."

      149 |
      150 |       // Run lint-staged with action that does horrible things to the file, causing a merge conflict
    > 151 |       await expect(
          |             ^
      152 |         gitCommit({
      153 |           lintStaged: {
      154 |             config: {

      at expect (node_modules/expect/build/index.js:128:15)
      at expect (test/integration/merge-conflict.test.js:151:13)
      at Object.<anonymous> (test/integration/__utils__/withGitIntegration.js:99:7)

PASS test/integration/git-worktree.test.js (9.096 s)
PASS test/unit/index2.spec.js (8.042 s)
PASS test/integration/git-submodules.test.js (17.638 s)
PASS test/integration/partially-staged-changes.test.js (17.691 s)
PASS test/integration/git-amend.test.js (6.495 s)
PASS test/integration/diff-options.test.js (10.542 s)
PASS test/integration/gitWorkFlow.test.js (8.637 s)
PASS test/integration/merge-conflict.test.js (18.386 s)
PASS test/integration/git-worktree.test.js (13.39 s)
PASS test/unit/index2.spec.js (6.948 s)
PASS test/integration/git-submodules.test.js (18.005 s)
PASS test/integration/partially-staged-changes.test.js (19.764 s)
PASS test/integration/git-amend.test.js (5.656 s)
PASS test/integration/diff-options.test.js (8.273 s)
PASS test/integration/gitWorkFlow.test.js (6.601 s)
PASS test/integration/merge-conflict.test.js (18.398 s)
PASS test/integration/git-worktree.test.js (12.996 s)
PASS test/unit/index2.spec.js (6.592 s)
PASS test/integration/git-submodules.test.js (15.244 s)
PASS test/integration/partially-staged-changes.test.js (22.134 s)
PASS test/integration/git-amend.test.js (5.452 s)
PASS test/integration/diff-options.test.js (8.43 s)
PASS test/integration/gitWorkFlow.test.js (6.006 s)
PASS test/integration/merge-conflict.test.js (17.154 s)
PASS test/integration/git-worktree.test.js (13.735 s)
PASS test/unit/index2.spec.js (6.449 s)
PASS test/integration/git-submodules.test.js (18.149 s)
