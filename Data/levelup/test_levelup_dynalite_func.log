/data/js-variants/multee
16
dynalite is testing ./Variants/levelup/variant16/levelup
/data/js-variants/multee
************* npm unlink module *************

up to date, audited 155 packages in 900ms

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 393ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 3s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (161ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (133ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (112ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2663ms)
      ✓ should not return 413 if request not too large (2676ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (65ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1005ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1012ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (140ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (115ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (117ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2015ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (91ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (83ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (174ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (105ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (86ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (68ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (75ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (61ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type (80ms)
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (50ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (167ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (66ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2007ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant15/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 406ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (148ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (128ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (115ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2676ms)
      ✓ should not return 413 if request not too large (2542ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1006ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1009ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1008ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (140ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (108ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (124ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2015ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (91ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (100ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (234ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (90ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (86ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (71ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (75ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (61ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses (50ms)
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type (49ms)
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions (68ms)
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (49ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (173ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (55ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (64ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (57ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant14/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 480ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (147ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item (38ms)
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (133ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (113ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2583ms)
      ✓ should not return 413 if request not too large (2502ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1004ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1008ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (153ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (110ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (117ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2014ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (92ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (92ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (89ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (90ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (87ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (69ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types (42ms)
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index (47ms)
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (78ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (62ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (48ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (167ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (59ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (63ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (90ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types (49ms)
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant13/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 396ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (148ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (132ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (116ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2656ms)
      ✓ should not return 413 if request not too large (2484ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1004ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1009ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (142ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (124ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (116ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2015ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (91ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (83ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (84ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (206ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (118ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (68ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (66ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (75ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (61ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes (53ms)
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (101ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (314ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (64ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (59ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant12/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 404ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (153ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (133ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (113ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (3288ms)
      ✓ should not return 413 if request not too large (2494ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1004ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1009ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (150ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (107ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (124ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2025ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (178ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (84ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (90ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (89ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (82ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (85ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (73ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (124ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (148ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (44ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (166ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (63ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2007ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (22s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant11/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 499ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (148ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (184ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (213ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2653ms)
      ✓ should not return 413 if request not too large (2472ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1017ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (299ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (122ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (115ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2017ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (89ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (90ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (89ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (78ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (83ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (76ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (73ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (73ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (87ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (61ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (46ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (172ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (55ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (66ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big (48ms)
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant10/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 398ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (216ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (132ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (110ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2678ms)
      ✓ should not return 413 if request not too large (2503ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1006ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1008ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (152ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (177ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (120ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2020ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (99ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (91ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (182ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (146ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (77ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (66ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (66ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (75ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (62ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (126ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (310ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (64ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (59ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant9/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 389ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (151ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (127ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (114ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2926ms)
      ✓ should not return 413 if request not too large (2567ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (63ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1006ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1010ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (167ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (104ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (117ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2014ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (90ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (166ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (90ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (89ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (87ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (85ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (77ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (76ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (75ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (52ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (165ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (55ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (65ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (60ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant8/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 411ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (152ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (153ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (193ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2687ms)
      ✓ should not return 413 if request not too large (2482ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (63ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1006ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1010ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (240ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (183ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (118ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2016ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (91ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (91ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (92ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (91ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (73ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (69ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (66ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (74ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (61ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties (41ms)
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (50ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (166ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (55ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (63ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (59ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (22s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant7/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 389ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (282ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (133ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (125ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2685ms)
      ✓ should not return 413 if request not too large (2511ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (63ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1004ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1008ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (137ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (117ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (114ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2012ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (95ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (90ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (86ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (107ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (112ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (134ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (74ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (62ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (48ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (210ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (87ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (120ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (59ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2007ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant6/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 405ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (153ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (126ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (116ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2710ms)
      ✓ should not return 413 if request not too large (2497ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (63ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1004ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1021ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1014ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (146ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (106ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (127ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2015ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (92ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (84ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (95ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (166ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (94ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (90ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (68ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (66ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (76ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (63ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (44ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (174ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (55ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (61ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2009ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant5/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 427ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 3s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (234ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (128ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (119ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2915ms)
      ✓ should not return 413 if request not too large (2515ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1005ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1007ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1008ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (146ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (106ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (117ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2012ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (93ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (84ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (91ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (86ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (99ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (84ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (73ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (68ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (69ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (75ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (61ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type (42ms)
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties (78ms)
      ✓ should calculate size function correctly (56ms)
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (106ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (186ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (64ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (22s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant4/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 405ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (152ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (134ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (111ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2711ms)
      ✓ should not return 413 if request not too large (2604ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1004ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (139ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (105ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (118ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2021ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (92ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema (44ms)
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (96ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (90ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (87ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (87ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (86ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (69ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (66ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (86ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (133ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (52ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (165ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (65ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (57ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant3/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 418ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (147ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (191ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (199ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2676ms)
      ✓ should not return 413 if request not too large (2479ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (67ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1011ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1010ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (326ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (111ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (117ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2014ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (92ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (91ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (89ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (83ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (90ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (74ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (70ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (68ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (76ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (62ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (50ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (164ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (59ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (63ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression (49ms)
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes (46ms)

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2009ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant2/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 395ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (151ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (129ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (117ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2692ms)
      ✓ should not return 413 if request not too large (2515ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (63ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1005ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1007ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (146ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (108ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (122ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2026ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (92ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (86ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (90ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (94ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (109ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (195ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (73ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (71ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (68ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (75ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (62ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties (43ms)
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (44ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order (40ms)
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (382ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (64ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2007ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./Variants/levelup/variant1/levelup
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 412ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (152ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (130ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (121ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2732ms)
      ✓ should not return 413 if request not too large (2619ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (131ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1005ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1009ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1010ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (143ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (131ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (117ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2015ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (96ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (158ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (131ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (90ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (96ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (85ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (74ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (69ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (66ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (71ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (62ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors (53ms)
      ✓ should return ValidationException for redundant parentheses (48ms)
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type (111ms)
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (47ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (164ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (55ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (60ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (65ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
variantsDepsNum: 6
/data/js-variants/multee
6
dynalite is testing ./VariantsDeps/levelup/variant6/levelup
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 390ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (148ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (126ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (115ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2544ms)
      ✓ should not return 413 if request not too large (2446ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (65ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1005ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (139ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (103ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (116ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2014ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (99ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (123ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (120ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (92ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (86ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (87ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (76ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (68ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (73ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (75ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (61ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors (48ms)
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly (43ms)
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (44ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (168ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (62ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (64ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (115ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (21s)
  22 pending

************* run test done *************
dynalite is testing ./VariantsDeps/levelup/variant5/levelup
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 495ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (247ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (129ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (116ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2704ms)
      ✓ should not return 413 if request not too large (3461ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (63ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1005ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1008ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (140ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (112ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (118ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2012ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (91ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (84ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (90ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (86ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (68ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (69ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (130ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (98ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (49ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (169ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (62ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (57ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (22s)
  22 pending

************* run test done *************
dynalite is testing ./VariantsDeps/levelup/variant4/levelup
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 459ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (155ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (206ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (207ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2784ms)
      ✓ should not return 413 if request not too large (2519ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (64ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1004ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1008ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (154ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (130ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (116ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2013ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (94ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (88ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (86ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (87ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (72ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types (49ms)
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators (41ms)
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (78ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (64ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (53ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (168ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (55ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (64ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (110ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (97ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2007ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (22s)
  22 pending

************* run test done *************
dynalite is testing ./VariantsDeps/levelup/variant3/levelup
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 408ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (150ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (127ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (123ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2786ms)
      ✓ should not return 413 if request not too large (2570ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (63ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1005ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1010ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1024ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (153ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (103ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (116ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2014ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (91ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (85ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (92ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (104ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute (47ms)
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (89ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (89ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (73ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (89ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (74ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (63ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS (39ms)
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL (38ms)
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (46ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (168ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (55ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (66ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (57ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (59ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2009ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (22s)
  22 pending

************* run test done *************
dynalite is testing ./VariantsDeps/levelup/variant2/levelup
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 409ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (154ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (141ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (113ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute (53ms)
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute (40ms)
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2775ms)
      ✓ should not return 413 if request not too large (2530ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (65ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1004ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1010ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (153ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (130ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (212ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2013ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (106ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (92ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (90ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (80ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (86ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (78ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (75ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response (65ms)
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (106ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (91ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (64ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors
      ✓ should return ValidationException for redundant parentheses
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties (44ms)
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (44ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (166ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (64ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (56ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (22s)
  22 pending

************* run test done *************
dynalite is testing ./VariantsDeps/levelup/variant1/levelup
************* npm unlink module *************

removed 1 package, changed 1 package, and audited 155 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 1s

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 386ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, changed 2 packages, and audited 157 packages in 2s

33 packages are looking for funding
  run `npm fund` for details

3 vulnerabilities (2 high, 1 critical)

To address all issues, run:
  npm audit fix

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> dynalite@3.2.2 test
> mocha --require should --reporter spec -t $([ $REMOTE ] && echo 30s || echo 4s)



  batchGetItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a struct
      ✓ should return SerializationException when RequestItems.Attr.Keys is not a list
      ✓ should return SerializationException when RequestItems.Attr.Keys.0 is not a map
      ✓ should return SerializationException when RequestItems.Attr.Keys.0.Attr is not an attr struct (221ms)
      ✓ should return SerializationException when RequestItems.Attr.AttributesToGet is not a list
      ✓ should return SerializationException when RequestItems.Attr.ConsistentRead is not a boolean
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames is not a map
      ✓ should return SerializationException when RequestItems.Attr.ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when RequestItems.Attr.ProjectionExpression is not a string
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
    validations
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for short table name with no keys
      ✓ should return ValidationException for empty keys
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException for short table name with keys
      ✓ should return ValidationException when fetching more than 100 keys
      ✓ should return ValidationException if filter expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException when fetching more than 100 keys over multiple tables
      ✓ should return ResourceNotFoundException when fetching exactly 100 keys and table does not exist
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for duplicated keys
      ✓ should return ValidationException for duplicated mixed up keys
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty responses if keys do not exist
      ✓ should return only items that do exist
      ✓ should return only requested attributes of items that do exist
      ✓ should return ConsumedCapacity from each specified table with no consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with no consistent read and larger item
      ✓ should return ConsumedCapacity from each specified table with consistent read and small item
      ✓ should return ConsumedCapacity from each specified table with consistent read and larger item
      - should return all items if just under limit
      - should return an unprocessed item if just over limit
      - should return many unprocessed items if very over the limit

  batchWriteItem
    serializations
      ✓ should return SerializationException when RequestItems is not a map
      ✓ should return SerializationException when RequestItems.Attr is not a list
      ✓ should return SerializationException when RequestItems.Attr.0 is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.DeleteRequest.Key.Attr is not an attr struct (128ms)
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest is not a struct
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item is not a map
      ✓ should return SerializationException when RequestItems.Attr.0.PutRequest.Item.Attr is not an attr struct (112ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
    validations
      ✓ should return ValidationException for empty body
      ✓ should return ValidationException for missing RequestItems
      ✓ should return ValidationException for empty RequestItems
      ✓ should return ValidationException for empty list in RequestItems
      ✓ should return ValidationException for empty item in RequestItems
      ✓ should return ValidationException for short table name and missing requests
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException when putting more than 25 items
      ✓ should return ResourceNotFoundException when fetching exactly 25 items and table does not exist
      ✓ should check table exists first before checking for duplicate keys
      ✓ should return ValidationException for puts and deletes of the same item with put first
      ✓ should return ValidationException for puts and deletes of the same item with delete first
      ✓ should return ValidationException for short table name
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should write a single item to each table
      ✓ should delete an item from each table
      ✓ should deal with puts and deletes together
      ✓ should return ConsumedCapacity from each specified table when putting and deleting small item
      ✓ should return ConsumedCapacity from each specified table when putting and deleting larger item
      - should return UnprocessedItems if over limit

  benchmarks
    - should batch write
    - should scan

  dynalite connections
    basic
      ✓ should return 413 if request too large (2929ms)
      ✓ should not return 413 if request not too large (2601ms)
      ✓ should return 404 if OPTIONS with no auth
      ✓ should return 200 if a GET
      ✓ should return 404 if a PUT
      ✓ should return 404 if a DELETE
      ✓ should return 404 if body but no content-type
      ✓ should return 404 if body but incorrect content-type
      ✓ should return 404 if body and application/x-amz-json-1.1
      ✓ should return 404 if body but slightly different content-type
      ✓ should connect to SSL (96ms)
    JSON
      ✓ should return SerializationException if body is application/json but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 but not JSON
      ✓ should return SerializationException if body is application/json and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and spaces and semicolon but not JSON
      ✓ should return SerializationException if body is application/json and nonsense but not JSON
      ✓ should return SerializationException if body is application/x-amz-json-1.0 and nonsense but not JSON
      ✓ should return UnknownOperationException if no target
      ✓ should return UnknownOperationException and set CORS if using Origin
      ✓ should return UnknownOperationException if body is application/json
      ✓ should return UnknownOperationException if body is application/x-amz-json-1.0
      ✓ should return UnknownOperationException if body is application/json;charset=asfdsaf
      ✓ should return UnknownOperationException if incorrect target
      ✓ should return UnknownOperationException if incorrect target operation
      ✓ should return MissingAuthenticationTokenException if no Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header
      ✓ should return MissingAuthenticationTokenException if incomplete Authorization header and X-Amz-Algorithm query
      ✓ should return MissingAuthenticationTokenException if all query params except X-Amz-Algorithm
      ✓ should return InvalidSignatureException if both Authorization header and X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4-"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b,Credential=a"
      ✓ should return IncompleteSignatureException if Authorization header is "AWS4- Signature=b, Credential=a"
      ✓ should return IncompleteSignatureException if empty X-Amz-Algorithm query
      ✓ should return IncompleteSignatureException if missing X-Amz-SignedHeaders query
      ✓ should set CORS if OPTIONS and Origin
      ✓ should set CORS if OPTIONS and Origin and Headers
      ✓ should set CORS if OPTIONS and Origin and Headers and Method

  createTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when AttributeDefinitions is not a list
      ✓ should return SerializationException when KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes is not a list
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when KeySchema.0 is not a struct
      ✓ should return SerializationException when KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0 is not a struct
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeName is not a string
      ✓ should return SerializationException when AttributeDefinitions.0.AttributeType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when LocalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexes.0.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty AttributeDefinitions
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for key element names
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for missing ProvisionedThroughput
      ✓ should return ValidationException if ProvisionedThroughput set when BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for missing key attribute definitions
      ✓ should return ValidationException for missing key attribute definitions if BillingMode is PAY_PER_REQUEST
      ✓ should return ValidationException for attribute definitions member nulls
      ✓ should return ValidationException for SS in attr definition
      ✓ should return ValidationException for random attr definition
      ✓ should return ValidationException for missing key attr definition when double
      ✓ should return ValidationException for missing key attr definition
      ✓ should return ValidationException for missing key attr definition when double and valid
      ✓ should return ValidationException for missing key attr definition when double and same
      ✓ should return ValidationException for hash key and range key having same name
      ✓ should return ValidationException for second key not being range
      ✓ should return ValidationException for second key being hash
      ✓ should return ValidationException for both being range key
      ✓ should return ValidationException for extra attribute in definitions when range
      ✓ should return ValidationException for extra attribute in definitions when hash
      ✓ should return ValidationException for empty LocalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty LocalSecondaryIndexes
      ✓ should return ValidationException for bad LocalSecondaryIndex names
      ✓ should return ValidationException for no range key with LocalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in LocalSecondaryIndex
      ✓ should return ValidationException for first key in LocalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in LocalSecondaryIndex
      ✓ should return ValidationException for second key of LocalSecondaryIndex not being range
      ✓ should return ValidationException for no range key in LocalSecondaryIndex
      ✓ should return ValidationException for different hash key between LocalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in LocalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in LocalSecondaryIndex
      ✓ should return ValidationException for empty Projection in LocalSecondaryIndex
      ✓ should return ValidationException for invalid properties in LocalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in LocalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in LocalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in LocalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in LocalSecondaryIndexes
      ✓ should return ValidationException for more than five valid LocalSecondaryIndexes
      ✓ should return ValidationException for empty GlobalSecondaryIndexes list
      ✓ should return ValidationException for more than five empty GlobalSecondaryIndexes
      ✓ should return ValidationException for bad GlobalSecondaryIndex names
      ✓ should return ValidationException for missing attribute definition with only range key with GlobalSecondaryIndex
      ✓ should return ValidationException for missing attribute definitions in GlobalSecondaryIndex
      ✓ should return ValidationException for first key in GlobalSecondaryIndex not being hash
      ✓ should return ValidationException for same names of keys in GlobalSecondaryIndex
      ✓ should return ValidationException for second key of GlobalSecondaryIndex not being range
      ✓ should return ValidationException about Projection if no range key in GlobalSecondaryIndex
      ✓ should return ValidationException about Projection for different hash key between GlobalSecondaryIndex and table
      ✓ should return ValidationException for same named keys in GlobalSecondaryIndex when one hash and one range
      ✓ should return ValidationException for missing attribute definitions when hash is same in GlobalSecondaryIndex
      ✓ should return ValidationException for empty Projection in GlobalSecondaryIndex
      ✓ should return ValidationException for invalid properties in GlobalSecondaryIndex
      ✓ should return ValidationException for missing ProjectionType in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType ALL in GlobalSecondaryIndex
      ✓ should return ValidationException for NonKeyAttributes with ProjectionType KEYS_ONLY in GlobalSecondaryIndex
      ✓ should return ValidationException for duplicate index names in GlobalSecondaryIndexes
      ✓ should return ValidationException for extraneous values in GlobalSecondaryIndexes
      ✓ should return ValidationException for more than twenty valid GlobalSecondaryIndexes
      ✓ should return ValidationException for duplicate index names between LocalSecondaryIndexes and GlobalSecondaryIndexes
      ✓ should return LimitExceededException for more than one table with LocalSecondaryIndexes at a time
      ✓ should not allow ProvisionedThroughput with PAY_PER_REQUEST and GlobalSecondaryIndexes
    functionality
      ✓ should succeed for basic
      ✓ should succeed for basic PAY_PER_REQUEST
      ✓ should change state to ACTIVE after a period (1005ms)
      ✓ should succeed for LocalSecondaryIndexes
      ✓ should succeed for multiple GlobalSecondaryIndexes (1008ms)
      ✓ should succeed for PAY_PER_REQUEST GlobalSecondaryIndexes (1009ms)

  deleteItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (149ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (105ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (116ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for incorrect ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList is used alone
      ✓ should return ValidationException if AttributeValueList and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException if ConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if ConditionExpression BETWEEN args are in the incorrect order
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
    functionality
      ✓ should return nothing if item does not exist
      ✓ should return ConsumedCapacity if specified and item does not exist
      ✓ should delete item successfully
      ✓ should delete item successfully and return old values
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same and exists is true
      ✓ should succeed if expecting non-existant value to not exist
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  deleteTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should eventually delete (2015ms)

  describeTable
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist

  describeTimeToLive
    serializations
      ✓ should return SerializationException when TableName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ResourceNotFoundException if table does not exist
    functionality
      ✓ should succeed if table exists

  getItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (93ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ProjectionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException duplicate values in AttributesToGet
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax error in ProjectionExpression
      ✓ should return ValidationException for reserved keywords in ProjectionExpression
      ✓ should return ValidationException for missing names in ProjectionExpression
      ✓ should return ValidationException for overlapping paths in ProjectionExpression
      ✓ should return ValidationException for conflicting paths in ProjectionExpression
      ✓ should return ValidationException for unused names in ProjectionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if key does not match schema
      ✓ should return ValidationException if range key does not match schema
      ✓ should return ValidationException if string key has empty string
      ✓ should return ValidationException if binary key has empty string
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ValidationException for non-scalar key access in ProjectionExpression
      ✓ should return ValidationException for non-scalar index access in ProjectionExpression
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should return empty response if key does not exist
      ✓ should return ConsumedCapacity if specified
      ✓ should return full ConsumedCapacity if specified
      ✓ should return object by hash key
      ✓ should return object by range key
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should return ConsumedCapacity for small item with no ConsistentRead
      ✓ should return ConsumedCapacity for larger item with no ConsistentRead
      ✓ should return ConsumedCapacity for small item with ConsistentRead
      ✓ should return ConsumedCapacity for larger item with ConsistentRead

  listTables
    serializations
      ✓ should return 400 if no body
      ✓ should return SerializationException when ExclusiveStartTableName is not a string
      ✓ should return SerializationException when Limit is not an integer
    validations
      ✓ should return ValidationException for empty ExclusiveStartTableName
      ✓ should return ValidationExceptions for short ExclusiveStartTableName
      ✓ should return ValidationException for long ExclusiveStartTableName
      ✓ should return ValidationException for low Limit
      ✓ should return ValidationException for high Limit
    functionality
      ✓ should return 200 if no params and application/json
      ✓ should return 200 if no params and application/x-amz-json-1.0
      ✓ should return 200 and CORS if Origin specified
      ✓ should return 200 if random attributes are supplied
      ✓ should return 200 if null attributes are supplied
      ✓ should return 200 if correct types are supplied
      ✓ should return 200 if using query string signing
      ✓ should return list with new table in it
      ✓ should return list using ExclusiveStartTableName and Limit
      ✓ should have no LastEvaluatedTableName if the limit is large enough

  listTagsOfResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for unauthorized ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return AccessDeniedException for no ResourceArn
      ✓ should return ValidationException for no ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if ResourceArn does not exist
    functionality
      ✓ should succeed if valid resource and has no tags
      ✓ should succeed if valid resource and has multiple tags

  putItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Item is not a map
      ✓ should return SerializationException when Item.Attr is not an attr struct (196ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (157ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Item
      ✓ should return ValidationException for invalid values in Item
      ✓ should return ValidationException for empty/invalid numbers in Item
      ✓ should return ValidationException for multiple datatypes in Item
      ✓ should return ValidationException if item is too big with small attribute
      ✓ should return ResourceNotFoundException if item is just small enough with small attribute
      ✓ should return ValidationException if item is too big with larger attribute
      ✓ should return ResourceNotFoundException if item is just small enough with larger attribute
      ✓ should return ValidationException if item is too big with multi attributes
      ✓ should return ResourceNotFoundException if item is just small enough with multi attributes
      ✓ should return ValidationException if item is too big with big number attribute
      ✓ should return ValidationException if item is too big with smallest number attribute
      ✓ should return ValidationException if item is too big with smaller number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with medium number attribute
      ✓ should return ValidationException if item is too big with multi number attribute
      ✓ should return ResourceNotFoundException if item is just small enough with multi number attribute
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for incorrect ReturnValues
      ✓ should return ValidationException if ComparisonOperator used alone
      ✓ should return ValidationException if ComparisonOperator and Exists are used together
      ✓ should return ValidationException if AttributeValueList and Value are used together
      ✓ should return ValidationException if AttributeValueList used without ComparisonOperator
      ✓ should return ValidationException if AttributeValueList used with Exists
      ✓ should return ValidationException if AttributeValueList is incorrect length: EQ
      ✓ should return ValidationException if AttributeValueList is incorrect length: NULL
      ✓ should return ValidationException if AttributeValueList is incorrect length: IN
      ✓ should return ValidationException if AttributeValueList is incorrect length: BETWEEN
      ✓ should return ValidationException if Value provides incorrect number of attributes: NULL
      ✓ should return ValidationException if Value provides incorrect number of attributes: BETWEEN
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if missing key
      ✓ should return ValidationException if type mismatch for key
      ✓ should return ValidationException if empty string key
      ✓ should return ValidationException if empty binary key
      ✓ should return ValidationException if missing range key
      ✓ should return ValidationException if secondary index key is incorrect type
      ✓ should return ValidationException if hash key is too big
      ✓ should return ValidationException if range key is too big
      ✓ should return ResourceNotFoundException if table is being created
    functionality
      ✓ should put basic item
      ✓ should put empty values
      ✓ should put really long numbers
      ✓ should put multi attribute item
      ✓ should return empty when there are no old values
      ✓ should return correct old values when they exist
      ✓ should put basic range item
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should return ConditionalCheckFailedException if expecting existing key to not exist
      ✓ should succeed if conditional key is different and exists is false
      ✓ should succeed if conditional key is same
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if different value specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if value not specified
      ✓ should return ConditionalCheckFailedException if expecting existing value to not exist if same value specified
      ✓ should succeed for multiple conditional checks if all are valid
      ✓ should return ConditionalCheckFailedException for multiple conditional checks if one is invalid
      ✓ should succeed for multiple conditional checks if one is invalid and OR is specified
      ✓ should succeed if condition is valid: NE
      ✓ should fail if condition is invalid: NE
      ✓ should succeed if condition is valid: LE
      ✓ should fail if condition is invalid: LE
      ✓ should succeed if condition is valid: LT
      ✓ should fail if condition is invalid: LT
      ✓ should succeed if condition is valid: GE
      ✓ should fail if condition is invalid: GE
      ✓ should succeed if condition is valid: GT
      ✓ should fail if condition is invalid: GT
      ✓ should succeed if condition is valid: CONTAINS
      ✓ should fail if condition is invalid: CONTAINS
      ✓ should succeed if condition is valid: BEGINS_WITH
      ✓ should fail if condition is invalid: BEGINS_WITH
      ✓ should succeed if condition is valid: NOT_CONTAINS
      ✓ should fail if condition is invalid: NOT_CONTAINS
      ✓ should succeed if condition is valid: IN
      ✓ should fail if condition is invalid: IN
      ✓ should succeed if condition is valid: BETWEEN
      ✓ should fail if condition is invalid: BETWEEN
      ✓ should return ConsumedCapacity for small item
      ✓ should return ConsumedCapacity for larger item

  query
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (88ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ConsistentRead is not a boolean
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when QueryFilter is not a map
      ✓ should return SerializationException when QueryFilter.Attr is not a struct
      ✓ should return SerializationException when QueryFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when QueryFilter.Attr.AttributeValueList.0 is not an attr struct (86ms)
      ✓ should return SerializationException when IndexName is not a string
      ✓ should return SerializationException when ScanIndexForward is not a boolean
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when KeyConditions is not a map
      ✓ should return SerializationException when KeyConditions.Attr is not a struct
      ✓ should return SerializationException when KeyConditions.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when KeyConditions.Attr.AttributeValueList.0 is not an attr struct (73ms)
      ✓ should return SerializationException when KeyConditionExpression is not a string
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (69ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for empty IndexName
      ✓ should return ValidationException for short IndexName
      ✓ should return ValidationException for long IndexName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if all expressions and non-expression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditionExpression
      ✓ should return ValidationException if all expressions and non-expression without KeyConditions
      ✓ should return ValidationException if ExpressionAttributeNames but no expressions
      ✓ should return ValidationException if ExpressionAttributeValues but no expressions
      ✓ should return ValidationException for bad attribute values in QueryFilter
      ✓ should return ValidationException for invalid values in QueryFilter
      ✓ should return ValidationException for empty/invalid numbers in QueryFilter
      ✓ should return ValidationException for multiple datatypes in QueryFilter
      ✓ should return ValidationException for incorrect number of QueryFilter arguments
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey without provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for bad attribute values in KeyConditions
      ✓ should return ValidationException for invalid values in KeyConditions
      ✓ should return ValidationException for empty/invalid numbers in KeyConditions
      ✓ should return ValidationException for multiple datatypes in KeyConditions
      ✓ should return ValidationException for incorrect number of KeyConditions arguments
      ✓ should return ValidationException for incorrect number of KeyConditions
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException if AttributeValueList has different types
      ✓ should return ValidationException if BETWEEN arguments are in the incorrect order
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty KeyConditionExpression
      ✓ should return ValidationException for syntax errors in KeyConditionExpression
      ✓ should return ValidationException for invalid operand types
      ✓ should return ValidationException for invalid operand types with attributes
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for invalid operator
      ✓ should return ValidationException for invalid operators
      ✓ should return ValidationException no key attribute as first operator
      ✓ should return ValidationException for nested operations
      ✓ should return ValidationException for multiple attribute names
      ✓ should return ValidationException for nested attributes
      ✓ should return ValidationException for no key attribute
      ✓ should return ValidationException for multiple conditions per key
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args have different types
      ✓ should return ValidationException if KeyConditionExpression BETWEEN args are in the incorrect order
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for querying global index with ConsistentRead
      ✓ should return ValidationException if ExclusiveStartKey is invalid
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match hash schema
      ✓ should return ValidationException if ExclusiveStartKey does not match range schema
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if local hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not in query
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if local range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but range has incorrect schema
      ✓ should return ValidationException if hash in ExclusiveStartKey and KeyConditions but local has incorrect schema
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException for missing range element
      ✓ should return ValidationException for ExclusiveStartKey with local index and missing part
      ✓ should return ValidationException for ExclusiveStartKey with global index and missing part
      ✓ should return ValidationException if querying with non-indexable operations
      ✓ should return ValidationException for unsupported comparison on range
      ✓ should return ValidationException for incorrect comparison operator on index
      ✓ should return ValidationException for mismatching param type
      ✓ should return ValidationException if querying with unsupported conditions
      ✓ should return ValidationException if querying global with unsupported conditions
      ✓ should return ValidationException for ExclusiveStartKey with out-of-bounds hash key
      ✓ should return ValidationException for ExclusiveStartKey with local index and out-of-bounds hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException if second global hash in ExclusiveStartKey but outside range
      ✓ should return ValidationException for ExclusiveStartKey with non-matching range key
      ✓ should return ValidationException for ExclusiveStartKey with local index and not matching predicate
      ✓ should return ValidationException if global hash in ExclusiveStartKey but not matching predicate
      ✓ should return ValidationException for ExclusiveStartKey with matching range but non-matching hash key
      ✓ should return ValidationException if global hash in ExclusiveStartKey but exact match
      ✓ should return ValidationException if hash key in QueryFilter
      ✓ should return ValidationException if hash key in FilterExpression
      ✓ should return ValidationException if range key in QueryFilter
      ✓ should return ValidationException if global range key in QueryFilter
      ✓ should return ValidationException if range key in FilterExpression
      ✓ should return ValidationException for non-scalar index access in FilterExpression
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
    functionality
      ✓ should query a hash table when empty
      ✓ should query a hash table with items
      ✓ should query a range table with EQ on just hash key
      ✓ should query a range table with EQ
      ✓ should query a range table with LE
      ✓ should query a range table with LT
      ✓ should query a range table with GE
      ✓ should query a range table with GT
      ✓ should query a range table with BEGINS_WITH
      ✓ should query a range table with BETWEEN
      ✓ should only return requested attributes
      ✓ should only return requested nested attributes
      ✓ should filter items by query filter
      ✓ should only return projected attributes by default for secondary indexes
      ✓ should return all attributes when specified for secondary indexes
      ✓ should return COUNT if requested
      ✓ should only return Limit items if requested
      ✓ should only return Limit items if requested and QueryFilter
      ✓ should return LastEvaluatedKey even if only Count is selected
      ✓ should return LastEvaluatedKey even if only Count is selected and QueryFilter
      ✓ should not return LastEvaluatedKey if Limit is at least size of response
      ✓ should return items in order for strings
      ✓ should return items in order for secondary index strings
      ✓ should calculate comparisons correctly for secondary indexes
      ✓ should return items in order for numbers
      ✓ should return items in order for binary
      ✓ should return items in reverse order for strings
      ✓ should return items in reverse order with Limit for strings
      ✓ should return items in reverse order with ExclusiveStartKey for strings
      ✓ should return items in reverse order for numbers
      ✓ should return items in reverse order with Limit for numbers
      ✓ should return items in reverse order for binary
      ✓ should return items in reverse order with Limit for binary
      ✓ should query on basic hash global index
      ✓ should query in reverse on basic hash global index
      ✓ should query on range global index
      ✓ should query in reverse on range global index
      ✓ should query with ExclusiveStartKey on basic hash global index
      ✓ should query in reverse with ExclusiveStartKey on basic hash global index
      ✓ should query with ExclusiveStartKey on range global index
      ✓ should query in reverse with ExclusiveStartKey on range global index
      ✓ should query on a global index if values are equal
      - should not return LastEvaluatedKey if just under limit
      - should return LastEvaluatedKey if just over limit
      - should return all if just under limit
      - should return one less than all if just over limit

  scan
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ExclusiveStartKey is not a map
      ✓ should return SerializationException when ExclusiveStartKey.Attr is not an attr struct (67ms)
      ✓ should return SerializationException when AttributesToGet is not a list
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when Select is not a string
      ✓ should return SerializationException when Limit is not an integer
      ✓ should return SerializationException when Segment is not an integer
      ✓ should return SerializationException when ConditionalOperator is not a string
      ✓ should return SerializationException when TotalSegments is not an integer
      ✓ should return SerializationException when ScanFilter is not a map
      ✓ should return SerializationException when ScanFilter.Attr is not a struct
      ✓ should return SerializationException when ScanFilter.Attr.ComparisonOperator is not a string
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList is not a list
      ✓ should return SerializationException when ScanFilter.Attr.AttributeValueList.0 is not an attr struct (77ms)
      ✓ should return SerializationException when FilterExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (63ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
      ✓ should return SerializationException when ProjectionExpression is not a string
      ✓ should return SerializationException when IndexName is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no FilterExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no FilterExpression
      ✓ should return ValidationException for duplicate values in AttributesToGet
      ✓ should return ValidationException for bad attribute values in ScanFilter
      ✓ should return ValidationException for invalid values in ScanFilter
      ✓ should return ValidationException for empty/invalid numbers in ScanFilter
      ✓ should return ValidationException for multiple datatypes in ScanFilter
      ✓ should return ValidationException for incorrect number of ScanFilter arguments
      ✓ should return ValidationException for invalid ComparisonOperator types
      ✓ should return ValidationException for invalid CONTAINS ComparisonOperator types
      ✓ should return ValidationException for invalid BETWEEN ComparisonOperator types
      ✓ should return ValidationException for invalid BEGINS_WITH ComparisonOperator types
      ✓ should return ValidationException on ExclusiveStartKey if ScanFilter ok with EQ on type SS when table does not exist
      ✓ should return ValidationException for unsupported datatype in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey
      ✓ should return ValidationException for invalid values in ExclusiveStartKey with no provided message
      ✓ should return ValidationException for empty/invalid numbers in ExclusiveStartKey
      ✓ should return ValidationException for multiple datatypes in ExclusiveStartKey
      ✓ should return ValidationException for missing TotalSegments
      ✓ should return ValidationException for missing Segment
      ✓ should return ValidationException for Segment more than TotalSegments
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid ExpressionAttributeValues
      ✓ should return ValidationException for empty FilterExpression
      ✓ should return ValidationException for empty ProjectionExpression
      ✓ should return ValidationException for syntax errors (50ms)
      ✓ should return ValidationException for redundant parentheses (59ms)
      ✓ should return ValidationException for invalid function names
      ✓ should return ValidationException for functions used incorrectly
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for missing attribute names
      ✓ should return ValidationException for missing attribute values
      ✓ should return ValidationException for functions with incorrect operands
      ✓ should return ValidationException for functions with incorrect operand type (80ms)
      ✓ should return ValidationException for attribute_type with incorrect value
      ✓ should return ValidationException for functions with attr values instead of paths
      ✓ should return ValidationException for non-distinct expressions
      ✓ should check table exists before checking key validity
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in hash table
      ✓ should return ValidationException if unknown index and bad ExclusiveStartKey in range table
      ✓ should return ValidationException if ExclusiveStartKey is invalid for local index
      ✓ should return ValidationException if ExclusiveStartKey is invalid for global index
      ✓ should return ValidationException if global range in ExclusiveStartKey is invalid
      ✓ should return ValidationException for non-existent index name
      ✓ should return ValidationException for specifying ALL_ATTRIBUTES when global index does not have ALL
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for local index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema for global compound index
      ✓ should return ValidationException if ExclusiveStartKey does not match schema
      ✓ should return ValidationException if ExclusiveStartKey for range table is invalid
      ✓ should return ValidationException if range in ExclusiveStartKey is invalid, but hash and local are ok
      ✓ should return ValidationException if global hash in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if global range in ExclusiveStartKey but bad in query
      ✓ should return ValidationException if ExclusiveStartKey is from different segment
      ✓ should return ValidationException for non-scalar key access
    functionality
      ✓ should scan with no filter
      ✓ should scan by id (type S)
      ✓ should return empty if no match
      ✓ should scan by a non-id property (type N)
      ✓ should scan by multiple properties (39ms)
      ✓ should scan by EQ on type B
      ✓ should scan by EQ on type SS
      ✓ should scan by EQ on type NS
      ✓ should scan by EQ on type BS
      ✓ should scan by EQ on different types
      ✓ should scan by NE on different types
      ✓ should scan by NE on type SS
      ✓ should scan by NE on type NS
      ✓ should scan by NE on type BS
      ✓ should scan by LE on type S
      ✓ should scan by LE on type N with decimals
      ✓ should scan by LE on type N without decimals
      ✓ should scan by LE on type B
      ✓ should scan by LT on type S
      ✓ should scan by LT on type N
      ✓ should scan by LT on type B
      ✓ should scan by GE on type S
      ✓ should scan by GE on type N
      ✓ should scan by GE on type B
      ✓ should scan by GT on type S
      ✓ should scan by GT on type N
      ✓ should scan by GT on type B
      ✓ should scan by NOT_NULL
      ✓ should scan by NULL
      ✓ should scan by CONTAINS on type S
      ✓ should scan by CONTAINS on type N
      ✓ should scan by CONTAINS on type B
      ✓ should scan by NOT_CONTAINS on type S
      ✓ should scan by NOT_CONTAINS on type N
      ✓ should scan by NOT_CONTAINS on type B
      ✓ should scan by BEGINS_WITH on type S
      ✓ should scan by BEGINS_WITH on type B
      ✓ should scan by IN on type S
      ✓ should scan by IN on type N
      ✓ should scan by IN on type B
      ✓ should scan by BETWEEN on type S
      ✓ should scan by BETWEEN on type N
      ✓ should scan by BETWEEN on type B
      ✓ should scan by nested properties
      ✓ should calculate size function correctly
      ✓ should only return requested attributes
      ✓ should return COUNT if requested
      ✓ should return after but not including ExclusiveStartKey
      ✓ should succeed even if ExclusiveStartKey does not match scan filter
      ✓ should return LastEvaluatedKey if Limit not reached
      ✓ should return LastEvaluatedKey even if selecting Count
      ✓ should return LastEvaluatedKey while filtering, even if Limit is smaller than the expected return list (45ms)
      ✓ should not return LastEvaluatedKey if Limit is large
      ✓ should return items in same segment order
      ✓ should return items in string hash order
      ✓ should return items in number hash order
      ✓ should return items from correct string hash segments
      ✓ should return items from correct number hash segments
      - should not return LastEvaluatedKey if just under limit for range table
      - should return LastEvaluatedKey if just over limit for range table
      - should not return LastEvaluatedKey if just under limit for number range table
      - should return LastEvaluatedKey if just over limit for number range table
      - should return all if just under limit with small attribute for hash table
      - should return all if just under limit with large attribute
      - should return one less than all if just over limit with small attribute for hash table
      - should return all if just under limit for range table
      - should return all if just over limit with less items for range table
      - should return all if just over limit for range table
      - should return one less than all if just over limit with large attribute
      ✓ should allow scans at least for 27500 args to IN (163ms)

  tagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when Tags is not a list
      ✓ should return SerializationException when Tags.0 is not a struct
      ✓ should return SerializationException when Tags.0.Key is not a string
      ✓ should return SerializationException when Tags.0.Value is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null Tags
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if Tags are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  untagResource
    serializations
      ✓ should return SerializationException when ResourceArn is not a string
      ✓ should return SerializationException when TagKeys is not a list
      ✓ should return SerializationException when TagKeys.0 is not a string
    validations
      ✓ should return ValidationException for no ResourceArn
      ✓ should return AccessDeniedException for empty ResourceArn
      ✓ should return AccessDeniedException for short unauthorized ResourceArn
      ✓ should return AccessDeniedException for long unauthorized ResourceArn
      ✓ should return AccessDeniedException for longer unauthorized ResourceArn
      ✓ should return ValidationException for null TagKeys
      ✓ should return ValidationException for invalid ResourceArn
      ✓ should return ValidationException for short table name
      ✓ should return ResourceNotFoundException if TagKeys are empty
      ✓ should return ResourceNotFoundException if ResourceArn does not exist

  updateItem
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when Key is not a map
      ✓ should return SerializationException when Key.Attr is not an attr struct (61ms)
      ✓ should return SerializationException when Expected is not a map
      ✓ should return SerializationException when Expected.Attr is not a struct
      ✓ should return SerializationException when Expected.Attr.Exists is not a boolean
      ✓ should return SerializationException when Expected.Attr.Value is not an attr struct (65ms)
      ✓ should return SerializationException when AttributeUpdates is not a map
      ✓ should return SerializationException when AttributeUpdates.Attr is not a struct
      ✓ should return SerializationException when AttributeUpdates.Attr.Action is not a string
      ✓ should return SerializationException when AttributeUpdates.Attr.Value is not an attr struct (58ms)
      ✓ should return SerializationException when ReturnConsumedCapacity is not a string
      ✓ should return SerializationException when ReturnItemCollectionMetrics is not a string
      ✓ should return SerializationException when ReturnValues is not a string
      ✓ should return SerializationException when ConditionExpression is not a string
      ✓ should return SerializationException when UpdateExpression is not a string
      ✓ should return SerializationException when ExpressionAttributeValues is not a map
      ✓ should return SerializationException when ExpressionAttributeValues.Attr is not an attr struct (58ms)
      ✓ should return SerializationException when ExpressionAttributeNames is not a map
      ✓ should return SerializationException when ExpressionAttributeNames.Attr is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for incorrect attributes
      ✓ should return ValidationException if expression and non-expression
      ✓ should return ValidationException if ExpressionAttributeNames but no ConditionExpression
      ✓ should return ValidationException if ExpressionAttributeValues but no ConditionExpression
      ✓ should return ValidationException for unsupported datatype in Key
      ✓ should return ValidationException for invalid values in Key
      ✓ should return ValidationException for empty/invalid numbers in Key
      ✓ should return ValidationException for multiple datatypes in Key
      ✓ should return ValidationException if update has no value
      ✓ should return ValidationException if trying to delete incorrect types
      ✓ should return ValidationException if trying to add incorrect types
      ✓ should return ValidationException if trying to add type B
      ✓ should return ValidationException if no value and no exists
      ✓ should return ValidationException for Exists true with no value
      ✓ should return ValidationException for Exists false with value
      ✓ should return ValidationException for empty ExpressionAttributeNames
      ✓ should return ValidationException for invalid ExpressionAttributeNames
      ✓ should return ValidationException for empty ExpressionAttributeValues
      ✓ should return ValidationException for invalid keys in ExpressionAttributeValues
      ✓ should return ValidationException for unsupported datatype in ExpressionAttributeValues
      ✓ should return ValidationException for invalid values in ExpressionAttributeValues
      ✓ should return ValidationException for empty/invalid numbers in ExpressionAttributeValues
      ✓ should return ValidationException for multiple datatypes in ExpressionAttributeValues
      ✓ should return ValidationException for empty UpdateExpression
      ✓ should return ValidationException for empty ConditionExpression
      ✓ should return ValidationException for syntax errors in UpdateExpression
      ✓ should return ValidationException for reserved keywords
      ✓ should return ValidationException for invalid functions in UpdateExpression
      ✓ should return ValidationException for multiple sections
      ✓ should return ValidationException for undefined attribute names in UpdateExpression
      ✓ should return ValidationException for undefined attribute values in UpdateExpression
      ✓ should return ValidationException for overlapping paths in UpdateExpression
      ✓ should return ValidationException for conflicting paths in UpdateExpression
      ✓ should return ValidationException for incorrect types in UpdateExpression
      ✓ should return ValidationException for incorrect number of operands to functions in UpdateExpression
      ✓ should return ValidationException for incorrect operand path type to functions in UpdateExpression
      ✓ should return ValidationException for incorrect types to functions in UpdateExpression
      ✓ should return ValidationException for extra ExpressionAttributeNames
      ✓ should return ValidationException for extra ExpressionAttributeValues
      ✓ should return ResourceNotFoundException if key is empty and table does not exist
      ✓ should return ValidationException if Key does not match schema
      ✓ should return ValidationException if Key does not match range schema
      ✓ should return ResourceNotFoundException if table is being created
      ✓ should return ValidationException if trying to update key
      ✓ should return ValidationException if trying to update range key
      ✓ should return ValidationException if trying to update wrong type on index
      ✓ should return ValidationException if trying to update index map
      ✓ should return ValidationException if trying to delete/add incorrect types
      ✓ should return ValidationException if using expression to delete/add incorrect types
      ✓ should return ValidationException if trying to reference non-existent attribute
      ✓ should return ValidationException if trying to update non-existent nested attribute in non-existent item
      ✓ should return ValidationException if trying to update non-existent nested attribute in existing item
      ✓ should return ValidationException if trying to update existing index
      ✓ should return ValidationException if update item is too big
    functionality
      ✓ should return ConditionalCheckFailedException if expecting non-existent key to exist
      ✓ should just add item with key if no action
      ✓ should return empty when there are no old values
      ✓ should return all old values when they exist
      ✓ should return updated old values when they exist
      ✓ should return updated old nested values when they exist
      ✓ should return all new values when they exist
      ✓ should return updated new values when they exist
      ✓ should just add valid ADD actions if nothing exists
      ✓ should delete normal values and return updated new
      ✓ should delete normal values and return updated on index table
      ✓ should delete set values and return updated new
      ✓ should add numerical value and return updated new
      ✓ should add set value and return updated new
      ✓ should add list value and return updated new
      ✓ should throw away duplicate string values
      ✓ should throw away duplicate numeric values
      ✓ should throw away duplicate binary values
      ✓ should return ConsumedCapacity for creating small item
      ✓ should return ConsumedCapacity for creating larger item
      ✓ should return ConsumedCapacity for creating and updating small item
      ✓ should return ConsumedCapacity for creating and updating larger item
      ✓ should update when boolean value expect matches
      ✓ should update values from other attributes
      ✓ should update nested attributes
      ✓ should update indexed attributes

  updateTable
    serializations
      ✓ should return SerializationException when TableName is not a string
      ✓ should return SerializationException when ProvisionedThroughput is not a struct
      ✓ should return SerializationException when ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Update.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.IndexName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.WriteCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.ProvisionedThroughput.ReadCapacityUnits is not a long
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0 is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.AttributeName is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.KeySchema.0.KeyType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes is not a list
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.ProjectionType is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Create.Projection.NonKeyAttributes.0 is not a string
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete is not a struct
      ✓ should return SerializationException when GlobalSecondaryIndexUpdates.0.Delete.IndexName is not a strin
      ✓ should return SerializationException when BillingMode is not a string
    validations
      ✓ should return ValidationException for no TableName
      ✓ should return ValidationException for empty TableName
      ✓ should return ValidationException for short TableName
      ✓ should return ValidationException for long TableName
      ✓ should return ValidationException for null attributes
      ✓ should return ValidationException for empty ProvisionedThroughput
      ✓ should return ValidationException for low ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits and neg
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits
      ✓ should return ValidationException for high ProvisionedThroughput.ReadCapacityUnits second
      ✓ should return ValidationException for high ProvisionedThroughput.WriteCapacityUnits
      ✓ should return ValidationException for empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for empty Update
      ✓ should return ValidationException for bad IndexName and ProvisionedThroughput
      ✓ should return ValidationException for empty index struct
      ✓ should return ValidationException for too many empty GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for repeated GlobalSecondaryIndexUpdates
      ✓ should return ValidationException for ProvisionedThroughput update when PAY_PER_REQUEST
      ✓ should return ValidationException for PROVISIONED without ProvisionedThroughput
      ✓ should return ResourceNotFoundException if table does not exist
      ✓ should return NotFoundException for high index ReadCapacityUnits when table does not exist
      ✓ should return NotFoundException for high index WriteCapacityUnits when table does not exist
      ✓ should return ValidationException for high index ReadCapacityUnits when index does not exist
      ✓ should return ValidationException for high index WriteCapacityUnits when index does not exist
      ✓ should return ValidationException if read and write are same
      ✓ should return LimitExceededException for too many GlobalSecondaryIndexUpdates
    functionality
      ✓ should triple rates and then reduce if requested (2008ms)
      - should allow table to be converted to PAY_PER_REQUEST and back again


  1037 passing (22s)
  22 pending

************* run test done *************
