/data/js-variants/multee
18
skipper is testing ./Variants/body-parser/variant18/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 4s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 459ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 390ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (30s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3016ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(555ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1378ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(686ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1271ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1111ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(637ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(210ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(225ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(172ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1493ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1176ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(421ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1510ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1153ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(995ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1620ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1107ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1143ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1110ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1115ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1495ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (25s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant17/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 453ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 398ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (33s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(83ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1606ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1198ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(204ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(787ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(755ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1557ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1245ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(474ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(772ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1040ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(207ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(317ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(508ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(294ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1200ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(703ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1518ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(919ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(620ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (21s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant16/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 470ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 388ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (33s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3016ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1636ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(938ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1433ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(788ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1288ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1700ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1374ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1573ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1698ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(722ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(491ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(130ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(169ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(851ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1076ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(725ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(558ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1710ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1156ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(759ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(74ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1656ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (27s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant15/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 460ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 402ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (34s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3018ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(742ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(40ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(198ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(58ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1240ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1331ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(716ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1392ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1550ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(507ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1673ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1478ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(571ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(908ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(52ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1134ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1423ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1323ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(320ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(619ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1324ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1036ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (24s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant14/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 468ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 400ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (34s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1374ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(858ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(355ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1257ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1222ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(942ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1276ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(81ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(253ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1178ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(57ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1506ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(894ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1402ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1489ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1664ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1667ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(625ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(65ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(168ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(555ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(61ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (24s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant13/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 5s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 489ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 411ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (30s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3016ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1485ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(825ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(859ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(846ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(345ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1443ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(450ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1404ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1464ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(845ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(547ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1642ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1515ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(99ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1390ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(882ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1692ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(809ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(707ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(961ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1087ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(342ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (26s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant12/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 483ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 400ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (31s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3018ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1325ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(329ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(307ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1461ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1613ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1236ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1285ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(120ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1352ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(836ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1119ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(728ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(848ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1470ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(695ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1045ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(660ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(812ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1530ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(152ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1696ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(649ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (26s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant11/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 474ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 440ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (27s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3018ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(962ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1302ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(248ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(96ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(993ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(978ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(329ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(835ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(707ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(194ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1221ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1444ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(722ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1134ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(918ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1077ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(827ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(956ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1595ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1163ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(585ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(276ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (23s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant10/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 545ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 406ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (32s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(992ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(239ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1331ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1335ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(289ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1708ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1306ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(167ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(763ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(532ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(350ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1249ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(239ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1175ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(625ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(817ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(167ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(779ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1024ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(530ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1081ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (21s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant9/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 454ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 403ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (32s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3018ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1347ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1048ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(502ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(637ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(854ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(288ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1196ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(221ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(852ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(535ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(135ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1598ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1069ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(232ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1680ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(787ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(95ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(649ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(229ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(545ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(823ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (20s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant8/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 4s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 460ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 419ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (30s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3021ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(769ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(907ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(484ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1080ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1102ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1697ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(275ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(113ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1452ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(90ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(886ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(703ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1268ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1238ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1534ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(352ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1557ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(68ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(94ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1674ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(983ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1532ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (25s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant7/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 455ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 422ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (31s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3018ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1520ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(805ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1057ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1564ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(606ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(958ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1018ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(467ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(451ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1294ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(173ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1590ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(364ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1572ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1294ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(721ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(995ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(648ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(696ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(657ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1523ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(925ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (26s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant6/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 463ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 401ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (27s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3016ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1162ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(599ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(563ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(419ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1210ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(606ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1001ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1698ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(859ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(379ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1153ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(386ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(970ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1199ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(212ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1285ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1067ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(38ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1337ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1536ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (22s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant5/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 466ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 392ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (31s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3018ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1703ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1507ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(460ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(924ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1356ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1106ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1246ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1167ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1308ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(555ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(885ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(415ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1576ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1079ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(584ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(721ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(762ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1658ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(453ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1424ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(792ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1521ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (28s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant4/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 461ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 409ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (31s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(278ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1610ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(61ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(344ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1236ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1169ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(235ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1558ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(956ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(423ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1507ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(932ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(395ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1232ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1356ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(930ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(366ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1317ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(645ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(437ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1491ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (23s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant3/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 3s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 463ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 397ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (31s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1064ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(518ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(170ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(926ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1205ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1063ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1060ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1547ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1212ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1298ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1175ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1261ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1196ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1196ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(486ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1305ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1163ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1699ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1594ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(415ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(75ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1049ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (27s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant2/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 455ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 405ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (33s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3018ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(869ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(757ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1567ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1039ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(877ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1703ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(389ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(226ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(179ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(692ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(896ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(488ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(56ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1627ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1118ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1124ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(463ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1167ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(779ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1554ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1704ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(226ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (24s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./Variants/body-parser/variant1/body-parser
/data/js-variants/multee
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 516ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 393ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (29s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3019ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(150ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(811ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(124ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1094ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1553ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(328ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(249ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1708ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(899ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(97ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1451ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(98ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1643ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(929ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1489ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(653ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1619ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1286ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1631ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1350ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1405ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (25s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
variantsDepsNum: 11
/data/js-variants/multee
11
skipper is testing ./VariantsDeps/body-parser/variant11/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 470ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 406ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (34s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1624ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(956ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(611ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1459ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1581ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1136ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(130ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1567ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(583ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1260ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(497ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(671ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(794ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(749ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(137ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(815ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(799ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(41ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1167ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(718ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (22s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant10/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 467ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 395ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (31s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1221ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(730ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(865ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(744ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1533ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1272ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1224ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(724ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1175ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1282ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(796ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(879ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(42ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1200ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1605ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(936ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(668ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1098ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1351ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(775ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1418ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1289ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (28s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant9/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 4s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 470ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 411ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (29s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(787ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(986ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(935ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1311ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1016ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(461ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1422ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(345ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(233ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(406ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(389ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1584ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(900ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(89ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(998ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(773ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1418ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(217ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1275ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(947ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1423ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(622ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (23s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant8/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 469ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 413ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (31s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3018ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(664ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1049ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(289ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1414ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(876ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1636ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(73ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(288ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(263ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1636ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(141ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1066ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1433ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(971ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1084ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1149ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1119ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1395ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(70ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1355ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1171ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(956ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (25s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant7/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 463ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 399ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (35s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3014ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(766ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(590ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1366ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(151ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(787ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1659ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(626ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1468ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1043ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1102ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(259ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1216ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1090ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1083ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1271ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(903ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(771ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(64ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(118ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(522ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(700ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(49ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (22s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant6/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 492ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 429ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (35s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3016ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(664ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1216ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1300ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(808ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1142ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1664ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1286ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(68ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(108ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1518ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1624ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1320ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(252ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(187ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(85ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(997ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(891ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(97ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1179ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1405ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(278ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(226ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (23s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant5/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 473ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 425ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (35s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3019ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(940ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1602ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1407ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(910ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(429ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1271ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1031ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1706ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(649ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1212ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(184ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1369ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1373ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(79ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(309ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(689ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1504ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(273ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1212ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1658ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (25s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant4/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 5s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 467ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 428ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (28s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3019ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(273ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(352ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(816ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(55ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1552ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(392ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1014ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(426ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(127ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(131ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1085ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(453ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1389ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(410ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1182ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(423ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1428ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1704ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(944ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(240ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1264ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1109ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (22s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant3/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 494ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 402ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (30s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3019ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(445ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1662ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(985ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1456ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(841ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1694ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(796ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1267ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(72ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1307ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(668ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1353ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(868ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1673ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(867ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1566ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(493ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1210ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(323ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[33m(43ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(249ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(671ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (25s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant2/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 482ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 401ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (28s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(561ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(156ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1373ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(688ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(238ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1042ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(760ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1024ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1615ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(507ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(572ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1708ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(506ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(660ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(365ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(521ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(853ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1518ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1500ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(633ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1579ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (23s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
skipper is testing ./VariantsDeps/body-parser/variant1/body-parser
************* npm unlink module *************

added 1 package, removed 3 packages, changed 1 package, and audited 427 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 507ms

found 0 vulnerabilities
************* npm unlink module done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 409ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 3 packages, removed 1 package, changed 1 package, and audited 430 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

42 vulnerabilities (3 low, 11 moderate, 21 high, 7 critical)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> skipper@0.9.1 test
> npm run lint && npm run custom-tests


> skipper@0.9.1 lint
> eslint . --max-warnings=0 --ignore-pattern 'test/' && echo 'âœ”  Your code looks good.'

âœ”  Your code looks good.

> skipper@0.9.1 custom-tests
> mocha && node -e "require('skipper-adapter-tests')({module: require('skipper-disk')});"



  req.file(...).upload() defaults to skipper-disk adapter when passed a string or `options` object ::
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.body (empty body) ::
    sending an empty body with a POST request
      âœ“ should return an empty object as the body

  multipart form upload
    - uses the multipart form parsing middleware
    - binds an action that will upload our test file
    - should upload the file when after the request is sent

  req.body (JSON parser) ::
    sending an application/json content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array

  multiple params ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access ALL of the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  onBodyParserError ::
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body

  with async function
    basic functioning
      âœ“ should run the onBodyParserError function when there's an error parsing the body
      âœ“ should catch errors thrown in the function

  req.body ::
    âœ“ binds a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have been able to access the body parameters passed in the upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::
    âœ“ binds a file uploader action
    âœ“ sends an attachment on an unused field
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`
    âœ“ binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds)
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ sends many attachments on unused fields
    âœ“ should NOT have uploaded any files to `suite.outputDir`

  req.file(...).pipe(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  req.file(...).upload(...) ::
    âœ“ bind a file uploader action
    âœ“ sends a multi-part file upload request
    âœ“ should have uploaded a file to `suite.outputDir`

  Sucessive file uploads should not fail ::
    âœ“ binds a file uploader action
    âœ“ sends 6 multi-part file upload requests
    âœ“ should have uploaded a 6 files to `suite.outputDir`

  test suite
    âœ“ should have access to file fixtures

  maxWaitTimeBeforePassingControlToApp
    with the default 500ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params
    with a custom 1000ms setting and a 600ms delay
      âœ“ should result in a response with the files intact but missing params

  maxTimeToWaitForFirstFile
    with a setting of 600 and a 1200ms delay
      âœ“ should result in the `.upload()` callback being called with an ETIMEOUT error

  maxTimeToBuffer
    with a setting of 600 and a 1200ms delay
      with at least one file connected to a receiver
        âœ“ should result in a successful request (EMAXBUFFER should be swallowed)

  req.body (URL-encoded parser) ::
    sending an application/x-www-form-urlencoded content-type request
      âœ“ should have all of the correct body params
      âœ“ should have an empty files array


  62 passing (27s)
  3 pending


[0m[0m
[0m  aborting a file in progress[0m
  [32m  âœ“[0m[90m should not crash the server [0m[31m(3017ms)[0m

[0m  when some big files start coming in, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with decent-sized (1.5MB) files [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous, "well-endowed" (4MB) requests [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 10MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 1 request with a 25MB file attachment [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (10MB) file attachments. [0m
  [32m  âœ“[0m[90m should work properly with 2 simultaneous requests with big ass (25MB) file attachments. [0m

[0m  after uploading a file using this adapter, Skipper[0m
[0m    each file metadata object[0m
    [32m  âœ“[0m[90m should be an object [0m
    [32m  âœ“[0m[90m should have the original filename of the uploaded file [0m
    [32m  âœ“[0m[90m should contain the file size [0m
[0m      field[0m
      [32m  âœ“[0m[90m should be a string [0m
[0m      file descriptor (`fd`)[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` if one was provided [0m
      [32m  âœ“[0m[90m should have basename === `saveAs` if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a string was passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should have expected basename when a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should be within the specified `dirname` even if a function is passed in for `saveAs` [0m
      [32m  âœ“[0m[90m should default to a UUID as its basename if `saveAs` was not specified [0m
[0m      type[0m
      [32m  âœ“[0m[90m should be a string [0m
      [32m  âœ“[0m[90m should otherwise default to "application/octet-stream" [0m

[0m  when using the "maxBytes" option[0m
[0m    Uploading a single file[0m
    [36m  - should allow uploads <= the maxBytes value[0m
    [36m  - should not allow uploads > the maxBytes value[0m

[0m  under a bit of load, this adapter[0m
  [32m  âœ“[0m[90m should work properly with 30 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 100 simultaneous requests [0m
  [32m  âœ“[0m[90m should work properly with 200 simultaneous requests [0m

[0m  this adapter[0m
  [32m  âœ“[0m[90m should allow a file to be uploaded [0m

[0m  this adapter's impact on `req.body` ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have been able to access the body parameters passed in the upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to expected location using provided `dirname` and `saveAs` options [0m

[0m  Ignoring :: req.file("foo"), when a file upload is sent to the "bar" field ::[0m
  [32m  âœ“[0m[90m binds a file uploader action [0m
  [32m  âœ“[0m[90m sends an attachment on an unused field [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m
  [32m  âœ“[0m[90m binds an action which does not do anything w/ ANY of the incoming Upstreams (+ introduces a random delay <=2 seconds) [0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(633ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1663ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(359ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(466ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1288ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1187ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(371ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(650ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(796ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1667ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1090ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1076ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(661ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(815ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1154ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(441ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(989ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1305ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(757ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(1028ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(724ms)[0m
  [32m  âœ“[0m[90m sends many attachments on unused fields [0m[31m(730ms)[0m
  [32m  âœ“[0m[90m should NOT have uploaded any files to `suite.outputDir` [0m

[0m  req.file(...).pipe(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m

[0m  req.file(...).upload(...) ::[0m
  [32m  âœ“[0m[90m bind a file uploader action [0m
  [32m  âœ“[0m[90m sends a multi-part file upload request [0m
  [32m  âœ“[0m[90m should have uploaded a file to `suite.outputDir` [0m


[92m [0m[32m 64 passing[0m[90m (25s)[0m
[36m [0m[36m 2 pending[0m

************* run test done *************
