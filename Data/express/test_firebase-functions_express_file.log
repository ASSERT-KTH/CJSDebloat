/data/js-variants/multee
17
firebase-functions is testing ./Variants/express/variant17/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 4s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 458ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 417ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (123ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (51ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (773ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant16/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 466ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 436ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (87ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (53ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (810ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant15/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 455ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 441ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (81ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (126ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (911ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant14/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 450ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 421ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 1s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (82ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (51ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (728ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant13/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 455ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 400ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (87ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (50ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (733ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant12/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 466ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 401ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (85ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (74ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (746ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant11/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 461ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 401ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (84ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (72ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (774ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant10/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 535ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 407ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (83ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (52ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (727ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant9/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 457ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 395ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (82ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (50ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (725ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant8/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 459ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 414ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (95ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token (74ms)
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (71ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (742ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant7/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 454ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 416ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (82ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (52ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (719ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant6/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 468ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 400ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (82ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (51ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance (50ms)
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (728ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant5/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 459ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 452ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (82ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (60ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (548ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant4/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 459ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 408ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (91ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (54ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events (68ms)
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (902ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant3/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 452ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 446ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (81ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (52ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (719ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant2/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 533ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 410ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (83ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (52ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events (44ms)
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (738ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
firebase-functions is testing ./Variants/express/variant1/express
/data/js-variants/multee
************* npm unlink module *************

removed 1 package, and audited 553 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm unlink module done *************
************* npm unlink globally *************

removed 1 package, and audited 1 package in 455ms

found 0 vulnerabilities
************* npm unlink globally done *************
************* npm link globally *************

added 1 package, and audited 3 packages in 403ms

found 0 vulnerabilities
************* npm link globally done *************
************* npm link module *************

added 1 package, and audited 555 packages in 2s

53 packages are looking for funding
  run `npm fund` for details

5 moderate severity vulnerabilities

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
************* npm link module done *************
************* start run test *************

> firebase-functions@3.22.0 test
> mocha --file ./mocha/setup.ts "spec/**/*.spec.ts"



  Change
    applyFieldMask
      ✓ should handle deleted values
      ✓ should handle created values
      ✓ should handle mutated values
    fromJSON
      ✓ should create a Change object with a `before` and `after`
      ✓ should apply the customizer function to `before` and `after`

  convertInvoker
    ✓ should raise an error on empty array
    ✓ should raise an error on empty string
    ✓ should raise an error on empty string with service accounts
    ✓ should raise an error on mixing public and service accounts
    ✓ should raise an error on mixing private and service accounts
    ✓ should return the correct public invoker
    ✓ should return the correct private invoker
    ✓ should return the correct scalar invoker
    ✓ should return the correct array invoker

  onCallHandler
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle success
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle null data and return
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle void return
    ✓ should reject bad method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should ignore charset
    ✓ should reject bad content type
    ✓ should reject extra body fields
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unhandled error
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle unknown error status
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle well-formed error
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"VALID"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle auth (81ms)
    ✓ should reject bad auth
    1) should handle AppCheck token
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"VALID","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should handle AppCheck token
    ✓ should handle bad AppCheck token with callable option
    ✓ should handle bad AppCheck token with callable option
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
    ✓ should expose raw request
    skip token verification debug mode support
    encoding/decoding
      ✓ encodes null
      ✓ encodes null
      ✓ encodes int
      ✓ encodes int
    decode tokens
      ✓ decodes valid Auth ID Token
      ✓ decodes valid Auth ID Token
      ✓ decodes invalid Auth ID Token
      ✓ decodes valid App Check Token
      ✓ decodes valid App Check Token
      ✓ decodes invalid App Check Token
    identity
      userRecordConstructor
        ✓ will provide falsey values for fields that are not in raw wire data
        ✓ will not interfere with fields that are in raw wire data
        ✓ will convert raw wire fields createdAt and lastSignedInAt to creationTime and lastSignInTime
        ✓ should stringify the record
      isValidRequest
        ✓ should error on non-post
        ✓ should error on bad Content-Type
        ✓ should error without req body
        ✓ should error without req body data
        ✓ should error without req body
        ✓ should not error on valid request
      parseMetadata
        ✓ should parse an undefined object
        ✓ should parse a decoded metadata object
      parseProviderData
        ✓ should parse the user info
        ✓ should parse the user info with phone
      parseDate
        ✓ should return null if tokens undefined
        ✓ should parse the date
      parseMultiFactor
        ✓ should return null on undefined factor
        ✓ should return null without enrolled factors
        ✓ should error on an invalid factor
        ✓ should correctly parse factors
      parseUserRecord
        ✓ should error if decoded does not have uid
        ✓ should parse user record
      parseAuthEventContext
        ✓ should parse an unknown event
        ✓ should parse a beforeSignIn event
        ✓ should parse a beforeCreate event
      validateAuthResponse
        ✓ should not throw on undefined request
        ✓ should throw an error if customClaims have a blocked claim
        ✓ should throw an error if customClaims size is too big
        ✓ should throw an error if sessionClaims have a blocked claim
        ✓ should throw an error if sessionClaims size is too big
        ✓ should throw an error if the combined customClaims & sessionClaims size is too big
      getUpdateMask
        ✓ should return empty string on undefined response
        ✓ should return empty on only customClaims and sessionClaims
        ✓ should return the right claims on a response
    onEnqueueHandler
      ✓ should handle success
      ✓ should reject bad method
      ✓ should ignore charset
      ✓ should reject bad content type
      ✓ should reject extra body fields
      ✓ should handle unhandled error
      ✓ should handle unknown error status
      ✓ should handle well-formed error
      ✓ should handle auth
      ✓ should accept unsigned auth too
      ✓ should skip auth in emulated environment
    logger (structured)
      logging methods
{"severity":"INFO","message":"hello { middle: 'obj' } end message"}
        ✓ should coalesce arguments into the message
{"additional":"context","severity":"INFO","message":"hello world"}
        ✓ should merge structured data from the last argument
{"severity":"INFO","message":"hello world null"}
        ✓ should not recognize null as a structured logging object
      write
        structured logging
          write
            ✓ should remove circular references
            ✓ should remove circular references in arrays
            ✓ should not break on objects that override toJSON
            ✓ should not alter parameters that are logged
{"severity":"DEBUG","message":"test"}
            ✓ should output DEBUG severity to stdout
{"severity":"INFO","message":"test"}
            ✓ should output INFO severity to stdout
{"severity":"NOTICE","message":"test"}
            ✓ should output NOTICE severity to stdout
            ✓ should output WARNING severity to stderr
            ✓ should output ERROR severity to stderr
            ✓ should output CRITICAL severity to stderr
            ✓ should output ALERT severity to stderr
            ✓ should output EMERGENCY severity to stderr
    extractStack
      ✓ extracts stack from a simple module
      ✓ extracts stack with required APIs
      ✓ extracts stack from a module with group functions
      with GCLOUD_PROJECT env var
        ✓ extracts stack from a simple module
        ✓ extracts stack with required APIs
    mergedRequiredAPIs
      ✓ leaves required APIs unchanged if nothing to merge
      ✓ merges reasons given overlapping required api
      ✓ merges reasons given overlapping required api
      ✓ does not repeat the same reason
    loadStack
      commonjs
        basic
          ✓ loads stack given relative path (55ms)
          ✓ loads stack given absolute path
        has main
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        grouped
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
        has params
          ✓ loads stack given relative path
          ✓ loads stack given absolute path
    path-pattern
      trimParam
        ✓ should trim a capture param without equals
        ✓ should trim a capture param with equals
      extractMatches
        ✓ should parse without multi segment
        ✓ should parse multi segment with params after
        ✓ should parse multi segment param with params after
        ✓ should parse multi segment with params before
        ✓ should parse multi segment param with params before
        ✓ should parse multi segment with params before and after
        ✓ should parse multi segment param with params before
        ✓ should parse an instance
    utilities
      path
        #normalizePath
          ✓ should strip leading and trailing slash
        #pathParts
          ✓ should turn a path into an array of strings
          ✓ should turn a root path, empty string, or null path into an empty array
    apps
      retain/release
        ✓ should retain/release ref counters appropriately
        ✓ should only decrement counter after garbageCollectionInterval is up
        ✓ should call _destroyApp if app no longer used
        ✓ should not call _destroyApp if app used again while waiting for release
        ✓ should increment ref counter for each subsequent retain
        ✓ should work with staggering sets of retain/release
    makeCloudFunction
      ✓ should put a __trigger/__endpoint on the returned CloudFunction
      ✓ should have legacy event type in __trigger/__endpoint if provided
      ✓ should include converted options in __endpoint
      ✓ should set retry given failure policy in __endpoint
      ✓ should setup a scheduleTrigger in __endpoint given a schedule
      ✓ should construct the right context for event
      ✓ should throw error when context.params accessed in handler environment
    makeParams
      ✓ should construct params from the event resource of events
    makeAuth and makeAuthType
      ✓ should construct correct auth and authType for admin user
      ✓ should construct correct auth and authType for unauthenticated user
      ✓ should construct correct auth and authType for a user
    config()
      ✓ will never load in GCFv2
      ✓ loads config values from .runtimeconfig.json
      ✓ does not provide firebase config if .runtimeconfig.json not invalid
      ✓ does not provide firebase config if .ruuntimeconfig.json has no firebase property
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable
      ✓ loads Firebase configs from FIREBASE_CONFIG env variable pointing to a file
      ✓ accepts alternative locations for config file
      ✓ accepts full JSON in env.CLOUD_RUNTIME_CONFIG
    FunctionBuilder
      ✓ should allow supported region to be set
      ✓ should allow multiple supported regions to be set
      ✓ should allow all supported regions to be set
      ✓ should allow valid runtime options to be set
      ✓ should apply a default failure policy if it's aliased with `true`
      ✓ should allow both supported region and valid runtime options to be set
      ✓ should allow both valid runtime options and supported region to be set in reverse order
      ✓ should fail if supported region but invalid runtime options are set (reverse order)
      ✓ should throw an error if user chooses a failurePolicy which is neither an object nor a boolean
      ✓ should throw an error if user chooses a failurePolicy.retry which is not an object
      ✓ should throw an error if user chooses an invalid memory allocation
      ✓ should throw an error if user chooses an invalid timeoutSeconds
      ✓ should throw an error if user chooses no region when using .region()
      ✓ should allow a ingressSettings to be set
      ✓ should throw an error if user chooses an invalid ingressSettings
      ✓ should allow a vpcConnector to be set
      ✓ should allow a vpcConnectorEgressSettings to be set
      ✓ should throw an error if user chooses an invalid vpcConnectorEgressSettings
      ✓ should allow a serviceAccount to be set as-is
      ✓ should allow a serviceAccount to be set with generated service account email
      ✓ should set a null serviceAccountEmail if service account is set to `default`
      ✓ should throw an error if serviceAccount is set to an invalid value
      ✓ should allow setting 4GB memory option
      ✓ should allow labels to be set
      ✓ should throw an error if more than 58 labels are set
      ✓ should throw an error if labels has a key that is too long
      ✓ should throw an error if labels has key that is too short
      ✓ should throw an error if labels has a value that is too long
      ✓ should throw an error if labels has a key that contains invalid characters
      ✓ should throw an error if labels has a value that contains invalid characters
      ✓ should throw an error if a label key starts with a reserved namespace
      ✓ should throw an error if invoker is an empty string
      ✓ should throw an error if invoker is an empty array
      ✓ should throw an error if invoker has an empty string
      ✓ should throw an error if public identifier is in the invoker array
      ✓ should throw an error if private identifier is in the invoker array
      ✓ should allow valid secret config expressed using short form
      ✓ should throw error given secrets expressed with full resource name
      ✓ should throw error given invalid secret config
      ✓ should throw error given invalid secret with versions
    Analytics Functions
      EventBuilder
        ✓ should allow both region and runtime options to be set
        #onLog
          ✓ should return a trigger/endpoint with appropriate values
        #dataConstructor
          ✓ should handle an event with the appropriate fields
          ✓ should remove xValues
          ✓ should change microsecond timestamps to ISO strings, and offsets to millis
          ✓ should populate currency fields
          ✓ should recognize all the fields the payload can contain
      handler namespace
        #onLog
          ✓ should return an empty trigger/endpoint
          ✓ should handle an event with the appropriate fields
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should not throw when #run is called
    Auth Functions
      AuthBuilder
        ✓ should allow both region and runtime options to be set
        #onCreate
          ✓ should return a trigger/endpoint with appropriate values
        #onDelete
          ✓ should return a trigger/endpoint with appropriate values
        beforeCreate
          ✓ should create the function without options
          ✓ should create the function with options
        beforeSignIn
          ✓ should create the function without options
          ✓ should create the function with options
        #_dataConstructor
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      handler namespace
        #onCreate
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
        #onDelete
          ✓ should return an empty trigger
          ✓ should return an empty endpoint
          ✓ should handle wire format as of v5.0.0 of firebase-admin
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    Database Functions
      DatabaseBuilder
        ✓ should allow both region and runtime options to be set
        #onWrite()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should let developers choose a database instance
          ✓ should return a handler that emits events with a proper DataSnapshot
      handler namespace
        #onWrite()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onCreate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onUpdate()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
        #onDelete()
          ✓ correctly sets trigger to {}
          ✓ should be able to use the instance entry point
          ✓ should return a handler that emits events with a proper DataSnapshot
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      extractInstanceAndPath
        ✓ should return correct us-central prod instance and path strings if domain is missing
        ✓ should return the correct staging instance and path strings if domain is present
        ✓ should return the correct instance and path strings if root path is /refs
        ✓ should return the correct instance and path strings if a child path contain /refs
        ✓ should return the correct multi-region instance and path strings if domain is present
        ✓ should throw an error if the given instance name contains anything except alphanumerics and dashes
        ✓ should use the emulator host when present
      DataSnapshot
        #ref: firebase.database.Reference
          ✓ should return a ref for correct instance, not the default instance
        #val(): any
          ✓ should return child values based on the child path
          ✓ should return null for children past a leaf
          ✓ should return a leaf value
          ✓ should coerce object into array if all keys are integers
          ✓ should deal with zero-values appropriately
          ✓ should return correct values when data has "length" property
        #child(): DataSnapshot
          ✓ should work with multiple calls
        #exists(): boolean
          ✓ should be true for an object value
          ✓ should be true for a leaf value
          ✓ should be false for a non-existent value
          ✓ should be false for a value pathed beyond a leaf
        #forEach(action: (a: DataSnapshot) => boolean): boolean
          ✓ should iterate through child snapshots
          ✓ should have correct key values for child snapshots
          ✓ should not execute for leaf or null nodes
          ✓ should cancel further enumeration if callback returns true
          ✓ should not cancel further enumeration if callback returns a truthy value
          ✓ should not cancel further enumeration if callback does not return
        #numChildren()
          ✓ should be key count for objects
          ✓ should be 0 for non-objects
        #hasChild(childPath): boolean
          ✓ should return true for a child or deep child
          ✓ should return false if a child is missing
        #key: string
          ✓ should return the key name
          ✓ should return null for the root
          ✓ should work for child paths
        #toJSON(): Object
          ✓ should return the current value
          ✓ should be stringifyable
    Firestore Functions
      document builders and event types
        ✓ should allow terse constructors
        ✓ should allow custom namespaces
        ✓ should allow custom databases
        ✓ should allow both custom database and namespace
        ✓ should allow both region and runtime options to be set
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
      dataConstructor
        ✓ constructs appropriate fields and getters for event.data on "document.write" events
        ✓ constructs appropriate fields and getters for event.data on "document.create" events
        ✓ constructs appropriate fields and getters for event.data on "document.update" events
        ✓ constructs appropriate fields and getters for event.data on "document.delete" events
      handler namespace
        ✓ constructs correct data type and sets trigger to {} on "document.write" events
        ✓ constructs correct data type and sets trigger to {} on "document.create" events
        ✓ constructs correct data type and sets trigger to {} on "document.update" events
        ✓ constructs correct data type and sets trigger to {} on "document.delete" events
      SnapshotConstructor
        #data()
          ✓ should parse int values
          ✓ should parse double values
          ✓ should parse null values
          ✓ should parse boolean values
          ✓ should parse string values
          ✓ should parse array values
          ✓ should parse object values
          ✓ should parse GeoPoint values
          ✓ should parse reference values
          ✓ should parse timestamp values with precision to the millisecond
          ✓ should parse timestamp values with precision to the second
          ✓ should parse binary values
        Other DocumentSnapshot methods
          ✓ should support #exists
          ✓ should support #ref
          ✓ should support #id
          ✓ should support #createTime
          ✓ should support #updateTime
          ✓ should support #readTime
        Handle empty and non-existent documents
          ✓ constructs non-existent DocumentSnapshot when whole document deleted
          ✓ constructs existent DocumentSnapshot with empty data when all fields of document deleted
    CloudHttpsBuilder
      #onRequest
        ✓ should return a trigger with appropriate values
        ✓ should allow both region and runtime options to be set
    handler namespace
      #onRequest
        ✓ should return an empty trigger
      #onCall
        ✓ should return an empty trigger
    #onCall
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should lock to the v1 API even with function.length == 1
    callable CORS
      ✓ handles OPTIONS preflight
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
    Pubsub Functions
      pubsub.Message
        #json
          ✓ should return json decoded from base64
          ✓ should preserve passed in json
        #toJSON
          ✓ should be JSON stringify-able
      pubsub.FunctionBuilder
        ✓ should allow both region and runtime options to be set
        #onPublish
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should throw with improperly formatted topics
          ✓ should properly handle a new-style event
        #schedule
          ✓ should return a trigger/endpoint with schedule
          ✓ should return a trigger/endpoint with schedule and timeZone when one is chosen
          ✓ should return a trigger/endpoint with schedule and retry config when called with retryConfig
          ✓ should return a trigger/endpoint with schedule, timeZone and retry configwhen called with retryConfig and timeout
          ✓ should return an appropriate trigger/endpoint when called with region and options
          ✓ should return an appropriate trigger/endpoint when called with region, timeZone, and options
          ✓ should return an appropriate trigger/endpoint when called with region, options and retryConfig
          ✓ should return an appropriate trigger/endpoint when called with region, options, retryConfig, and timeZone
      handler namespace
        #onPublish
          #topic
            ✓ should return an empty trigger
            ✓ should properly handle a new-style event
          #schedule
            ✓ should return an empty trigger
            ✓ should return a handler with a proper event context
      process.env.GCLOUD_PROJECT not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    RemoteConfig Functions
      #onUpdate
        ✓ should have the correct trigger
        ✓ should allow both region and runtime options to be set
      unwraps TemplateVersion
        ✓ should unwrap the version in the event
      handler namespace
        #onUpdate
          ✓ should have an empty trigger
          ✓ should correctly unwrap the event
    Storage Functions
      ObjectBuilder
        ✓ should allow both region and runtime options to be set
        #onArchive
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return a TriggerDefinition with appropriate values
          ✓ should use the default bucket when none is provided
          ✓ should allow fully qualified bucket names
          ✓ should throw with improperly formatted buckets
          ✓ should not mess with media links using non-literal slashes
      namespace handler
        #onArchive
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onDelete
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onFinalize
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
        #onMetadataUpdate
          ✓ should return an empty trigger
          ✓ should not mess with media links using non-literal slashes
      process.env.FIREBASE_CONFIG not set
        ✓ should not throw if __trigger is not accessed
        ✓ should throw when trigger is accessed
        ✓ should throw when endpoint is accessed
        ✓ should not throw when #run is called
    #onDispatch
      ✓ should return a trigger/endpoint with appropriate values
      ✓ should allow both region and runtime options to be set
      ✓ has a .run method
      ✓ should lock to the v1 API even with function.length == 1
    handler namespace
      ✓ should return an empty trigger
    Test Lab Functions
      #onComplete
        with process.env.GCLOUD_PROJECT set
          ✓ should return a trigger/endpoint with appropriate values
          ✓ should parse TestMatrix in "INVALID" state
          ✓ should parse TestMatrix in "FINISHED" state
        process.env.GCLOUD_PROJECT not set
          ✓ should not throw if trigger is not accessed
          ✓ should throw when trigger is accessed
          ✓ should throw when endpoint is accessed
      TestMatrix
        constructor
          ✓ should populate basic fields
      ClientInfo
        constructor
          ✓ should populate basic fields
          ✓ should populate key/value details
      ResultStorage
        constructor
          ✓ should populate basic fields
          ✓ should not throw on unset fields
    setup()
      ✓ sets GCLOUD_PROJECT from FIREBASE_CONFIG
      ✓ does not set GCLOUD_PROJECT if already defined
    utils
      .applyChange(from: any, to: any): any
        ✓ should return the to value for non-object values of from and to
        ✓ should return the merged value of two objects
    params
      ✓ should add a param to the declared params
      ✓ should replace a samed-name param in the declared params
      defineString().value
        ✓ should return a '' zero value when no value and no undefined
        ✓ should return the default when no value and one is provided
        ✓ should return the value over the default
      defineInt().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into an int
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineFloat().value
        ✓ should return 0 zero value
        ✓ should coerce a matching string into a float
        ✓ should return a matching default value
        ✓ should throw when invalid value is passed
      defineBoolean().value
        ✓ should return false zero value
        ✓ should coerce "true" into true
        ✓ should coerce "TrUe" into true
        ✓ should coerce "yes" into true
        ✓ should coerce "1" into true
        ✓ should coerce "false" into false
        ✓ should coerce "FaLsE" into false
        ✓ should coerce "no" into false
        ✓ should coerce "0" into false
        ✓ should return a matching default value
        ✓ should error with non-true/false value
      defineList().value
        ✓ should return [] zero value
        ✓ should coerce comma-separated values into a string list
        ✓ should coerce a comma-and-space-separated values into a string list
        ✓ should return a matching default value
      defineJSON().value
        ✓ should return {} zero value
        ✓ should coerce objects from JSON
        ✓ should coerce arrays from JSON
        ✓ should return a matching default value
        ✓ should throw with invalid JSON
      Param
        #toSpec()
          ✓ should cast non-string defaults to strings
          ✓ should passthrough supplied options
          ✓ ListParam should properly stringify its default
    alerts
      onAlertPublished
        ✓ should create the function without opts
        ✓ should create the function with opts
        ✓ should have a .run method
      getEndpointAnnotation
        ✓ should define the endpoint without appId and opts
        ✓ should define a complex endpoint without appId
        ✓ should define a complex endpoint
        ✓ should merge global & specific opts
      getOptsAndAlertTypeAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    appDistribution
      onNewTesterIosDevicePublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      onInAppfeedbackPublished
        ✓ should create a function with alertType & appId
        ✓ should create a function with opts
        ✓ should create a function with appid in opts
        ✓ should create a function without opts or appId
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    billing
      onPlanUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onPlanAutomatedUpdatePublished
        ✓ should create a function with only handler
        ✓ should create a function with opts & handler
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with opts
        ✓ should create a function with a run method
    crashlytics
      onNewFatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewNonfatalIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onRegressionAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onStabilityDigestPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onVelocityAlertPublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onNewAnrIssuePublished
        ✓ should create a function only handler
        ✓ should create a function with appId
        ✓ should create a function with base opts
        ✓ should create a function with opts
      onOperation
        ✓ should create a function with alertType only
        ✓ should create a function with alertType & appId
        ✓ should create a function with base opts
        ✓ should create a function with appid in opts
        ✓ should create a function with a run method
      getOptsAndApp
        ✓ should parse a string
        ✓ should parse an options object without appId
        ✓ should parse an options object with appId
    database
      makeParams
        ✓ should make params with basic path
        ✓ should make params with multi segment path
        ✓ should make params with multi segment path capture
        ✓ should make params for a full path and instance
      getOpts
        ✓ should return opts when passed in a path
        ✓ should return opts when passed in an options object
      makeEndpoint
        ✓ should create an endpoint with an instance wildcard
        ✓ should create an endpoint without an instance wildcard
      onChangedOperation
        ✓ should create a function for a written event
        ✓ should create a function for a updated event
        ✓ should create a complex function
      onOperation
        ✓ should create a function for a created event
        ✓ should create a function for a deleted event
        ✓ should create a complex function
      onValueWritten
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueCreated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueUpdated
        ✓ should create a function with a reference
        ✓ should create a function with opts
      onValueDeleted
        ✓ should create a function with a reference
        ✓ should create a function with opts
    v2/eventarc
      onCustomEventPublished
        ✓ should create a minimal trigger/endpoint with default channel
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with channel with opts
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
    onRequest
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ should add CORS headers if debug feature is enabled
    onCall
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ should be an express handler
      ✓ should enforce CORS options
      ✓ overrides CORS headers if debug feature is enabled
{"verifications":{"app":"MISSING","auth":"MISSING"},"logging.googleapis.com/labels":{"firebase-log-type":"callable-request-verification"},"severity":"INFO","message":"Callable request verification passed"}
      ✓ adds CORS headers
      ✓ allows desirable syntax
    identity
      beforeUserCreated
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeUserSignedIn
        ✓ should accept a handler
        ✓ should accept options and a handler
      beforeOperation
        ✓ should handle eventType and handler for before create events
        ✓ should handle eventType and handler for before sign in events
        ✓ should handle eventType, options, and handler for before create events
        ✓ should handle eventType, options, and handler for before sign in events
      getOpts
        ✓ should parse an empty object
        ✓ should parse global options
        ✓ should a full options
    onMessagePublished
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ should convert retry option if appropriate
      ✓ should have a .run method
      ✓ should parse pubsub messages
      ✓ allows desirable syntax
    v2/storage
      getOptsAndBucket
        ✓ should return the default bucket with empty opts
        ✓ should return the default bucket with opts param
        ✓ should return the given bucket
        ✓ should return the given bucket and opts
      onOperation
        ✓ should create a minimal trigger/endpoint with bucket
        ✓ should create a minimal trigger/endpoint with opts
        ✓ should create a minimal trigger with bucket with opts and bucket
        ✓ should create a complex trigger/endpoint with appropriate values
        ✓ should merge options and globalOptions
      onObjectArchived
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectFinalized
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectDeleted
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
      onObjectMetadataUpdated
        ✓ should accept only handler
        ✓ should accept bucket and handler
        ✓ should accept opts and handler
        ✓ should accept opts and handler, default bucket
    onTaskDispatched
      ✓ should return a minimal trigger/endpoint with appropriate values
      ✓ should create a complex trigger/endpoint with appropriate values
      ✓ should merge options and globalOptions
      ✓ has a .run method
      ✓ should be an express handler
      ✓ allows desirable syntax


  605 passing (723ms)
  1 failing

  1) onCallHandler
       should handle AppCheck token:
     Uncaught TypeError [ERR_INVALID_ARG_TYPE]: The "stream" argument must be an instance of Stream. Received an instance of Socket
      at new NodeError (node:internal/errors:377:5)
      at eos (node:internal/streams/end-of-stream:62:11)
      at IncomingMessage._destroy (node:_http_incoming:229:21)
      at _destroy (node:internal/streams/destroy:109:10)
      at IncomingMessage.destroy (node:internal/streams/destroy:71:5)
      at endReadableNT (node:internal/streams/readable:1360:16)
      at processTicksAndRejections (node:internal/process/task_queues:82:21)



************* run test done *************
